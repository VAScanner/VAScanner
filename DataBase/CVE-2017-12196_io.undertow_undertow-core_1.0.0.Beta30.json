{
    "io.undertow.security.impl.DigestAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome handleDigestHeader(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.security.impl.DigestAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome authenticate(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)"
        ]
    },
    "io.undertow.security.impl.DigestAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome authenticate(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState transition()"
        ]
    },
    "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState transition()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState transition()",
            "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState access$100(io.undertow.security.impl.SecurityContextImpl$AuthAttempter)"
        ]
    },
    "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState access$100(io.undertow.security.impl.SecurityContextImpl$AuthAttempter)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl:io.undertow.security.impl.SecurityContextImpl$AuthenticationState attemptAuthentication()"
        ]
    },
    "io.undertow.security.impl.SecurityContextImpl:io.undertow.security.impl.SecurityContextImpl$AuthenticationState attemptAuthentication()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl:boolean authTransition()"
        ]
    },
    "io.undertow.security.impl.SecurityContextImpl:boolean authTransition()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl:boolean authenticate()",
            "io.undertow.security.impl.SecurityContextImpl:boolean authTransition()"
        ]
    },
    "io.undertow.security.impl.SecurityContextImpl:boolean authenticate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void run()",
            "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(org.xnio.conduits.ConduitStreamSourceChannel)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.HttpServerExchange$1:void run()"
        ]
    },
    "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(org.xnio.conduits.ConduitStreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void run()",
            "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleCPing()",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)"
        ]
    },
    "io.undertow.server.HttpServerExchange$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.util.PipeliningExecutor$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.PipeliningExecutor:void execute(java.lang.Runnable)",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void logMessage(java.lang.String)",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void run()",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void rotate()",
            "io.undertow.server.handlers.JDBCLogHandler:void logMessage(java.lang.String,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void run()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.lang.Runnable)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,io.undertow.server.HttpHandler)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void resumeWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void wakeupWrites()"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleCPing()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.util.PipeliningExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void logMessage(java.lang.String)",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void run()",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void rotate()",
            "io.undertow.server.handlers.JDBCLogHandler:void logMessage(java.lang.String,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void run()",
            "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void logMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.accesslog.AccessLogHandler$AccessLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)"
        ]
    },
    "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void logMessage(java.lang.String)",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void run()",
            "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void rotate()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.accesslog.DefaultAccessLogReceiver:void rotate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.JDBCLogHandler:void logMessage(java.lang.String,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.JDBCLogHandler$JDBCLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)"
        ]
    },
    "io.undertow.server.handlers.JDBCLogHandler:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.handlers.JDBCLogHandler:void logMessage(java.lang.String,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void run()",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void exchangeComplete(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit$1:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.server.protocol.http.HttpServerConnection:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void exchangeComplete(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void performFlush(io.undertow.server.HttpServerExchange,io.undertow.server.protocol.http.HttpServerConnection)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void dispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$TransferTask:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.AsyncSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void serveFile(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.URLResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.FileResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void close()"
        ]
    },
    "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void dispatch(io.undertow.server.HttpHandler)"
        ]
    },
    "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ResponseRecievedReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()",
            "io.undertow.websockets.core.WebSocketUtils$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,org.xnio.Pool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)",
            "io.undertow.server.HttpServerExchange:void endExchange()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void wakeupReads()"
        ]
    },
    "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSourceChannel:void wakeupReads()",
            "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void openGate()"
        ]
    },
    "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.core.WebSocketUtils$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,org.xnio.Pool)",
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpReadListener:void handleConnectionClose(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.HttpServerExchange:void closeAndFlushResponse()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void resumeWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSinkChannel:void resumeWrites()",
            "io.undertow.channels.DetachableStreamSinkChannel:void resumeWrites()",
            "io.undertow.channels.GatedStreamSinkChannel:void resumeWrites()"
        ]
    },
    "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void wakeupWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSinkChannel:void wakeupWrites()",
            "io.undertow.channels.DetachableStreamSinkChannel:void wakeupWrites()",
            "io.undertow.channels.GatedStreamSinkChannel:void openGate()",
            "io.undertow.channels.GatedStreamSinkChannel:void wakeupWrites()"
        ]
    },
    "io.undertow.server.protocol.http.HttpOpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpOpenListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.accesslog.AccessLogHandler$AccessLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.JDBCLogHandler$JDBCLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpServerConnection:void exchangeComplete(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void exchangeComplete(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpServerConnection:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void performFlush(io.undertow.server.HttpServerExchange,io.undertow.server.protocol.http.HttpServerConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void exchangeComplete(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$3:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.client.ClientConnection,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void completed(io.undertow.client.ClientConnection)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$TransferTask:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$TransferTask:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask:void run()"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler:void serveFile(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.error.FileErrorPageHandler:void access$100(io.undertow.server.handlers.error.FileErrorPageHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.URLResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler$1:void run()",
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.FileResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler$1:void run()",
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.FileUtils:void close(java.io.Closeable)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void dispatch(io.undertow.server.HttpHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.RequestLimitingHandler:int setMaximumConcurrentRequests(int)",
            "io.undertow.server.handlers.RequestLimitingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$ResponseRecievedReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$ResponseRecievedReadListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ResponseRecievedReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()",
            "io.undertow.websockets.core.WebSocketUtils$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,org.xnio.Pool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void wakeupReads()"
        ]
    },
    "io.undertow.websockets.core.WebSocketUtils$TransferListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,org.xnio.Pool)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSocketUtils:void echoFrame(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.StreamSourceFrameChannel)"
        ]
    },
    "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void wakeupReads()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void dataReady(io.undertow.server.protocol.framed.FrameHeaderData,org.xnio.Pooled)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void endExchange()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:void endExchange()",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:void close()",
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.impl.FormAuthenticationMechanism$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome runFormAuth(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)",
            "io.undertow.io.DefaultIoCallback$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.io.DefaultIoCallback$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.io.DefaultIoCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.proxy.ProxyHandler$1:void run()",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction:void run()",
            "io.undertow.server.handlers.proxy.ProxyHandler$IoExceptionHandler:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler$ResponseCallback:void failed(java.io.IOException)",
            "io.undertow.server.handlers.error.FileErrorPageHandler$2:void run()",
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)",
            "io.undertow.server.handlers.cache.ResponseCache$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.cache.ResponseCache$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.ResourceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.resource.ResourceHandler$1:void run()",
            "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.resource.DirectoryUtils:void renderDirectoryListing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.resource.Resource)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void run()",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RedirectHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void rejectExchange(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.channels.DelegatingStreamSourceChannel:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ResponseRecievedReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()",
            "io.undertow.websockets.core.WebSocketUtils$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,org.xnio.Pool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void wakeupReads()"
        ]
    },
    "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ResponseRecievedReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()",
            "io.undertow.websockets.core.WebSocketUtils$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,org.xnio.Pool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void wakeupReads()"
        ]
    },
    "io.undertow.channels.GatedStreamSourceChannel:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ResponseRecievedReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()",
            "io.undertow.websockets.core.WebSocketUtils$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,org.xnio.Pool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void wakeupReads()"
        ]
    },
    "io.undertow.channels.GatedStreamSourceChannel:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSourceChannel:void wakeupReads()",
            "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void openGate()"
        ]
    },
    "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSourceChannel:void wakeupReads()",
            "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void openGate()"
        ]
    },
    "io.undertow.channels.DelegatingStreamSourceChannel:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSourceChannel:void wakeupReads()",
            "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void openGate()"
        ]
    },
    "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSourceChannel:void wakeupReads()",
            "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void openGate()"
        ]
    },
    "io.undertow.channels.GatedStreamSourceChannel:void openGate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$TransferTask:void run()",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer)",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[])",
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)",
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void close()",
            "io.undertow.io.DefaultIoCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void access$100(io.undertow.io.AsyncSenderImpl)"
        ]
    },
    "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void sendBadRequestAndClose(org.xnio.StreamConnection,java.lang.Exception)"
        ]
    },
    "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.StringWriteChannelListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleConnectionClose(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleFailedRead(org.xnio.conduits.ConduitStreamSourceChannel,int)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void closeAndFlushResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void endExchange()",
            "io.undertow.server.HttpServerExchange:void access$000(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.channels.DelegatingStreamSinkChannel:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.core.WebSocketUtils$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,org.xnio.Pool)",
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpReadListener:void handleConnectionClose(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void resumeWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSinkChannel:void resumeWrites()",
            "io.undertow.channels.DetachableStreamSinkChannel:void resumeWrites()",
            "io.undertow.channels.GatedStreamSinkChannel:void resumeWrites()"
        ]
    },
    "io.undertow.channels.DetachableStreamSinkChannel:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.core.WebSocketUtils$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,org.xnio.Pool)",
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpReadListener:void handleConnectionClose(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void resumeWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSinkChannel:void resumeWrites()",
            "io.undertow.channels.DetachableStreamSinkChannel:void resumeWrites()",
            "io.undertow.channels.GatedStreamSinkChannel:void resumeWrites()"
        ]
    },
    "io.undertow.channels.GatedStreamSinkChannel:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.core.WebSocketUtils$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,org.xnio.Pool)",
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.util.StringWriteChannelListener:void setup(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.util.StringWriteChannelListener:void writeDone(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpReadListener:void handleConnectionClose(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void resumeWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSinkChannel:void resumeWrites()",
            "io.undertow.channels.DetachableStreamSinkChannel:void resumeWrites()",
            "io.undertow.channels.GatedStreamSinkChannel:void resumeWrites()"
        ]
    },
    "io.undertow.channels.DelegatingStreamSinkChannel:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void wakeupWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSinkChannel:void wakeupWrites()",
            "io.undertow.channels.DetachableStreamSinkChannel:void wakeupWrites()",
            "io.undertow.channels.GatedStreamSinkChannel:void openGate()",
            "io.undertow.channels.GatedStreamSinkChannel:void wakeupWrites()"
        ]
    },
    "io.undertow.channels.DetachableStreamSinkChannel:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void wakeupWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSinkChannel:void wakeupWrites()",
            "io.undertow.channels.DetachableStreamSinkChannel:void wakeupWrites()",
            "io.undertow.channels.GatedStreamSinkChannel:void openGate()",
            "io.undertow.channels.GatedStreamSinkChannel:void wakeupWrites()"
        ]
    },
    "io.undertow.channels.GatedStreamSinkChannel:void openGate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.channels.GatedStreamSinkChannel:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void wakeupWrites()",
            "io.undertow.server.HttpServerExchange$WriteDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSinkChannel:void wakeupWrites()",
            "io.undertow.channels.DetachableStreamSinkChannel:void wakeupWrites()",
            "io.undertow.channels.GatedStreamSinkChannel:void openGate()",
            "io.undertow.channels.GatedStreamSinkChannel:void wakeupWrites()"
        ]
    },
    "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void terminateRequest()",
            "io.undertow.server.HttpServerExchange:void terminateResponse()"
        ]
    },
    "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.error.FileErrorPageHandler$2$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler$AccessLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.RequestDumplingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.MetricsHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.JDBCLogHandler$JDBCLogCompletionListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.GracefulShutdownHandler$GracefulShutdownListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.RequestLimitingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.handlers.SSLHeaderHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)",
            "io.undertow.server.session.SessionAttachmentHandler$UpdateLastAccessTimeListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)"
        ]
    },
    "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$3:void run()",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void queuedConnectionFailed(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long)"
        ]
    },
    "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$3:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$3:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.SimpleProxyClientProvider:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$3:void run()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.client.ClientConnection,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void returnConnection(io.undertow.client.ClientConnection)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connect(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$600(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.client.ClientConnection,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)"
        ]
    },
    "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void completed(io.undertow.client.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$TransferTask:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask:void run()"
        ]
    },
    "io.undertow.server.handlers.resource.FileResource$1TransferTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.handlers.resource.FileResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler:void access$100(io.undertow.server.handlers.error.FileErrorPageHandler,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.error.FileErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$2:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.FileResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.handlers.resource.URLResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.resource.ResourceHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler$1:void run()",
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.ResourceHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.util.FileUtils:void close(java.io.Closeable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.FileUtils:void copyFile(java.io.File,java.io.File)",
            "io.undertow.util.FileUtils:void copyFile(java.io.InputStream,java.io.File)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueAcceptingHandler$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.RequestLimitingHandler:int setMaximumConcurrentRequests(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.RequestLimitingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientConnection$ResponseRecievedReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.WebSocketUtils:void echoFrame(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.StreamSourceFrameChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ResponseRecievedReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void resumeReads()",
            "io.undertow.websockets.core.BufferedTextMessage:void read(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.StreamSourceFrameChannel:void discard()",
            "io.undertow.websockets.core.WebSocketUtils$TransferListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.websockets.core.BufferedBinaryMessage:void read(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.WebSocketCallback)",
            "io.undertow.websockets.core.WebSocketUtils:void initiateTransfer(org.xnio.channels.StreamSourceChannel,org.xnio.channels.StreamSinkChannel,org.xnio.ChannelListener,org.xnio.ChannelListener,org.xnio.ChannelExceptionHandler,org.xnio.ChannelExceptionHandler,org.xnio.Pool)",
            "io.undertow.util.StringReadChannelListener:void setup(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void resumeReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.DetachableStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void resumeReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void wakeupReads()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void wakeupReads()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.function.ChannelFunctionStreamSourceChannel:void wakeupReads()",
            "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void resumeReads(boolean)",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void wakeupReads()",
            "io.undertow.server.HttpServerExchange$ReadDispatchChannel:void run()",
            "io.undertow.channels.DelegatingStreamSourceChannel:void wakeupReads()",
            "io.undertow.channels.DetachableStreamSourceChannel:void wakeupReads()",
            "io.undertow.channels.GatedStreamSourceChannel:void openGate()"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel:void dataReady(io.undertow.server.protocol.framed.FrameHeaderData,org.xnio.Pooled)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()"
        ]
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:void endExchange()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Hybi07Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)",
            "io.undertow.websockets.core.protocol.version13.Hybi13Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)",
            "io.undertow.websockets.core.protocol.Handshake$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.websockets.core.protocol.Handshake:void upgradeChannel(io.undertow.websockets.spi.WebSocketHttpExchange,byte[])"
        ]
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.util.FileUtils:void close(java.io.Closeable)"
        ]
    },
    "io.undertow.security.impl.FormAuthenticationMechanism$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void endExchange()"
        ]
    },
    "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome runFormAuth(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome authenticate(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)"
        ]
    },
    "io.undertow.io.DefaultIoCallback$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.DefaultIoCallback$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$3:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.DefaultIoCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$3:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientProvider$3:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientProvider$3:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$IoExceptionHandler:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyClientHandler:void failed(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$3:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$1:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$CallbackHolder:void run()",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void failed(java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ResponseCallback:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientProvider$3:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientProvider$3:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse()"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCache$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCache$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$3:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)"
        ]
    },
    "io.undertow.server.handlers.resource.DirectoryUtils:void renderDirectoryListing(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.resource.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler$1:void run()"
        ]
    },
    "io.undertow.server.handlers.HttpContinueAcceptingHandler$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$3:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.RedirectHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.SecurityInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationMechanismsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.NotificationReceiverHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AbstractConfidentialityHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.security.handlers.AuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.predicate.PredicatesHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.FileErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.error.SimpleErrorPageHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.CacheHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.accesslog.AccessLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.encoding.EncodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.FormEncodedDataDefinition$FormEncodedDataParser:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.form.EagerFormParsingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.form.MultiPartParserDefinition$MultiPartUploadHandler:void parse(io.undertow.server.HttpHandler)",
            "io.undertow.server.handlers.ProxyPeerAddressHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateContextHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.IPAddressAccessControlHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestLimitingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AccessControlListHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathTemplateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.RequestDumplingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.OriginHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.GracefulShutdownHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AllowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.ChannelUpgradeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetAttributeHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PeerNameResolvingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PredicateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DateHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.JDBCLogHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SetHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.CanonicalPathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.MetricsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.PathHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.BlockingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpTraceHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.AttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.HttpContinueReadHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.URLDecodingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.NameVirtualHostHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.SSLHeaderHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.DisallowedMethodsHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.session.SessionAttachmentHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.JvmRouteHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void rejectExchange(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$TransferTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void writePayload(io.undertow.websockets.spi.WebSocketHttpExchange,java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)",
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void close(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void close()"
        ]
    },
    "io.undertow.io.DefaultIoCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)",
            "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void access$100(io.undertow.io.AsyncSenderImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)"
        ]
    },
    "io.undertow.server.protocol.http.HttpReadListener:void sendBadRequestAndClose(org.xnio.StreamConnection,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(org.xnio.conduits.ConduitStreamSourceChannel)"
        ]
    },
    "io.undertow.util.StringWriteChannelListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$HTTPTrailerChannelListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpReadListener:void handleFailedRead(org.xnio.conduits.ConduitStreamSourceChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(org.xnio.conduits.ConduitStreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$1:void handleContinue(io.undertow.client.ClientExchange)",
            "io.undertow.server.handlers.HttpContinueAcceptingHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void access$000(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void terminateRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.Connectors:void terminateRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.HttpServerExchange:void terminateResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.Connectors:void terminateResponse(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler$2$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.form.MultiPartParserDefinition$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.RequestDumplingHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.MetricsHandler$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.GracefulShutdownHandler$GracefulShutdownListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.SSLHeaderHandler$1:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.session.SessionAttachmentHandler$UpdateLastAccessTimeListener:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void invokeExchangeCompleteListeners()",
            "io.undertow.server.HttpServerExchange$ExchangeCompleteNextListener:void proceed()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$2:void queuedConnectionFailed(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)"
        ]
    },
    "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$3:void completed(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$3:void completed(io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyConnection)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connectionReady(io.undertow.client.ClientConnection,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void completed(io.undertow.client.ClientConnection)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void returnConnection(io.undertow.client.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$1100(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.client.ClientConnection)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void connect(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$600(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.client.ClientConnection,io.undertow.server.handlers.proxy.ProxyCallback,io.undertow.server.HttpServerExchange,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$1:void completed(io.undertow.client.ClientConnection)"
        ]
    },
    "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.server.handlers.error.FileErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void endExchange()"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.spi.AsyncWebSocketHttpServerExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)",
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[])",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse(boolean)",
            "io.undertow.server.handlers.resource.CachedResource:void serve(io.undertow.io.Sender,io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask:void run()"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.DefaultIoCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpContinue$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.util.FileUtils:void copyFile(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.util.FileUtils:void copyFile(java.io.InputStream,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.FileUtils:void copyFile(java.io.File,java.io.File)"
        ]
    },
    "io.undertow.websockets.core.BufferedTextMessage:void read(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.AbstractReceiveListener:void readBufferedText(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.BufferedTextMessage)"
        ]
    },
    "io.undertow.websockets.core.StreamSourceFrameChannel:void discard()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.WebSocketUtils:void echoFrame(io.undertow.websockets.core.WebSocketChannel,io.undertow.websockets.core.StreamSourceFrameChannel)"
        ]
    },
    "io.undertow.websockets.core.BufferedBinaryMessage:void read(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.WebSocketCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.AbstractReceiveListener:void readBufferedBinary(io.undertow.websockets.core.StreamSourceFrameChannel,boolean,io.undertow.websockets.core.BufferedBinaryMessage)"
        ]
    },
    "io.undertow.server.protocol.framed.AbstractFramedChannel:io.undertow.server.protocol.framed.AbstractFramedStreamSourceChannel receive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.AbstractReceiveListener:void handleEvent(io.undertow.websockets.core.WebSocketChannel)"
        ]
    },
    "io.undertow.websockets.core.protocol.version07.Hybi07Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void handshake(io.undertow.websockets.spi.WebSocketHttpExchange)"
        ]
    },
    "io.undertow.websockets.core.protocol.version13.Hybi13Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void handshake(io.undertow.websockets.spi.WebSocketHttpExchange)"
        ]
    },
    "io.undertow.websockets.core.protocol.Handshake$1:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.protocol.Handshake:void upgradeChannel(io.undertow.websockets.spi.WebSocketHttpExchange,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void performUpgrade(io.undertow.websockets.spi.WebSocketHttpExchange,byte[])"
        ]
    },
    "io.undertow.security.impl.FormAuthenticationMechanism:io.undertow.security.api.AuthenticationMechanism$AuthenticationMechanismOutcome authenticate(io.undertow.server.HttpServerExchange,io.undertow.security.api.SecurityContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.security.impl.SecurityContextImpl$AuthAttempter:io.undertow.security.impl.SecurityContextImpl$AuthenticationState transition()"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void transferFrom(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void send(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnComplete()",
            "io.undertow.io.AsyncSenderImpl:void access$300(io.undertow.io.AsyncSenderImpl,io.undertow.io.IoCallback,java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$3:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$3:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$3:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void performTransfer(java.nio.channels.FileChannel,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void close(io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer[],io.undertow.io.IoCallback)",
            "io.undertow.io.AsyncSenderImpl:void invokeOnException(io.undertow.io.IoCallback,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.CachedResource$DereferenceCallback:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.URLResource$1ServerTask:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask$1:void onException(io.undertow.server.HttpServerExchange,io.undertow.io.Sender,java.io.IOException)",
            "io.undertow.server.handlers.resource.FileResource$1BaseFileTask:boolean openFile()",
            "io.undertow.server.protocol.http.HttpContinue$3:void handleException(java.nio.channels.Channel,java.io.IOException)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.resource.FileResource$1BaseFileTask:boolean openFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.FileResource$1ServerTask:void run()",
            "io.undertow.server.handlers.resource.FileResource$1TransferTask:void run()"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue$3:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void access$000(io.undertow.client.http.HttpClientProvider,org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpClientProvider$3:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)"
        ]
    },
    "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.http.HttpClientConnection:void handleError(java.io.IOException)"
        ]
    },
    "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)"
        ]
    },
    "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection:void handleError(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientConnection$ResponseRecievedReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider$3:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$3:void failed(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient:void getConnection(io.undertow.server.handlers.proxy.ProxyClient$ProxyTarget,io.undertow.server.HttpServerExchange,io.undertow.server.handlers.proxy.ProxyCallback,long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.proxy.LoadBalancingProxyClient$3:void failed(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$1:void failed(java.io.IOException)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$CallbackHolder:void run()",
            "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void failed(java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$1:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientProvider$3:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientProvider$3:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void redistributeQueued(io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void returnConnection(io.undertow.client.ClientConnection)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$800(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$CallbackHolder:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.server.handlers.proxy.SimpleProxyClientProvider$ConnectNotifier:void failed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientProvider$3:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void setFailed(java.io.IOException)",
            "io.undertow.client.ajp.AjpClientProvider$3:void notify(org.xnio.IoFuture,java.lang.Object)",
            "io.undertow.client.ajp.AjpClientProvider$1:void notify(org.xnio.IoFuture,java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCache:boolean tryServeResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.resource.ResourceHandler:void serveResource(io.undertow.server.HttpServerExchange,boolean)"
        ]
    },
    "io.undertow.websockets.core.protocol.Handshake:void writePayload(io.undertow.websockets.spi.WebSocketHttpExchange,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void upgradeChannel(io.undertow.websockets.spi.WebSocketHttpExchange,byte[])"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.error.SimpleErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void send(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void close(io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.DefaultIoCallback:void onComplete(io.undertow.server.HttpServerExchange,io.undertow.io.Sender)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void close(io.undertow.io.IoCallback)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void close()"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1$1:void handleContinue(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientExchange:void setContinueResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setContinueResponse(io.undertow.client.ClientResponse)"
        ]
    },
    "io.undertow.server.HttpServerExchange$2:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.Connectors:void terminateRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpServerConnection:io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpTransferEncoding$2:void handleEvent(io.undertow.conduits.ChunkedStreamSourceConduit)",
            "io.undertow.server.protocol.http.HttpTransferEncoding:void setupRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpTransferEncoding:boolean handleRequestEncoding(io.undertow.server.HttpServerExchange,java.lang.String,java.lang.String,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit,boolean)",
            "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(io.undertow.conduits.FixedLengthStreamSourceConduit)",
            "io.undertow.server.protocol.ajp.AjpReadListener:org.xnio.conduits.StreamSourceConduit createSourceConduit(org.xnio.conduits.StreamSourceConduit,io.undertow.server.protocol.ajp.AjpServerResponseConduit,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(io.undertow.server.protocol.ajp.AjpServerRequestConduit)"
        ]
    },
    "io.undertow.server.Connectors:void terminateResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.ServerFixedLengthStreamSinkConduit:void channelFinished()",
            "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.StreamSinkConduit)",
            "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(io.undertow.server.protocol.ajp.AjpServerResponseConduit)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$1100(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.client.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$3$1:void completed(io.undertow.client.ClientConnection)",
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$2:void exchangeEvent(io.undertow.server.HttpServerExchange,io.undertow.server.ExchangeCompletionListener$NextListener)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$1:void completed(io.undertow.client.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$1:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void inititateRequest(io.undertow.client.http.HttpClientExchange)"
        ]
    },
    "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection:void inititateRequest(io.undertow.client.ajp.AjpClientExchange)"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider:void access$000(io.undertow.client.ajp.AjpClientProvider,org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.resource.DirectoryUtils:boolean sendRequestedBlobs(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.error.SimpleErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:void send(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.websockets.core.AbstractReceiveListener:void readBufferedText(io.undertow.websockets.core.StreamSourceFrameChannel,io.undertow.websockets.core.BufferedTextMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.AbstractReceiveListener:void bufferFullMessage(io.undertow.websockets.core.StreamSourceFrameChannel)"
        ]
    },
    "io.undertow.websockets.core.AbstractReceiveListener:void readBufferedBinary(io.undertow.websockets.core.StreamSourceFrameChannel,boolean,io.undertow.websockets.core.BufferedBinaryMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.AbstractReceiveListener:void bufferFullMessage(io.undertow.websockets.core.StreamSourceFrameChannel)"
        ]
    },
    "io.undertow.websockets.core.AbstractReceiveListener:void handleEvent(io.undertow.websockets.core.WebSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.protocol.Handshake:void handshake(io.undertow.websockets.spi.WebSocketHttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.WebSocketProtocolHandshakeHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.websockets.core.protocol.Handshake:void performUpgrade(io.undertow.websockets.spi.WebSocketHttpExchange,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.Handshake:void performUpgrade(io.undertow.websockets.spi.WebSocketHttpExchange)"
        ]
    },
    "io.undertow.io.BlockingSenderImpl:boolean writeBuffer(java.nio.ByteBuffer,io.undertow.io.IoCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.BlockingSenderImpl:void send(java.nio.ByteBuffer,io.undertow.io.IoCallback)",
            "io.undertow.io.BlockingSenderImpl:void invokeOnComplete(io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl:void access$300(io.undertow.io.AsyncSenderImpl,io.undertow.io.IoCallback,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$1:void handleEvent(org.xnio.channels.StreamSinkChannel)",
            "io.undertow.io.AsyncSenderImpl$TransferTask:boolean run(boolean)",
            "io.undertow.io.AsyncSenderImpl$3:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)"
        ]
    },
    "io.undertow.client.http.HttpClientProvider:void access$000(io.undertow.client.http.HttpClientProvider,org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider$2:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.http.HttpClientProvider$4:void handleEvent(org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void handleError(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void inititateRequest(io.undertow.client.http.HttpClientExchange)",
            "io.undertow.client.http.HttpClientConnection:void prepareResponseChannel(io.undertow.client.ClientResponse,io.undertow.client.ClientExchange)",
            "io.undertow.client.http.HttpClientConnection:void access$300(io.undertow.client.http.HttpClientConnection,java.io.IOException)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection:void handleError(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection:void inititateRequest(io.undertow.client.ajp.AjpClientExchange)",
            "io.undertow.client.ajp.AjpClientConnection:void access$200(io.undertow.client.ajp.AjpClientConnection,java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool:void access$800(io.undertow.server.handlers.proxy.ProxyConnectionPool,io.undertow.server.handlers.proxy.ProxyConnectionPool$HostThreadData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$1:void failed(java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.error.SimpleErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.HttpServerExchange:void endExchange()"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.error.SimpleErrorPageHandler$1:boolean handleDefaultResponse(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String)"
        ]
    },
    "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.cache.ResponseCachingSender:void send(java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$1:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpClientExchange:void setContinueResponse(io.undertow.client.ClientResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientExchange:void setContinueResponse(io.undertow.client.ClientResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.HttpServerExchange$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpServerConnection:io.undertow.server.HttpServerExchange sendOutOfBandResponse(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpContinue:io.undertow.server.protocol.http.HttpContinue$ContinueResponseSender createResponseSender(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)",
            "io.undertow.server.protocol.http.HttpContinue:void internalSendContinueResponse(io.undertow.server.HttpServerExchange,io.undertow.io.IoCallback)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$2:void handleEvent(io.undertow.conduits.ChunkedStreamSourceConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$2:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding:void setupRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpReadListener:void handleEvent(org.xnio.conduits.ConduitStreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding:boolean handleRequestEncoding(io.undertow.server.HttpServerExchange,java.lang.String,java.lang.String,io.undertow.server.protocol.http.HttpServerConnection,io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding:void setupRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(io.undertow.conduits.FixedLengthStreamSourceConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener:org.xnio.conduits.StreamSourceConduit createSourceConduit(org.xnio.conduits.StreamSourceConduit,io.undertow.server.protocol.ajp.AjpServerResponseConduit,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(io.undertow.server.protocol.ajp.AjpServerRequestConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.http.ServerFixedLengthStreamSinkConduit:void channelFinished()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void exitFlush(long,boolean)"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.StreamSinkConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(io.undertow.server.protocol.ajp.AjpServerResponseConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$3$1:void completed(io.undertow.client.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyConnectionPool$3$1:void completed(java.lang.Object)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$1:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void inititateRequest(io.undertow.client.http.HttpClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientConnection:void requestDone()"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection:void inititateRequest(io.undertow.client.ajp.AjpClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientConnection:void requestDone()"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider:void access$000(io.undertow.client.ajp.AjpClientProvider,org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$4:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.client.ajp.AjpClientProvider$2:void handleEvent(org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.websockets.core.AbstractReceiveListener:void bufferFullMessage(io.undertow.websockets.core.StreamSourceFrameChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.websockets.core.protocol.Handshake:void performUpgrade(io.undertow.websockets.spi.WebSocketHttpExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.websockets.core.protocol.version07.Hybi07Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)",
            "io.undertow.websockets.core.protocol.version13.Hybi13Handshake:void handshakeInternal(io.undertow.websockets.spi.WebSocketHttpExchange)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$3:void handleException(org.xnio.channels.StreamSinkChannel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.io.AsyncSenderImpl$3:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.client.http.HttpClientProvider$2:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.http.HttpClientProvider$4:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider$4:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction$1:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void prepareResponseChannel(io.undertow.client.ClientResponse,io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection:void access$800(io.undertow.client.http.HttpClientConnection,io.undertow.client.ClientResponse,io.undertow.client.ClientExchange)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void access$300(io.undertow.client.http.HttpClientConnection,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.http.HttpClientConnection$4:void handleException(org.xnio.conduits.ConduitStreamSinkChannel,java.io.IOException)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection:void access$200(io.undertow.client.ajp.AjpClientConnection,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)",
            "io.undertow.client.ajp.AjpClientConnection$4:void handleException(org.xnio.conduits.ConduitStreamSinkChannel,java.io.IOException)"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:io.undertow.server.protocol.http.HttpContinue$ContinueResponseSender createResponseSender(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable()"
        ]
    },
    "io.undertow.server.protocol.http.HttpContinue:void sendContinueResponseBlocking(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$2:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()",
            "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void callFinish()",
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$1:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()",
            "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void callFinish()",
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$3:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()",
            "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void callFinish()",
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void exitFlush(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.server.protocol.http.HttpTransferEncoding$3:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()",
            "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void callFinish()",
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpReadListener$1:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()",
            "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void callFinish()",
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()"
        ]
    },
    "io.undertow.server.handlers.proxy.ProxyConnectionPool$3$1:void completed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)",
            "io.undertow.client.http.HttpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.http.HttpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.http.HttpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponse(io.undertow.client.ClientResponse)",
            "io.undertow.client.ajp.AjpClientExchange:void setResponseListener(io.undertow.client.ClientCallback)",
            "io.undertow.client.ajp.AjpClientExchange:void invokeReadReadyCallback(io.undertow.client.ClientExchange)",
            "io.undertow.client.ajp.AjpClientProvider:void handleConnected(org.xnio.StreamConnection,io.undertow.client.ClientCallback,java.net.URI,org.xnio.ssl.XnioSsl,org.xnio.Pool,org.xnio.OptionMap)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction:void run()"
        ]
    },
    "io.undertow.client.http.HttpClientConnection:void requestDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientExchange:void terminateRequest()",
            "io.undertow.client.http.HttpClientExchange:void terminateResponse()"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection:void sendRequest(io.undertow.client.ClientRequest,io.undertow.client.ClientCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.proxy.ProxyHandler$ProxyAction:void run()"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection:void requestDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientExchange:void terminateRequest()",
            "io.undertow.client.ajp.AjpClientExchange:void terminateResponse()"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider$4:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$4:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider$2:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientProvider$2:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.io.AsyncSenderImpl$3:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpClientProvider$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpClientProvider$4:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpClientConnection:void access$800(io.undertow.client.http.HttpClientConnection,io.undertow.client.ClientResponse,io.undertow.client.ClientExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$5:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$4:void handleException(org.xnio.conduits.ConduitStreamSinkChannel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$4:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$5:void handleEvent(org.xnio.conduits.ConduitStreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$5:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$4:void handleException(org.xnio.conduits.ConduitStreamSinkChannel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$4:void handleException(java.nio.channels.Channel,java.io.IOException)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)",
            "io.undertow.conduits.FinishableStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.IdleTimeoutConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientResponseConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.undertow.server.handlers.HttpContinueReadHandler$ContinueConduit:void awaitReadable()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientResponseConduit:void awaitReadable()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable()",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable()",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable()"
        ]
    },
    "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientResponseConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:void terminateWrites()",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FinishableStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FinishableStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:void callFinish()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitShutdownReads(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitRead(long)"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpClientExchange:void terminateRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$1:void handleEvent(org.xnio.conduits.StreamSinkConduit)",
            "io.undertow.client.http.ClientFixedLengthStreamSinkConduit:void channelFinished()"
        ]
    },
    "io.undertow.client.http.HttpClientExchange:void terminateResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$2:void handleEvent(org.xnio.conduits.StreamSourceConduit)"
        ]
    },
    "io.undertow.client.ajp.AjpClientExchange:void terminateRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$1:void handleEvent(org.xnio.conduits.StreamSinkConduit)"
        ]
    },
    "io.undertow.client.ajp.AjpClientExchange:void terminateResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$2:void handleEvent(org.xnio.conduits.StreamSourceConduit)"
        ]
    },
    "io.undertow.client.ajp.AjpClientProvider$4:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientProvider$2:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpClientConnection$5:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpClientConnection$4:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientConnection$5:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientConnection$4:void handleException(java.nio.channels.Channel,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)",
            "io.undertow.conduits.FinishableStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:int read(java.nio.ByteBuffer)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.FinishableStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FinishableStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.IdleTimeoutConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.client.ajp.AjpClientResponseConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientResponseConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientResponseConduit:void awaitReadable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientResponseConduit:void awaitReadable()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:void awaitReadable()",
            "io.undertow.conduits.IdleTimeoutConduit:void awaitReadable()",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable()"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void awaitReadable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientResponseConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientResponseConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.AbstractFramedStreamSinkConduit:void terminateWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit$AjpServerWriteReadyHandler:void writeReady()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:int write(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:long read(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitShutdownReads(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void terminateReads()"
        ]
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void exitRead(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,long,java.nio.channels.FileChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long transferTo(long,java.nio.ByteBuffer,org.xnio.channels.StreamSinkChannel)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$1:void handleEvent(org.xnio.conduits.StreamSinkConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$1:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.client.http.ClientFixedLengthStreamSinkConduit:void channelFinished()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void exitFlush(long,boolean)"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$2:void handleEvent(org.xnio.conduits.StreamSourceConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpClientConnection$2:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$1:void handleEvent(org.xnio.conduits.StreamSinkConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$1:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$2:void handleEvent(org.xnio.conduits.StreamSourceConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$2:void handleEvent(org.xnio.conduits.Conduit)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSourceConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:long read(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientResponseConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit$AjpServerWriteReadyHandler:void writeReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.handlers.encoding.ContentEncodedResourceManager$FileConduitTarget:void wakeupWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit$AjpServerWriteReadyHandler:void writeReady()",
            "io.undertow.conduits.IdleTimeoutConduit$1:void run()",
            "io.undertow.conduits.DeflatingStreamSinkConduit$1:void run()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerRequestConduit:long read(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.FixedLengthStreamSourceConduit:void terminateReads()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpClientConnection$1:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()",
            "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void callFinish()",
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()"
        ]
    },
    "io.undertow.client.http.HttpClientConnection$2:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()",
            "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void callFinish()",
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$1:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()",
            "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void callFinish()",
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()"
        ]
    },
    "io.undertow.client.ajp.AjpClientConnection$2:void handleEvent(org.xnio.conduits.Conduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()",
            "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void finished()",
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int doRead(java.nio.ByteBuffer,long)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:void invokeFinishListener()",
            "io.undertow.conduits.FinishableStreamSourceConduit:void exitRead(long)",
            "io.undertow.conduits.FinishableStreamSinkConduit:void truncateWrites()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void updateRemainingAllowed(int)",
            "io.undertow.conduits.ChunkedStreamSourceConduit:void callFinish()",
            "io.undertow.conduits.HeadStreamSinkConduit:void exitFlush(int,boolean)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void checkMaxSize(long)",
            "io.undertow.conduits.FixedLengthStreamSourceConduit:void invokeFinishListener()"
        ]
    },
    "io.undertow.server.handlers.encoding.ContentEncodedResourceManager$FileConduitTarget:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:void wakeupWrites()",
            "io.undertow.server.handlers.encoding.ContentEncodedResourceManager$FileConduitTarget:void resumeWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void wakeupWrites()",
            "io.undertow.conduits.IdleTimeoutConduit:void wakeupWrites()",
            "io.undertow.conduits.HeadStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void wakeupWrites()"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.util.PipeliningExecutor$1:void run()",
            "io.undertow.util.SameThreadExecutor:void execute(java.lang.Runnable)",
            "io.undertow.server.Connectors:void executeRootHandler(io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)",
            "io.undertow.server.HttpServerExchange:void dispatch(java.util.concurrent.Executor,java.lang.Runnable)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void queueWriteListener()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.client.ajp.AjpClientRequestConduit:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.handlers.encoding.ContentEncodedResourceManager$FileConduitTarget:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:void setBodyChunkRequested(int)",
            "io.undertow.client.ajp.AjpClientRequestConduit:void resumeWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void resumeWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean doGetRequestBodyChunk(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpServerRequestConduit)",
            "io.undertow.conduits.IdleTimeoutConduit:void resumeWrites()",
            "io.undertow.conduits.HeadStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void deflateData()"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:void wakeupWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void wakeupWrites()",
            "io.undertow.conduits.IdleTimeoutConduit:void wakeupWrites()",
            "io.undertow.conduits.HeadStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void wakeupWrites()"
        ]
    },
    "io.undertow.conduits.HeadStreamSinkConduit:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:void wakeupWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void wakeupWrites()",
            "io.undertow.conduits.IdleTimeoutConduit:void wakeupWrites()",
            "io.undertow.conduits.HeadStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void wakeupWrites()"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:void wakeupWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void queueWriteListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.DeflatingStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void access$200(io.undertow.conduits.DeflatingStreamSinkConduit)"
        ]
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientRequestConduit:void setBodyChunkRequested(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientConnection$ResponseRecievedReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.client.ajp.AjpClientResponseConduit:int doRead(java.nio.ByteBuffer)",
            "io.undertow.client.ajp.AjpClientConnection$ClientReadListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.client.ajp.AjpClientRequestConduit:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean doGetRequestBodyChunk(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpServerRequestConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerRequestConduit:int read(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:void setBodyChunkRequested(int)",
            "io.undertow.client.ajp.AjpClientRequestConduit:void resumeWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void resumeWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean doGetRequestBodyChunk(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpServerRequestConduit)",
            "io.undertow.conduits.IdleTimeoutConduit:void resumeWrites()",
            "io.undertow.conduits.HeadStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void deflateData()"
        ]
    },
    "io.undertow.conduits.HeadStreamSinkConduit:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void resumeWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:void setBodyChunkRequested(int)",
            "io.undertow.client.ajp.AjpClientRequestConduit:void resumeWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:void resumeWrites()",
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean doGetRequestBodyChunk(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpServerRequestConduit)",
            "io.undertow.conduits.IdleTimeoutConduit:void resumeWrites()",
            "io.undertow.conduits.HeadStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void wakeupWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void resumeWrites()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void deflateData()"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:boolean flush()",
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()",
            "io.undertow.server.protocol.http.HttpResponseConduit:boolean flush()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushPipelinedData()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushBuffer()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.IdleTimeoutConduit:boolean flush()",
            "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void deflateData()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.DeflatingStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:void access$200(io.undertow.conduits.DeflatingStreamSinkConduit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.DeflatingStreamSinkConduit$1:void run()"
        ]
    },
    "io.undertow.client.http.HttpRequestConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushPipelinedData()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit$1:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:void performFlush(io.undertow.server.HttpServerExchange,io.undertow.server.protocol.http.HttpServerConnection)"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushPipelinedData()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:boolean flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:boolean flush()",
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()",
            "io.undertow.server.protocol.http.HttpResponseConduit:boolean flush()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushPipelinedData()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushBuffer()",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.FinishableStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.IdleTimeoutConduit:boolean flush()",
            "io.undertow.conduits.HeadStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean handleFinalChunk()",
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean writeCurrentBuffer()",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:boolean flushHeaderBuffer(java.nio.ByteBuffer,java.lang.String,io.undertow.util.HeaderValues,int,long,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushBuffer()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.IdleTimeoutConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:int write(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpRequestConduit:int processWrite(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.client.http.HttpRequestConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.client.http.HttpRequestConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:boolean flush()"
        ]
    },
    "io.undertow.client.http.HttpRequestConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.client.ajp.AjpClientRequestConduit:boolean handleFinalChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()"
        ]
    },
    "io.undertow.client.ajp.AjpClientRequestConduit:boolean writeCurrentBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean processWrite()"
        ]
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpResponseConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:boolean flush()"
        ]
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:boolean flushHeaderBuffer(java.nio.ByteBuffer,java.lang.String,io.undertow.util.HeaderValues,int,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean handleFinalChunk()",
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean writeCurrentBuffer()",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:boolean flushHeaderBuffer(java.nio.ByteBuffer,java.lang.String,io.undertow.util.HeaderValues,int,long,int)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:boolean flushBuffer()",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.IdleTimeoutConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:int write(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.client.ajp.AjpClientRequestConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long flushBufferWithUserData(java.nio.ByteBuffer[])",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:long doWrite(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean performFlushIfRequired()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.client.http.HttpRequestConduit:long transferFrom(java.nio.channels.FileChannel,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpRequestConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientRequestConduit:boolean processWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.client.ajp.AjpClientRequestConduit:boolean flush()"
        ]
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(java.nio.channels.FileChannel,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.ChunkedStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:int writeFinal(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientRequestConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long flushBufferWithUserData(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:int write(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.AbstractFramedStreamSinkConduit:long doWrite(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:boolean flush()"
        ]
    },
    "io.undertow.conduits.IdleTimeoutConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.client.http.HttpRequestConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.client.ajp.AjpClientRequestConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processWrite(int,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:int processStatefulWrite(int,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.server.protocol.http.PipeliningBufferingStreamSinkConduit:long flushBufferWithUserData(java.nio.ByteBuffer[])",
            "io.undertow.conduits.AbstractFramedStreamSinkConduit:long doWrite(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.ChunkedStreamSinkConduit:int doWrite(java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:long write(java.nio.ByteBuffer[],int,int)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean performFlushIfRequired()",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:boolean performFlushIfRequired()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.conduits.DeflatingStreamSinkConduit:int write(java.nio.ByteBuffer)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.conduits.DeflatingStreamSinkConduit:boolean flush()",
            "io.undertow.conduits.DeflatingStreamSinkConduit:void deflateData()"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.ChunkedStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.client.ajp.AjpClientRequestConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.ajp.AjpClientRequestConduit:long write(java.nio.ByteBuffer[])"
        ]
    },
    "io.undertow.conduits.AbstractFramedStreamSinkConduit:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:boolean doGetRequestBodyChunk(java.nio.ByteBuffer,io.undertow.server.protocol.ajp.AjpServerRequestConduit)"
        ]
    },
    "io.undertow.conduits.AbstractFramedStreamSinkConduit:long write(java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.server.protocol.ajp.AjpServerResponseConduit:int write(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)"
        ]
    },
    "io.undertow.conduits.DeflatingStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.client.ajp.AjpClientRequestConduit:long write(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(java.nio.channels.FileChannel,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(java.nio.channels.FileChannel,long,long)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long transferFrom(java.nio.channels.FileChannel,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.client.http.HttpRequestConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.server.protocol.http.HttpResponseConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.conduits.IdleTimeoutConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)",
            "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.conduits.AbstractFixedLengthStreamSinkConduit:long transferFrom(org.xnio.channels.StreamSourceChannel,long,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}