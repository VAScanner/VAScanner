{
    "com.thoughtworks.xstream.XStream:com.thoughtworks.xstream.mapper.Mapper buildMapper()": {
        "isVulRoot": true,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.ClassLoader,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.converters.ConverterRegistry)"
        ]
    },
    "com.thoughtworks.xstream.mapper.CachingMapper:java.lang.Class realClass(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.ClassLoader,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.converters.ConverterRegistry)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.io.HierarchicalStreamDriver)",
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.ClassLoader,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.io.ObjectInputStream$GetField readFields()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void defaultReadObject()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshalConditionally(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class realClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.CachingMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.CGLIBMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.DynamicProxyMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.XmlFriendlyMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.ArrayMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:java.lang.Object readItem(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object start(com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:void <init>(com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.io.HierarchicalStreamDriver)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void <init>()",
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider)",
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.io.HierarchicalStreamDriver)",
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver)",
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.alias.ClassMapper,com.thoughtworks.xstream.io.HierarchicalStreamDriver)",
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.alias.ClassMapper,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.ClassLoader,com.thoughtworks.xstream.mapper.Mapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.ClassLoader)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshalConditionally(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.io.ObjectInputStream$GetField readFields()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void defaultReadObject()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshalConditionally(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.Class realClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.PackageAliasingMapper:java.lang.Class realClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.CGLIBMapper:java.lang.Class realClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.DynamicProxyMapper:java.lang.Class realClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper:java.lang.Class realClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.XmlFriendlyMapper:java.lang.Class realClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ArrayMapper:java.lang.Class realClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$2:java.lang.Object readFromStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.lang.Object readObjectOverride()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:boolean readBoolean()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:byte readByte()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readUnsignedByte()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readInt()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:char readChar()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:float readFloat()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:double readDouble()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:long readLong()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:short readShort()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readUnsignedShort()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.lang.String readUTF()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void readFully(byte[],int,int)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[],int,int)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.lang.Object readFromStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.lang.Object readObjectOverride()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:boolean readBoolean()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:byte readByte()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readUnsignedByte()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readInt()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:char readChar()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:float readFloat()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:double readDouble()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:long readLong()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:short readShort()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readUnsignedShort()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.lang.String readUTF()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void readFully(byte[],int,int)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[],int,int)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:java.lang.Object readItem(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object start(com.thoughtworks.xstream.converters.DataHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:java.lang.Object unmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:void <init>(com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator:java.lang.Object next()"
        ]
    },
    "com.thoughtworks.xstream.XStream:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.CrossReference:void outputToFiles(org.jbehave.core.reporters.StoryReporterBuilder)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void parse()",
            "com.thoughtworks.xstream.persistence.FileStreamStrategy:void <init>(java.io.File)",
            "com.thoughtworks.xstream.XStreamer:void toXML(com.thoughtworks.xstream.XStream,java.lang.Object,java.io.Writer)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.io.HierarchicalStreamDriver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.CrossReference:void outputToFiles(org.jbehave.core.reporters.StoryReporterBuilder)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:void <init>(java.io.File)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.alias.ClassMapper,com.thoughtworks.xstream.io.HierarchicalStreamDriver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.alias.ClassMapper,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object unmarshallField(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.lang.Class,java.lang.reflect.Field)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:java.lang.Object unmarshallField(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.lang.Class,java.lang.reflect.Field)"
        ]
    },
    "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.lang.Object readObjectOverride()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:boolean readBoolean()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:byte readByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$Formatter:com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)",
            "com.thoughtworks.xstream.io.binary.Token:long readId(java.io.DataInput,byte)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readUnsignedByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read()"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token:long readId(java.io.DataInput,byte)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:char readChar()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:float readFloat()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:double readDouble()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:long readLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token:long readId(java.io.DataInput,byte)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:short readShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token:long readId(java.io.DataInput,byte)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readUnsignedShort()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.lang.String readUTF()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token:java.lang.String readString(java.io.DataInput)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void readFully(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void readFully(byte[])"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:byte[] readClass(java.io.InputStream)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[])"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set unmarshalPrincipals(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:java.lang.Object unmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:java.lang.Object unmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.DefaultConverterLookup,com.thoughtworks.xstream.alias.ClassMapper)",
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationBuilder:java.util.List buildCandidateSteps(org.jbehave.core.configuration.Configuration)",
            "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.steps.ParameterConverters parameterConverters(org.jbehave.core.configuration.AnnotationFinder)",
            "org.jbehave.core.embedder.Embedder:void mapStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.Embedder:void runAsEmbeddables(java.util.List)",
            "org.jbehave.core.embedder.Embedder:java.util.List embeddables(java.util.List,org.jbehave.core.embedder.EmbedderClassLoader)",
            "org.jbehave.core.embedder.Embedder:void runStoriesWithAnnotatedEmbedderRunner(java.lang.String,java.util.List)",
            "org.jbehave.core.embedder.Embedder:java.util.List annotatedEmbedderRunners(java.lang.String,java.util.List,org.jbehave.core.embedder.EmbedderClassLoader)",
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.Embedder:void processSystemProperties()",
            "org.jbehave.core.embedder.EmbedderClassLoader:java.net.URL[] classpathURLs(java.util.List)",
            "org.jbehave.core.embedder.MetaFilter:void parse(java.util.Properties,java.lang.String)",
            "org.jbehave.core.embedder.MetaFilter:java.util.Properties merge(java.util.Properties,java.util.Properties)",
            "org.jbehave.core.embedder.MetaFilter:boolean match(java.util.Properties,org.jbehave.core.model.Meta)",
            "org.jbehave.core.embedder.StoryMapper:void map(org.jbehave.core.model.Story,org.jbehave.core.embedder.MetaFilter)",
            "org.jbehave.core.embedder.StoryMapper:org.jbehave.core.model.StoryMaps getStoryMaps()",
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)",
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)",
            "org.jbehave.core.embedder.StoryRunner:void runStepsWhileKeepingState(java.util.List)",
            "org.jbehave.core.failures.BatchFailures:java.lang.String toString()",
            "org.jbehave.core.i18n.LocalizedKeywords:java.util.Map keywords(java.lang.String,java.util.Locale,java.lang.ClassLoader)",
            "org.jbehave.core.io.RelativePathCalculator:java.lang.String join(java.lang.Iterable)",
            "org.jbehave.core.junit.AnnotatedPathRunner:org.junit.runner.Description getDescription()",
            "org.jbehave.core.model.ExamplesTable:java.util.List getRowsAsParameters()",
            "org.jbehave.core.model.GivenStories:java.util.List getStories()",
            "org.jbehave.core.model.GivenStories:java.util.List getPaths()",
            "org.jbehave.core.model.GivenStories:boolean requireParameters()",
            "org.jbehave.core.model.Meta:void parse(java.util.List)",
            "org.jbehave.core.model.Meta:java.util.Set getPropertyNames()",
            "org.jbehave.core.model.Meta:org.jbehave.core.model.Meta inherit(org.jbehave.core.model.Meta,org.jbehave.core.model.Meta)",
            "org.jbehave.core.model.OutcomesTable:void verify()",
            "org.jbehave.core.model.OutcomesTable:java.lang.String toString()",
            "org.jbehave.core.model.StoryLanes:boolean inLane(java.lang.String,org.jbehave.core.model.Story)",
            "org.jbehave.core.model.StoryLanes:void nameStories(java.util.List)",
            "org.jbehave.core.model.StoryMap:java.util.List getStoryPaths()",
            "org.jbehave.core.model.StoryMaps:void index(java.util.List)",
            "org.jbehave.core.parsers.RegexPrefixCapturingPatternParser:java.lang.String[] extractParameterNames(java.lang.String)",
            "org.jbehave.core.parsers.RegexStoryParser:java.util.List parseScenariosFrom(java.lang.String)",
            "org.jbehave.core.reporters.CrossReference$XrefRoot:void <init>(java.util.List,java.util.List,org.jbehave.core.reporters.StoryReporterBuilder)",
            "org.jbehave.core.reporters.CrossReference$XrefStory:void <init>(org.jbehave.core.model.Story,org.jbehave.core.reporters.CrossReference$XrefRoot,org.jbehave.core.reporters.StoryReporterBuilder)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterScenario()",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterStory(boolean)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeScenario(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioMeta(org.jbehave.core.model.Meta)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeStory(org.jbehave.core.model.Story,boolean)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void example(java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterExamples()",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failed(java.lang.String,java.lang.Throwable)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(java.util.List)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void ignorable(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void notPerformed(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void pending(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void successful(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void dryRun()",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$1:boolean hasFormats(java.lang.String,java.util.List)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void index(java.util.List)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:org.jbehave.core.reporters.FreemarkerViewGenerator$Report totals(java.util.Collection)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:int count(java.lang.String,java.util.Collection)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:java.util.List createReports(java.util.Map)",
            "org.jbehave.core.reporters.IdeOnlyConsoleOutput:boolean inIDE()",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void writeData()",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void resetData()",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.Meta)",
            "org.jbehave.core.reporters.PrintStreamOutput:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.PrintStreamOutput:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.PrintStreamStepdocReporter:void outputStepdocs(java.util.List)",
            "org.jbehave.core.reporters.PrintStreamStepdocReporter:void outputStepsInstances(java.util.List)",
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()",
            "org.jbehave.core.reporters.StoryReporterBuilder:java.util.List formatNames(boolean)",
            "org.jbehave.core.reporters.StoryReporterBuilder:org.jbehave.core.reporters.StoryReporter build(java.lang.String)",
            "org.jbehave.core.reporters.StoryReporterBuilder:java.util.Map build(java.util.List)",
            "org.jbehave.core.steps.AbstractStepsFactory:java.util.List createCandidateSteps()",
            "org.jbehave.core.steps.ChainedParameters:java.util.Map values()",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStoriesSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStorySteps(java.util.List,org.jbehave.core.model.Story,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterScenarioSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List createSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List createStepsUponOutcome(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:void addMatchedScenarioSteps(org.jbehave.core.model.Scenario,java.util.List,java.util.Map,java.util.List)",
            "org.jbehave.core.steps.ParameterConverters$BooleanListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters$EnumListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters$NumberListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters:java.lang.Object convert(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters:java.util.List trim(java.util.List)",
            "org.jbehave.core.steps.StepCandidate:org.jbehave.core.steps.StepCandidate findComposedCandidate(java.lang.String,java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List stepdocs(java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List findMatching(java.lang.String,java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List stepsInstances(java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List collectCandidates(java.util.List)",
            "org.jbehave.core.steps.Steps:java.util.List listCandidates()",
            "org.jbehave.core.steps.Steps:void checkForDuplicateCandidates(java.util.List,org.jbehave.core.steps.StepType,java.lang.String)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class,boolean)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class,org.jbehave.core.annotations.AfterScenario$Outcome)",
            "org.jbehave.core.steps.Steps:java.util.List annotatatedMethods(java.lang.Class)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void parse()",
            "com.thoughtworks.xstream.io.binary.ReaderDepthState$1:java.lang.Object next()",
            "com.thoughtworks.xstream.io.binary.ReaderDepthState:java.lang.String getAttribute(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Map buildMap(java.lang.Class,boolean)",
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.Map createCallbackIndexMap(net.sf.cglib.proxy.Factory)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.beans.PropertyDescriptor[] getSerializableProperties(java.lang.Object)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:java.util.Map buildMap(java.lang.Class)",
            "com.thoughtworks.xstream.converters.ConversionException:java.lang.String getMessage()",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:java.util.Set keySet()",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:java.util.Collection values()",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:void putAll(java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.String joinEnumValues(java.util.EnumSet)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void readObject(java.io.ObjectInputStream)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean addAll(java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean removeAll(java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean retainAll(java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void addParametrizedTypes(java.lang.reflect.Type,java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processConverterAnnotations(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void cleanup()",
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:void <init>(java.util.Map)",
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.util.Set entrySet()",
            "com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.core.util.CompositeClassLoader:java.lang.Class loadClass(java.lang.String)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object start(com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:void registerConverter(com.thoughtworks.xstream.converters.Converter,int)"
        ]
    },
    "org.jbehave.core.reporters.CrossReference:void outputToFiles(org.jbehave.core.reporters.StoryReporterBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void generateNavigatorView()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.SaxWriter:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.SaxWriter:void parse(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void parse(org.xml.sax.InputSource)"
        ]
    },
    "com.thoughtworks.xstream.persistence.FileStreamStrategy:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStreamer:void toXML(com.thoughtworks.xstream.XStream,java.lang.Object,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStreamer:java.lang.String toXML(com.thoughtworks.xstream.XStream,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.String)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object unmarshallField(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.lang.Class,java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:java.lang.Object readItem(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object start(com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:java.lang.Object unmarshallField(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.lang.Class,java.lang.reflect.Field)"
        ]
    },
    "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:java.lang.Object unmarshallField(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.lang.Class,java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token$Formatter:com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:com.thoughtworks.xstream.io.binary.Token readToken()"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token:long readId(java.io.DataInput,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$MapIdToValue:void readFrom(java.io.DataInput,byte)",
            "com.thoughtworks.xstream.io.binary.Token$StartNode:void readFrom(java.io.DataInput,byte)",
            "com.thoughtworks.xstream.io.binary.Token$Attribute:void readFrom(java.io.DataInput,byte)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:byte[] readClass(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token:java.lang.String readString(java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$MapIdToValue:void readFrom(java.io.DataInput,byte)",
            "com.thoughtworks.xstream.io.binary.Token$Attribute:void readFrom(java.io.DataInput,byte)",
            "com.thoughtworks.xstream.io.binary.Token$Value:void readFrom(java.io.DataInput,byte)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void readFully(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:byte[] readClass(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:void <init>(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set unmarshalPrincipals(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.CollectionConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.MapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:java.lang.Object unmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.DefaultConverterLookup,com.thoughtworks.xstream.alias.ClassMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object)"
        ]
    },
    "org.jbehave.core.configuration.AnnotationBuilder:java.util.List buildCandidateSteps(org.jbehave.core.configuration.Configuration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationBuilder:java.util.List buildCandidateSteps()",
            "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.embedder.Embedder buildEmbedder()"
        ]
    },
    "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.steps.ParameterConverters parameterConverters(org.jbehave.core.configuration.AnnotationFinder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.configuration.Configuration buildConfiguration()"
        ]
    },
    "org.jbehave.core.embedder.Embedder:void mapStoriesAsPaths(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.junit.JUnitStoryMaps:void run()"
        ]
    },
    "org.jbehave.core.embedder.Embedder:void runAsEmbeddables(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.embedder.Embedder:java.util.List embeddables(java.util.List,org.jbehave.core.embedder.EmbedderClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void runAsEmbeddables(java.util.List)"
        ]
    },
    "org.jbehave.core.embedder.Embedder:void runStoriesWithAnnotatedEmbedderRunner(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.embedder.Embedder:java.util.List annotatedEmbedderRunners(java.lang.String,java.util.List,org.jbehave.core.embedder.EmbedderClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void runStoriesWithAnnotatedEmbedderRunner(java.lang.String,java.util.List)"
        ]
    },
    "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.junit.AnnotatedPathRunner:void run(org.junit.runner.notification.RunNotifier)",
            "org.jbehave.core.junit.JUnitStories:void run()",
            "org.jbehave.core.junit.JUnitStory:void run()"
        ]
    },
    "org.jbehave.core.embedder.Embedder:void processSystemProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void mapStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)"
        ]
    },
    "org.jbehave.core.embedder.EmbedderClassLoader:java.net.URL[] classpathURLs(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.EmbedderClassLoader:void <init>(java.util.List,java.lang.ClassLoader)"
        ]
    },
    "org.jbehave.core.embedder.MetaFilter:void parse(java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.MetaFilter:void <init>(java.lang.String,org.jbehave.core.embedder.EmbedderMonitor)"
        ]
    },
    "org.jbehave.core.embedder.MetaFilter:java.util.Properties merge(java.util.Properties,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.MetaFilter:boolean allow(org.jbehave.core.model.Meta)"
        ]
    },
    "org.jbehave.core.embedder.MetaFilter:boolean match(java.util.Properties,org.jbehave.core.model.Meta)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.MetaFilter:boolean allow(org.jbehave.core.model.Meta)"
        ]
    },
    "org.jbehave.core.embedder.StoryMapper:void map(org.jbehave.core.model.Story,org.jbehave.core.embedder.MetaFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void mapStoriesAsPaths(java.util.List)"
        ]
    },
    "org.jbehave.core.embedder.StoryMapper:org.jbehave.core.model.StoryMaps getStoryMaps()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void mapStoriesAsPaths(java.util.List)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.configuration.Configuration,java.util.List,org.jbehave.core.model.Story)",
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.configuration.Configuration,java.util.List,org.jbehave.core.model.Story,org.jbehave.core.embedder.MetaFilter)",
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner:void runStepsWhileKeepingState(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runBeforeOrAfterStories(org.jbehave.core.configuration.Configuration,java.util.List,org.jbehave.core.steps.StepCollector$Stage)",
            "org.jbehave.core.embedder.StoryRunner:void runBeforeOrAfterStorySteps(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,org.jbehave.core.steps.StepCollector$Stage)",
            "org.jbehave.core.embedder.StoryRunner:void runBeforeOrAfterScenarioSteps(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario,org.jbehave.core.steps.StepCollector$Stage)",
            "org.jbehave.core.embedder.StoryRunner:void runScenarioSteps(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario,java.util.Map)"
        ]
    },
    "org.jbehave.core.failures.BatchFailures:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PrintStreamOutput$1:java.lang.String asString(java.lang.Object)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom build(java.io.Reader)",
            "com.thoughtworks.xstream.converters.extended.ToStringConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:java.lang.String toString()",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary$WeakIdWrapper:java.lang.String toString()",
            "com.thoughtworks.xstream.core.ReferenceByXPathMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller$ReferencedImplicitElementException:void <init>(java.lang.Object,com.thoughtworks.xstream.io.path.Path)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FileStreamStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "org.jbehave.core.i18n.LocalizedKeywords:java.util.Map keywords(java.lang.String,java.util.Locale,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.i18n.LocalizedKeywords:void <init>(java.util.Locale,java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.jbehave.core.io.RelativePathCalculator:java.lang.String join(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.io.RelativePathCalculator:java.lang.String calculate(java.lang.String,java.lang.String)"
        ]
    },
    "org.jbehave.core.junit.AnnotatedPathRunner:org.junit.runner.Description getDescription()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.model.ExamplesTable:java.util.List getRowsAsParameters()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.model.GivenStories:java.util.List getStories()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)",
            "org.jbehave.core.reporters.PrintStreamOutput:void givenStories(org.jbehave.core.model.GivenStories)"
        ]
    },
    "org.jbehave.core.model.GivenStories:java.util.List getPaths()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)"
        ]
    },
    "org.jbehave.core.model.GivenStories:boolean requireParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:boolean isParameterisedByExamples(org.jbehave.core.model.Scenario)",
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Scenario parseScenario(java.lang.String)"
        ]
    },
    "org.jbehave.core.model.Meta:void parse(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.Meta:void <init>(java.util.List)"
        ]
    },
    "org.jbehave.core.model.Meta:java.util.Set getPropertyNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.MetaFilter:boolean match(java.util.Properties,org.jbehave.core.model.Meta)",
            "org.jbehave.core.model.Meta:org.jbehave.core.model.Meta inherit(org.jbehave.core.model.Meta,org.jbehave.core.model.Meta)",
            "org.jbehave.core.reporters.CrossReference$XrefStory:void <init>(org.jbehave.core.model.Story,org.jbehave.core.reporters.CrossReference$XrefRoot,org.jbehave.core.reporters.StoryReporterBuilder)",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.Meta)"
        ]
    },
    "org.jbehave.core.model.Meta:org.jbehave.core.model.Meta inherit(org.jbehave.core.model.Meta,org.jbehave.core.model.Meta)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.Meta:org.jbehave.core.model.Meta inheritFrom(org.jbehave.core.model.Meta)"
        ]
    },
    "org.jbehave.core.model.OutcomesTable:void verify()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.model.OutcomesTable:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PrintStreamOutput$1:java.lang.String asString(java.lang.Object)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom build(java.io.Reader)",
            "com.thoughtworks.xstream.converters.extended.ToStringConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:java.lang.String toString()",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary$WeakIdWrapper:java.lang.String toString()",
            "com.thoughtworks.xstream.core.ReferenceByXPathMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller$ReferencedImplicitElementException:void <init>(java.lang.Object,com.thoughtworks.xstream.io.path.Path)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FileStreamStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "org.jbehave.core.model.StoryLanes:boolean inLane(java.lang.String,org.jbehave.core.model.Story)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.model.StoryLanes:void nameStories(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.StoryLanes:java.util.List laneStories(java.lang.String)"
        ]
    },
    "org.jbehave.core.model.StoryMap:java.util.List getStoryPaths()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.StoryMap:java.lang.String toString()"
        ]
    },
    "org.jbehave.core.model.StoryMaps:void index(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.StoryMaps:void <init>(java.util.List)"
        ]
    },
    "org.jbehave.core.parsers.RegexPrefixCapturingPatternParser:java.lang.String[] extractParameterNames(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexPrefixCapturingPatternParser:org.jbehave.core.parsers.StepMatcher parseStep(java.lang.String)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:java.util.List parseScenariosFrom(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Story parseStory(java.lang.String,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.CrossReference$XrefRoot:void <init>(java.util.List,java.util.List,org.jbehave.core.reporters.StoryReporterBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.CrossReference:void outputToFiles(org.jbehave.core.reporters.StoryReporterBuilder)"
        ]
    },
    "org.jbehave.core.reporters.CrossReference$XrefStory:void <init>(org.jbehave.core.model.Story,org.jbehave.core.reporters.CrossReference$XrefRoot,org.jbehave.core.reporters.StoryReporterBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.CrossReference$XrefRoot:void <init>(java.util.List,java.util.List,org.jbehave.core.reporters.StoryReporterBuilder)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void afterScenario()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterScenario()",
            "org.jbehave.core.reporters.SilentSuccessFilter$11:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void afterScenario()"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void afterStory(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterStory(boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter$20$1:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void afterStory(boolean)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeScenario(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeScenario(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$12:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void beforeScenario(java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioMeta(org.jbehave.core.model.Meta)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioMeta(org.jbehave.core.model.Meta)",
            "org.jbehave.core.reporters.SilentSuccessFilter$14:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void scenarioMeta(org.jbehave.core.model.Meta)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeStory(org.jbehave.core.model.Story,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeStory(org.jbehave.core.model.Story,boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter$2:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void beforeStory(org.jbehave.core.model.Story,boolean)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void narrative(org.jbehave.core.model.Narrative)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.SilentSuccessFilter$3:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void narrative(org.jbehave.core.model.Narrative)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.SilentSuccessFilter$17:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void example(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void example(java.util.Map)",
            "org.jbehave.core.reporters.SilentSuccessFilter$18:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void example(java.util.Map)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void afterExamples()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterExamples()",
            "org.jbehave.core.reporters.SilentSuccessFilter$19:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void afterExamples()"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void failed(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failed(java.lang.String,java.lang.Throwable)",
            "org.jbehave.core.reporters.SilentSuccessFilter$6:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void failed(java.lang.String,java.lang.Throwable)",
            "org.jbehave.core.steps.AbstractStepResult$Failed:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.SilentSuccessFilter$7:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.steps.AbstractStepResult$Failed:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(org.jbehave.core.model.GivenStories)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.SilentSuccessFilter$15:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void givenStories(org.jbehave.core.model.GivenStories)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(java.util.List)",
            "org.jbehave.core.reporters.SilentSuccessFilter$16:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void givenStories(java.util.List)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void ignorable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void ignorable(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$5:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void ignorable(java.lang.String)",
            "org.jbehave.core.steps.AbstractStepResult$Ignorable:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void notPerformed(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void notPerformed(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$8:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void notPerformed(java.lang.String)",
            "org.jbehave.core.steps.AbstractStepResult$NotPerformed:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void pending(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void pending(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$9:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void pending(java.lang.String)",
            "org.jbehave.core.steps.AbstractStepResult$Pending:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void successful(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void successful(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$10:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void successful(java.lang.String)",
            "org.jbehave.core.steps.AbstractStepResult$Successful:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void dryRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void dryRun()",
            "org.jbehave.core.reporters.SilentSuccessFilter$1:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void dryRun()"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$13:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.DelegatingStoryReporter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$4:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator$1:boolean hasFormats(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.FreemarkerViewGenerator$1:boolean accept(java.io.File,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void index(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void <init>(java.util.List,org.jbehave.core.io.StoryNameResolver)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:org.jbehave.core.reporters.FreemarkerViewGenerator$Report totals(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void addTotalsReport()"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator:int count(java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.FreemarkerViewGenerator:org.jbehave.core.reporters.ReportsCount getReportsCount()"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator:java.util.List createReports(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateReportsView(java.io.File,java.util.List,java.util.Properties)"
        ]
    },
    "org.jbehave.core.reporters.IdeOnlyConsoleOutput:boolean inIDE()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.IdeOnlyConsoleOutput:java.io.PrintStream output()"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void writeData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void afterStory(boolean)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void resetData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void beforeStory(org.jbehave.core.model.Story,boolean)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.OutcomesTable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PrintStreamOutput:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.Meta)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PrintStreamOutput:void beforeStory(org.jbehave.core.model.Story,boolean)",
            "org.jbehave.core.reporters.PrintStreamOutput:void scenarioMeta(org.jbehave.core.model.Meta)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamOutput:void givenStories(org.jbehave.core.model.GivenStories)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.PrintStreamOutput:void givenStories(java.util.List)",
            "org.jbehave.core.reporters.SilentSuccessFilter$15:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void givenStories(org.jbehave.core.model.GivenStories)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamOutput:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.SilentSuccessFilter$17:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.ExamplesTable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PrintStreamOutput:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamStepdocReporter:void outputStepdocs(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PrintStreamStepdocReporter:void stepdocsMatching(java.lang.String,java.util.List,java.util.List)",
            "org.jbehave.core.reporters.PrintStreamStepdocReporter:void stepdocs(java.util.List,java.util.List)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamStepdocReporter:void outputStepsInstances(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PrintStreamStepdocReporter:void stepdocsMatching(java.lang.String,java.util.List,java.util.List)",
            "org.jbehave.core.reporters.PrintStreamStepdocReporter:void stepdocs(java.util.List,java.util.List)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void dryRun()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterStory(boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterScenario()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.StoryReporterBuilder:java.util.List formatNames(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void generateReportsView()"
        ]
    },
    "org.jbehave.core.reporters.StoryReporterBuilder:org.jbehave.core.reporters.StoryReporter build(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.StoryReporterBuilder:java.util.Map build(java.util.List)"
        ]
    },
    "org.jbehave.core.reporters.StoryReporterBuilder:java.util.Map build(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void buildReporters(org.jbehave.core.configuration.Configuration,java.util.List)"
        ]
    },
    "org.jbehave.core.steps.AbstractStepsFactory:java.util.List createCandidateSteps()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationBuilder:java.util.List buildCandidateSteps(org.jbehave.core.configuration.Configuration)"
        ]
    },
    "org.jbehave.core.steps.ChainedParameters:java.util.Map values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ChainedParameters:java.util.Map values()",
            "org.jbehave.core.steps.ConvertedParameters:void <init>(org.jbehave.core.steps.Parameters,org.jbehave.core.steps.ParameterConverters)"
        ]
    },
    "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStoriesSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runBeforeOrAfterStories(org.jbehave.core.configuration.Configuration,java.util.List,org.jbehave.core.steps.StepCollector$Stage)"
        ]
    },
    "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStorySteps(java.util.List,org.jbehave.core.model.Story,org.jbehave.core.steps.StepCollector$Stage,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner$RunContext:java.util.List collectBeforeOrAfterStorySteps(org.jbehave.core.model.Story,org.jbehave.core.steps.StepCollector$Stage)"
        ]
    },
    "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterScenarioSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner$RunContext:java.util.List collectBeforeOrAfterScenarioSteps(org.jbehave.core.steps.StepCollector$Stage)"
        ]
    },
    "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List createSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStoriesSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStorySteps(java.util.List,org.jbehave.core.model.Story,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterScenarioSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)"
        ]
    },
    "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List createStepsUponOutcome(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterScenarioSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)"
        ]
    },
    "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:void addMatchedScenarioSteps(org.jbehave.core.model.Scenario,java.util.List,java.util.Map,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectScenarioSteps(java.util.List,org.jbehave.core.model.Scenario,java.util.Map)"
        ]
    },
    "org.jbehave.core.steps.ParameterConverters$BooleanListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ParameterConverters:java.lang.Object convert(java.lang.String,java.lang.reflect.Type)"
        ]
    },
    "org.jbehave.core.steps.ParameterConverters$EnumListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ParameterConverters:java.lang.Object convert(java.lang.String,java.lang.reflect.Type)"
        ]
    },
    "org.jbehave.core.steps.ParameterConverters$NumberListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ParameterConverters:java.lang.Object convert(java.lang.String,java.lang.reflect.Type)"
        ]
    },
    "org.jbehave.core.steps.ParameterConverters:java.lang.Object convert(java.lang.String,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ConvertedParameters:java.lang.Object convert(java.lang.Class,java.lang.String)",
            "org.jbehave.core.steps.StepCreator:java.lang.Object[] convertParameters(java.lang.String[],java.lang.reflect.Type[])"
        ]
    },
    "org.jbehave.core.steps.ParameterConverters:java.util.List trim(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ParameterConverters$BooleanListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters$EnumListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters$NumberListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters$StringListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)"
        ]
    },
    "org.jbehave.core.steps.StepCandidate:org.jbehave.core.steps.StepCandidate findComposedCandidate(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCandidate:java.util.List createComposedSteps(java.lang.String,java.util.Map,java.util.List)"
        ]
    },
    "org.jbehave.core.steps.StepFinder:java.util.List stepdocs(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void reportStepdocs()"
        ]
    },
    "org.jbehave.core.steps.StepFinder:java.util.List findMatching(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void reportMatchingStepdocs(java.lang.String)"
        ]
    },
    "org.jbehave.core.steps.StepFinder:java.util.List stepsInstances(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void reportStepdocs()",
            "org.jbehave.core.embedder.Embedder:void reportMatchingStepdocs(java.lang.String)"
        ]
    },
    "org.jbehave.core.steps.StepFinder:java.util.List collectCandidates(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:void addMatchedScenarioSteps(org.jbehave.core.model.Scenario,java.util.List,java.util.Map,java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List stepdocs(java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List findMatching(java.lang.String,java.util.List)"
        ]
    },
    "org.jbehave.core.steps.Steps:java.util.List listCandidates()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepFinder:java.util.List collectCandidates(java.util.List)"
        ]
    },
    "org.jbehave.core.steps.Steps:void checkForDuplicateCandidates(java.util.List,org.jbehave.core.steps.StepType,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.Steps:void addCandidate(java.util.List,java.lang.reflect.Method,org.jbehave.core.steps.StepType,java.lang.String,int)"
        ]
    },
    "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.Steps:java.util.List listBeforeOrAfterStory(boolean)"
        ]
    },
    "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.Steps:java.util.List listBeforeOrAfterStories()",
            "org.jbehave.core.steps.Steps:java.util.List listBeforeOrAfterScenario()"
        ]
    },
    "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class,org.jbehave.core.annotations.AfterScenario$Outcome)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.Steps:java.util.List listBeforeOrAfterScenario()"
        ]
    },
    "org.jbehave.core.steps.Steps:java.util.List annotatatedMethods(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class,boolean)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class,org.jbehave.core.annotations.AfterScenario$Outcome)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.ReaderDepthState$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationBuilder:java.util.List buildCandidateSteps(org.jbehave.core.configuration.Configuration)",
            "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.steps.ParameterConverters parameterConverters(org.jbehave.core.configuration.AnnotationFinder)",
            "org.jbehave.core.embedder.Embedder:void mapStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.Embedder:void runAsEmbeddables(java.util.List)",
            "org.jbehave.core.embedder.Embedder:java.util.List embeddables(java.util.List,org.jbehave.core.embedder.EmbedderClassLoader)",
            "org.jbehave.core.embedder.Embedder:void runStoriesWithAnnotatedEmbedderRunner(java.lang.String,java.util.List)",
            "org.jbehave.core.embedder.Embedder:java.util.List annotatedEmbedderRunners(java.lang.String,java.util.List,org.jbehave.core.embedder.EmbedderClassLoader)",
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.Embedder:void processSystemProperties()",
            "org.jbehave.core.embedder.EmbedderClassLoader:java.net.URL[] classpathURLs(java.util.List)",
            "org.jbehave.core.embedder.MetaFilter:void parse(java.util.Properties,java.lang.String)",
            "org.jbehave.core.embedder.MetaFilter:java.util.Properties merge(java.util.Properties,java.util.Properties)",
            "org.jbehave.core.embedder.MetaFilter:boolean match(java.util.Properties,org.jbehave.core.model.Meta)",
            "org.jbehave.core.embedder.StoryMapper:void map(org.jbehave.core.model.Story,org.jbehave.core.embedder.MetaFilter)",
            "org.jbehave.core.embedder.StoryMapper:org.jbehave.core.model.StoryMaps getStoryMaps()",
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)",
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)",
            "org.jbehave.core.embedder.StoryRunner:void runStepsWhileKeepingState(java.util.List)",
            "org.jbehave.core.failures.BatchFailures:java.lang.String toString()",
            "org.jbehave.core.i18n.LocalizedKeywords:java.util.Map keywords(java.lang.String,java.util.Locale,java.lang.ClassLoader)",
            "org.jbehave.core.io.RelativePathCalculator:java.lang.String join(java.lang.Iterable)",
            "org.jbehave.core.junit.AnnotatedPathRunner:org.junit.runner.Description getDescription()",
            "org.jbehave.core.model.ExamplesTable:java.util.List getRowsAsParameters()",
            "org.jbehave.core.model.GivenStories:java.util.List getStories()",
            "org.jbehave.core.model.GivenStories:java.util.List getPaths()",
            "org.jbehave.core.model.GivenStories:boolean requireParameters()",
            "org.jbehave.core.model.Meta:void parse(java.util.List)",
            "org.jbehave.core.model.Meta:java.util.Set getPropertyNames()",
            "org.jbehave.core.model.Meta:org.jbehave.core.model.Meta inherit(org.jbehave.core.model.Meta,org.jbehave.core.model.Meta)",
            "org.jbehave.core.model.OutcomesTable:void verify()",
            "org.jbehave.core.model.OutcomesTable:java.lang.String toString()",
            "org.jbehave.core.model.StoryLanes:boolean inLane(java.lang.String,org.jbehave.core.model.Story)",
            "org.jbehave.core.model.StoryLanes:void nameStories(java.util.List)",
            "org.jbehave.core.model.StoryMap:java.util.List getStoryPaths()",
            "org.jbehave.core.model.StoryMaps:void index(java.util.List)",
            "org.jbehave.core.parsers.RegexPrefixCapturingPatternParser:java.lang.String[] extractParameterNames(java.lang.String)",
            "org.jbehave.core.parsers.RegexStoryParser:java.util.List parseScenariosFrom(java.lang.String)",
            "org.jbehave.core.reporters.CrossReference$XrefRoot:void <init>(java.util.List,java.util.List,org.jbehave.core.reporters.StoryReporterBuilder)",
            "org.jbehave.core.reporters.CrossReference$XrefStory:void <init>(org.jbehave.core.model.Story,org.jbehave.core.reporters.CrossReference$XrefRoot,org.jbehave.core.reporters.StoryReporterBuilder)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterScenario()",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterStory(boolean)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeScenario(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioMeta(org.jbehave.core.model.Meta)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeStory(org.jbehave.core.model.Story,boolean)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void example(java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterExamples()",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failed(java.lang.String,java.lang.Throwable)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(java.util.List)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void ignorable(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void notPerformed(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void pending(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void successful(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void dryRun()",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$1:boolean hasFormats(java.lang.String,java.util.List)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void index(java.util.List)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:org.jbehave.core.reporters.FreemarkerViewGenerator$Report totals(java.util.Collection)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:int count(java.lang.String,java.util.Collection)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:java.util.List createReports(java.util.Map)",
            "org.jbehave.core.reporters.IdeOnlyConsoleOutput:boolean inIDE()",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void writeData()",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void resetData()",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.Meta)",
            "org.jbehave.core.reporters.PrintStreamOutput:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.PrintStreamOutput:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.PrintStreamStepdocReporter:void outputStepdocs(java.util.List)",
            "org.jbehave.core.reporters.PrintStreamStepdocReporter:void outputStepsInstances(java.util.List)",
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()",
            "org.jbehave.core.reporters.StoryReporterBuilder:java.util.List formatNames(boolean)",
            "org.jbehave.core.reporters.StoryReporterBuilder:org.jbehave.core.reporters.StoryReporter build(java.lang.String)",
            "org.jbehave.core.reporters.StoryReporterBuilder:java.util.Map build(java.util.List)",
            "org.jbehave.core.steps.AbstractStepsFactory:java.util.List createCandidateSteps()",
            "org.jbehave.core.steps.ChainedParameters:java.util.Map values()",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStoriesSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStorySteps(java.util.List,org.jbehave.core.model.Story,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterScenarioSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List createSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List createStepsUponOutcome(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:void addMatchedScenarioSteps(org.jbehave.core.model.Scenario,java.util.List,java.util.Map,java.util.List)",
            "org.jbehave.core.steps.ParameterConverters$BooleanListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters$EnumListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters$NumberListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters:java.lang.Object convert(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters:java.util.List trim(java.util.List)",
            "org.jbehave.core.steps.StepCandidate:org.jbehave.core.steps.StepCandidate findComposedCandidate(java.lang.String,java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List stepdocs(java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List findMatching(java.lang.String,java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List stepsInstances(java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List collectCandidates(java.util.List)",
            "org.jbehave.core.steps.Steps:java.util.List listCandidates()",
            "org.jbehave.core.steps.Steps:void checkForDuplicateCandidates(java.util.List,org.jbehave.core.steps.StepType,java.lang.String)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class,boolean)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class,org.jbehave.core.annotations.AfterScenario$Outcome)",
            "org.jbehave.core.steps.Steps:java.util.List annotatatedMethods(java.lang.Class)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void parse()",
            "com.thoughtworks.xstream.io.binary.ReaderDepthState$1:java.lang.Object next()",
            "com.thoughtworks.xstream.io.binary.ReaderDepthState:java.lang.String getAttribute(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Map buildMap(java.lang.Class,boolean)",
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.Map createCallbackIndexMap(net.sf.cglib.proxy.Factory)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.beans.PropertyDescriptor[] getSerializableProperties(java.lang.Object)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:java.util.Map buildMap(java.lang.Class)",
            "com.thoughtworks.xstream.converters.ConversionException:java.lang.String getMessage()",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:java.util.Set keySet()",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:java.util.Collection values()",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:void putAll(java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.String joinEnumValues(java.util.EnumSet)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void readObject(java.io.ObjectInputStream)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean addAll(java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean removeAll(java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean retainAll(java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void addParametrizedTypes(java.lang.reflect.Type,java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processConverterAnnotations(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void cleanup()",
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:void <init>(java.util.Map)",
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.util.Set entrySet()",
            "com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.core.util.CompositeClassLoader:java.lang.Class loadClass(java.lang.String)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object start(com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:void registerConverter(com.thoughtworks.xstream.converters.Converter,int)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.ReaderDepthState:java.lang.String getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:java.lang.String getAttribute(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Map buildMap(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Iterator fieldsFor(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:void <init>(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$UnserializableParentsReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$CGLIBFilteringReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$UnserializableParentsReflectionProvider$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$CGLIBFilteringReflectionProvider$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeFields()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshalConditionally(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.Map createCallbackIndexMap(net.sf.cglib.proxy.Factory)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.beans.PropertyDescriptor[] getSerializableProperties(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:void visitSerializableProperties(java.lang.Object,com.thoughtworks.xstream.converters.javabean.BeanProvider$Visitor)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:java.util.Map buildMap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:java.util.Iterator serializablePropertiesFor(java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:com.thoughtworks.xstream.converters.javabean.BeanProperty property(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.ConversionException:java.lang.String getMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.failures.BatchFailures:java.lang.String toString()",
            "org.jbehave.core.failures.StepFailed:void <init>(java.lang.String,java.lang.Throwable)",
            "com.thoughtworks.xstream.converters.ConversionException:void <init>(java.lang.String,java.lang.Throwable)",
            "com.thoughtworks.xstream.converters.ConversionException:void <init>(java.lang.Throwable)",
            "com.thoughtworks.xstream.XStreamException:void <init>(java.lang.String,java.lang.Throwable)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.CollectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:java.util.Set keySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryMapper:org.jbehave.core.model.StoryMaps getStoryMaps()",
            "org.jbehave.core.model.StoryMaps:java.util.List getMetaFilters()",
            "org.jbehave.core.model.StoryMaps:java.lang.String toString()",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:org.jbehave.core.reporters.FreemarkerViewGenerator$Report totals(java.util.Collection)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:java.util.List getReportNames()",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:java.util.List createReports(java.util.Map)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void writeData()",
            "org.jbehave.core.steps.ChainedParameters:java.util.Map values()",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:java.lang.String[] getAttributeNames()",
            "com.thoughtworks.xstream.converters.reflection.SortableFieldKeySorter:java.util.Map sort(java.lang.Class,java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.beans.PropertyDescriptor[] getSerializableProperties(java.lang.Object)",
            "com.thoughtworks.xstream.converters.ConversionException:java.util.Iterator keys()",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void readObject(java.io.ObjectInputStream)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void cleanup()",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:void registerConverter(com.thoughtworks.xstream.converters.Converter,int)",
            "com.thoughtworks.xstream.core.MapBackedDataHolder:java.util.Iterator keys()"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:java.util.Collection values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Keywords:java.lang.String[] startingWords()",
            "org.jbehave.core.model.StoryMaps:java.util.List getMaps()",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void addTotalsReport()",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:java.util.List getReports()",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Iterator fieldsFor(java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:java.util.Iterator serializablePropertiesFor(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Configuration:org.jbehave.core.configuration.Configuration useStoryReporters(java.util.Map)",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void readObject(java.io.ObjectInputStream)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.String joinEnumValues(java.util.EnumSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.String serializedClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean addAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean removeAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean retainAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAnnotations(java.lang.Class[])",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAnnotations(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void addParametrizedTypes(java.lang.reflect.Type,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void processConverterAnnotations(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void cleanup()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void associateId(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void removeId(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.util.OrderRetainingMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Map buildMap(java.lang.Class,boolean)"
        ]
    },
    "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.util.Set entrySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:void putAll(java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:void <init>(java.util.Map)"
        ]
    },
    "com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationBuilder:java.util.List buildCandidateSteps(org.jbehave.core.configuration.Configuration)",
            "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.steps.ParameterConverters parameterConverters(org.jbehave.core.configuration.AnnotationFinder)",
            "org.jbehave.core.embedder.Embedder:void mapStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.Embedder:void runAsEmbeddables(java.util.List)",
            "org.jbehave.core.embedder.Embedder:java.util.List embeddables(java.util.List,org.jbehave.core.embedder.EmbedderClassLoader)",
            "org.jbehave.core.embedder.Embedder:void runStoriesWithAnnotatedEmbedderRunner(java.lang.String,java.util.List)",
            "org.jbehave.core.embedder.Embedder:java.util.List annotatedEmbedderRunners(java.lang.String,java.util.List,org.jbehave.core.embedder.EmbedderClassLoader)",
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.Embedder:void processSystemProperties()",
            "org.jbehave.core.embedder.EmbedderClassLoader:java.net.URL[] classpathURLs(java.util.List)",
            "org.jbehave.core.embedder.MetaFilter:void parse(java.util.Properties,java.lang.String)",
            "org.jbehave.core.embedder.MetaFilter:java.util.Properties merge(java.util.Properties,java.util.Properties)",
            "org.jbehave.core.embedder.MetaFilter:boolean match(java.util.Properties,org.jbehave.core.model.Meta)",
            "org.jbehave.core.embedder.StoryMapper:void map(org.jbehave.core.model.Story,org.jbehave.core.embedder.MetaFilter)",
            "org.jbehave.core.embedder.StoryMapper:org.jbehave.core.model.StoryMaps getStoryMaps()",
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)",
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)",
            "org.jbehave.core.embedder.StoryRunner:void runStepsWhileKeepingState(java.util.List)",
            "org.jbehave.core.failures.BatchFailures:java.lang.String toString()",
            "org.jbehave.core.i18n.LocalizedKeywords:java.util.Map keywords(java.lang.String,java.util.Locale,java.lang.ClassLoader)",
            "org.jbehave.core.io.RelativePathCalculator:java.lang.String join(java.lang.Iterable)",
            "org.jbehave.core.junit.AnnotatedPathRunner:org.junit.runner.Description getDescription()",
            "org.jbehave.core.model.ExamplesTable:java.util.List getRowsAsParameters()",
            "org.jbehave.core.model.GivenStories:java.util.List getStories()",
            "org.jbehave.core.model.GivenStories:java.util.List getPaths()",
            "org.jbehave.core.model.GivenStories:boolean requireParameters()",
            "org.jbehave.core.model.Meta:void parse(java.util.List)",
            "org.jbehave.core.model.Meta:java.util.Set getPropertyNames()",
            "org.jbehave.core.model.Meta:org.jbehave.core.model.Meta inherit(org.jbehave.core.model.Meta,org.jbehave.core.model.Meta)",
            "org.jbehave.core.model.OutcomesTable:void verify()",
            "org.jbehave.core.model.OutcomesTable:java.lang.String toString()",
            "org.jbehave.core.model.StoryLanes:boolean inLane(java.lang.String,org.jbehave.core.model.Story)",
            "org.jbehave.core.model.StoryLanes:void nameStories(java.util.List)",
            "org.jbehave.core.model.StoryMap:java.util.List getStoryPaths()",
            "org.jbehave.core.model.StoryMaps:void index(java.util.List)",
            "org.jbehave.core.parsers.RegexPrefixCapturingPatternParser:java.lang.String[] extractParameterNames(java.lang.String)",
            "org.jbehave.core.parsers.RegexStoryParser:java.util.List parseScenariosFrom(java.lang.String)",
            "org.jbehave.core.reporters.CrossReference$XrefRoot:void <init>(java.util.List,java.util.List,org.jbehave.core.reporters.StoryReporterBuilder)",
            "org.jbehave.core.reporters.CrossReference$XrefStory:void <init>(org.jbehave.core.model.Story,org.jbehave.core.reporters.CrossReference$XrefRoot,org.jbehave.core.reporters.StoryReporterBuilder)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterScenario()",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterStory(boolean)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeScenario(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioMeta(org.jbehave.core.model.Meta)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeStory(org.jbehave.core.model.Story,boolean)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void example(java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterExamples()",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failed(java.lang.String,java.lang.Throwable)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(java.util.List)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void ignorable(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void notPerformed(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void pending(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void successful(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void dryRun()",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$1:boolean hasFormats(java.lang.String,java.util.List)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void index(java.util.List)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:org.jbehave.core.reporters.FreemarkerViewGenerator$Report totals(java.util.Collection)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:int count(java.lang.String,java.util.Collection)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:java.util.List createReports(java.util.Map)",
            "org.jbehave.core.reporters.IdeOnlyConsoleOutput:boolean inIDE()",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void writeData()",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void resetData()",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.Meta)",
            "org.jbehave.core.reporters.PrintStreamOutput:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.PrintStreamOutput:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.PrintStreamStepdocReporter:void outputStepdocs(java.util.List)",
            "org.jbehave.core.reporters.PrintStreamStepdocReporter:void outputStepsInstances(java.util.List)",
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()",
            "org.jbehave.core.reporters.StoryReporterBuilder:java.util.List formatNames(boolean)",
            "org.jbehave.core.reporters.StoryReporterBuilder:org.jbehave.core.reporters.StoryReporter build(java.lang.String)",
            "org.jbehave.core.reporters.StoryReporterBuilder:java.util.Map build(java.util.List)",
            "org.jbehave.core.steps.AbstractStepsFactory:java.util.List createCandidateSteps()",
            "org.jbehave.core.steps.ChainedParameters:java.util.Map values()",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStoriesSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStorySteps(java.util.List,org.jbehave.core.model.Story,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterScenarioSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List createSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List createStepsUponOutcome(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:void addMatchedScenarioSteps(org.jbehave.core.model.Scenario,java.util.List,java.util.Map,java.util.List)",
            "org.jbehave.core.steps.ParameterConverters$BooleanListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters$EnumListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters$NumberListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters:java.lang.Object convert(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters:java.util.List trim(java.util.List)",
            "org.jbehave.core.steps.StepCandidate:org.jbehave.core.steps.StepCandidate findComposedCandidate(java.lang.String,java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List stepdocs(java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List findMatching(java.lang.String,java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List stepsInstances(java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List collectCandidates(java.util.List)",
            "org.jbehave.core.steps.Steps:java.util.List listCandidates()",
            "org.jbehave.core.steps.Steps:void checkForDuplicateCandidates(java.util.List,org.jbehave.core.steps.StepType,java.lang.String)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class,boolean)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class,org.jbehave.core.annotations.AfterScenario$Outcome)",
            "org.jbehave.core.steps.Steps:java.util.List annotatatedMethods(java.lang.Class)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void parse()",
            "com.thoughtworks.xstream.io.binary.ReaderDepthState$1:java.lang.Object next()",
            "com.thoughtworks.xstream.io.binary.ReaderDepthState:java.lang.String getAttribute(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Map buildMap(java.lang.Class,boolean)",
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.Map createCallbackIndexMap(net.sf.cglib.proxy.Factory)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.beans.PropertyDescriptor[] getSerializableProperties(java.lang.Object)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:java.util.Map buildMap(java.lang.Class)",
            "com.thoughtworks.xstream.converters.ConversionException:java.lang.String getMessage()",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:java.util.Set keySet()",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:java.util.Collection values()",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:void putAll(java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.String joinEnumValues(java.util.EnumSet)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void readObject(java.io.ObjectInputStream)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean addAll(java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean removeAll(java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean retainAll(java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void addParametrizedTypes(java.lang.reflect.Type,java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processConverterAnnotations(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void cleanup()",
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:void <init>(java.util.Map)",
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.util.Set entrySet()",
            "com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.core.util.CompositeClassLoader:java.lang.Class loadClass(java.lang.String)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object start(com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:void registerConverter(com.thoughtworks.xstream.converters.Converter,int)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CompositeClassLoader:java.lang.Class loadClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.JavaClassConverter:java.lang.Class loadClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.DefaultMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.CompositeClassLoader:java.lang.Class loadClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.ClassLoaderReference:java.lang.Class loadClass(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.DefaultConverterLookup:com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getLocalConverterFromItemType(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convertAnother(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.DefaultConverterLookup:void registerConverter(com.thoughtworks.xstream.converters.Converter,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processConverterAnnotations(java.lang.Class)",
            "com.thoughtworks.xstream.XStream:void registerConverter(com.thoughtworks.xstream.converters.Converter,int)",
            "com.thoughtworks.xstream.XStream:void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)"
        ]
    },
    "org.jbehave.core.embedder.Embedder:void generateNavigatorView()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.SaxWriter:void parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.SaxWriter:void parse(org.xml.sax.InputSource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.String toXML(com.thoughtworks.xstream.XStream,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.FontConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamReader:com.thoughtworks.xstream.io.binary.Token readToken()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:void moveDown()",
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:void moveUp()",
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:com.thoughtworks.xstream.io.binary.Token readToken()"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token$MapIdToValue:void readFrom(java.io.DataInput,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$Formatter:com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token$StartNode:void readFrom(java.io.DataInput,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$Formatter:com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token$Attribute:void readFrom(java.io.DataInput,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$Formatter:com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token$Value:void readFrom(java.io.DataInput,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$Formatter:com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)"
        ]
    },
    "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:void <init>(java.io.InputStream,org.jbehave.paranamer.BytecodeReadingParanamer$1)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream$3:java.lang.Object readFromStream()"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream,java.lang.Object)"
        ]
    },
    "org.jbehave.core.configuration.AnnotationBuilder:java.util.List buildCandidateSteps()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.embedder.Embedder buildEmbedder()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationBuilder:java.lang.Object embeddableInstance()",
            "org.jbehave.core.junit.AnnotatedPathRunner:void run(org.junit.runner.notification.RunNotifier)"
        ]
    },
    "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.configuration.Configuration buildConfiguration()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationBuilder:java.util.List buildCandidateSteps()",
            "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.embedder.Embedder buildEmbedder()"
        ]
    },
    "org.jbehave.core.junit.JUnitStoryMaps:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.junit.AnnotatedPathRunner:void run(org.junit.runner.notification.RunNotifier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.junit.JUnitStories:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.junit.JUnitStory:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.embedder.EmbedderClassLoader:void <init>(java.util.List,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.EmbedderClassLoader:void <init>(java.lang.ClassLoader)",
            "org.jbehave.core.embedder.EmbedderClassLoader:void <init>(java.util.List)"
        ]
    },
    "org.jbehave.core.embedder.MetaFilter:void <init>(java.lang.String,org.jbehave.core.embedder.EmbedderMonitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.MetaFilter:void <init>(java.lang.String)"
        ]
    },
    "org.jbehave.core.embedder.MetaFilter:boolean allow(org.jbehave.core.model.Meta)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryMapper:void map(org.jbehave.core.model.Story,org.jbehave.core.embedder.MetaFilter)",
            "org.jbehave.core.embedder.StoryRunner$RunContext:boolean metaNotAllowed(org.jbehave.core.model.Meta)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.configuration.Configuration,java.util.List,org.jbehave.core.model.Story)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.configuration.Configuration,java.util.List,org.jbehave.core.model.Story,org.jbehave.core.embedder.MetaFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner:void runBeforeOrAfterStories(org.jbehave.core.configuration.Configuration,java.util.List,org.jbehave.core.steps.StepCollector$Stage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner:void runBeforeOrAfterStorySteps(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,org.jbehave.core.steps.StepCollector$Stage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner:void runBeforeOrAfterScenarioSteps(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario,org.jbehave.core.steps.StepCollector$Stage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner:void runScenarioSteps(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamOutput$1:java.lang.String asString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PrintStreamOutput$1:java.lang.Object transform(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom build(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.XppDomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.ToStringConverter:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.basic.CharConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PrintStreamOutput$1:java.lang.String asString(java.lang.Object)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom build(java.io.Reader)",
            "com.thoughtworks.xstream.converters.extended.ToStringConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:java.lang.String toString()",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary$WeakIdWrapper:java.lang.String toString()",
            "com.thoughtworks.xstream.core.ReferenceByXPathMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller$ReferencedImplicitElementException:void <init>(java.lang.Object,com.thoughtworks.xstream.io.path.Path)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FileStreamStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ObjectIdDictionary$WeakIdWrapper:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PrintStreamOutput$1:java.lang.String asString(java.lang.Object)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom build(java.io.Reader)",
            "com.thoughtworks.xstream.converters.extended.ToStringConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:java.lang.String toString()",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary$WeakIdWrapper:java.lang.String toString()",
            "com.thoughtworks.xstream.core.ReferenceByXPathMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller$ReferencedImplicitElementException:void <init>(java.lang.Object,com.thoughtworks.xstream.io.path.Path)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FileStreamStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.ReferenceByXPathMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.AbstractReferenceMarshaller$ReferencedImplicitElementException:void <init>(java.lang.Object,com.thoughtworks.xstream.io.path.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.persistence.FileStreamStrategy:java.lang.String getName(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:boolean containsKey(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object get(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "org.jbehave.core.i18n.LocalizedKeywords:void <init>(java.util.Locale,java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.i18n.LocalizedKeywords:void <init>(java.util.Locale)"
        ]
    },
    "org.jbehave.core.io.RelativePathCalculator:java.lang.String calculate(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner$RunContext:org.jbehave.core.embedder.StoryRunner$RunContext childContextFor(org.jbehave.core.model.GivenStory)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner:boolean isParameterisedByExamples(org.jbehave.core.model.Scenario)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Scenario parseScenario(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:java.util.List parseScenariosFrom(java.lang.String)"
        ]
    },
    "org.jbehave.core.model.Meta:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Meta createMeta(java.lang.String)"
        ]
    },
    "org.jbehave.core.model.Meta:org.jbehave.core.model.Meta inheritFrom(org.jbehave.core.model.Meta)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryMapper:void map(org.jbehave.core.model.Story,org.jbehave.core.embedder.MetaFilter)",
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)"
        ]
    },
    "org.jbehave.core.model.StoryLanes:java.util.List laneStories(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.StoryLanes:java.util.List getStories()",
            "org.jbehave.core.model.StoryLanes:boolean inLane(java.lang.String,org.jbehave.core.model.Story)"
        ]
    },
    "org.jbehave.core.model.StoryMap:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PrintStreamOutput$1:java.lang.String asString(java.lang.Object)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom build(java.io.Reader)",
            "com.thoughtworks.xstream.converters.extended.ToStringConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:java.lang.String toString()",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary$WeakIdWrapper:java.lang.String toString()",
            "com.thoughtworks.xstream.core.ReferenceByXPathMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller$ReferencedImplicitElementException:void <init>(java.lang.Object,com.thoughtworks.xstream.io.path.Path)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FileStreamStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "org.jbehave.core.model.StoryMaps:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryMapper:org.jbehave.core.model.StoryMaps getStoryMaps()"
        ]
    },
    "org.jbehave.core.parsers.RegexPrefixCapturingPatternParser:org.jbehave.core.parsers.StepMatcher parseStep(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCandidate:void <init>(java.lang.String,int,org.jbehave.core.steps.StepType,java.lang.reflect.Method,java.lang.Object,java.util.Map,org.jbehave.core.parsers.StepPatternParser,org.jbehave.core.steps.ParameterConverters)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Story parseStory(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:org.jbehave.core.model.Story storyOfPath(org.jbehave.core.configuration.Configuration,java.lang.String)",
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Story parseStory(java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$11:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void afterScenario()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterScenario()",
            "org.jbehave.core.reporters.SilentSuccessFilter$11:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void afterScenario()"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$20$1:void report()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void dryRun()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterStory(boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterScenario()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void afterStory(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterStory(boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter$20$1:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void afterStory(boolean)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$12:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void beforeScenario(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeScenario(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$12:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void beforeScenario(java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$14:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void scenarioMeta(org.jbehave.core.model.Meta)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioMeta(org.jbehave.core.model.Meta)",
            "org.jbehave.core.reporters.SilentSuccessFilter$14:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void scenarioMeta(org.jbehave.core.model.Meta)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$2:void report()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void dryRun()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterStory(boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterScenario()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void beforeStory(org.jbehave.core.model.Story,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeStory(org.jbehave.core.model.Story,boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter$2:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void beforeStory(org.jbehave.core.model.Story,boolean)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$3:void report()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void dryRun()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterStory(boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterScenario()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void narrative(org.jbehave.core.model.Narrative)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.SilentSuccessFilter$3:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void narrative(org.jbehave.core.model.Narrative)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$17:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.SilentSuccessFilter$17:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$18:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void example(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void example(java.util.Map)",
            "org.jbehave.core.reporters.SilentSuccessFilter$18:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void example(java.util.Map)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$19:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void afterExamples()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterExamples()",
            "org.jbehave.core.reporters.SilentSuccessFilter$19:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void afterExamples()"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$6:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void failed(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failed(java.lang.String,java.lang.Throwable)",
            "org.jbehave.core.reporters.SilentSuccessFilter$6:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void failed(java.lang.String,java.lang.Throwable)",
            "org.jbehave.core.steps.AbstractStepResult$Failed:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.steps.AbstractStepResult$Failed:void describeTo(org.jbehave.core.reporters.StoryReporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner$FineSoFar:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)",
            "org.jbehave.core.embedder.StoryRunner$SomethingHappened:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$7:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.SilentSuccessFilter$7:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.steps.AbstractStepResult$Failed:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$15:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void givenStories(org.jbehave.core.model.GivenStories)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.SilentSuccessFilter$15:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void givenStories(org.jbehave.core.model.GivenStories)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$16:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void givenStories(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(java.util.List)",
            "org.jbehave.core.reporters.SilentSuccessFilter$16:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void givenStories(java.util.List)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$5:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void ignorable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void ignorable(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$5:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void ignorable(java.lang.String)",
            "org.jbehave.core.steps.AbstractStepResult$Ignorable:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.steps.AbstractStepResult$Ignorable:void describeTo(org.jbehave.core.reporters.StoryReporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner$FineSoFar:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)",
            "org.jbehave.core.embedder.StoryRunner$SomethingHappened:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$8:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void notPerformed(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void notPerformed(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$8:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void notPerformed(java.lang.String)",
            "org.jbehave.core.steps.AbstractStepResult$NotPerformed:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.steps.AbstractStepResult$NotPerformed:void describeTo(org.jbehave.core.reporters.StoryReporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner$FineSoFar:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)",
            "org.jbehave.core.embedder.StoryRunner$SomethingHappened:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$9:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void pending(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void pending(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$9:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void pending(java.lang.String)",
            "org.jbehave.core.steps.AbstractStepResult$Pending:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.steps.AbstractStepResult$Pending:void describeTo(org.jbehave.core.reporters.StoryReporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner$FineSoFar:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)",
            "org.jbehave.core.embedder.StoryRunner$SomethingHappened:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$10:void doNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void successful(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void successful(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$10:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void successful(java.lang.String)",
            "org.jbehave.core.steps.AbstractStepResult$Successful:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.steps.AbstractStepResult$Successful:void describeTo(org.jbehave.core.reporters.StoryReporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner$FineSoFar:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)",
            "org.jbehave.core.embedder.StoryRunner$SomethingHappened:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$1:void report()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void dryRun()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterStory(boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterScenario()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void dryRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void dryRun()",
            "org.jbehave.core.reporters.SilentSuccessFilter$1:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void dryRun()"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$13:void report()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void dryRun()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterStory(boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterScenario()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$13:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter$4:void report()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void dryRun()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterStory(boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter:void afterScenario()",
            "org.jbehave.core.reporters.SilentSuccessFilter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.StepFailureDecorator:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$4:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator$1:boolean accept(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void <init>(java.util.List,org.jbehave.core.io.StoryNameResolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateReportsView(java.io.File,java.util.List,java.util.Properties)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void addTotalsReport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void <init>(java.util.List,org.jbehave.core.io.StoryNameResolver)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator:org.jbehave.core.reporters.ReportsCount getReportsCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void generateReportsView(java.io.File,java.util.List,java.util.Properties)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateReportsView(java.io.File,java.util.List,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void generateReportsView(java.io.File,java.util.List,java.util.Properties)"
        ]
    },
    "org.jbehave.core.reporters.IdeOnlyConsoleOutput:java.io.PrintStream output()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.IdeOnlyConsoleOutput:void <init>()",
            "org.jbehave.core.reporters.IdeOnlyConsoleOutput:void <init>(org.jbehave.core.configuration.Keywords)",
            "org.jbehave.core.reporters.IdeOnlyConsoleOutput:void <init>(java.util.Properties,org.jbehave.core.configuration.Keywords,boolean)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$4:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void afterStory(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterStory(boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter$20$1:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void afterStory(boolean)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void beforeStory(org.jbehave.core.model.Story,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeStory(org.jbehave.core.model.Story,boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter$2:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void beforeStory(org.jbehave.core.model.Story,boolean)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamOutput:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.SilentSuccessFilter$7:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.steps.AbstractStepResult$Failed:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamOutput:void beforeStory(org.jbehave.core.model.Story,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeStory(org.jbehave.core.model.Story,boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter$2:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void beforeStory(org.jbehave.core.model.Story,boolean)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamOutput:void scenarioMeta(org.jbehave.core.model.Meta)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioMeta(org.jbehave.core.model.Meta)",
            "org.jbehave.core.reporters.SilentSuccessFilter$14:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void scenarioMeta(org.jbehave.core.model.Meta)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamOutput:void givenStories(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(java.util.List)",
            "org.jbehave.core.reporters.SilentSuccessFilter$16:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void givenStories(java.util.List)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamStepdocReporter:void stepdocsMatching(java.lang.String,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void reportMatchingStepdocs(java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamStepdocReporter:void stepdocs(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void reportStepdocs()"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter:void dryRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void dryRun()",
            "org.jbehave.core.reporters.SilentSuccessFilter$1:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void dryRun()"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter:void narrative(org.jbehave.core.model.Narrative)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.SilentSuccessFilter$3:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void narrative(org.jbehave.core.model.Narrative)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$4:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter:void afterStory(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterStory(boolean)",
            "org.jbehave.core.reporters.SilentSuccessFilter$20$1:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void afterStory(boolean)"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter:void afterScenario()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterScenario()",
            "org.jbehave.core.reporters.SilentSuccessFilter$11:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void afterScenario()"
        ]
    },
    "org.jbehave.core.reporters.SilentSuccessFilter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$13:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)"
        ]
    },
    "org.jbehave.core.embedder.Embedder:void generateReportsView()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)"
        ]
    },
    "org.jbehave.core.embedder.Embedder:void buildReporters(org.jbehave.core.configuration.Configuration,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)"
        ]
    },
    "org.jbehave.core.steps.ConvertedParameters:void <init>(org.jbehave.core.steps.Parameters,org.jbehave.core.steps.ParameterConverters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.ExamplesTable:org.jbehave.core.steps.Parameters createParameters(java.util.Map)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner$RunContext:java.util.List collectBeforeOrAfterStorySteps(org.jbehave.core.model.Story,org.jbehave.core.steps.StepCollector$Stage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runBeforeOrAfterStorySteps(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,org.jbehave.core.steps.StepCollector$Stage)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner$RunContext:java.util.List collectBeforeOrAfterScenarioSteps(org.jbehave.core.steps.StepCollector$Stage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runBeforeOrAfterScenarioSteps(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario,org.jbehave.core.steps.StepCollector$Stage)"
        ]
    },
    "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectScenarioSteps(java.util.List,org.jbehave.core.model.Scenario,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner$RunContext:java.util.List collectScenarioSteps(org.jbehave.core.model.Scenario,java.util.Map)"
        ]
    },
    "org.jbehave.core.steps.ConvertedParameters:java.lang.Object convert(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ConvertedParameters:java.lang.Object valueAs(java.lang.String,java.lang.Class)"
        ]
    },
    "org.jbehave.core.steps.StepCreator:java.lang.Object[] convertParameters(java.lang.String[],java.lang.reflect.Type[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator:java.lang.Object[] access$1100(org.jbehave.core.steps.StepCreator,java.lang.String[],java.lang.reflect.Type[])"
        ]
    },
    "org.jbehave.core.steps.ParameterConverters$StringListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ParameterConverters:java.lang.Object convert(java.lang.String,java.lang.reflect.Type)"
        ]
    },
    "org.jbehave.core.steps.StepCandidate:java.util.List createComposedSteps(java.lang.String,java.util.Map,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:void addMatchedScenarioSteps(org.jbehave.core.model.Scenario,java.util.List,java.util.Map,java.util.List)"
        ]
    },
    "org.jbehave.core.embedder.Embedder:void reportStepdocs()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.embedder.Embedder:void reportMatchingStepdocs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.steps.Steps:void addCandidate(java.util.List,java.lang.reflect.Method,org.jbehave.core.steps.StepType,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.Steps:java.util.List listCandidates()",
            "org.jbehave.core.steps.Steps:void addCandidatesFromAliases(java.util.List,java.lang.reflect.Method,org.jbehave.core.steps.StepType,int)"
        ]
    },
    "org.jbehave.core.steps.Steps:java.util.List listBeforeOrAfterStory(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStorySteps(java.util.List,org.jbehave.core.model.Story,org.jbehave.core.steps.StepCollector$Stage,boolean)"
        ]
    },
    "org.jbehave.core.steps.Steps:java.util.List listBeforeOrAfterStories()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStoriesSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage)"
        ]
    },
    "org.jbehave.core.steps.Steps:java.util.List listBeforeOrAfterScenario()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterScenarioSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamReader:java.lang.String getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttribute(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.String readClassAttribute(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdUnmarshaller:java.lang.Object getCurrentReferenceKey()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Iterator fieldsFor(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Iterator serializableFieldsFor(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.Class getFieldType(java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:boolean fieldDefinedInClass(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.reflect.Field getField(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.TextAttributeConverter:void <init>()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshalConditionally(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter$UnserializableParentsReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$UnserializableParentsReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$CGLIBFilteringReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$UnserializableParentsReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$CGLIBFilteringReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$CGLIBFilteringReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$UnserializableParentsReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$CGLIBFilteringReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter$UnserializableParentsReflectionProvider$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$UnserializableParentsReflectionProvider$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$CGLIBFilteringReflectionProvider$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$CGLIBFilteringReflectionProvider$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$UnserializableParentsReflectionProvider$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$CGLIBFilteringReflectionProvider$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeFields()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshalConditionally(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.BeanProvider:void visitSerializableProperties(java.lang.Object,com.thoughtworks.xstream.converters.javabean.BeanProvider$Visitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:java.util.Iterator serializablePropertiesFor(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:com.thoughtworks.xstream.converters.javabean.BeanProperty property(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.failures.StepFailed:void <init>(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.ConversionException:void <init>(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:void callReadObject(java.lang.Class,java.lang.Object,java.io.ObjectInputStream)",
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:void callWriteObject(java.lang.Class,java.lang.Object,java.io.ObjectOutputStream)",
            "com.thoughtworks.xstream.converters.extended.JavaClassConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.converters.extended.ToStringConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.converters.ConversionException:void <init>(java.lang.Throwable)",
            "com.thoughtworks.xstream.converters.basic.UUIDConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:java.lang.Object createCollection(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:com.thoughtworks.xstream.core.util.CustomObjectInputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectInputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:com.thoughtworks.xstream.core.util.CustomObjectOutputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)",
            "com.thoughtworks.xstream.XStreamer:java.lang.String toXML(com.thoughtworks.xstream.XStream,java.lang.Object)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.lang.String)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.ConversionException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.StackTraceElementFactory:void setField(java.lang.StackTraceElement,java.lang.String,java.lang.Object)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.basic.URLConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.XStreamException:void <init>(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ObjectAccessException:void <init>(java.lang.String,java.lang.Throwable)",
            "com.thoughtworks.xstream.converters.ConversionException:void <init>(java.lang.String,java.lang.Throwable)",
            "com.thoughtworks.xstream.XStreamException:void <init>()",
            "com.thoughtworks.xstream.XStreamException:void <init>(java.lang.String)",
            "com.thoughtworks.xstream.XStreamException:void <init>(java.lang.Throwable)",
            "com.thoughtworks.xstream.XStream$InitializationException:void <init>(java.lang.String,java.lang.Throwable)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeMarshaller:void convertAnother(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeMarshaller:void convertAnother(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "org.jbehave.core.model.StoryMaps:java.util.List getMetaFilters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.StoryLanes:java.util.List getLanes()"
        ]
    },
    "org.jbehave.core.model.StoryMaps:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PrintStreamOutput$1:java.lang.String asString(java.lang.Object)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom build(java.io.Reader)",
            "com.thoughtworks.xstream.converters.extended.ToStringConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:java.lang.String toString()",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary$WeakIdWrapper:java.lang.String toString()",
            "com.thoughtworks.xstream.core.ReferenceByXPathMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller$ReferencedImplicitElementException:void <init>(java.lang.Object,com.thoughtworks.xstream.io.path.Path)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:java.lang.String createReference(com.thoughtworks.xstream.io.path.Path,java.lang.Object)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FileStreamStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:java.util.List getReportNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:java.lang.String[] getAttributeNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.XppDomReader:java.lang.String getAttribute(int)",
            "com.thoughtworks.xstream.io.xml.XppDomReader:int getAttributeCount()",
            "com.thoughtworks.xstream.io.xml.XppDomReader:java.lang.String getAttributeName(int)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SortableFieldKeySorter:java.util.Map sort(java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Map buildMap(java.lang.Class,boolean)"
        ]
    },
    "com.thoughtworks.xstream.converters.ConversionException:java.util.Iterator keys()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.ConversionException:java.lang.String getMessage()"
        ]
    },
    "com.thoughtworks.xstream.core.MapBackedDataHolder:java.util.Iterator keys()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeMarshaller:java.util.Iterator keys()",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.util.Iterator keys()"
        ]
    },
    "org.jbehave.core.configuration.Keywords:java.lang.String[] startingWords()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:java.util.regex.Pattern patternToPullScenarioTitleIntoGroupOne()",
            "org.jbehave.core.parsers.RegexStoryParser:java.util.regex.Pattern patternToPullScenarioMetaIntoGroupOne()",
            "org.jbehave.core.parsers.RegexStoryParser:java.util.regex.Pattern patternToPullGivenStoriesIntoGroupOne()",
            "org.jbehave.core.parsers.RegexStoryParser:java.util.regex.Pattern patternToPullStepsIntoGroupOne()"
        ]
    },
    "org.jbehave.core.model.StoryMaps:java.util.List getMaps()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:java.util.List getReports()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.configuration.Configuration:org.jbehave.core.configuration.Configuration useStoryReporters(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void buildReporters(org.jbehave.core.configuration.Configuration,java.util.List)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void write(java.io.ObjectOutput)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeObjectOverride(java.lang.Object)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeBoolean(boolean)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeByte(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeInt(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeChar(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeDouble(double)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeFloat(float)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeLong(long)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeShort(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void write(byte[])",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeChars(java.lang.String)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeUTF(java.lang.String)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void write(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void write(byte[],int,int)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void write(java.io.ObjectOutput)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeObjectOverride(java.lang.Object)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeBoolean(boolean)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeByte(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeInt(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeChar(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeDouble(double)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeFloat(float)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeLong(long)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeShort(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void write(byte[])",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeChars(java.lang.String)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeUTF(java.lang.String)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void write(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void write(byte[],int,int)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void defaultWriteObject()"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.CGLIBMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.DynamicProxyMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.XmlFriendlyMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ArrayMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.EnumMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:void marshal(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.Object,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:boolean containsKey(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object get(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAnnotations(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void processAnnotations(java.lang.Class[])"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAnnotations(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:java.lang.String realMember(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:java.lang.Class defaultImplementationOf(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:com.thoughtworks.xstream.converters.Converter getLocalConverter(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void associateId(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void removeId(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.JavaClassConverter:java.lang.Class loadClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.JavaClassConverter:java.lang.Object fromString(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.DefaultMapper:java.lang.Class realClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.DefaultMapper:java.lang.Class lookupType(java.lang.String)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ClassLoaderReference:java.lang.Class loadClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.JavaClassConverter:java.lang.Class loadClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.DefaultMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.CompositeClassLoader:java.lang.Class loadClass(java.lang.String)",
            "com.thoughtworks.xstream.core.util.ClassLoaderReference:java.lang.Class loadClass(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getLocalConverterFromItemType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.String)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeMarshaller:void convertAnother(java.lang.Object,com.thoughtworks.xstream.converters.Converter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshallField(com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object,java.lang.reflect.Field)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convertAnother(java.lang.Object)",
            "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:void marshallField(com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object,java.lang.reflect.Field)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void registerConverter(com.thoughtworks.xstream.converters.Converter,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void setupConverters()",
            "com.thoughtworks.xstream.XStream:void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])",
            "com.thoughtworks.xstream.XStream:void registerConverter(com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void setupConverters()",
            "com.thoughtworks.xstream.XStream:void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])",
            "com.thoughtworks.xstream.XStream:void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter)"
        ]
    },
    "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamReader:void moveDown()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void moveDown()",
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:void <init>(java.io.InputStream)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:boolean unmarshalReadOnly(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.XStream$3:java.lang.Object readFromStream()"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamReader:void moveUp()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void moveUp()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:boolean unmarshalReadOnly(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.XStream$3:java.lang.Object readFromStream()"
        ]
    },
    "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:void <init>(java.io.InputStream,org.jbehave.paranamer.BytecodeReadingParanamer$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.paranamer.BytecodeReadingParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)"
        ]
    },
    "com.thoughtworks.xstream.XStream$3:java.lang.Object readFromStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.lang.Object readObjectOverride()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:boolean readBoolean()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:byte readByte()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readUnsignedByte()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readInt()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:char readChar()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:float readFloat()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:double readDouble()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:long readLong()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:short readShort()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int readUnsignedShort()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:java.lang.String readUTF()",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void readFully(byte[],int,int)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:int read(byte[],int,int)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object readFile(java.io.File)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.lang.String,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.configuration.AnnotationBuilder:java.lang.Object embeddableInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.junit.AnnotatedEmbedderRunner:java.lang.Object createTest()"
        ]
    },
    "org.jbehave.core.embedder.EmbedderClassLoader:void <init>(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void <init>(org.jbehave.core.embedder.StoryMapper,org.jbehave.core.embedder.StoryRunner,org.jbehave.core.embedder.EmbedderMonitor)"
        ]
    },
    "org.jbehave.core.embedder.EmbedderClassLoader:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.embedder.MetaFilter:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void mapStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.MetaFilter:void <init>()"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner$RunContext:boolean metaNotAllowed(org.jbehave.core.model.Meta)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)"
        ]
    },
    "org.jbehave.core.reporters.PrintStreamOutput$1:java.lang.Object transform(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.XppDomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.XppDomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.Reader)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$UnserializableParentsReflectionProvider$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$CGLIBFilteringReflectionProvider$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.CharConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.XmlMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:java.lang.Object setValue(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.XmlMap:java.lang.Object get(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.XmlMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "org.jbehave.core.i18n.LocalizedKeywords:void <init>(java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.i18n.LocalizedKeywords:void <init>()"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner$RunContext:org.jbehave.core.embedder.StoryRunner$RunContext childContextFor(org.jbehave.core.model.GivenStory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Meta createMeta(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Meta parseStoryMetaFrom(java.lang.String)",
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Meta findScenarioMeta(java.lang.String)"
        ]
    },
    "org.jbehave.core.model.StoryLanes:java.util.List getStories()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.steps.StepCandidate:void <init>(java.lang.String,int,org.jbehave.core.steps.StepType,java.lang.reflect.Method,java.lang.Object,java.util.Map,org.jbehave.core.parsers.StepPatternParser,org.jbehave.core.steps.ParameterConverters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.Steps:org.jbehave.core.steps.StepCandidate createCandidate(java.lang.reflect.Method,org.jbehave.core.steps.StepType,java.lang.String,int,org.jbehave.core.configuration.Configuration)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner:org.jbehave.core.model.Story storyOfPath(org.jbehave.core.configuration.Configuration,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void mapStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Story parseStory(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.embedder.StoryRunner$FineSoFar:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runStepsWhileKeepingState(java.util.List)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner$SomethingHappened:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runStepsWhileKeepingState(java.util.List)"
        ]
    },
    "org.jbehave.core.embedder.Embedder:void generateReportsView(java.io.File,java.util.List,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void generateReportsView()"
        ]
    },
    "org.jbehave.core.reporters.IdeOnlyConsoleOutput:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.reporters.IdeOnlyConsoleOutput:void <init>(org.jbehave.core.configuration.Keywords)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.Format$2:org.jbehave.core.reporters.StoryReporter createStoryReporter(org.jbehave.core.reporters.FilePrintStreamFactory,org.jbehave.core.reporters.StoryReporterBuilder)"
        ]
    },
    "org.jbehave.core.reporters.IdeOnlyConsoleOutput:void <init>(java.util.Properties,org.jbehave.core.configuration.Keywords,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.model.ExamplesTable:org.jbehave.core.steps.Parameters createParameters(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.ExamplesTable:org.jbehave.core.steps.Parameters getRowAsParameters(int)",
            "org.jbehave.core.model.ExamplesTable:java.util.List getRowsAsParameters()"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner$RunContext:java.util.List collectScenarioSteps(org.jbehave.core.model.Scenario,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runScenarioSteps(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario,java.util.Map)"
        ]
    },
    "org.jbehave.core.steps.ConvertedParameters:java.lang.Object valueAs(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ChainedParameters:java.lang.Object valueAs(java.lang.String,java.lang.Class)",
            "org.jbehave.core.steps.ConvertedParameters:java.lang.Object valueAs(java.lang.String,java.lang.Class,java.lang.Object)"
        ]
    },
    "org.jbehave.core.steps.StepCreator:java.lang.Object[] access$1100(org.jbehave.core.steps.StepCreator,java.lang.String[],java.lang.reflect.Type[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator$5:void parametriseStep()"
        ]
    },
    "org.jbehave.core.steps.Steps:void addCandidatesFromAliases(java.util.List,java.lang.reflect.Method,org.jbehave.core.steps.StepType,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.Steps:java.util.List listCandidates()"
        ]
    },
    "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttribute(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.String readClassAttribute(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdUnmarshaller:java.lang.Object getCurrentReferenceKey()"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.String readClassAttribute(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.core.ReferenceByIdUnmarshaller:java.lang.Object getCurrentReferenceKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Iterator serializableFieldsFor(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.Class getFieldType(java.lang.Object,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:java.lang.Class getFieldType(java.lang.Object,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:boolean fieldDefinedInClass(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:boolean fieldDefinedInClass(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.reflect.Field getField(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:java.lang.reflect.Field getField(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.TextAttributeConverter:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void setupConverters()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:void callReadObject(java.lang.Class,java.lang.Object,java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:void callWriteObject(java.lang.Class,java.lang.Object,java.io.ObjectOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.JavaClassConverter:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.ToStringConverter:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.UUIDConverter:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:java.lang.Object createCollection(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:com.thoughtworks.xstream.core.util.CustomObjectInputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectInputStream$StreamCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:com.thoughtworks.xstream.core.util.CustomObjectOutputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.StackTraceElementFactory:void setField(java.lang.StackTraceElement,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.StackTraceElementFactory:java.lang.StackTraceElement create(java.lang.String,java.lang.String,java.lang.String,int)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.URLConverter:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ObjectAccessException:void <init>(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:java.lang.Object callReadResolve(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:java.lang.Object callWriteReplace(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.Object newInstance(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.Object instantiateUsingSerialization(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2$1:void run()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object readField(java.io.ObjectStreamField,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:java.lang.Object newInstance(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:void write(java.lang.reflect.Field,java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.lang.Object newInstance(java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:void visitSerializableProperties(java.lang.Object,com.thoughtworks.xstream.converters.javabean.BeanProvider$Visitor)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:void writeProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.util.Map getNameMap(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.DependencyInjectionFactory:java.lang.Object newInstance(java.lang.Class,java.lang.Object[])",
            "com.thoughtworks.xstream.core.util.ThreadSafePropertyEditor$1:java.lang.Object newInstance()",
            "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:com.thoughtworks.xstream.converters.Converter newInstance(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.XStreamException:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeMarshaller$CircularReferenceException:void <init>()"
        ]
    },
    "com.thoughtworks.xstream.XStreamException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.StreamException:void <init>(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.ObjectAccessException:void <init>(java.lang.String)",
            "com.thoughtworks.xstream.converters.ConversionException:void <init>(java.lang.String)",
            "com.thoughtworks.xstream.alias.CannotResolveClassException:void <init>(java.lang.String)",
            "com.thoughtworks.xstream.XStream$InitializationException:void <init>(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.XStreamException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.StreamException:void <init>(java.lang.Throwable)"
        ]
    },
    "com.thoughtworks.xstream.XStream$InitializationException:void <init>(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:com.thoughtworks.xstream.mapper.Mapper buildMapperDynamically(java.lang.String,java.lang.Class[],java.lang.Object[])",
            "com.thoughtworks.xstream.XStream:void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])",
            "com.thoughtworks.xstream.InitializationException:void <init>(java.lang.String,java.lang.Throwable)"
        ]
    },
    "org.jbehave.core.model.StoryLanes:java.util.List getLanes()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.XppDomReader:java.lang.String getAttribute(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttribute(int)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppDomReader:int getAttributeCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:int getAttributeCount()",
            "com.thoughtworks.xstream.io.AttributeNameIterator:void <init>(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppDomReader:java.lang.String getAttributeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.AttributeNameIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeMarshaller:java.util.Iterator keys()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeMarshaller:java.util.Iterator keys()",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.util.Iterator keys()"
        ]
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:java.util.Iterator keys()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeMarshaller:java.util.Iterator keys()",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.util.Iterator keys()"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:java.util.regex.Pattern patternToPullScenarioTitleIntoGroupOne()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:java.lang.String findScenarioTitle(java.lang.String)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:java.util.regex.Pattern patternToPullScenarioMetaIntoGroupOne()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Meta findScenarioMeta(java.lang.String)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:java.util.regex.Pattern patternToPullGivenStoriesIntoGroupOne()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.GivenStories findGivenStories(java.lang.String)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:java.util.regex.Pattern patternToPullStepsIntoGroupOne()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:java.util.List findSteps(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void write(java.io.ObjectOutput)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeObjectOverride(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token:void writeId(java.io.DataOutput,long,byte)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token:void writeId(java.io.DataOutput,long,byte)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token:void writeId(java.io.DataOutput,long,byte)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token:void writeId(java.io.DataOutput,long,byte)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeChars(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeUTF(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token:void writeString(java.io.DataOutput,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$Formatter:void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void defaultWriteObject()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:void visitSerializableProperties(java.lang.Object,com.thoughtworks.xstream.converters.javabean.BeanProvider$Visitor)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.ArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.mapper.PackageAliasingMapper:java.lang.String serializedClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.String serializedClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.CGLIBMapper:java.lang.String serializedClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.DynamicProxyMapper:java.lang.String serializedClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.XmlFriendlyMapper:java.lang.String serializedClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ArrayMapper:java.lang.String serializedClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.EnumMapper:java.lang.String serializedClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:java.lang.String serializedClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:void marshal(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.Object,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.DataHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:void marshal(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.Object,com.thoughtworks.xstream.core.DefaultConverterLookup,com.thoughtworks.xstream.alias.ClassMapper,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.XStream:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void processAnnotations(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void processAnnotations(java.lang.Class)",
            "com.thoughtworks.xstream.annotations.Annotations:void configureAliases(com.thoughtworks.xstream.XStream,java.lang.Class[])"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:java.lang.String realMember(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String realMember(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:java.lang.Class defaultImplementationOf(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:java.lang.Object createCollection(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class defaultImplementationOf(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:com.thoughtworks.xstream.converters.Converter getLocalConverter(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshallField(com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object,java.lang.reflect.Field)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object unmarshallField(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.lang.Class,java.lang.reflect.Field)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.Converter getLocalConverter(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.DefaultMapper:java.lang.Class lookupType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshallField(com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object,java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeMarshaller:void convertAnother(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:void marshallField(com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object,java.lang.reflect.Field)"
        ]
    },
    "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:void marshallField(com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object,java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void setupConverters()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.ClassLoader,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.converters.ConverterRegistry)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void setupConverters()"
        ]
    },
    "com.thoughtworks.xstream.XStream:void registerConverter(com.thoughtworks.xstream.converters.Converter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.ReaderWrapper:void moveDown()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.path.PathTrackingReader:void moveDown()"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamReader:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.SubjectConverter:boolean unmarshalReadOnly(com.thoughtworks.xstream.io.HierarchicalStreamReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.io.ReaderWrapper:void moveUp()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.path.PathTrackingReader:void moveUp()"
        ]
    },
    "org.jbehave.paranamer.BytecodeReadingParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator$5:void parametriseStep()",
            "org.jbehave.core.steps.StepCreator:java.util.Map matchedParameters(java.lang.reflect.Method,java.lang.String,java.lang.String,java.util.Map)",
            "org.jbehave.paranamer.AnnotationParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)",
            "org.jbehave.paranamer.BytecodeReadingParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject)",
            "org.jbehave.paranamer.CachingParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object readFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object get(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object remove(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object access$600(com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy,java.io.File)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.junit.AnnotatedEmbedderRunner:java.lang.Object createTest()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.embedder.Embedder:void <init>(org.jbehave.core.embedder.StoryMapper,org.jbehave.core.embedder.StoryRunner,org.jbehave.core.embedder.EmbedderMonitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void <init>()"
        ]
    },
    "org.jbehave.core.embedder.MetaFilter:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.MetaFilter:void <clinit>()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppDomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.persistence.XmlMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Configuration:org.jbehave.core.configuration.Configuration useStoryReporter(java.lang.String,org.jbehave.core.reporters.StoryReporter)",
            "org.jbehave.core.embedder.StoryMapper:java.util.Set storiesFor(java.lang.String)",
            "org.jbehave.core.model.ExamplesTable:void parse()",
            "org.jbehave.core.model.StoryMaps:void index(java.util.List)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$Report:java.util.Map getStats()",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void index(java.util.List)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void addTotalsReport()",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateViewsIndex(java.io.File)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateMapsView(java.io.File,org.jbehave.core.model.StoryMaps,java.util.Properties)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateNavigatorView(java.io.File,java.util.Properties)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateReportsView(java.io.File,java.util.List,java.util.Properties)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:java.util.List createReports(java.util.Map)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void count(java.lang.String)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void resetData()",
            "com.thoughtworks.xstream.io.path.PathTracker:void pushElement(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.QNameMap:void registerMapping(javax.xml.namespace.QName,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer:java.lang.String escapeName(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer:java.lang.String unescapeName(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:void setAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:void addChild(com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void setFeature(java.lang.String,boolean)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void setProperty(java.lang.String,java.lang.Object)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry:long getId(java.lang.String)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry:void put(long,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:void init()",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Map buildMap(java.lang.Class,boolean)",
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.Object instantiateUsingSerialization(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.SortableFieldKeySorter:void registerFieldOrder(java.lang.Class,java.lang.String[])",
            "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:java.lang.reflect.Constructor getMungedConstructor(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$ReverseEngineeringInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:net.sf.cglib.proxy.Callback[] getCallbacks(java.lang.Object)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.util.Map getNameMap(java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:java.util.Map buildMap(java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:com.thoughtworks.xstream.converters.javabean.BeanProperty getBeanProperty(java.util.Map,java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.ConversionException:void add(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.converters.basic.StringConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:void addClassAlias(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:void addTypeAlias(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.CachingMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void addPackageAlias(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void readObject(java.io.ObjectInputStream)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:void addDefaultImplementation(java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.LocalConversionMapper:void registerLocalConverter(java.lang.Class,java.lang.String,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:void addAttributeFor(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.FieldAliasingMapper:void addFieldAlias(java.lang.String,java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper:void addAliasFor(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:void add(com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getOrCreateMapper(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.EnumMapper:com.thoughtworks.xstream.converters.SingleValueConverter getLocalConverter(java.lang.String,java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:com.thoughtworks.xstream.converters.Converter cacheConverter(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void associateId(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.core.util.Primitives:void <clinit>()",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,java.lang.Object)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)",
            "com.thoughtworks.xstream.core.JVM:java.lang.Class loadClass(java.lang.String)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.MapBackedDataHolder:void put(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.persistence.XmlArrayList:java.lang.Object set(int,java.lang.Object)",
            "com.thoughtworks.xstream.persistence.XmlArrayList:void add(int,java.lang.Object)",
            "com.thoughtworks.xstream.persistence.XmlArrayList:java.lang.Object remove(int)",
            "com.thoughtworks.xstream.persistence.XmlSet:boolean add(java.lang.Object)",
            "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:void ensureCache(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:java.lang.Object setValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.persistence.XmlMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Configuration:org.jbehave.core.reporters.StoryReporter storyReporter(java.lang.String)",
            "org.jbehave.core.configuration.Keywords:java.lang.String keyword(java.lang.String,java.util.Map)",
            "org.jbehave.core.embedder.StoryMapper:java.util.Set storiesFor(java.lang.String)",
            "org.jbehave.core.model.StoryMaps:org.jbehave.core.model.StoryMap getMap(java.lang.String)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$Report:java.util.Properties asProperties(java.lang.String)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:org.jbehave.core.reporters.FreemarkerViewGenerator$Report totals(java.util.Collection)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:org.jbehave.core.reporters.FreemarkerViewGenerator$Report getReport(java.lang.String)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:java.util.List createReports(java.util.Map)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void count(java.lang.String)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void writeData()",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.steps.ChainedParameters:java.util.Map values()",
            "org.jbehave.core.steps.ConvertedParameters:java.lang.Object valueAs(java.lang.String,java.lang.Class)",
            "org.jbehave.core.steps.StepCandidate:java.lang.String startingWordFor(org.jbehave.core.steps.StepType)",
            "org.jbehave.core.steps.StepCreator:java.lang.String tableParameter(java.util.Map,java.lang.String)",
            "org.jbehave.paranamer.BytecodeReadingParanamer$TypeCollector:java.lang.String correctTypeName(org.jbehave.paranamer.BytecodeReadingParanamer$Type[],int)",
            "com.thoughtworks.xstream.io.path.PathTracker:void pushElement(java.lang.String)",
            "com.thoughtworks.xstream.io.path.PathTracker:com.thoughtworks.xstream.io.path.Path getPath()",
            "com.thoughtworks.xstream.io.xml.QNameMap:java.lang.String getJavaClassName(javax.xml.namespace.QName)",
            "com.thoughtworks.xstream.io.xml.QNameMap:javax.xml.namespace.QName getQName(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer:java.lang.String escapeName(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer:java.lang.String unescapeName(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:java.lang.String getAttribute(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom getChild(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:boolean getFeature(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:java.lang.Object getProperty(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void parse()",
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry:long getId(java.lang.String)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry:java.lang.String get(long)",
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Map buildMap(java.lang.Class,boolean)",
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.Object instantiateUsingSerialization(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.SortableFieldKeySorter:java.util.Map sort(java.lang.Class,java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:java.lang.reflect.Constructor getMungedConstructor(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$ReverseEngineeringInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$ReverseEngineeredCallbackFilter:int accept(java.lang.reflect.Method)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:net.sf.cglib.proxy.Callback[] getCallbacks(java.lang.Object)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.beans.PropertyDescriptor[] getSerializableProperties(java.lang.Object)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.beans.PropertyDescriptor getProperty(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.util.Map getNameMap(java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:com.thoughtworks.xstream.converters.javabean.BeanProperty property(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:java.util.Map buildMap(java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:com.thoughtworks.xstream.converters.javabean.BeanProperty getBeanProperty(java.util.Map,java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.ConversionException:java.lang.String get(java.lang.String)",
            "com.thoughtworks.xstream.converters.basic.StringConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.CachingMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void readObject(java.io.ObjectInputStream)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.Class defaultImplementationOf(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.LocalConversionMapper:com.thoughtworks.xstream.converters.Converter getLocalConverter(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:boolean shouldLookForSingleValueConverter(java.lang.String,java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.String)",
            "com.thoughtworks.xstream.mapper.FieldAliasingMapper:java.lang.String getMember(java.lang.Class,java.lang.String,java.util.Map)",
            "com.thoughtworks.xstream.mapper.AttributeAliasingMapper:java.lang.String aliasForAttribute(java.lang.String)",
            "com.thoughtworks.xstream.mapper.AttributeAliasingMapper:java.lang.String attributeForAlias(java.lang.String)",
            "com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:java.lang.String aliasForSystemAttribute(java.lang.String)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl getImplicitCollectionDefByItemFieldName(java.lang.String)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl getImplicitCollectionDefByFieldName(java.lang.String)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.String)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getMapper(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.EnumMapper:com.thoughtworks.xstream.converters.SingleValueConverter getLocalConverter(java.lang.String,java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:com.thoughtworks.xstream.converters.Converter cacheConverter(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary:java.lang.Object lookupId(java.lang.Object)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:java.lang.Object get(java.lang.String)",
            "com.thoughtworks.xstream.core.util.Primitives:java.lang.Class box(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.Primitives:java.lang.Class unbox(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.XmlHeaderAwareReader:void <init>(java.io.InputStream)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)",
            "com.thoughtworks.xstream.core.JVM:java.lang.Class loadClass(java.lang.String)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.MapBackedDataHolder:java.lang.Object get(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.XmlArrayList:void add(int,java.lang.Object)",
            "com.thoughtworks.xstream.persistence.XmlArrayList:java.lang.Object get(int)",
            "com.thoughtworks.xstream.persistence.XmlArrayList:java.lang.Object remove(int)",
            "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:void marshallField(com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object,java.lang.reflect.Field)",
            "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:java.lang.Object unmarshallField(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.lang.Class,java.lang.reflect.Field)"
        ]
    },
    "com.thoughtworks.xstream.persistence.XmlMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void removeId(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.XmlArrayList:java.lang.Object remove(int)"
        ]
    },
    "org.jbehave.core.i18n.LocalizedKeywords:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Configuration:void <init>()",
            "org.jbehave.core.configuration.MostUsefulConfiguration:void <init>()",
            "org.jbehave.core.model.ExamplesTableFactory:void <init>()",
            "org.jbehave.core.model.ExamplesTableFactory:void <init>(org.jbehave.core.steps.ParameterConverters)",
            "org.jbehave.core.model.ExamplesTableFactory:void <init>(org.jbehave.core.io.ResourceLoader)",
            "org.jbehave.core.parsers.RegexStoryParser:void <init>()",
            "org.jbehave.core.parsers.RegexStoryParser:void <init>(org.jbehave.core.model.ExamplesTableFactory)",
            "org.jbehave.core.reporters.ConsoleOutput:void <init>()",
            "org.jbehave.core.reporters.HtmlOutput:void <init>(java.io.PrintStream,java.util.Properties)",
            "org.jbehave.core.reporters.StoryReporterBuilder:void <init>()",
            "org.jbehave.core.reporters.TxtOutput:void <init>(java.io.PrintStream,java.util.Properties)",
            "org.jbehave.core.reporters.XmlOutput:void <init>(java.io.PrintStream,java.util.Properties)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Meta parseStoryMetaFrom(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Story parseStory(java.lang.String,java.lang.String)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Meta findScenarioMeta(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Scenario parseScenario(java.lang.String)"
        ]
    },
    "org.jbehave.core.steps.Steps:org.jbehave.core.steps.StepCandidate createCandidate(java.lang.reflect.Method,org.jbehave.core.steps.StepType,java.lang.String,int,org.jbehave.core.configuration.Configuration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.Steps:void addCandidate(java.util.List,java.lang.reflect.Method,org.jbehave.core.steps.StepType,java.lang.String,int)"
        ]
    },
    "org.jbehave.core.reporters.Format$2:org.jbehave.core.reporters.StoryReporter createStoryReporter(org.jbehave.core.reporters.FilePrintStreamFactory,org.jbehave.core.reporters.StoryReporterBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.StoryReporterBuilder:org.jbehave.core.reporters.StoryReporter reporterFor(java.lang.String,org.jbehave.core.reporters.StoryReporterBuilder$Format)",
            "org.jbehave.core.reporters.StoryReporterBuilder:org.jbehave.core.reporters.StoryReporter reporterFor(java.lang.String,org.jbehave.core.reporters.Format)"
        ]
    },
    "org.jbehave.core.model.ExamplesTable:org.jbehave.core.steps.Parameters getRowAsParameters(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.steps.ChainedParameters:java.lang.Object valueAs(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ChainedParameters:java.lang.Object valueAs(java.lang.String,java.lang.Class)"
        ]
    },
    "org.jbehave.core.steps.ConvertedParameters:java.lang.Object valueAs(java.lang.String,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ChainedParameters:java.lang.Object valueAs(java.lang.String,java.lang.Class,java.lang.Object)"
        ]
    },
    "org.jbehave.core.steps.StepCreator$5:void parametriseStep()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator$5:org.jbehave.core.steps.StepResult perform(org.jbehave.core.failures.UUIDExceptionWrapper)",
            "org.jbehave.core.steps.StepCreator$5:org.jbehave.core.steps.StepResult doNotPerform()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:java.lang.Class getFieldType(java.lang.Object,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:java.lang.Class getFieldType(java.lang.Object,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:boolean fieldDefinedInClass(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:boolean fieldDefinedInClass(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:java.lang.reflect.Field getField(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:java.lang.reflect.Field getField(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.StackTraceElementFactory:java.lang.StackTraceElement create(java.lang.String,java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.StackTraceElementFactory:java.lang.StackTraceElement nativeMethodElement(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.converters.extended.StackTraceElementFactory:java.lang.StackTraceElement unknownSourceElement(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.converters.extended.StackTraceElementFactory:java.lang.StackTraceElement element(java.lang.String,java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.converters.extended.StackTraceElementFactory:java.lang.StackTraceElement element(java.lang.String,java.lang.String,java.lang.String,int)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:java.lang.Object callReadResolve(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:java.lang.Object callWriteReplace(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.Object newInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:java.lang.Object newInstance(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.Object instantiateUsingSerialization(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.Object newInstance(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object start(com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object readField(java.io.ObjectStreamField,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object access$000(com.thoughtworks.xstream.converters.reflection.SerializableConverter,java.io.ObjectStreamField,java.lang.Class,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:java.lang.Object newInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:java.lang.Object newInstance(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:void write(java.lang.reflect.Field,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.lang.Object newInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.BeanProvider:void writeProperty(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.util.Map getNameMap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.beans.PropertyDescriptor[] getSerializableProperties(java.lang.Object)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.beans.PropertyDescriptor getProperty(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.core.util.DependencyInjectionFactory:java.lang.Object newInstance(java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:com.thoughtworks.xstream.converters.Converter cacheConverter(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ThreadSafePropertyEditor$1:java.lang.Object newInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.Pool:java.lang.Object fetchFromPool()"
        ]
    },
    "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:com.thoughtworks.xstream.converters.Converter newInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:void ensureCache(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeMarshaller$CircularReferenceException:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.io.StreamException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void writeText(java.lang.String)",
            "com.thoughtworks.xstream.io.binary.Token$Formatter:com.thoughtworks.xstream.io.binary.Token contructToken(byte)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry:java.lang.String get(long)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:void moveDown()",
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:void moveUp()",
            "com.thoughtworks.xstream.converters.reflection.SortableFieldKeySorter$FieldComparator:int compare(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ObjectAccessException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.Object newInstance(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.Object instantiateUsingSerialization(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void validateFieldAccess(java.lang.reflect.Field)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:void write(java.lang.reflect.Field,java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:net.sf.cglib.proxy.Callback[] getCallbacks(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.Map createCallbackIndexMap(net.sf.cglib.proxy.Factory)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:com.thoughtworks.xstream.converters.javabean.BeanProperty property(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.core.util.DependencyInjectionFactory:java.lang.Object newInstance(java.lang.Class,java.lang.Object[])"
        ]
    },
    "com.thoughtworks.xstream.converters.ConversionException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.json.JsonWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$DuplicateFieldException:void <init>(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$ReverseEngineeredCallbackFilter:int accept(java.lang.reflect.Method)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.Map createCallbackIndexMap(net.sf.cglib.proxy.Factory)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:net.sf.cglib.proxy.Callback createReverseEngineeredCallbackOfProperType(net.sf.cglib.proxy.Callback,int,java.util.Map)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.converters.extended.ISO8601GregorianCalendarConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$DuplicateFieldException:void <init>(java.lang.String)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.basic.DateConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller$ReferencedImplicitElementException:void <init>(java.lang.String)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller$ReferencedImplicitElementException:void <init>(java.lang.Object,com.thoughtworks.xstream.io.path.Path)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convertAnother(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.alias.CannotResolveClassException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.CannotResolveClassException:void <init>(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.XStream$InitializationException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void alias(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.XStream:void aliasType(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.XStream:void aliasPackage(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.XStream:void aliasField(java.lang.String,java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.XStream:void aliasAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.XStream:void aliasSystemAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.XStream:void useAttributeFor(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.XStream:void useAttributeFor(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.XStream:void useAttributeFor(java.lang.Class)",
            "com.thoughtworks.xstream.XStream:void addDefaultImplementation(java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.XStream:void addImmutableType(java.lang.Class)",
            "com.thoughtworks.xstream.XStream:void registerLocalConverter(java.lang.Class,java.lang.String,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.XStream:void addImplicitCollection(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.XStream:void addImplicitCollection(java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.XStream:void addImplicitCollection(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.XStream:void omitField(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.XStream:void processAnnotations(java.lang.Class[])",
            "com.thoughtworks.xstream.InitializationException:void <init>(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.StreamException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.StaxWriter:void flush()",
            "com.thoughtworks.xstream.io.xml.StaxWriter:void close()",
            "com.thoughtworks.xstream.io.xml.StaxWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.StaxWriter:void endNode()",
            "com.thoughtworks.xstream.io.xml.StaxWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.StaxWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.Dom4JDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)",
            "com.thoughtworks.xstream.io.xml.Dom4JDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)",
            "com.thoughtworks.xstream.io.xml.XppDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)",
            "com.thoughtworks.xstream.io.xml.DomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(org.xml.sax.InputSource)",
            "com.thoughtworks.xstream.io.xml.DomDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.OutputStream)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void endNode()",
            "com.thoughtworks.xstream.io.xml.XppDomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)",
            "com.thoughtworks.xstream.io.xml.XppDomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)",
            "com.thoughtworks.xstream.io.xml.JDomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)",
            "com.thoughtworks.xstream.io.xml.JDomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)",
            "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void <init>(org.dom4j.io.XMLWriter,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)",
            "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void endNode()",
            "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void close()",
            "com.thoughtworks.xstream.io.xml.StaxDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)",
            "com.thoughtworks.xstream.io.xml.StaxDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)",
            "com.thoughtworks.xstream.io.xml.StaxDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.Writer)",
            "com.thoughtworks.xstream.io.xml.StaxDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.OutputStream)",
            "com.thoughtworks.xstream.io.xml.XomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)",
            "com.thoughtworks.xstream.io.xml.XomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)",
            "com.thoughtworks.xstream.io.xml.XppReader:void <init>(java.io.Reader,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)",
            "com.thoughtworks.xstream.io.xml.XppReader:int pullNextEvent()",
            "com.thoughtworks.xstream.io.xml.XppReader:void close()",
            "com.thoughtworks.xstream.io.xml.StaxReader:int pullNextEvent()",
            "com.thoughtworks.xstream.io.xml.StaxReader:void close()",
            "com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)",
            "com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)",
            "com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.Writer)",
            "com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.OutputStream)",
            "com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.OutputStream)",
            "com.thoughtworks.xstream.io.StatefulWriter:void startNodeCommon()",
            "com.thoughtworks.xstream.io.StatefulWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.StatefulWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.StatefulWriter:void endNode()",
            "com.thoughtworks.xstream.io.StatefulWriter:void checkClosed()",
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void flush()",
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void close()",
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void write(com.thoughtworks.xstream.io.binary.Token)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:com.thoughtworks.xstream.io.binary.Token readToken()",
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:void close()",
            "com.thoughtworks.xstream.core.util.QuickWriter:void flush()",
            "com.thoughtworks.xstream.core.util.QuickWriter:void close()",
            "com.thoughtworks.xstream.core.util.QuickWriter:void raw(char[])",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:void writeFile(java.io.File,java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object readFile(java.io.File)"
        ]
    },
    "com.thoughtworks.xstream.XStream:com.thoughtworks.xstream.mapper.Mapper buildMapperDynamically(java.lang.String,java.lang.Class[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:com.thoughtworks.xstream.mapper.Mapper buildMapper()"
        ]
    },
    "com.thoughtworks.xstream.InitializationException:void <init>(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:com.thoughtworks.xstream.converters.Converter cacheConverter(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttribute(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttribute(int)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.ReaderWrapper:int getAttributeCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:int getAttributeCount()",
            "com.thoughtworks.xstream.io.AttributeNameIterator:void <init>(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.AttributeNameIterator:void <init>(com.thoughtworks.xstream.io.HierarchicalStreamReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractDocumentReader:java.util.Iterator getAttributeNames()",
            "com.thoughtworks.xstream.io.xml.AbstractPullReader:java.util.Iterator getAttributeNames()"
        ]
    },
    "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttributeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.AttributeNameIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.AttributeNameIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationBuilder:java.util.List buildCandidateSteps(org.jbehave.core.configuration.Configuration)",
            "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.steps.ParameterConverters parameterConverters(org.jbehave.core.configuration.AnnotationFinder)",
            "org.jbehave.core.embedder.Embedder:void mapStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.Embedder:void runAsEmbeddables(java.util.List)",
            "org.jbehave.core.embedder.Embedder:java.util.List embeddables(java.util.List,org.jbehave.core.embedder.EmbedderClassLoader)",
            "org.jbehave.core.embedder.Embedder:void runStoriesWithAnnotatedEmbedderRunner(java.lang.String,java.util.List)",
            "org.jbehave.core.embedder.Embedder:java.util.List annotatedEmbedderRunners(java.lang.String,java.util.List,org.jbehave.core.embedder.EmbedderClassLoader)",
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.Embedder:void processSystemProperties()",
            "org.jbehave.core.embedder.EmbedderClassLoader:java.net.URL[] classpathURLs(java.util.List)",
            "org.jbehave.core.embedder.MetaFilter:void parse(java.util.Properties,java.lang.String)",
            "org.jbehave.core.embedder.MetaFilter:java.util.Properties merge(java.util.Properties,java.util.Properties)",
            "org.jbehave.core.embedder.MetaFilter:boolean match(java.util.Properties,org.jbehave.core.model.Meta)",
            "org.jbehave.core.embedder.StoryMapper:void map(org.jbehave.core.model.Story,org.jbehave.core.embedder.MetaFilter)",
            "org.jbehave.core.embedder.StoryMapper:org.jbehave.core.model.StoryMaps getStoryMaps()",
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)",
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)",
            "org.jbehave.core.embedder.StoryRunner:void runStepsWhileKeepingState(java.util.List)",
            "org.jbehave.core.failures.BatchFailures:java.lang.String toString()",
            "org.jbehave.core.i18n.LocalizedKeywords:java.util.Map keywords(java.lang.String,java.util.Locale,java.lang.ClassLoader)",
            "org.jbehave.core.io.RelativePathCalculator:java.lang.String join(java.lang.Iterable)",
            "org.jbehave.core.junit.AnnotatedPathRunner:org.junit.runner.Description getDescription()",
            "org.jbehave.core.model.ExamplesTable:java.util.List getRowsAsParameters()",
            "org.jbehave.core.model.GivenStories:java.util.List getStories()",
            "org.jbehave.core.model.GivenStories:java.util.List getPaths()",
            "org.jbehave.core.model.GivenStories:boolean requireParameters()",
            "org.jbehave.core.model.Meta:void parse(java.util.List)",
            "org.jbehave.core.model.Meta:java.util.Set getPropertyNames()",
            "org.jbehave.core.model.Meta:org.jbehave.core.model.Meta inherit(org.jbehave.core.model.Meta,org.jbehave.core.model.Meta)",
            "org.jbehave.core.model.OutcomesTable:void verify()",
            "org.jbehave.core.model.OutcomesTable:java.lang.String toString()",
            "org.jbehave.core.model.StoryLanes:boolean inLane(java.lang.String,org.jbehave.core.model.Story)",
            "org.jbehave.core.model.StoryLanes:void nameStories(java.util.List)",
            "org.jbehave.core.model.StoryMap:java.util.List getStoryPaths()",
            "org.jbehave.core.model.StoryMaps:void index(java.util.List)",
            "org.jbehave.core.parsers.RegexPrefixCapturingPatternParser:java.lang.String[] extractParameterNames(java.lang.String)",
            "org.jbehave.core.parsers.RegexStoryParser:java.util.List parseScenariosFrom(java.lang.String)",
            "org.jbehave.core.reporters.CrossReference$XrefRoot:void <init>(java.util.List,java.util.List,org.jbehave.core.reporters.StoryReporterBuilder)",
            "org.jbehave.core.reporters.CrossReference$XrefStory:void <init>(org.jbehave.core.model.Story,org.jbehave.core.reporters.CrossReference$XrefRoot,org.jbehave.core.reporters.StoryReporterBuilder)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterScenario()",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterStory(boolean)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeScenario(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioMeta(org.jbehave.core.model.Meta)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeStory(org.jbehave.core.model.Story,boolean)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void narrative(org.jbehave.core.model.Narrative)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void example(java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterExamples()",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failed(java.lang.String,java.lang.Throwable)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(java.util.List)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void ignorable(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void notPerformed(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void pending(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void successful(java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void dryRun()",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$1:boolean hasFormats(java.lang.String,java.util.List)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void index(java.util.List)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:org.jbehave.core.reporters.FreemarkerViewGenerator$Report totals(java.util.Collection)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:int count(java.lang.String,java.util.Collection)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:java.util.List createReports(java.util.Map)",
            "org.jbehave.core.reporters.IdeOnlyConsoleOutput:boolean inIDE()",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void writeData()",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void resetData()",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.Meta)",
            "org.jbehave.core.reporters.PrintStreamOutput:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.PrintStreamOutput:void beforeExamples(java.util.List,org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.PrintStreamOutput:void print(org.jbehave.core.model.ExamplesTable)",
            "org.jbehave.core.reporters.PrintStreamStepdocReporter:void outputStepdocs(java.util.List)",
            "org.jbehave.core.reporters.PrintStreamStepdocReporter:void outputStepsInstances(java.util.List)",
            "org.jbehave.core.reporters.SilentSuccessFilter$20:void report()",
            "org.jbehave.core.reporters.StoryReporterBuilder:java.util.List formatNames(boolean)",
            "org.jbehave.core.reporters.StoryReporterBuilder:org.jbehave.core.reporters.StoryReporter build(java.lang.String)",
            "org.jbehave.core.reporters.StoryReporterBuilder:java.util.Map build(java.util.List)",
            "org.jbehave.core.steps.AbstractStepsFactory:java.util.List createCandidateSteps()",
            "org.jbehave.core.steps.ChainedParameters:java.util.Map values()",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStoriesSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterStorySteps(java.util.List,org.jbehave.core.model.Story,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List collectBeforeOrAfterScenarioSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List createSteps(java.util.List,org.jbehave.core.steps.StepCollector$Stage)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:java.util.List createStepsUponOutcome(java.util.List,org.jbehave.core.steps.StepCollector$Stage,boolean)",
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:void addMatchedScenarioSteps(org.jbehave.core.model.Scenario,java.util.List,java.util.Map,java.util.List)",
            "org.jbehave.core.steps.ParameterConverters$BooleanListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters$EnumListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters$NumberListConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters:java.lang.Object convert(java.lang.String,java.lang.reflect.Type)",
            "org.jbehave.core.steps.ParameterConverters:java.util.List trim(java.util.List)",
            "org.jbehave.core.steps.StepCandidate:org.jbehave.core.steps.StepCandidate findComposedCandidate(java.lang.String,java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List stepdocs(java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List findMatching(java.lang.String,java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List stepsInstances(java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List collectCandidates(java.util.List)",
            "org.jbehave.core.steps.Steps:java.util.List listCandidates()",
            "org.jbehave.core.steps.Steps:void checkForDuplicateCandidates(java.util.List,org.jbehave.core.steps.StepType,java.lang.String)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class,boolean)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class)",
            "org.jbehave.core.steps.Steps:java.util.List stepsHaving(org.jbehave.core.steps.StepCollector$Stage,java.lang.Class,org.jbehave.core.annotations.AfterScenario$Outcome)",
            "org.jbehave.core.steps.Steps:java.util.List annotatatedMethods(java.lang.Class)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void parse()",
            "com.thoughtworks.xstream.io.binary.ReaderDepthState$1:java.lang.Object next()",
            "com.thoughtworks.xstream.io.binary.ReaderDepthState:java.lang.String getAttribute(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Map buildMap(java.lang.Class,boolean)",
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.Map createCallbackIndexMap(net.sf.cglib.proxy.Factory)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.beans.PropertyDescriptor[] getSerializableProperties(java.lang.Object)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:java.util.Map buildMap(java.lang.Class)",
            "com.thoughtworks.xstream.converters.ConversionException:java.lang.String getMessage()",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:java.util.Set keySet()",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:java.util.Collection values()",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:void putAll(java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.String joinEnumValues(java.util.EnumSet)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.String serializedClass(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void readObject(java.io.ObjectInputStream)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean addAll(java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean removeAll(java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet:boolean retainAll(java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void addParametrizedTypes(java.lang.reflect.Type,java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processConverterAnnotations(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void cleanup()",
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:void <init>(java.util.Map)",
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.util.Set entrySet()",
            "com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.core.util.CompositeClassLoader:java.lang.Class loadClass(java.lang.String)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object start(com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:void registerConverter(com.thoughtworks.xstream.converters.Converter,int)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:java.lang.String findScenarioTitle(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Scenario parseScenario(java.lang.String)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.GivenStories findGivenStories(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Scenario parseScenario(java.lang.String)"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:java.util.List findSteps(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Scenario parseScenario(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token:void writeId(java.io.DataOutput,long,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$MapIdToValue:void writeTo(java.io.DataOutput,byte)",
            "com.thoughtworks.xstream.io.binary.Token$StartNode:void writeTo(java.io.DataOutput,byte)",
            "com.thoughtworks.xstream.io.binary.Token$Attribute:void writeTo(java.io.DataOutput,byte)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token:void writeString(java.io.DataOutput,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$MapIdToValue:void writeTo(java.io.DataOutput,byte)",
            "com.thoughtworks.xstream.io.binary.Token$Attribute:void writeTo(java.io.DataOutput,byte)",
            "com.thoughtworks.xstream.io.binary.Token$Value:void writeTo(java.io.DataOutput,byte)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token$Formatter:void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void write(com.thoughtworks.xstream.io.binary.Token)"
        ]
    },
    "com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:void marshal(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.Object,com.thoughtworks.xstream.core.DefaultConverterLookup,com.thoughtworks.xstream.alias.ClassMapper,com.thoughtworks.xstream.converters.DataHolder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.DataHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void processAnnotations(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.annotations.Annotations:void configureAliases(com.thoughtworks.xstream.XStream,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String realMember(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String realMember(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.FieldAliasingMapper:java.lang.String realMember(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.OuterClassMapper:java.lang.String realMember(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper:java.lang.String realMember(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.XmlFriendlyMapper:java.lang.String realMember(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:java.lang.String realMember(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class defaultImplementationOf(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:java.lang.Object createCollection(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class defaultImplementationOf(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.Class defaultImplementationOf(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:java.lang.Class defaultImplementationOf(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.Converter getLocalConverter(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshallField(com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object,java.lang.reflect.Field)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object unmarshallField(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.lang.Class,java.lang.reflect.Field)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.Converter getLocalConverter(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:com.thoughtworks.xstream.converters.Converter getLocalConverter(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.LocalConversionMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.EnumMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.EnumMapper:com.thoughtworks.xstream.converters.SingleValueConverter getLocalConverter(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.LocalConversionMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.EnumMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.io.path.PathTrackingReader:void moveDown()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void moveDown()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:boolean unmarshalReadOnly(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.XStream$3:java.lang.Object readFromStream()"
        ]
    },
    "com.thoughtworks.xstream.io.path.PathTrackingReader:void moveUp()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void moveUp()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:boolean unmarshalReadOnly(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.XStream$3:java.lang.Object readFromStream()"
        ]
    },
    "org.jbehave.core.steps.StepCreator:java.util.Map matchedParameters(java.lang.reflect.Method,java.lang.String,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCandidate:java.util.List createComposedSteps(java.lang.String,java.util.Map,java.util.List)"
        ]
    },
    "org.jbehave.paranamer.AnnotationParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator$5:void parametriseStep()",
            "org.jbehave.core.steps.StepCreator:java.util.Map matchedParameters(java.lang.reflect.Method,java.lang.String,java.lang.String,java.util.Map)",
            "org.jbehave.paranamer.AnnotationParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject)",
            "org.jbehave.paranamer.AnnotationParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)",
            "org.jbehave.paranamer.CachingParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)"
        ]
    },
    "org.jbehave.paranamer.BytecodeReadingParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.paranamer.CachingParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator$5:void parametriseStep()",
            "org.jbehave.core.steps.StepCreator:java.util.Map matchedParameters(java.lang.reflect.Method,java.lang.String,java.lang.String,java.util.Map)",
            "org.jbehave.paranamer.AnnotationParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)",
            "org.jbehave.paranamer.CachingParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject)",
            "org.jbehave.paranamer.CachingParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object access$600(com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:java.lang.Object getValue()"
        ]
    },
    "org.jbehave.core.embedder.Embedder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.ConfigurableEmbedder:void <init>()",
            "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.embedder.Embedder buildEmbedder()",
            "org.jbehave.core.InjectableEmbedder:void <init>()"
        ]
    },
    "org.jbehave.core.embedder.MetaFilter:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void mapStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.Embedder:void runStoriesAsPaths(java.util.List)",
            "org.jbehave.core.embedder.MetaFilter:void <clinit>()",
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.configuration.Configuration,java.util.List,org.jbehave.core.model.Story)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.configuration.Configuration:org.jbehave.core.configuration.Configuration useStoryReporter(java.lang.String,org.jbehave.core.reporters.StoryReporter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.embedder.StoryMapper:java.util.Set storiesFor(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryMapper:org.jbehave.core.model.StoryMap getStoryMap(java.lang.String)",
            "org.jbehave.core.embedder.StoryMapper:void add(java.lang.String,org.jbehave.core.model.Story)"
        ]
    },
    "org.jbehave.core.model.ExamplesTable:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.ExamplesTable:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.jbehave.core.steps.ParameterConverters)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator$Report:java.util.Map getStats()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:org.jbehave.core.reporters.FreemarkerViewGenerator$Report totals(java.util.Collection)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateViewsIndex(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateMapsView(java.io.File,org.jbehave.core.model.StoryMaps,java.util.Properties)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateNavigatorView(java.io.File,java.util.Properties)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateReportsView(java.io.File,java.util.List,java.util.Properties)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateMapsView(java.io.File,org.jbehave.core.model.StoryMaps,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void generateMapsView(org.jbehave.core.model.StoryMaps)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateNavigatorView(java.io.File,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void generateNavigatorView()"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void count(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void successful(java.lang.String)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void ignorable(java.lang.String)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void pending(java.lang.String)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void notPerformed(java.lang.String)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void failed(java.lang.String,java.lang.Throwable)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void storyNotAllowed(org.jbehave.core.model.Story,java.lang.String)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void givenStories(java.util.List)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void countScenarios(java.lang.String)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void example(java.util.Map)"
        ]
    },
    "com.thoughtworks.xstream.io.path.PathTracker:void pushElement(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.path.PathTrackingReader:void <init>(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.path.PathTracker)",
            "com.thoughtworks.xstream.io.path.PathTrackingReader:void moveDown()",
            "com.thoughtworks.xstream.io.path.PathTrackingWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.path.PathTrackingWriter:void startNode(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.QNameMap:void registerMapping(javax.xml.namespace.QName,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.QNameMap:void registerMapping(javax.xml.namespace.QName,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer:java.lang.String escapeName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractXmlWriter:java.lang.String escapeXmlName(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.AbstractXmlReader:java.lang.String escapeXmlName(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer:java.lang.String unescapeName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractXmlReader:java.lang.String unescapeXmlName(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:void setAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom build(java.io.Reader)",
            "com.thoughtworks.xstream.io.xml.XppDomWriter:void addAttribute(java.lang.String,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:void addChild(com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom build(java.io.Reader)",
            "com.thoughtworks.xstream.io.xml.XppDomWriter:java.lang.Object createNode(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.SaxWriter:void setFeature(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.SaxWriter:void setProperty(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.TraxSource:void configureXMLReader()"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry:long getId(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void addAttribute(java.lang.String,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry:void put(long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:com.thoughtworks.xstream.io.binary.Token readToken()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:java.lang.Object callReadResolve(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:java.lang.Object callWriteReplace(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:boolean supportsReadObject(java.lang.Class,boolean)",
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:void callReadObject(java.lang.Class,java.lang.Object,java.io.ObjectInputStream)",
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:boolean supportsWriteObject(java.lang.Class,boolean)",
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:void callWriteObject(java.lang.Class,java.lang.Object,java.io.ObjectOutputStream)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.FieldDictionary:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:void <init>(com.thoughtworks.xstream.converters.reflection.FieldKeySorter)",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.lang.Object readResolve()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SortableFieldKeySorter:void registerFieldOrder(java.lang.Class,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:java.lang.reflect.Constructor getMungedConstructor(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:java.lang.Object newInstance(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$ReverseEngineeringInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:net.sf.cglib.proxy.Callback[] getCallbacks(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:com.thoughtworks.xstream.converters.javabean.BeanProperty getBeanProperty(java.util.Map,java.lang.Class,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:java.util.Map buildMap(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.ConversionException:void add(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.path.PathTrackingReader:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)",
            "com.thoughtworks.xstream.io.xml.Dom4JReader:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)",
            "com.thoughtworks.xstream.io.xml.XppReader:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)",
            "com.thoughtworks.xstream.io.xml.StaxReader:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$DuplicateFieldException:void <init>(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$ReverseEngineeredCallbackFilter:int accept(java.lang.reflect.Method)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.Map createCallbackIndexMap(net.sf.cglib.proxy.Factory)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:net.sf.cglib.proxy.Callback createReverseEngineeredCallbackOfProperType(net.sf.cglib.proxy.Callback,int,java.util.Map)",
            "com.thoughtworks.xstream.converters.ConversionException:void <init>(java.lang.String,java.lang.Throwable)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller$ReferencedImplicitElementException:void <init>(java.lang.Object,com.thoughtworks.xstream.io.path.Path)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convertAnother(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:void addInformationTo(com.thoughtworks.xstream.converters.ErrorWriter,java.lang.Class)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.StringConverter:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ClassAliasingMapper:void addClassAlias(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:void addClassAttributeAlias(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAliasAnnotation(java.lang.Class,java.util.Set)",
            "com.thoughtworks.xstream.XStream:void alias(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ClassAliasingMapper:void addTypeAlias(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void aliasType(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void addPackageAlias(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void aliasPackage(java.lang.String,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:void addDefaultImplementation(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:void addDefaults()",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAliasAnnotation(java.lang.Class,java.util.Set)",
            "com.thoughtworks.xstream.XStream:void addDefaultImplementation(java.lang.Class,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.LocalConversionMapper:void registerLocalConverter(java.lang.Class,java.lang.String,com.thoughtworks.xstream.converters.Converter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processLocalConverterAnnotation(java.lang.reflect.Field)",
            "com.thoughtworks.xstream.XStream:void registerLocalConverter(java.lang.Class,java.lang.String,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeMapper:void addAttributeFor(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void useAttributeFor(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.FieldAliasingMapper:void addFieldAlias(java.lang.String,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processFieldAliasAnnotation(java.lang.reflect.Field)",
            "com.thoughtworks.xstream.XStream:void aliasField(java.lang.String,java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper:void addAliasFor(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void aliasAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.XStream:void aliasSystemAttribute(java.lang.String,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:void add(com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getOrCreateMapper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.EnumMapper:com.thoughtworks.xstream.converters.SingleValueConverter getLocalConverter(java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.EnumMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.EnumMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:com.thoughtworks.xstream.converters.Converter cacheConverter(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processConverterAnnotations(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processLocalConverterAnnotation(java.lang.reflect.Field)"
        ]
    },
    "com.thoughtworks.xstream.core.util.Primitives:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.json.JsonWriter:boolean needsQuotes(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.Primitives:java.lang.Class box(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.Primitives:java.lang.Class unbox(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.Primitives:void <clinit>()",
            "com.thoughtworks.xstream.core.util.DependencyInjectionFactory:java.lang.Object newInstance(java.lang.Class,java.lang.Object[])"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,byte)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,char)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,double)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,float)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,long)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,short)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,boolean)"
        ]
    },
    "com.thoughtworks.xstream.core.JVM:java.lang.Class loadClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.JVM:void <init>()",
            "com.thoughtworks.xstream.core.JVM:com.thoughtworks.xstream.converters.reflection.ReflectionProvider bestReflectionProvider()",
            "com.thoughtworks.xstream.core.JVM:boolean canUseSun14ReflectionProvider()",
            "com.thoughtworks.xstream.XStream:void setupAliases()",
            "com.thoughtworks.xstream.XStream:void setupImmutableTypes()"
        ]
    },
    "com.thoughtworks.xstream.core.MapBackedDataHolder:void put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:com.thoughtworks.xstream.core.util.CustomObjectInputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectInputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:com.thoughtworks.xstream.core.util.CustomObjectOutputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void put(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:void put(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.persistence.XmlArrayList:java.lang.Object set(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.persistence.XmlArrayList:void add(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.SaxWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.core.util.CompositeClassLoader:void add(java.lang.ClassLoader)"
        ]
    },
    "com.thoughtworks.xstream.persistence.XmlArrayList:java.lang.Object remove(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.SaxWriter:void endNode()",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.List hierarchyFor(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.persistence.XmlSet:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryMapper:void add(java.lang.String,org.jbehave.core.model.Story)",
            "org.jbehave.core.reporters.CrossReference$XrefStory:void <init>(org.jbehave.core.model.Story,org.jbehave.core.reporters.CrossReference$XrefRoot,org.jbehave.core.reporters.StoryReporterBuilder)",
            "com.thoughtworks.xstream.io.StatefulWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields:void add(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:void addAttributeFor(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:void addAttributeFor(java.lang.reflect.Field)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:void addAttributeFor(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.FieldAliasingMapper:void omitField(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.ImmutableTypesMapper:void addImmutableType(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$1:boolean add(java.lang.reflect.Type)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void <init>(com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterRegistry,java.lang.ClassLoader,com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.core.JVM)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void addParametrizedTypes(java.lang.reflect.Type,java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAliasAnnotation(java.lang.Class,java.util.Set)",
            "com.thoughtworks.xstream.core.util.PrioritizedList:void add(java.lang.Object,int)"
        ]
    },
    "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:void ensureCache(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:void marshallField(com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object,java.lang.reflect.Field)",
            "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:java.lang.Object unmarshallField(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.lang.Class,java.lang.reflect.Field)"
        ]
    },
    "org.jbehave.core.configuration.Configuration:org.jbehave.core.reporters.StoryReporter storyReporter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.UnmodifiableConfiguration:org.jbehave.core.reporters.StoryReporter storyReporter(java.lang.String)",
            "org.jbehave.core.embedder.StoryRunner:org.jbehave.core.reporters.StoryReporter reporterFor(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story)"
        ]
    },
    "org.jbehave.core.configuration.Keywords:java.lang.String keyword(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Keywords:void <init>(java.util.Map)"
        ]
    },
    "org.jbehave.core.model.StoryMaps:org.jbehave.core.model.StoryMap getMap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.StoryLanes:java.util.List laneStories(java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator$Report:java.util.Properties asProperties(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.FreemarkerViewGenerator$Report:java.util.Map getStats()",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:int count(java.lang.String,java.util.Collection)"
        ]
    },
    "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:org.jbehave.core.reporters.FreemarkerViewGenerator$Report getReport(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.steps.StepCandidate:java.lang.String startingWordFor(org.jbehave.core.steps.StepType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCandidate:java.lang.String getStartingWord()",
            "org.jbehave.core.steps.StepCandidate:boolean ignore(java.lang.String)",
            "org.jbehave.core.steps.StepCandidate:boolean matches(java.lang.String,java.lang.String)",
            "org.jbehave.core.steps.StepCandidate:boolean isAndStep(java.lang.String)",
            "org.jbehave.core.steps.StepCandidate:java.lang.String findStartingWord(java.lang.String)"
        ]
    },
    "org.jbehave.core.steps.StepCreator:java.lang.String tableParameter(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator:java.lang.String replaceParameterValue(java.lang.String,java.util.Map,java.lang.String)",
            "org.jbehave.core.steps.StepCreator:java.lang.String parameterForPosition(int,java.lang.String[],java.lang.String[],java.util.Map)",
            "org.jbehave.core.steps.StepCreator:boolean isTableName(java.util.Map,java.lang.String)"
        ]
    },
    "org.jbehave.paranamer.BytecodeReadingParanamer$TypeCollector:java.lang.String correctTypeName(org.jbehave.paranamer.BytecodeReadingParanamer$Type[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.paranamer.BytecodeReadingParanamer$TypeCollector:org.jbehave.paranamer.BytecodeReadingParanamer$MethodCollector visitMethod(int,java.lang.String,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.path.PathTracker:com.thoughtworks.xstream.io.path.Path getPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.path.PathTrackingReader:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)",
            "com.thoughtworks.xstream.io.path.PathTracker:java.lang.String getCurrentPath()",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller:java.lang.Object getReferenceKey(java.lang.String)",
            "com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller:java.lang.Object getCurrentReferenceKey()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.QNameMap:java.lang.String getJavaClassName(javax.xml.namespace.QName)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.StaxReader:java.lang.String pullElementName()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.QNameMap:javax.xml.namespace.QName getQName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.StaxWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.json.JettisonStaxWriter:void startNode(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:java.lang.String getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.XppDomReader:java.lang.String getAttribute(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.XppDomReader:java.lang.String getAttribute(int)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom getChild(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.SaxWriter:boolean getFeature(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.SaxWriter:java.lang.Object getProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry:java.lang.String get(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:void moveDown()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$ReverseEngineeredCallbackFilter:int accept(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.beans.PropertyDescriptor getProperty(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:void writeProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.lang.Class getPropertyType(java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:boolean propertyDefinedInClass(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:boolean propertyWriteable(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.ConversionException:java.lang.String get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.ConversionException:java.lang.String getMessage()"
        ]
    },
    "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.Class defaultImplementationOf(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:java.lang.Object createCollection(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class defaultImplementationOf(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.mapper.LocalConversionMapper:com.thoughtworks.xstream.converters.Converter getLocalConverter(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshallField(com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object,java.lang.reflect.Field)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object unmarshallField(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.lang.Class,java.lang.reflect.Field)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.Converter getLocalConverter(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.LocalConversionMapper:com.thoughtworks.xstream.converters.SingleValueConverter getLocalSingleValueConverter(java.lang.Class,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeMapper:boolean shouldLookForSingleValueConverter(java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.LocalConversionMapper:com.thoughtworks.xstream.converters.SingleValueConverter getLocalSingleValueConverter(java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.EnumMapper:com.thoughtworks.xstream.converters.SingleValueConverter getLocalConverter(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.FieldAliasingMapper:java.lang.String getMember(java.lang.Class,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.FieldAliasingMapper:java.lang.String serializedMember(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.FieldAliasingMapper:java.lang.String realMember(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeAliasingMapper:java.lang.String aliasForAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String aliasForAttribute(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeAliasingMapper:java.lang.String attributeForAlias(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String attributeForAlias(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:java.lang.String aliasForSystemAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String aliasForSystemAttribute(java.lang.String)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.String readClassAttribute(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdUnmarshaller:java.lang.Object getCurrentReferenceKey()"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl getImplicitCollectionDefByItemFieldName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:java.lang.Class getItemTypeForItemFieldName(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl getImplicitCollectionDefByFieldName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getMapper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getOrCreateMapper(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:java.lang.String getFieldNameForItemTypeAndName(java.lang.Class,java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:java.lang.Class getItemTypeForItemFieldName(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ObjectIdDictionary:java.lang.Object lookupId(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:byte get(java.lang.String,byte)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:char get(java.lang.String,char)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:double get(java.lang.String,double)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:float get(java.lang.String,float)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:int get(java.lang.String,int)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:long get(java.lang.String,long)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:short get(java.lang.String,short)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:boolean get(java.lang.String,boolean)",
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:java.lang.Object get(java.lang.String,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.util.Primitives:java.lang.Class box(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.DependencyInjectionFactory:java.lang.Object newInstance(java.lang.Class,java.lang.Object[])"
        ]
    },
    "com.thoughtworks.xstream.core.util.Primitives:java.lang.Class unbox(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.json.JsonWriter:boolean needsQuotes(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.core.util.XmlHeaderAwareReader:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.XppDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)",
            "com.thoughtworks.xstream.io.xml.XppDomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.core.MapBackedDataHolder:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:com.thoughtworks.xstream.core.util.CustomObjectInputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectInputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:com.thoughtworks.xstream.core.util.CustomObjectOutputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.TreeMarshaller:java.lang.Object get(java.lang.Object)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object get(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.persistence.XmlArrayList:java.lang.Object get(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.io.RelativePathCalculator:java.lang.Iterable calculatePath(java.util.List,java.util.List)",
            "org.jbehave.core.model.ExamplesTable:void parse()",
            "org.jbehave.core.model.ExamplesTable:java.util.Map getRow(int)",
            "org.jbehave.core.parsers.RegexPrefixCapturingPatternParser:java.lang.String replaceParametersWithCapture(java.lang.String,java.util.List)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom getChild(int)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom[] getChildren(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.DomReader:java.lang.Object getChild(int)",
            "com.thoughtworks.xstream.io.xml.Dom4JReader:java.lang.Object getChild(int)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void flushStartTag()",
            "com.thoughtworks.xstream.io.xml.XppDomWriter:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom getConfiguration()",
            "com.thoughtworks.xstream.io.xml.JDomReader:java.lang.Object getChild(int)",
            "com.thoughtworks.xstream.io.xml.JDomReader:java.lang.String getAttribute(int)",
            "com.thoughtworks.xstream.io.xml.JDomReader:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.binary.ReaderDepthState:java.lang.String getAttribute(int)",
            "com.thoughtworks.xstream.io.binary.ReaderDepthState:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:net.sf.cglib.proxy.Callback[] getCallbacks(java.lang.Object)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter$PresortedSet:java.lang.Object first()",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter$PresortedSet:java.lang.Object last()",
            "com.thoughtworks.xstream.persistence.XmlArrayList:java.lang.Object set(int,java.lang.Object)"
        ]
    },
    "org.jbehave.core.configuration.Configuration:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.MostUsefulConfiguration:void <init>()",
            "org.jbehave.core.configuration.UnmodifiableConfiguration:void <init>(org.jbehave.core.configuration.Configuration)"
        ]
    },
    "org.jbehave.core.configuration.MostUsefulConfiguration:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.ConfigurableEmbedder:void <init>()",
            "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.configuration.Configuration buildConfiguration()",
            "org.jbehave.core.configuration.PropertyBasedConfiguration:void <init>()",
            "org.jbehave.core.embedder.Embedder:void <init>(org.jbehave.core.embedder.StoryMapper,org.jbehave.core.embedder.StoryRunner,org.jbehave.core.embedder.EmbedderMonitor)",
            "org.jbehave.core.steps.Steps:void <init>()"
        ]
    },
    "org.jbehave.core.model.ExamplesTableFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:void <init>(org.jbehave.core.configuration.Keywords)",
            "org.jbehave.core.steps.ParameterConverters$ExamplesTableConverter:void <init>()"
        ]
    },
    "org.jbehave.core.model.ExamplesTableFactory:void <init>(org.jbehave.core.steps.ParameterConverters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ParameterConverters:org.jbehave.core.steps.ParameterConverters$ParameterConverter[] defaultConverters(java.util.Locale,java.lang.String)"
        ]
    },
    "org.jbehave.core.model.ExamplesTableFactory:void <init>(org.jbehave.core.io.ResourceLoader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.parsers.RegexStoryParser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.parsers.RegexStoryParser:void <init>(org.jbehave.core.model.ExamplesTableFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.reporters.ConsoleOutput:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Configuration:void <init>()",
            "org.jbehave.core.configuration.MostUsefulConfiguration:void <init>()"
        ]
    },
    "org.jbehave.core.reporters.HtmlOutput:void <init>(java.io.PrintStream,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.HtmlOutput:void <init>(java.io.PrintStream)"
        ]
    },
    "org.jbehave.core.reporters.StoryReporterBuilder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Configuration:void <init>()"
        ]
    },
    "org.jbehave.core.reporters.TxtOutput:void <init>(java.io.PrintStream,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.TxtOutput:void <init>(java.io.PrintStream)"
        ]
    },
    "org.jbehave.core.reporters.XmlOutput:void <init>(java.io.PrintStream,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.XmlOutput:void <init>(java.io.PrintStream)"
        ]
    },
    "org.jbehave.core.reporters.StoryReporterBuilder:org.jbehave.core.reporters.StoryReporter reporterFor(java.lang.String,org.jbehave.core.reporters.StoryReporterBuilder$Format)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.reporters.StoryReporterBuilder:org.jbehave.core.reporters.StoryReporter reporterFor(java.lang.String,org.jbehave.core.reporters.Format)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.StoryReporterBuilder:org.jbehave.core.reporters.StoryReporter build(java.lang.String)"
        ]
    },
    "org.jbehave.core.steps.ChainedParameters:java.lang.Object valueAs(java.lang.String,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ChainedParameters:java.lang.Object valueAs(java.lang.String,java.lang.Class,java.lang.Object)"
        ]
    },
    "org.jbehave.core.steps.StepCreator$5:org.jbehave.core.steps.StepResult perform(org.jbehave.core.failures.UUIDExceptionWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner$FineSoFar:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)"
        ]
    },
    "org.jbehave.core.steps.StepCreator$5:org.jbehave.core.steps.StepResult doNotPerform()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner$SomethingHappened:org.jbehave.core.embedder.StoryRunner$State run(org.jbehave.core.steps.Step)"
        ]
    },
    "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.StackTraceElementFactory:java.lang.StackTraceElement nativeMethodElement(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter:java.lang.Object fromString(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.StackTraceElementFactory:java.lang.StackTraceElement unknownSourceElement(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter:java.lang.Object fromString(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.StackTraceElementFactory:java.lang.StackTraceElement element(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter:java.lang.Object fromString(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.StackTraceElementFactory:java.lang.StackTraceElement element(java.lang.String,java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter:java.lang.Object fromString(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:java.lang.Object newInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.ReflectionProviderWrapper:java.lang.Object newInstance(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object access$000(com.thoughtworks.xstream.converters.reflection.SerializableConverter,java.io.ObjectStreamField,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.core.util.Pool:java.lang.Object fetchFromPool()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat:java.text.DateFormat fetchFromPool()",
            "com.thoughtworks.xstream.core.util.ThreadSafePropertyEditor:java.beans.PropertyEditor fetchFromPool()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void writeText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void writeAttributeValue(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void writeText(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token$Formatter:com.thoughtworks.xstream.io.binary.Token contructToken(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$Formatter:com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SortableFieldKeySorter$FieldComparator:int compare(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SortableFieldKeySorter$FieldComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void validateFieldAccess(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:void setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CharArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.BitSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$DuplicateFieldException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields:void add(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:net.sf.cglib.proxy.Callback createReverseEngineeredCallbackOfProperType(net.sf.cglib.proxy.Callback,int,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.Map createCallbackIndexMap(net.sf.cglib.proxy.Factory)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.StackTraceElementConverter:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.ISO8601GregorianCalendarConverter:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ISO8601DateConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$DuplicateFieldException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.basic.DateConverter:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.AbstractReferenceMarshaller$ReferencedImplicitElementException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.CannotResolveClassException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.DefaultMapper:java.lang.Class realClass(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void alias(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.CrossReference:com.thoughtworks.xstream.XStream configure(com.thoughtworks.xstream.XStream)",
            "com.thoughtworks.xstream.XStream:void setupAliases()",
            "com.thoughtworks.xstream.XStream:void alias(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void aliasType(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void setupAliases()"
        ]
    },
    "com.thoughtworks.xstream.XStream:void aliasPackage(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void aliasField(java.lang.String,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void aliasAttribute(java.lang.Class,java.lang.String,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void aliasAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.alias.ClassMapper,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void aliasSystemAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void useAttributeFor(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void useAttributeFor(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void aliasAttribute(java.lang.Class,java.lang.String,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void useAttributeFor(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void addDefaultImplementation(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void setupDefaultImplementations()",
            "com.thoughtworks.xstream.XStream:void alias(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void addImmutableType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void setupImmutableTypes()"
        ]
    },
    "com.thoughtworks.xstream.XStream:void registerLocalConverter(java.lang.Class,java.lang.String,com.thoughtworks.xstream.converters.Converter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void registerLocalConverter(java.lang.Class,java.lang.String,com.thoughtworks.xstream.converters.SingleValueConverter)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void addImplicitCollection(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void addImplicitCollection(java.lang.Class,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void addImplicitCollection(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void omitField(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.CrossReference:com.thoughtworks.xstream.XStream configure(com.thoughtworks.xstream.XStream)"
        ]
    },
    "com.thoughtworks.xstream.InitializationException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:void addDefaultImplementation(java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processConverterAnnotations(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAliasAnnotation(java.lang.Class,java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processImplicitCollectionAnnotation(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processFieldAliasAnnotation(java.lang.reflect.Field)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAsAttributeAnnotation(java.lang.reflect.Field)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processImplicitAnnotation(java.lang.reflect.Field)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processOmitFieldAnnotation(java.lang.reflect.Field)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processLocalConverterAnnotation(java.lang.reflect.Field)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxWriter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void flush()",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void flush()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void flush()",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.Writer)",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.Dom4JDriver$1:void close()",
            "com.thoughtworks.xstream.io.WriterWrapper:void close()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxWriter:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxWriter:void endNode()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void endNode()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.basic.NullConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxWriter:void setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CharArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.BitSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxWriter:void startNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractXmlWriter:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.json.JettisonStaxWriter:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.Reader)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.DomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(org.xml.sax.InputSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.DomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)",
            "com.thoughtworks.xstream.io.xml.DomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.DomDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.SaxWriter:void startNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractXmlWriter:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.SaxWriter:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.SaxWriter:void setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CharArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.BitSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.SaxWriter:void endNode()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void endNode()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.basic.NullConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.JDomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.Reader)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.JDomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void <init>(org.dom4j.io.XMLWriter,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.Dom4JDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.Writer)",
            "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void <init>(org.dom4j.io.XMLWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void startNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractXmlWriter:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CharArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.BitSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void endNode()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void endNode()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.basic.NullConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.Dom4JDriver$1:void close()",
            "com.thoughtworks.xstream.io.WriterWrapper:void close()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.Reader)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.Writer)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.Writer)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.Writer,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.Reader)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppReader:void <init>(java.io.Reader,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.XppDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)",
            "com.thoughtworks.xstream.io.xml.XppReader:void <init>(java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppReader:int pullNextEvent()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractPullReader:com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppReader:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void close()",
            "com.thoughtworks.xstream.XStream$3:void close()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxReader:int pullNextEvent()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractPullReader:com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxReader:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void close()",
            "com.thoughtworks.xstream.XStream$3:void close()"
        ]
    },
    "com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.Reader)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.Writer)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.Writer)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.Writer,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.StatefulWriter:void startNodeCommon()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.StatefulWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.StatefulWriter:void startNode(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.StatefulWriter:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.StatefulWriter:void setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CharArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.BitSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.io.StatefulWriter:void endNode()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void endNode()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.basic.NullConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)",
            "com.thoughtworks.xstream.XStream$2:void close()"
        ]
    },
    "com.thoughtworks.xstream.io.StatefulWriter:void checkClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.StatefulWriter:void startNodeCommon()",
            "com.thoughtworks.xstream.io.StatefulWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.StatefulWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.StatefulWriter:void endNode()",
            "com.thoughtworks.xstream.io.StatefulWriter:void flush()"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void flush()",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void flush()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void flush()",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.Writer)",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.Dom4JDriver$1:void close()",
            "com.thoughtworks.xstream.io.WriterWrapper:void close()"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void write(com.thoughtworks.xstream.io.binary.Token)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void endNode()",
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void access$100(com.thoughtworks.xstream.io.binary.BinaryStreamWriter,com.thoughtworks.xstream.io.binary.Token)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamReader:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void close()",
            "com.thoughtworks.xstream.XStream$3:void close()"
        ]
    },
    "com.thoughtworks.xstream.core.util.QuickWriter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void endNode()",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void flush()",
            "com.thoughtworks.xstream.io.json.JsonWriter:void endNode()",
            "com.thoughtworks.xstream.io.json.JsonWriter:void flush()",
            "com.thoughtworks.xstream.core.util.QuickWriter:void write(java.lang.String)",
            "com.thoughtworks.xstream.core.util.QuickWriter:void write(char)",
            "com.thoughtworks.xstream.core.util.QuickWriter:void write(char[])"
        ]
    },
    "com.thoughtworks.xstream.core.util.QuickWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void close()",
            "com.thoughtworks.xstream.io.json.JsonWriter:void close()"
        ]
    },
    "com.thoughtworks.xstream.core.util.QuickWriter:void raw(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.QuickWriter:void write(java.lang.String)",
            "com.thoughtworks.xstream.core.util.QuickWriter:void write(char[])"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:void writeFile(java.io.File,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:void add(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:void add(java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processImplicitCollectionAnnotation(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processImplicitAnnotation(java.lang.reflect.Field)",
            "com.thoughtworks.xstream.XStream:void addImplicitCollection(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.XStream:void addImplicitCollection(java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.XStream:void addImplicitCollection(java.lang.Class,java.lang.String,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractDocumentReader:java.util.Iterator getAttributeNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.util.Iterator getAttributeNames()",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractPullReader:java.util.Iterator getAttributeNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.util.Iterator getAttributeNames()",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token$MapIdToValue:void writeTo(java.io.DataOutput,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$Formatter:void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token$StartNode:void writeTo(java.io.DataOutput,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$Formatter:void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token$Attribute:void writeTo(java.io.DataOutput,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$Formatter:void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.Token$Value:void writeTo(java.io.DataOutput,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.Token$Formatter:void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.SaxWriter:void parse()",
            "com.thoughtworks.xstream.XStream$2:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.Writer)",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)"
        ]
    },
    "com.thoughtworks.xstream.mapper.FieldAliasingMapper:java.lang.String realMember(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String realMember(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.OuterClassMapper:java.lang.String realMember(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String realMember(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper:java.lang.String realMember(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String realMember(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.XmlFriendlyMapper:java.lang.String realMember(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String realMember(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.LocalConversionMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.EnumMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.LocalConversionMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.EnumMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String)"
        ]
    },
    "org.jbehave.paranamer.AnnotationParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.paranamer.CachingParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:java.lang.Object getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter$PresortedMap:java.util.Collection values()",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:void <init>(java.util.Map)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:boolean equals(java.lang.Object)"
        ]
    },
    "org.jbehave.core.ConfigurableEmbedder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.junit.JUnitStories:void <init>()",
            "org.jbehave.core.junit.JUnitStory:void <init>()",
            "org.jbehave.core.junit.JUnitStoryMaps:void <init>()"
        ]
    },
    "org.jbehave.core.InjectableEmbedder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.embedder.StoryMapper:org.jbehave.core.model.StoryMap getStoryMap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryMapper:org.jbehave.core.model.StoryMaps getStoryMaps()"
        ]
    },
    "org.jbehave.core.embedder.StoryMapper:void add(java.lang.String,org.jbehave.core.model.Story)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryMapper:void map(org.jbehave.core.model.Story,org.jbehave.core.embedder.MetaFilter)"
        ]
    },
    "org.jbehave.core.model.ExamplesTable:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.jbehave.core.steps.ParameterConverters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.ExamplesTable:void <init>(java.lang.String,java.lang.String,java.lang.String)",
            "org.jbehave.core.model.ExamplesTableFactory:org.jbehave.core.model.ExamplesTable createExamplesTable(java.lang.String)"
        ]
    },
    "org.jbehave.core.embedder.Embedder:void generateMapsView(org.jbehave.core.model.StoryMaps)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.Embedder:void mapStoriesAsPaths(java.util.List)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void successful(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void successful(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$10:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void successful(java.lang.String)",
            "org.jbehave.core.steps.AbstractStepResult$Successful:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void ignorable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void ignorable(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$5:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void ignorable(java.lang.String)",
            "org.jbehave.core.steps.AbstractStepResult$Ignorable:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void pending(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void pending(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$9:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void pending(java.lang.String)",
            "org.jbehave.core.steps.AbstractStepResult$Pending:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void notPerformed(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void notPerformed(java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$8:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void notPerformed(java.lang.String)",
            "org.jbehave.core.steps.AbstractStepResult$NotPerformed:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void failed(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failed(java.lang.String,java.lang.Throwable)",
            "org.jbehave.core.reporters.SilentSuccessFilter$6:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void failed(java.lang.String,java.lang.Throwable)",
            "org.jbehave.core.steps.AbstractStepResult$Failed:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.reporters.SilentSuccessFilter$7:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void failedOutcomes(java.lang.String,org.jbehave.core.model.OutcomesTable)",
            "org.jbehave.core.steps.AbstractStepResult$Failed:void describeTo(org.jbehave.core.reporters.StoryReporter)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void givenStories(org.jbehave.core.model.GivenStories)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runGivenStories(org.jbehave.core.model.Scenario,org.jbehave.core.embedder.StoryRunner$RunContext)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(org.jbehave.core.model.GivenStories)",
            "org.jbehave.core.reporters.SilentSuccessFilter$15:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void givenStories(org.jbehave.core.model.GivenStories)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void givenStories(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.DelegatingStoryReporter:void givenStories(java.util.List)",
            "org.jbehave.core.reporters.SilentSuccessFilter$16:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void givenStories(java.util.List)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)",
            "org.jbehave.core.reporters.SilentSuccessFilter$13:void report()",
            "org.jbehave.core.reporters.StepFailureDecorator:void scenarioNotAllowed(org.jbehave.core.model.Scenario,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void countScenarios(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void afterScenario()"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void example(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void runParametrisedScenariosByExamples(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Scenario)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void example(java.util.Map)",
            "org.jbehave.core.reporters.SilentSuccessFilter$18:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void example(java.util.Map)"
        ]
    },
    "com.thoughtworks.xstream.io.path.PathTrackingReader:void <init>(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.path.PathTracker)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller:void <init>(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.io.path.PathTrackingWriter:void startNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.path.PathTrackingWriter:void startNode(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.QNameMap:void registerMapping(javax.xml.namespace.QName,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.AbstractXmlWriter:java.lang.String escapeXmlName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.path.PathTrackingWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.path.PathTrackingWriter:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.xml.StaxWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.StaxWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.XomWriter:java.lang.Object createNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.XomWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.JDomWriter:java.lang.Object createNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.JDomWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.XppDomWriter:java.lang.Object createNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.XppDomWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.Dom4JWriter:java.lang.Object createNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.Dom4JWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.DomWriter:java.lang.Object createNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.DomWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.json.JettisonStaxWriter:void startNode(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractXmlReader:java.lang.String escapeXmlName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.XppReader:java.lang.String getAttribute(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractXmlReader:java.lang.String unescapeXmlName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.XomReader:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.xml.XomReader:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.xml.XppDomReader:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.xml.XppDomReader:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.xml.DomReader:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.xml.DomReader:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.xml.Dom4JReader:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.xml.Dom4JReader:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.xml.AbstractPullReader:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.xml.JDomReader:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.xml.JDomReader:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.xml.XppReader:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.xml.StaxReader:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller:java.lang.Object getReferenceKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppDomWriter:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppDomWriter:java.lang.Object createNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractDocumentWriter:void startNode(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.TraxSource:void configureXMLReader()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.TraxSource:void setXStream(com.thoughtworks.xstream.XStream)",
            "com.thoughtworks.xstream.io.xml.TraxSource:void setSourceAsList(java.util.List)",
            "com.thoughtworks.xstream.io.xml.TraxSource:void createXMLReader(org.xml.sax.XMLReader)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void startNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:boolean supportsReadObject(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:boolean isSerializable(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:boolean supportsWriteObject(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:boolean isSerializable(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.FieldDictionary:void <init>(com.thoughtworks.xstream.converters.reflection.FieldKeySorter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:void <init>()",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void <init>()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.path.PathTrackingReader:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:void addInformationTo(com.thoughtworks.xstream.converters.ErrorWriter,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JReader:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:void addInformationTo(com.thoughtworks.xstream.converters.ErrorWriter,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppReader:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:void addInformationTo(com.thoughtworks.xstream.converters.ErrorWriter,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxReader:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:void addInformationTo(com.thoughtworks.xstream.converters.ErrorWriter,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:void addInformationTo(com.thoughtworks.xstream.converters.ErrorWriter,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ClassAliasingMapper:void addClassAttributeAlias(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAliasAnnotation(java.lang.Class,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)"
        ]
    },
    "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:void addDefaults()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:void <init>(com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void processLocalConverterAnnotation(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void processFieldAliasAnnotation(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)"
        ]
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:boolean needsQuotes(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.json.JsonWriter:void writeText(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,short)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.JVM:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.JVM:void main(java.lang.String[])",
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.ClassLoader,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.converters.ConverterRegistry)",
            "com.thoughtworks.xstream.XStream:java.lang.Object readResolve()"
        ]
    },
    "com.thoughtworks.xstream.core.JVM:com.thoughtworks.xstream.converters.reflection.ReflectionProvider bestReflectionProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.ClassLoader,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.converters.ConverterRegistry)"
        ]
    },
    "com.thoughtworks.xstream.core.JVM:boolean canUseSun14ReflectionProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.JVM:com.thoughtworks.xstream.converters.reflection.ReflectionProvider bestReflectionProvider()",
            "com.thoughtworks.xstream.core.JVM:void main(java.lang.String[])"
        ]
    },
    "com.thoughtworks.xstream.XStream:void setupAliases()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.ClassLoader,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.converters.ConverterRegistry)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void setupImmutableTypes()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.ClassLoader,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.converters.ConverterRegistry)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeMarshaller:void put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:com.thoughtworks.xstream.core.util.CustomObjectInputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectInputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:com.thoughtworks.xstream.core.util.CustomObjectOutputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void put(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:void put(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:void put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:com.thoughtworks.xstream.core.util.CustomObjectInputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectInputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:com.thoughtworks.xstream.core.util.CustomObjectOutputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void put(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:void put(java.lang.Object,java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Configuration:org.jbehave.core.configuration.Configuration useStoryReporter(java.lang.String,org.jbehave.core.reporters.StoryReporter)",
            "org.jbehave.core.configuration.Keywords:java.util.Map defaultKeywords()",
            "org.jbehave.core.configuration.Keywords:java.util.Map startingWordsByType()",
            "org.jbehave.core.embedder.StoryMapper:java.util.Set storiesFor(java.lang.String)",
            "org.jbehave.core.i18n.LocalizedKeywords:java.util.Map keywords(java.lang.String,java.util.Locale,java.lang.ClassLoader)",
            "org.jbehave.core.model.ExamplesTable:void parse()",
            "org.jbehave.core.model.StoryMaps:void index(java.util.List)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$Report:java.util.Map getStats()",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void index(java.util.List)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:void addTotalsReport()",
            "org.jbehave.core.reporters.FreemarkerViewGenerator$ReportsTable:org.jbehave.core.reporters.FreemarkerViewGenerator$Report totals(java.util.Collection)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateViewsIndex(java.io.File)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateMapsView(java.io.File,org.jbehave.core.model.StoryMaps,java.util.Properties)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateNavigatorView(java.io.File,java.util.Properties)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:void generateReportsView(java.io.File,java.util.List,java.util.Properties)",
            "org.jbehave.core.reporters.FreemarkerViewGenerator:java.util.List createReports(java.util.Map)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void count(java.lang.String)",
            "org.jbehave.core.reporters.PostStoryStatisticsCollector:void resetData()",
            "org.jbehave.core.reporters.StoryReporterBuilder:org.jbehave.core.reporters.StoryReporter build(java.lang.String)",
            "org.jbehave.core.reporters.StoryReporterBuilder:java.util.Map build(java.util.List)",
            "org.jbehave.core.steps.ChainedParameters:java.util.Map values()",
            "org.jbehave.core.steps.StepCreator:java.util.Map matchedParameters(java.lang.reflect.Method,java.lang.String,java.lang.String,java.util.Map)",
            "com.thoughtworks.xstream.io.path.PathTracker:void pushElement(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.QNameMap:void registerMapping(javax.xml.namespace.QName,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer:java.lang.String escapeName(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer:java.lang.String unescapeName(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:void setAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:void addChild(com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void setFeature(java.lang.String,boolean)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void setProperty(java.lang.String,java.lang.Object)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry:long getId(java.lang.String)",
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry:void put(long,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:void init()",
            "com.thoughtworks.xstream.converters.reflection.FieldDictionary:java.util.Map buildMap(java.lang.Class,boolean)",
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:java.lang.Object instantiateUsingSerialization(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.SortableFieldKeySorter:java.util.Map sort(java.lang.Class,java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SortableFieldKeySorter:void registerFieldOrder(java.lang.Class,java.lang.String[])",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:java.lang.reflect.Constructor getMungedConstructor(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter$ReverseEngineeringInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:net.sf.cglib.proxy.Callback[] getCallbacks(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.Map createCallbackIndexMap(net.sf.cglib.proxy.Factory)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.util.Map getNameMap(java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:java.util.Map buildMap(java.lang.Class)",
            "com.thoughtworks.xstream.converters.javabean.PropertyDictionary:com.thoughtworks.xstream.converters.javabean.BeanProperty getBeanProperty(java.util.Map,java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.ConversionException:void add(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.converters.basic.StringConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:void addClassAlias(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:void addTypeAlias(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.ClassAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.CachingMapper:java.lang.Class realClass(java.lang.String)",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void addPackageAlias(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.mapper.PackageAliasingMapper:void readObject(java.io.ObjectInputStream)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:void addDefaultImplementation(java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.LocalConversionMapper:void registerLocalConverter(java.lang.Class,java.lang.String,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:void addAttributeFor(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.FieldAliasingMapper:void addFieldAlias(java.lang.String,java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper:void addAliasFor(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.mapper.AbstractAttributeAliasingMapper:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:void add(com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getOrCreateMapper(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.EnumMapper:com.thoughtworks.xstream.converters.SingleValueConverter getLocalConverter(java.lang.String,java.lang.Class,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:com.thoughtworks.xstream.converters.Converter cacheConverter(java.lang.Class)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void associateId(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.core.util.OrderRetainingMap:void <init>(java.util.Map)",
            "com.thoughtworks.xstream.core.util.Primitives:void <clinit>()",
            "com.thoughtworks.xstream.core.util.XmlHeaderAwareReader:java.util.Map getHeader(java.io.PushbackInputStream[])",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void put(java.lang.String,java.lang.Object)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)",
            "com.thoughtworks.xstream.core.JVM:java.lang.Class loadClass(java.lang.String)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.MapBackedDataHolder:void put(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.annotations.AnnotationReflectionConverter:void ensureCache(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CompositeClassLoader:void add(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CompositeClassLoader:void <init>()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.List hierarchyFor(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.core.util.OrderRetainingMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.util.Map createCallbackIndexMap(net.sf.cglib.proxy.Factory)",
            "com.thoughtworks.xstream.core.util.ObjectIdDictionary:void removeId(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields:void add(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeMapper:void addAttributeFor(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void useAttributeFor(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeMapper:void addAttributeFor(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAsAttributeAnnotation(java.lang.reflect.Field)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AttributeMapper:void addAttributeFor(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void useAttributeFor(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.FieldAliasingMapper:void omitField(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processOmitFieldAnnotation(java.lang.reflect.Field)",
            "com.thoughtworks.xstream.XStream:void omitField(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImmutableTypesMapper:void addImmutableType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void addImmutableType(java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper$1:boolean add(java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper$1:boolean add(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void <init>(com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterRegistry,java.lang.ClassLoader,com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.core.JVM)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.PrioritizedList:void add(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.TreeUnmarshaller:void addCompletionCallback(java.lang.Runnable,int)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:void registerConverter(com.thoughtworks.xstream.converters.Converter,int)"
        ]
    },
    "org.jbehave.core.configuration.UnmodifiableConfiguration:org.jbehave.core.reporters.StoryReporter storyReporter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.UnmodifiableConfiguration:org.jbehave.core.reporters.StoryReporter storyReporter(java.lang.String)",
            "org.jbehave.core.embedder.StoryRunner:org.jbehave.core.reporters.StoryReporter reporterFor(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story)"
        ]
    },
    "org.jbehave.core.embedder.StoryRunner:org.jbehave.core.reporters.StoryReporter reporterFor(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)"
        ]
    },
    "org.jbehave.core.configuration.Keywords:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Keywords:void <init>()",
            "org.jbehave.core.i18n.LocalizedKeywords:void <init>(java.util.Locale,java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.jbehave.core.steps.StepCandidate:java.lang.String getStartingWord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCandidate:org.jbehave.core.steps.StepCandidate findComposedCandidate(java.lang.String,java.util.List)",
            "org.jbehave.core.steps.Stepdoc:void <init>(org.jbehave.core.steps.StepCandidate)"
        ]
    },
    "org.jbehave.core.steps.StepCandidate:boolean ignore(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:void addMatchedScenarioSteps(org.jbehave.core.model.Scenario,java.util.List,java.util.Map,java.util.List)"
        ]
    },
    "org.jbehave.core.steps.StepCandidate:boolean matches(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:boolean matchesCandidate(java.lang.String,java.lang.String,org.jbehave.core.steps.StepCandidate)",
            "org.jbehave.core.steps.StepCandidate:boolean matches(java.lang.String)"
        ]
    },
    "org.jbehave.core.steps.StepCandidate:boolean isAndStep(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:void addMatchedScenarioSteps(org.jbehave.core.model.Scenario,java.util.List,java.util.Map,java.util.List)",
            "org.jbehave.core.steps.StepCandidate:boolean matches(java.lang.String,java.lang.String)"
        ]
    },
    "org.jbehave.core.steps.StepCandidate:java.lang.String findStartingWord(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCandidate:boolean matches(java.lang.String,java.lang.String)",
            "org.jbehave.core.steps.StepCandidate:java.lang.String stripStartingWord(java.lang.String)"
        ]
    },
    "org.jbehave.core.steps.StepCreator:java.lang.String replaceParameterValue(java.lang.String,java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator:java.lang.String replaceParameterValuesInStep(java.lang.String,int,java.lang.String[],java.lang.String[],java.lang.String[],java.util.Map)"
        ]
    },
    "org.jbehave.core.steps.StepCreator:java.lang.String parameterForPosition(int,java.lang.String[],java.lang.String[],java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator:java.lang.String[] parametersForStep(java.util.Map,java.lang.reflect.Type[],java.lang.String[],java.lang.String[])"
        ]
    },
    "org.jbehave.core.steps.StepCreator:boolean isTableName(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator:java.lang.String parameterForPosition(int,java.lang.String[],java.lang.String[],java.util.Map)"
        ]
    },
    "org.jbehave.paranamer.BytecodeReadingParanamer$TypeCollector:org.jbehave.paranamer.BytecodeReadingParanamer$MethodCollector visitMethod(int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:int readMethod(org.jbehave.paranamer.BytecodeReadingParanamer$TypeCollector,char[],int)"
        ]
    },
    "com.thoughtworks.xstream.io.path.PathTracker:java.lang.String getCurrentPath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller:java.lang.Object getReferenceKey(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller:java.lang.Object getCurrentReferenceKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxReader:java.lang.String pullElementName()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractPullReader:void move()",
            "com.thoughtworks.xstream.io.xml.AbstractPullReader:com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()"
        ]
    },
    "com.thoughtworks.xstream.io.json.JettisonStaxWriter:void startNode(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppDomReader:java.lang.String getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttribute(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.String readClassAttribute(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdUnmarshaller:java.lang.Object getCurrentReferenceKey()"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.BeanProvider:java.lang.Class getPropertyType(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.BeanProvider:boolean propertyDefinedInClass(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.javabean.BeanProvider:boolean propertyWriteable(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.LocalConversionMapper:com.thoughtworks.xstream.converters.SingleValueConverter getLocalSingleValueConverter(java.lang.Class,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.LocalConversionMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromAttribute(java.lang.Class,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.LocalConversionMapper:com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.mapper.FieldAliasingMapper:java.lang.String serializedMember(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedMember(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String aliasForAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String aliasForAttribute(java.lang.String)",
            "com.thoughtworks.xstream.mapper.AttributeAliasingMapper:java.lang.String aliasForAttribute(java.lang.String)",
            "com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:java.lang.String aliasForSystemAttribute(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String attributeForAlias(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String attributeForAlias(java.lang.String)",
            "com.thoughtworks.xstream.mapper.AttributeAliasingMapper:java.lang.String attributeForAlias(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String aliasForSystemAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String aliasForSystemAttribute(java.lang.String)",
            "com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:java.lang.String aliasForSystemAttribute(java.lang.String)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.String readClassAttribute(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdUnmarshaller:java.lang.Object getCurrentReferenceKey()"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass:java.lang.Class getItemTypeForItemFieldName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:java.lang.Class getItemTypeForItemFieldName(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:java.lang.Class getItemTypeForItemFieldName(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class getItemTypeForItemFieldName(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:byte get(java.lang.String,byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:char get(java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:double get(java.lang.String,double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:float get(java.lang.String,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:int get(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:long get(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:short get(java.lang.String,short)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:boolean get(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream$CustomGetField:java.lang.Object get(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.TreeMarshaller:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:com.thoughtworks.xstream.core.util.CustomObjectInputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectInputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:com.thoughtworks.xstream.core.util.CustomObjectOutputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.TreeMarshaller:java.lang.Object get(java.lang.Object)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object get(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:com.thoughtworks.xstream.core.util.CustomObjectInputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectInputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:com.thoughtworks.xstream.core.util.CustomObjectOutputStream getInstance(com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)",
            "com.thoughtworks.xstream.core.TreeMarshaller:java.lang.Object get(java.lang.Object)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object get(java.lang.Object)"
        ]
    },
    "org.jbehave.core.io.RelativePathCalculator:java.lang.Iterable calculatePath(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.io.RelativePathCalculator:java.lang.String calculate(java.lang.String,java.lang.String)"
        ]
    },
    "org.jbehave.core.model.ExamplesTable:java.util.Map getRow(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.ExamplesTable:org.jbehave.core.steps.Parameters getRowAsParameters(int)",
            "org.jbehave.core.model.GivenStories:java.util.Map parametersByAnchor(java.lang.String)"
        ]
    },
    "org.jbehave.core.parsers.RegexPrefixCapturingPatternParser:java.lang.String replaceParametersWithCapture(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexPrefixCapturingPatternParser:java.util.regex.Pattern buildPattern(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom getChild(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.XppDomReader:java.lang.Object getChild(int)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom[] getChildren(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.DomReader:java.lang.Object getChild(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractDocumentReader:void moveDown()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JReader:java.lang.Object getChild(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractDocumentReader:void moveDown()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.SaxWriter:void flushStartTag()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.SaxWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.SaxWriter:void endNode()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppDomWriter:com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom getConfiguration()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.JDomReader:java.lang.Object getChild(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractDocumentReader:void moveDown()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.JDomReader:java.lang.String getAttribute(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttribute(int)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.JDomReader:java.lang.String getAttributeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.AttributeNameIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.ReaderDepthState:java.lang.String getAttribute(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:java.lang.String getAttribute(int)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.ReaderDepthState:java.lang.String getAttributeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.BinaryStreamReader:java.lang.String getAttributeName(int)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.TreeSetConverter$PresortedSet:java.lang.Object first()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.collections.TreeSetConverter$PresortedSet:java.lang.Object last()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.configuration.UnmodifiableConfiguration:void <init>(org.jbehave.core.configuration.Configuration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.configuration.PropertyBasedConfiguration:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.steps.Steps:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.parsers.RegexStoryParser:void <init>(org.jbehave.core.configuration.Keywords)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Configuration:void <init>()",
            "org.jbehave.core.configuration.MostUsefulConfiguration:void <init>()",
            "org.jbehave.core.parsers.RegexStoryParser:void <init>()"
        ]
    },
    "org.jbehave.core.steps.ParameterConverters$ExamplesTableConverter:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.steps.ParameterConverters:org.jbehave.core.steps.ParameterConverters$ParameterConverter[] defaultConverters(java.util.Locale,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ParameterConverters:void <init>(org.jbehave.core.steps.StepMonitor,java.util.Locale,java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.HtmlOutput:void <init>(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.reporters.TxtOutput:void <init>(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.IdeOnlyConsoleOutput:void <init>()"
        ]
    },
    "org.jbehave.core.reporters.XmlOutput:void <init>(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat:java.text.DateFormat fetchFromPool()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat:java.lang.String format(java.util.Date)",
            "com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat:java.util.Date parse(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ThreadSafePropertyEditor:java.beans.PropertyEditor fetchFromPool()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.ThreadSafePropertyEditor:java.lang.String getAsText(java.lang.Object)",
            "com.thoughtworks.xstream.core.util.ThreadSafePropertyEditor:java.lang.Object setAsText(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void writeAttributeValue(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void addAttribute(java.lang.String,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void writeText(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void setValue(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SortableFieldKeySorter$FieldComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.WriterWrapper:void setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.StatefulWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CharArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.BitSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.collections.CharArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.BitSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.enums.EnumConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.ISO8601DateConverter:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ISO8601SqlTimestampConverter:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.CrossReference:com.thoughtworks.xstream.XStream configure(com.thoughtworks.xstream.XStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.CrossReference:void outputFile(java.lang.String,com.thoughtworks.xstream.XStream,org.jbehave.core.reporters.CrossReference$XrefRoot,org.jbehave.core.reporters.StoryReporterBuilder)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void alias(java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void aliasAttribute(java.lang.Class,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:void setupDefaultImplementations()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.lang.ClassLoader,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.converters.ConverterRegistry)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void registerLocalConverter(java.lang.Class,java.lang.String,com.thoughtworks.xstream.converters.SingleValueConverter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void processImplicitCollectionAnnotation(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAsAttributeAnnotation(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void processImplicitAnnotation(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper:void processOmitFieldAnnotation(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)"
        ]
    },
    "com.thoughtworks.xstream.io.WriterWrapper:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void flush()",
            "com.thoughtworks.xstream.io.StatefulWriter:void flush()",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void flush()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void flush()",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.Writer)",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void flush()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void flush()"
        ]
    },
    "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy:void writeFile(java.io.File,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.lang.String toXML(java.lang.Object)",
            "com.thoughtworks.xstream.XStreamer:void toXML(com.thoughtworks.xstream.XStream,java.lang.Object,java.io.Writer)"
        ]
    },
    "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.Dom4JDriver$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.CrossReference:void outputFile(java.lang.String,com.thoughtworks.xstream.XStream,org.jbehave.core.reporters.CrossReference$XrefRoot,org.jbehave.core.reporters.StoryReporterBuilder)",
            "com.thoughtworks.xstream.core.util.QuickWriter:void close()"
        ]
    },
    "com.thoughtworks.xstream.io.WriterWrapper:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.Dom4JDriver$1:void close()",
            "com.thoughtworks.xstream.io.WriterWrapper:void close()",
            "com.thoughtworks.xstream.io.StatefulWriter:void close()"
        ]
    },
    "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.StatefulWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.WriterWrapper:void endNode()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.path.PathTrackingWriter:void endNode()",
            "com.thoughtworks.xstream.io.StatefulWriter:void endNode()"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.NullConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractXmlWriter:void startNode(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.path.PathTrackingWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.StatefulWriter:void startNode(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.basic.NullConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.DomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.Reader)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.DomDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.InputStream,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.Dom4JDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.Dom4JDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.OutputStream)",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.Writer)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.Writer)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.Writer,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void <init>(org.dom4j.io.XMLWriter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStreamer:void toXML(com.thoughtworks.xstream.XStream,java.lang.Object,java.io.Writer)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.Writer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.XppDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.XppDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader)",
            "com.thoughtworks.xstream.XStream:java.lang.Object fromXML(java.io.Reader,java.lang.Object)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectInputStream createObjectInputStream(java.io.Reader)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppReader:void <init>(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.AbstractPullReader:com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractPullReader:com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()"
        ]
    },
    "com.thoughtworks.xstream.io.ReaderWrapper:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void close()",
            "com.thoughtworks.xstream.XStream$3:void close()"
        ]
    },
    "com.thoughtworks.xstream.XStream$3:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void close()"
        ]
    },
    "com.thoughtworks.xstream.io.StatefulWriter:void startNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.StatefulWriter:void startNode(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.XStream$2:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void close()"
        ]
    },
    "com.thoughtworks.xstream.io.StatefulWriter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void flush()",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void flush()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void flush()",
            "com.thoughtworks.xstream.XStream$2:void flush()",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.Writer)",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CharArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.BitSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void endNode()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void endNode()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.basic.NullConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void access$100(com.thoughtworks.xstream.io.binary.BinaryStreamWriter,com.thoughtworks.xstream.io.binary.Token)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry:long getId(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void endNode()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void endNode()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.basic.NullConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void flush()",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void flush()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void flush()",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.Writer)",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:void endNode()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void endNode()",
            "com.thoughtworks.xstream.io.json.JsonWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.json.JsonWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.basic.NullConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void flush()",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void flush()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void flush()",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.Writer)",
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)"
        ]
    },
    "com.thoughtworks.xstream.core.util.QuickWriter:void write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void writeText(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void endNode()",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void endOfLine()",
            "com.thoughtworks.xstream.io.json.JsonWriter:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.json.JsonWriter:void writeText(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.json.JsonWriter:void endNode()",
            "com.thoughtworks.xstream.io.json.JsonWriter:void endOfLine()"
        ]
    },
    "com.thoughtworks.xstream.core.util.QuickWriter:void write(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void writeText(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void endNode()",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void finishTag()",
            "com.thoughtworks.xstream.io.json.JsonWriter:void writeText(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.core.util.QuickWriter:void write(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void writeText(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void endNode()",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void endOfLine()",
            "com.thoughtworks.xstream.io.json.JsonWriter:void endOfLine()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.Dom4JDriver$1:void close()",
            "com.thoughtworks.xstream.io.WriterWrapper:void close()"
        ]
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.Dom4JDriver$1:void close()",
            "com.thoughtworks.xstream.io.WriterWrapper:void close()"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper:void add(java.lang.Class,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processImplicitAnnotation(java.lang.reflect.Field)"
        ]
    },
    "com.thoughtworks.xstream.io.ReaderWrapper:java.util.Iterator getAttributeNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.util.Iterator getAttributeNames()",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.XStream$2:void writeToStream(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField:void write(java.io.ObjectOutput)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeObjectOverride(java.lang.Object)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeBoolean(boolean)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeByte(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeInt(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeChar(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeDouble(double)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeFloat(float)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeLong(long)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeShort(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void write(byte[])",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeChars(java.lang.String)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void writeUTF(java.lang.String)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void write(int)",
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void write(byte[],int,int)"
        ]
    },
    "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.MetaFilter:boolean match(java.util.Properties,org.jbehave.core.model.Meta)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl:boolean isEquals(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType:boolean isEquals(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:boolean equals(java.lang.Object)"
        ]
    },
    "org.jbehave.core.junit.JUnitStories:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.junit.JUnitStory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.junit.JUnitStoryMaps:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.model.ExamplesTable:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.ExamplesTable:void <init>(java.lang.String)"
        ]
    },
    "org.jbehave.core.model.ExamplesTableFactory:org.jbehave.core.model.ExamplesTable createExamplesTable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.ExamplesTable findExamplesTable(java.lang.String)",
            "org.jbehave.core.steps.ParameterConverters$ExamplesTableConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)"
        ]
    },
    "org.jbehave.core.reporters.PostStoryStatisticsCollector:void afterScenario()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.StoryRunner:void run(org.jbehave.core.embedder.StoryRunner$RunContext,org.jbehave.core.model.Story,java.util.Map)",
            "org.jbehave.core.reporters.DelegatingStoryReporter:void afterScenario()",
            "org.jbehave.core.reporters.SilentSuccessFilter$11:void doNow()",
            "org.jbehave.core.reporters.StepFailureDecorator:void afterScenario()"
        ]
    },
    "com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller:void <init>(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller:void <init>(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.alias.ClassMapper)",
            "com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy:com.thoughtworks.xstream.core.TreeUnmarshaller createUnmarshallingContext(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.path.PathTrackingWriter:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.StatefulWriter:void startNode(java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XomWriter:java.lang.Object createNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractDocumentWriter:void startNode(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XomWriter:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.JDomWriter:java.lang.Object createNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractDocumentWriter:void startNode(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.JDomWriter:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JXmlWriter:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void startNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractXmlWriter:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JWriter:java.lang.Object createNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractDocumentWriter:void startNode(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JWriter:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.DomWriter:java.lang.Object createNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractDocumentWriter:void startNode(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.DomWriter:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppReader:java.lang.String getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttribute(java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.String readClassAttribute(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)",
            "com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdUnmarshaller:java.lang.Object getCurrentReferenceKey()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XomReader:java.lang.String getNodeName()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XomReader:java.lang.String getAttributeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.AttributeNameIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppDomReader:java.lang.String getNodeName()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.DomReader:java.lang.String getNodeName()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.DomReader:java.lang.String getAttributeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.AttributeNameIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JReader:java.lang.String getNodeName()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JReader:java.lang.String getAttributeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.AttributeNameIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractPullReader:java.lang.String getNodeName()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.JDomReader:java.lang.String getNodeName()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppReader:java.lang.String getAttributeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.AttributeNameIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxReader:java.lang.String getAttributeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.AttributeNameIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractDocumentWriter:void startNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractXmlWriter:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.TraxSource:void setXStream(com.thoughtworks.xstream.XStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.TraxSource:void <init>(java.lang.Object,com.thoughtworks.xstream.XStream)",
            "com.thoughtworks.xstream.io.xml.TraxSource:void <init>(java.util.List,com.thoughtworks.xstream.XStream)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.TraxSource:void setSourceAsList(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.TraxSource:void <init>(java.util.List)",
            "com.thoughtworks.xstream.io.xml.TraxSource:void <init>(java.util.List,com.thoughtworks.xstream.XStream)",
            "com.thoughtworks.xstream.io.xml.TraxSource:void setSource(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.TraxSource:void createXMLReader(org.xml.sax.XMLReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.TraxSource:void setXMLReader(org.xml.sax.XMLReader)",
            "com.thoughtworks.xstream.io.xml.TraxSource:org.xml.sax.XMLReader getXMLReader()"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamWriter:void startNode(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter:boolean isSerializable(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:boolean canConvert(java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshalConditionally(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshalConditionally(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.FieldDictionary:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractAttributedCharacterIteratorAttributeConverter:java.lang.Object readResolve()"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:void <init>()",
            "com.thoughtworks.xstream.core.JVM:com.thoughtworks.xstream.converters.reflection.ReflectionProvider bestReflectionProvider()"
        ]
    },
    "com.thoughtworks.xstream.io.ReaderWrapper:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.path.PathTrackingReader:void appendErrors(com.thoughtworks.xstream.converters.ErrorWriter)"
        ]
    },
    "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:void <init>(com.thoughtworks.xstream.mapper.Mapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:void <init>(com.thoughtworks.xstream.alias.ClassMapper)",
            "com.thoughtworks.xstream.XStream:com.thoughtworks.xstream.mapper.Mapper buildMapper()"
        ]
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:void writeText(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.json.JsonWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.json.JsonWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.json.JsonWriter:void writeAttributeValue(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)",
            "com.thoughtworks.xstream.io.json.JsonWriter:void writeText(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.JVM:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.XStream:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.configuration.Keywords:java.util.Map defaultKeywords()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Keywords:void <init>()"
        ]
    },
    "org.jbehave.core.configuration.Keywords:java.util.Map startingWordsByType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.Keywords:java.lang.String[] startingWords()",
            "org.jbehave.core.steps.Steps:org.jbehave.core.steps.StepCandidate createCandidate(java.lang.reflect.Method,org.jbehave.core.steps.StepType,java.lang.String,int,org.jbehave.core.configuration.Configuration)"
        ]
    },
    "com.thoughtworks.xstream.core.util.XmlHeaderAwareReader:java.util.Map getHeader(java.io.PushbackInputStream[])": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.XmlHeaderAwareReader:void <init>(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CompositeClassLoader:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.ClassLoaderReference$Replacement:java.lang.Object readResolve()",
            "com.thoughtworks.xstream.XStream:void <init>(com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.io.HierarchicalStreamDriver)"
        ]
    },
    "com.thoughtworks.xstream.mapper.AnnotationMapper$1:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationFinder:java.util.List getAnnotatedValues(java.lang.Class,java.lang.Class,java.lang.String)",
            "org.jbehave.core.embedder.MetaFilter:java.util.Set found(java.lang.String)",
            "org.jbehave.core.embedder.StoryMapper:void add(java.lang.String,org.jbehave.core.model.Story)",
            "org.jbehave.core.reporters.CrossReference$XrefStory:void <init>(org.jbehave.core.model.Story,org.jbehave.core.reporters.CrossReference$XrefRoot,org.jbehave.core.reporters.StoryReporterBuilder)",
            "com.thoughtworks.xstream.io.StatefulWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields:void add(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.util.Map writeValueToImplicitCollection(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.util.Map,java.lang.Object,java.lang.String)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:void addAttributeFor(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:void addAttributeFor(java.lang.reflect.Field)",
            "com.thoughtworks.xstream.mapper.AttributeMapper:void addAttributeFor(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.FieldAliasingMapper:void omitField(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.ImmutableTypesMapper:void addImmutableType(java.lang.Class)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper$1:boolean add(java.lang.reflect.Type)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void <init>(com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.ConverterRegistry,java.lang.ClassLoader,com.thoughtworks.xstream.converters.reflection.ReflectionProvider,com.thoughtworks.xstream.core.JVM)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processTypes(java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void addParametrizedTypes(java.lang.reflect.Type,java.util.Set)",
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processAliasAnnotation(java.lang.Class,java.util.Set)",
            "com.thoughtworks.xstream.core.util.PrioritizedList:void add(java.lang.Object,int)"
        ]
    },
    "com.thoughtworks.xstream.core.TreeUnmarshaller:void addCompletionCallback(java.lang.Runnable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void registerValidation(java.io.ObjectInputValidation,int)"
        ]
    },
    "org.jbehave.core.configuration.Keywords:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.steps.Stepdoc:void <init>(org.jbehave.core.steps.StepCandidate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepFinder:java.util.List stepdocs(java.util.List)",
            "org.jbehave.core.steps.StepFinder:java.util.List findMatching(java.lang.String,java.util.List)"
        ]
    },
    "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:boolean matchesCandidate(java.lang.String,java.lang.String,org.jbehave.core.steps.StepCandidate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:void addMatchedScenarioSteps(org.jbehave.core.model.Scenario,java.util.List,java.util.Map,java.util.List)"
        ]
    },
    "org.jbehave.core.steps.StepCandidate:boolean matches(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:boolean matchesCandidate(java.lang.String,java.lang.String,org.jbehave.core.steps.StepCandidate)",
            "org.jbehave.core.steps.StepFinder:java.util.List findMatching(java.lang.String,java.util.List)"
        ]
    },
    "org.jbehave.core.steps.StepCandidate:java.lang.String stripStartingWord(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCandidate:boolean matches(java.lang.String,java.lang.String)",
            "org.jbehave.core.steps.StepCandidate:org.jbehave.core.steps.Step createMatchedStep(java.lang.String,java.util.Map)",
            "org.jbehave.core.steps.StepCandidate:java.util.List createComposedSteps(java.lang.String,java.util.Map,java.util.List)"
        ]
    },
    "org.jbehave.core.steps.StepCreator:java.lang.String replaceParameterValuesInStep(java.lang.String,int,java.lang.String[],java.lang.String[],java.lang.String[],java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator:java.lang.String parametrisedStep(java.lang.String,java.util.Map,java.lang.reflect.Type[],java.lang.String[],java.lang.String[],java.lang.String[])"
        ]
    },
    "org.jbehave.core.steps.StepCreator:java.lang.String[] parametersForStep(java.util.Map,java.lang.reflect.Type[],java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator:java.util.Map matchedParameters(java.lang.reflect.Method,java.lang.String,java.lang.String,java.util.Map)",
            "org.jbehave.core.steps.StepCreator:java.lang.String[] access$1000(org.jbehave.core.steps.StepCreator,java.util.Map,java.lang.reflect.Type[],java.lang.String[],java.lang.String[])"
        ]
    },
    "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:int readMethod(org.jbehave.paranamer.BytecodeReadingParanamer$TypeCollector,char[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:void accept(org.jbehave.paranamer.BytecodeReadingParanamer$TypeCollector)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractPullReader:void move()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractPullReader:void moveDown()",
            "com.thoughtworks.xstream.io.xml.AbstractPullReader:void moveUp()"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedMember(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedMember(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.FieldAliasingMapper:java.lang.String serializedMember(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.OuterClassMapper:java.lang.String serializedMember(java.lang.Class,java.lang.String)",
            "com.thoughtworks.xstream.mapper.XmlFriendlyMapper:java.lang.String serializedMember(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class getItemTypeForItemFieldName(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.Class getItemTypeForItemFieldName(java.lang.Class,java.lang.String)"
        ]
    },
    "org.jbehave.core.model.GivenStories:java.util.Map parametersByAnchor(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.GivenStories:java.util.List getStories()"
        ]
    },
    "org.jbehave.core.parsers.RegexPrefixCapturingPatternParser:java.util.regex.Pattern buildPattern(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexPrefixCapturingPatternParser:org.jbehave.core.parsers.StepMatcher parseStep(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.XppDomReader:java.lang.Object getChild(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractDocumentReader:void moveDown()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractDocumentReader:void moveDown()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void moveDown()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:boolean unmarshalReadOnly(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.XStream$3:java.lang.Object readFromStream()"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamReader:java.lang.String getAttribute(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttribute(int)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "com.thoughtworks.xstream.io.binary.BinaryStreamReader:java.lang.String getAttributeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getAttributeName(int)",
            "com.thoughtworks.xstream.io.AttributeNameIterator:java.lang.Object next()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)"
        ]
    },
    "org.jbehave.core.steps.ParameterConverters:void <init>(org.jbehave.core.steps.StepMonitor,java.util.Locale,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ParameterConverters:void <init>(org.jbehave.core.steps.StepMonitor)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat:java.lang.String format(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.basic.ThreadSafeSimpleDateFormat:java.lang.String format(java.util.Date)",
            "com.thoughtworks.xstream.converters.basic.DateConverter:java.lang.String toString(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat:java.util.Date parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.basic.ThreadSafeSimpleDateFormat:java.util.Date parse(java.lang.String)",
            "com.thoughtworks.xstream.converters.basic.DateConverter:java.lang.Object fromString(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ThreadSafePropertyEditor:java.lang.String getAsText(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.PropertyEditorCapableConverter:java.lang.String toString(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ThreadSafePropertyEditor:java.lang.Object setAsText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.extended.PropertyEditorCapableConverter:java.lang.Object fromString(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CharArrayConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.BitSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.ColorConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.ISO8601SqlTimestampConverter:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "org.jbehave.core.reporters.CrossReference:void outputFile(java.lang.String,com.thoughtworks.xstream.XStream,org.jbehave.core.reporters.CrossReference$XrefRoot,org.jbehave.core.reporters.StoryReporterBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.CrossReference:void outputToFiles(org.jbehave.core.reporters.StoryReporterBuilder)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStreamer:void toXML(com.thoughtworks.xstream.XStream,java.lang.Object,java.io.Writer)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.lang.String toXML(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.reporters.CrossReference:void outputFile(java.lang.String,com.thoughtworks.xstream.XStream,org.jbehave.core.reporters.CrossReference$XrefRoot,org.jbehave.core.reporters.StoryReporterBuilder)"
        ]
    },
    "com.thoughtworks.xstream.io.StatefulWriter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.Dom4JDriver$1:void close()",
            "com.thoughtworks.xstream.io.WriterWrapper:void close()",
            "com.thoughtworks.xstream.XStream$2:void close()"
        ]
    },
    "com.thoughtworks.xstream.io.path.PathTrackingWriter:void endNode()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void endNode()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:void write(java.lang.String,int,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.basic.NullConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.Dom4JDriver:com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:void toXML(java.lang.Object,java.io.OutputStream)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractPullReader:com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.AbstractPullReader:boolean hasMoreChildren()",
            "com.thoughtworks.xstream.io.xml.AbstractPullReader:void move()",
            "com.thoughtworks.xstream.io.xml.AbstractPullReader:java.lang.String getValue()"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.paranamer.BytecodeReadingParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)",
            "com.thoughtworks.xstream.XStreamer:java.lang.Object fromXML(com.thoughtworks.xstream.io.HierarchicalStreamDriver,java.io.Reader)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.Writer)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.Writer,java.lang.String)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream)",
            "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.XStreamer:void toXML(com.thoughtworks.xstream.XStream,java.lang.Object,java.io.Writer)"
        ]
    },
    "com.thoughtworks.xstream.XStream$2:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectOutputStream:void flush()"
        ]
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:void addAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.AbstractReferenceMarshaller:void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.ReferenceByIdMarshaller:void fireValidReference(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void endOfLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void finishTag()"
        ]
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:void startNode(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.json.JsonWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.json.JsonWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.json.JsonWriter:void addAttribute(java.lang.String,java.lang.String)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:void endOfLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.json.JsonWriter:void finishTag()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void finishTag()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void endNode()"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl:boolean isEquals(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl:boolean equals(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType:boolean isEquals(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType:boolean equals(java.lang.Object)"
        ]
    },
    "org.jbehave.core.model.ExamplesTable:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.ExamplesTable:void <clinit>()"
        ]
    },
    "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.ExamplesTable findExamplesTable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.Scenario parseScenario(java.lang.String)"
        ]
    },
    "org.jbehave.core.steps.ParameterConverters$ExamplesTableConverter:java.lang.Object convertValue(java.lang.String,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ParameterConverters:java.lang.Object convert(java.lang.String,java.lang.reflect.Type)"
        ]
    },
    "com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller:void <init>(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.alias.ClassMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy:com.thoughtworks.xstream.core.TreeUnmarshaller createUnmarshallingContext(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:java.lang.Object unmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.PrettyPrintWriter:void startNode(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)"
        ]
    },
    "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getNodeName()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.path.PathTrackingReader:void <init>(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.path.PathTracker)",
            "com.thoughtworks.xstream.io.path.PathTrackingReader:void moveDown()",
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getNodeName()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void readCallback(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.List,java.util.List)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.util.HierarchicalStreams:java.lang.Class readClassType(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.mapper.Mapper)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.TraxSource:void <init>(java.lang.Object,com.thoughtworks.xstream.XStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.TraxSource:void <init>(java.util.List,com.thoughtworks.xstream.XStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.TraxSource:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.TraxSource:void setSource(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.TraxSource:void <init>(java.lang.Object)",
            "com.thoughtworks.xstream.io.xml.TraxSource:void <init>(java.lang.Object,com.thoughtworks.xstream.XStream)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.TraxSource:void setXMLReader(org.xml.sax.XMLReader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.TraxSource:org.xml.sax.XMLReader getXMLReader()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter:boolean canConvert(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.mapper.AnnotationMapper:void processConverterAnnotations(java.lang.Class)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void convertAnother(java.lang.Object,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convertAnother(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)",
            "com.thoughtworks.xstream.core.DefaultConverterLookup:void registerConverter(com.thoughtworks.xstream.converters.Converter,int)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:void <init>(com.thoughtworks.xstream.alias.ClassMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:void writeAttributeValue(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:void writeText(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.json.JsonWriter:void setValue(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.core.util.ClassLoaderReference$Replacement:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.configuration.AnnotationFinder:java.util.List getAnnotatedValues(java.lang.Class,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.embedder.Embedder buildEmbedder()",
            "org.jbehave.core.configuration.AnnotationBuilder:java.util.List findPaths()",
            "org.jbehave.core.configuration.AnnotationFinder:java.util.List getAnnotatedValues(java.lang.Class,java.lang.Class,java.lang.String)",
            "org.jbehave.core.configuration.AnnotationFinder:java.util.List getAnnotatedClasses(java.lang.Class,java.lang.Class,java.lang.String)"
        ]
    },
    "org.jbehave.core.embedder.MetaFilter:java.util.Set found(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.MetaFilter:void parse(java.util.Properties,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void registerValidation(java.io.ObjectInputValidation,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void registerValidation(java.io.ObjectInputValidation,int)"
        ]
    },
    "org.jbehave.core.steps.StepCandidate:org.jbehave.core.steps.Step createMatchedStep(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.MarkUnmatchedStepsAsPending:void addMatchedScenarioSteps(org.jbehave.core.model.Scenario,java.util.List,java.util.Map,java.util.List)",
            "org.jbehave.core.steps.StepCandidate:java.util.List createComposedSteps(java.lang.String,java.util.Map,java.util.List)"
        ]
    },
    "org.jbehave.core.steps.StepCreator:java.lang.String parametrisedStep(java.lang.String,java.util.Map,java.lang.reflect.Type[],java.lang.String[],java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator:java.lang.String access$1200(org.jbehave.core.steps.StepCreator,java.lang.String,java.util.Map,java.lang.reflect.Type[],java.lang.String[],java.lang.String[],java.lang.String[])"
        ]
    },
    "org.jbehave.core.steps.StepCreator:java.lang.String[] access$1000(org.jbehave.core.steps.StepCreator,java.util.Map,java.lang.reflect.Type[],java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator$5:void parametriseStep()"
        ]
    },
    "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:void accept(org.jbehave.paranamer.BytecodeReadingParanamer$TypeCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:void access$200(org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader,org.jbehave.paranamer.BytecodeReadingParanamer$TypeCollector)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractPullReader:void moveDown()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void moveDown()",
            "com.thoughtworks.xstream.io.xml.XppReader:void <init>(java.io.Reader,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)",
            "com.thoughtworks.xstream.io.xml.StaxReader:void <init>(com.thoughtworks.xstream.io.xml.QNameMap,javax.xml.stream.XMLStreamReader,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:boolean unmarshalReadOnly(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.XStream$3:java.lang.Object readFromStream()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractPullReader:void moveUp()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:void moveUp()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.lang.Object readFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:boolean unmarshalReadOnly(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.XStream$3:java.lang.Object readFromStream()"
        ]
    },
    "com.thoughtworks.xstream.mapper.OuterClassMapper:java.lang.String serializedMember(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedMember(java.lang.Class,java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.mapper.XmlFriendlyMapper:java.lang.String serializedMember(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2:void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter$1:void writeField(java.lang.String,java.lang.Class,java.lang.Object,java.lang.Class)",
            "com.thoughtworks.xstream.mapper.MapperWrapper:java.lang.String serializedMember(java.lang.Class,java.lang.String)"
        ]
    },
    "org.jbehave.core.steps.ParameterConverters:void <init>(org.jbehave.core.steps.StepMonitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.ParameterConverters:void <init>()"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.ThreadSafeSimpleDateFormat:java.lang.String format(java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.basic.DateConverter:java.lang.String toString(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.DateConverter:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.ThreadSafeSimpleDateFormat:java.util.Date parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.basic.DateConverter:java.lang.Object fromString(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.PropertyEditorCapableConverter:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1:void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.String toString(java.lang.Object)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.String getName(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.converters.extended.PropertyEditorCapableConverter:java.lang.Object fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object fromString(java.lang.String)",
            "com.thoughtworks.xstream.persistence.FilePersistenceStrategy:java.lang.Object extractKey(java.lang.String)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractPullReader:boolean hasMoreChildren()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:boolean hasMoreChildren()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)",
            "com.thoughtworks.xstream.XStream$3:java.lang.Object readFromStream()"
        ]
    },
    "com.thoughtworks.xstream.io.xml.AbstractPullReader:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getValue()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:boolean unmarshalReadOnly(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CharArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.BitSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.XStream:java.io.ObjectOutputStream createObjectOutputStream(com.thoughtworks.xstream.io.HierarchicalStreamWriter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:void startNode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.WriterWrapper:void startNode(java.lang.String)",
            "com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.ExternalizableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeToStream(java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void writeFieldsToStream(java.util.Map)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$1:void defaultWriteObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:void marshalUnserializableParent(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:void addInterfacesToXml(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.extended.FontConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:void marshalMethod(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.String,java.lang.Class[])",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalPrincipals(java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:void marshalReadOnly(boolean,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:void writeItem(java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeMapConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.TreeSetConverter:void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)",
            "com.thoughtworks.xstream.core.TreeMarshaller:void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
        ]
    },
    "com.thoughtworks.xstream.io.json.JsonWriter:void finishTag()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.json.JsonWriter:void startNode(java.lang.String,java.lang.Class)",
            "com.thoughtworks.xstream.io.json.JsonWriter:void setValue(java.lang.String)",
            "com.thoughtworks.xstream.io.json.JsonWriter:void endNode()"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.MetaFilter:boolean match(java.util.Properties,org.jbehave.core.model.Meta)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl:boolean isEquals(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType:boolean isEquals(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:boolean equals(java.lang.Object)"
        ]
    },
    "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.embedder.MetaFilter:boolean match(java.util.Properties,org.jbehave.core.model.Meta)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMappingImpl:boolean isEquals(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$NamedItemType:boolean isEquals(java.lang.Object,java.lang.Object)",
            "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator$1:boolean equals(java.lang.Object)"
        ]
    },
    "org.jbehave.core.model.ExamplesTable:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.ExamplesTable:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.jbehave.core.steps.ParameterConverters)",
            "org.jbehave.core.model.ExamplesTable:org.jbehave.core.model.ExamplesTable withDefaults(org.jbehave.core.steps.Parameters)",
            "org.jbehave.core.model.ExamplesTable:void <clinit>()",
            "org.jbehave.core.model.ExamplesTableFactory:org.jbehave.core.model.ExamplesTable createExamplesTable(java.lang.String)",
            "org.jbehave.core.model.GivenStories:void <init>(java.lang.String)",
            "org.jbehave.core.model.Scenario:void <init>(java.lang.String,org.jbehave.core.model.Meta)",
            "org.jbehave.core.model.Scenario:void <init>(java.lang.String,java.util.List)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.TraxSource:void <init>(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.configuration.AnnotationBuilder:java.util.List findPaths()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.junit.AnnotatedPathRunner:void <init>(java.lang.Class)"
        ]
    },
    "org.jbehave.core.configuration.AnnotationFinder:java.util.List getAnnotatedClasses(java.lang.Class,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationBuilder:java.util.List buildCandidateSteps(org.jbehave.core.configuration.Configuration)",
            "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.steps.ParameterConverters parameterConverters(org.jbehave.core.configuration.AnnotationFinder)"
        ]
    },
    "com.thoughtworks.xstream.core.util.CustomObjectInputStream:void registerValidation(java.io.ObjectInputValidation,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.steps.StepCreator:java.lang.String access$1200(org.jbehave.core.steps.StepCreator,java.lang.String,java.util.Map,java.lang.reflect.Type[],java.lang.String[],java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.steps.StepCreator$5:void parametriseStep()"
        ]
    },
    "org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader:void access$200(org.jbehave.paranamer.BytecodeReadingParanamer$ClassReader,org.jbehave.paranamer.BytecodeReadingParanamer$TypeCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.paranamer.BytecodeReadingParanamer:java.lang.String[] lookupParameterNames(java.lang.reflect.AccessibleObject,boolean)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxReader:void <init>(com.thoughtworks.xstream.io.xml.QNameMap,javax.xml.stream.XMLStreamReader,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.StaxDriver:com.thoughtworks.xstream.io.xml.AbstractPullReader createStaxReader(javax.xml.stream.XMLStreamReader)",
            "com.thoughtworks.xstream.io.xml.StaxReader:void <init>(com.thoughtworks.xstream.io.xml.QNameMap,javax.xml.stream.XMLStreamReader)"
        ]
    },
    "org.jbehave.core.steps.ParameterConverters:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.configuration.AnnotationBuilder:org.jbehave.core.steps.ParameterConverters parameterConverters(org.jbehave.core.configuration.AnnotationFinder)",
            "org.jbehave.core.configuration.Configuration:void <init>()",
            "org.jbehave.core.model.ExamplesTable:void <init>(java.lang.String,java.lang.String,java.lang.String)",
            "org.jbehave.core.model.ExamplesTableFactory:void <init>(org.jbehave.core.configuration.Keywords)",
            "org.jbehave.core.model.ExamplesTableFactory:void <init>(org.jbehave.core.io.ResourceLoader)"
        ]
    },
    "com.thoughtworks.xstream.io.ReaderWrapper:boolean hasMoreChildren()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:boolean hasMoreChildren()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:java.util.Map readFieldsFromStream()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter$2:void defaultReadObject()",
            "com.thoughtworks.xstream.converters.reflection.SerializableConverter:java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.javabean.JavaBeanConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.ArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CollectionConverter:void populateCollection(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection)",
            "com.thoughtworks.xstream.converters.collections.PropertiesConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.MapConverter:void populateMap(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map)",
            "com.thoughtworks.xstream.XStream$3:java.lang.Object readFromStream()"
        ]
    },
    "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.ReaderWrapper:java.lang.String getValue()",
            "com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier:void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)",
            "com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.DynamicProxyConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.JavaMethodConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter:java.lang.Object unmarshalIndividualByteElements(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ColorConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.SubjectConverter:boolean unmarshalReadOnly(com.thoughtworks.xstream.io.HierarchicalStreamReader)",
            "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.basic.CharConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.CharArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.collections.BitSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.SingleValueConverterWrapper:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.enums.EnumConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)"
        ]
    },
    "com.thoughtworks.xstream.converters.basic.AbstractBasicConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.converters.collections.CharArrayConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.collections.BitSetConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "com.thoughtworks.xstream.converters.enums.EnumConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.RegexPatternConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.converters.extended.ThrowableConverter:java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)",
            "com.thoughtworks.xstream.core.TreeUnmarshaller:java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
        ]
    },
    "org.jbehave.core.model.ExamplesTable:org.jbehave.core.model.ExamplesTable withDefaults(org.jbehave.core.steps.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.model.GivenStories:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.GivenStories:void <clinit>()",
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.GivenStories findGivenStories(java.lang.String)",
            "org.jbehave.core.reporters.PrintStreamOutput:void givenStories(java.util.List)"
        ]
    },
    "org.jbehave.core.model.Scenario:void <init>(java.lang.String,org.jbehave.core.model.Meta)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.jbehave.core.model.Scenario:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.Scenario:void <init>(java.util.List)"
        ]
    },
    "org.jbehave.core.junit.AnnotatedPathRunner:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.thoughtworks.xstream.io.xml.StaxDriver:com.thoughtworks.xstream.io.xml.AbstractPullReader createStaxReader(javax.xml.stream.XMLStreamReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.xml.StaxDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)",
            "com.thoughtworks.xstream.io.xml.StaxDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)"
        ]
    },
    "com.thoughtworks.xstream.io.xml.StaxReader:void <init>(com.thoughtworks.xstream.io.xml.QNameMap,javax.xml.stream.XMLStreamReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)",
            "com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.InputStream)"
        ]
    },
    "org.jbehave.core.model.ExamplesTableFactory:void <init>(org.jbehave.core.configuration.Keywords)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.ExamplesTableFactory:void <init>()"
        ]
    },
    "org.jbehave.core.model.GivenStories:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.GivenStories:void <clinit>()",
            "org.jbehave.core.model.Scenario:void <init>(java.lang.String,org.jbehave.core.model.Meta)",
            "org.jbehave.core.model.Scenario:void <init>(java.lang.String,java.util.List)",
            "org.jbehave.core.parsers.RegexStoryParser:org.jbehave.core.model.GivenStories findGivenStories(java.lang.String)",
            "org.jbehave.core.reporters.PrintStreamOutput:void givenStories(java.util.List)"
        ]
    },
    "org.jbehave.core.model.Scenario:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.jbehave.core.model.Scenario:void <init>()"
        ]
    },
    "org.jbehave.core.model.Scenario:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    }
}