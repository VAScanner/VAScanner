{
    "org.eclipse.paho.client.mqttv3.internal.SSLNetworkModule:void start()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketSecureNetworkModule:void start()",
            "org.eclipse.paho.client.mqttv3.internal.ClientComms$ConnectBG:void run()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketSecureNetworkModule:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.ClientComms$ConnectBG:void run()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientComms$ConnectBG:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.ClientComms:void connect(org.eclipse.paho.client.mqttv3.MqttConnectOptions,org.eclipse.paho.client.mqttv3.MqttToken)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientComms:void connect(org.eclipse.paho.client.mqttv3.MqttConnectOptions,org.eclipse.paho.client.mqttv3.MqttToken)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.ConnectActionListener:void connect()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.ConnectActionListener:void connect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.ConnectActionListener:void onFailure(org.eclipse.paho.client.mqttv3.IMqttToken,java.lang.Throwable)",
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken connect(org.eclipse.paho.client.mqttv3.MqttConnectOptions,java.lang.Object,org.eclipse.paho.client.mqttv3.IMqttActionListener)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.ConnectActionListener:void onFailure(org.eclipse.paho.client.mqttv3.IMqttToken,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.ConnectActionListener:void onFailure(org.eclipse.paho.client.mqttv3.IMqttToken,java.lang.Throwable)",
            "org.eclipse.paho.client.mqttv3.internal.ConnectActionListener:void connect()",
            "org.eclipse.paho.client.mqttv3.internal.CommsCallback:void fireActionEvent(org.eclipse.paho.client.mqttv3.MqttToken)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken connect(org.eclipse.paho.client.mqttv3.MqttConnectOptions,java.lang.Object,org.eclipse.paho.client.mqttv3.IMqttActionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttClient:void connect(org.eclipse.paho.client.mqttv3.MqttConnectOptions)",
            "org.eclipse.paho.client.mqttv3.MqttClient:org.eclipse.paho.client.mqttv3.IMqttToken connectWithResult(org.eclipse.paho.client.mqttv3.MqttConnectOptions)",
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken connect(java.lang.Object,org.eclipse.paho.client.mqttv3.IMqttActionListener)",
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken connect(org.eclipse.paho.client.mqttv3.MqttConnectOptions)",
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:void attemptReconnect()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.CommsCallback:void fireActionEvent(org.eclipse.paho.client.mqttv3.MqttToken)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.CommsCallback:void handleActionComplete(org.eclipse.paho.client.mqttv3.MqttToken)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttClient:void connect(org.eclipse.paho.client.mqttv3.MqttConnectOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttClient:void connect()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttClient:org.eclipse.paho.client.mqttv3.IMqttToken connectWithResult(org.eclipse.paho.client.mqttv3.MqttConnectOptions)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken connect(java.lang.Object,org.eclipse.paho.client.mqttv3.IMqttActionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken connect()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken connect(org.eclipse.paho.client.mqttv3.MqttConnectOptions)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:void attemptReconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:void reconnect()",
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:void access$2(org.eclipse.paho.client.mqttv3.MqttAsyncClient)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.CommsCallback:void handleActionComplete(org.eclipse.paho.client.mqttv3.MqttToken)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.CommsCallback:void run()",
            "org.eclipse.paho.client.mqttv3.internal.CommsCallback:void asyncOperationComplete(org.eclipse.paho.client.mqttv3.MqttToken)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttClient:void connect()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken connect()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttClient:void reconnect()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:void access$2(org.eclipse.paho.client.mqttv3.MqttAsyncClient)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient$ReconnectTask:void run()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.CommsCallback:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.internal.CommsCallback:void asyncOperationComplete(org.eclipse.paho.client.mqttv3.MqttToken)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.ClientState:void notifySent(org.eclipse.paho.client.mqttv3.internal.wire.MqttWireMessage)",
            "org.eclipse.paho.client.mqttv3.internal.ClientState:void notifyResult(org.eclipse.paho.client.mqttv3.internal.wire.MqttWireMessage,org.eclipse.paho.client.mqttv3.MqttToken,org.eclipse.paho.client.mqttv3.MqttException)",
            "org.eclipse.paho.client.mqttv3.internal.ClientComms:void shutdownConnection(org.eclipse.paho.client.mqttv3.MqttToken,org.eclipse.paho.client.mqttv3.MqttException)",
            "org.eclipse.paho.client.mqttv3.internal.ClientComms:org.eclipse.paho.client.mqttv3.MqttToken handleOldTokens(org.eclipse.paho.client.mqttv3.MqttToken,org.eclipse.paho.client.mqttv3.MqttException)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient$ReconnectTask:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientState:void notifySent(org.eclipse.paho.client.mqttv3.internal.wire.MqttWireMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.CommsSender:void run()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientState:void notifyResult(org.eclipse.paho.client.mqttv3.internal.wire.MqttWireMessage,org.eclipse.paho.client.mqttv3.MqttToken,org.eclipse.paho.client.mqttv3.MqttException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.ClientState:void notifyReceivedAck(org.eclipse.paho.client.mqttv3.internal.wire.MqttAck)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientComms:void shutdownConnection(org.eclipse.paho.client.mqttv3.MqttToken,org.eclipse.paho.client.mqttv3.MqttException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.CommsSender:void handleRunException(org.eclipse.paho.client.mqttv3.internal.wire.MqttWireMessage,java.lang.Exception)",
            "org.eclipse.paho.client.mqttv3.internal.ClientComms$DisconnectBG:void run()",
            "org.eclipse.paho.client.mqttv3.internal.CommsCallback:void run()",
            "org.eclipse.paho.client.mqttv3.internal.CommsCallback:void asyncOperationComplete(org.eclipse.paho.client.mqttv3.MqttToken)",
            "org.eclipse.paho.client.mqttv3.internal.ClientComms$ConnectBG:void run()",
            "org.eclipse.paho.client.mqttv3.internal.CommsReceiver:void run()",
            "org.eclipse.paho.client.mqttv3.internal.ClientComms:void disconnectForcibly(long,long)",
            "org.eclipse.paho.client.mqttv3.internal.ClientComms:void handleRunException(java.lang.Exception)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientComms:org.eclipse.paho.client.mqttv3.MqttToken handleOldTokens(org.eclipse.paho.client.mqttv3.MqttToken,org.eclipse.paho.client.mqttv3.MqttException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.ClientComms:void shutdownConnection(org.eclipse.paho.client.mqttv3.MqttToken,org.eclipse.paho.client.mqttv3.MqttException)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.CommsSender:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientState:void notifyReceivedAck(org.eclipse.paho.client.mqttv3.internal.wire.MqttAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.CommsReceiver:void run()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.CommsSender:void handleRunException(org.eclipse.paho.client.mqttv3.internal.wire.MqttWireMessage,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.CommsSender:void run()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientComms$DisconnectBG:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.ClientComms:void disconnect(org.eclipse.paho.client.mqttv3.internal.wire.MqttDisconnect,long,org.eclipse.paho.client.mqttv3.MqttToken)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.CommsReceiver:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientComms:void disconnectForcibly(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:void disconnectForcibly(long,long)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientComms:void handleRunException(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.ClientComms:org.eclipse.paho.client.mqttv3.MqttToken checkForActivity(org.eclipse.paho.client.mqttv3.IMqttActionListener)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientComms:void disconnect(org.eclipse.paho.client.mqttv3.internal.wire.MqttDisconnect,long,org.eclipse.paho.client.mqttv3.MqttToken)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken disconnect(long,java.lang.Object,org.eclipse.paho.client.mqttv3.IMqttActionListener)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:void disconnectForcibly(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttClient:void disconnectForcibly(long,long)",
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:void disconnectForcibly()",
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:void disconnectForcibly(long)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientComms:org.eclipse.paho.client.mqttv3.MqttToken checkForActivity(org.eclipse.paho.client.mqttv3.IMqttActionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.internal.ClientComms:org.eclipse.paho.client.mqttv3.MqttToken checkForActivity()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken disconnect(long,java.lang.Object,org.eclipse.paho.client.mqttv3.IMqttActionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttClient:void disconnect(long)",
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken disconnect(java.lang.Object,org.eclipse.paho.client.mqttv3.IMqttActionListener)",
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken disconnect(long)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttClient:void disconnectForcibly(long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:void disconnectForcibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttClient:void disconnectForcibly()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:void disconnectForcibly(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttClient:void disconnectForcibly(long)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.internal.ClientComms:org.eclipse.paho.client.mqttv3.MqttToken checkForActivity()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.TimerPingSender$PingTask:void run()",
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken checkPing(java.lang.Object,org.eclipse.paho.client.mqttv3.IMqttActionListener)"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttClient:void disconnect(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken disconnect(java.lang.Object,org.eclipse.paho.client.mqttv3.IMqttActionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken disconnect()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken disconnect(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.MqttClient:void disconnectForcibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.MqttClient:void disconnectForcibly(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.TimerPingSender$PingTask:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken checkPing(java.lang.Object,org.eclipse.paho.client.mqttv3.IMqttActionListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.eclipse.paho.client.mqttv3.MqttAsyncClient:org.eclipse.paho.client.mqttv3.IMqttToken disconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.eclipse.paho.client.mqttv3.MqttClient:void disconnect()"
        ]
    },
    "org.eclipse.paho.client.mqttv3.MqttClient:void disconnect()": {
        "isVulRoot": false,
        "vulCaller": []
    }
}