{
    "org.apache.activemq.broker.jmx.ManagementContext:void createConnector(javax.management.MBeanServer)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer findTigerMBeanServer()",
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer createMBeanServer()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer findTigerMBeanServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer findMBeanServer()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer createMBeanServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer findMBeanServer()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer findMBeanServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer getMBeanServer()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.MBeanServer getMBeanServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagementContext:void start()",
            "org.apache.activemq.broker.jmx.ManagementContext:void stop()",
            "org.apache.activemq.broker.jmx.ManagementContext:java.lang.Object newProxyInstance(javax.management.ObjectName,java.lang.Class,boolean)",
            "org.apache.activemq.broker.jmx.ManagementContext:java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.ManagementContext:java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)",
            "org.apache.activemq.broker.jmx.ManagementContext:javax.management.ObjectInstance getObjectInstance(javax.management.ObjectName)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startManagementContext()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.transport.TransportLoggerFactory:void createTransportLoggerControl(int)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.transport.TransportLoggerFactory:void stop()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:java.lang.Object newProxyInstance(javax.management.ObjectName,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printSubscribers(java.io.PrintWriter,java.util.Map,java.util.Map,java.lang.String,javax.management.ObjectName[])",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.jmx.BrokerViewMBean getBrokerView()",
            "org.apache.activemq.plugin.StatisticsBroker:org.apache.activemq.broker.jmx.BrokerViewMBean getBrokerView()",
            "org.apache.activemq.plugin.StatisticsBroker:void sendSubStats(org.apache.activemq.broker.ConnectionContext,javax.management.ObjectName[],org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:java.lang.Object getAttribute(javax.management.ObjectName,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.AnnotatedMBean:void registerMBean(org.apache.activemq.broker.jmx.ManagementContext,java.lang.Object,javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.AsyncAnnotatedMBean:void registerMBean(java.util.concurrent.ExecutorService,long,org.apache.activemq.broker.jmx.ManagementContext,java.lang.Object,javax.management.ObjectName)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:java.util.Set queryNames(javax.management.ObjectName,javax.management.QueryExp)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.SubscriptionView:javax.management.ObjectName getConnection()",
            "org.apache.activemq.broker.jmx.ConnectionView:javax.management.ObjectName[] getConsumers()",
            "org.apache.activemq.broker.jmx.ConnectionView:javax.management.ObjectName[] getProducers()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagementContext:javax.management.ObjectInstance getObjectInstance(javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startNetworkConnector(org.apache.activemq.network.NetworkConnector,java.util.Set,java.util.concurrent.ThreadPoolExecutor)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startManagementContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startAllConnectors()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void masterFailed()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.util.DefaultIOExceptionHandler$1$1:void run()"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactory:void createTransportLoggerControl(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,int,org.slf4j.Logger,java.lang.String,boolean,boolean,int)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void doStartBroker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startBroker(boolean)",
            "org.apache.activemq.broker.BrokerService:void access$300(org.apache.activemq.broker.BrokerService)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactory:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printSubscribers(java.io.PrintWriter,java.util.Map,java.util.Map,java.lang.String,javax.management.ObjectName[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.jmx.BrokerViewMBean getBrokerView()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.plugin.StatisticsBroker:org.apache.activemq.broker.jmx.BrokerViewMBean getBrokerView()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.plugin.StatisticsBroker:void sendSubStats(org.apache.activemq.broker.ConnectionContext,javax.management.ObjectName[],org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.jmx.AnnotatedMBean:void registerMBean(org.apache.activemq.broker.jmx.ManagementContext,java.lang.Object,javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void registerMBean(javax.management.ObjectName)",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector registerConnectorMBean(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.broker.BrokerService:void registerNetworkConnectorMBean(org.apache.activemq.network.NetworkConnector)",
            "org.apache.activemq.broker.BrokerService:void registerProxyConnectorMBean(org.apache.activemq.proxy.ProxyConnector)",
            "org.apache.activemq.broker.BrokerService:void registerJmsConnectorMBean(org.apache.activemq.network.jms.JmsConnector)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker addInterceptors(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.BrokerService:void startManagementContext()",
            "org.apache.activemq.network.NetworkConnector:void registerNetworkBridgeMBean(org.apache.activemq.network.NetworkBridge)",
            "org.apache.activemq.network.MBeanNetworkListener:void onStart(org.apache.activemq.network.NetworkBridge)",
            "org.apache.activemq.network.MBeanBridgeDestination:void onOutboundMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.network.MBeanBridgeDestination:void onInboundMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.TransportLoggerView:void register()",
            "org.apache.activemq.transport.TransportLoggerFactory:void createTransportLoggerControl(int)",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void enableJmx()"
        ]
    },
    "org.apache.activemq.broker.jmx.AsyncAnnotatedMBean:void registerMBean(java.util.concurrent.ExecutorService,long,org.apache.activemq.broker.jmx.ManagementContext,java.lang.Object,javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerDestination(javax.management.ObjectName,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.jmx.DestinationView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerProducer(javax.management.ObjectName,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.jmx.ProducerView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addInactiveSubscription(org.apache.activemq.util.SubscriptionKey,org.apache.activemq.command.SubscriptionInfo,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSlowConsumerStrategy(org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerRecoveredTransactionMBean(org.apache.activemq.transaction.XATransaction)"
        ]
    },
    "org.apache.activemq.broker.jmx.SubscriptionView:javax.management.ObjectName getConnection()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ConnectionView:javax.management.ObjectName[] getConsumers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ConnectionView:javax.management.ObjectName[] getProducers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void startNetworkConnector(org.apache.activemq.network.NetworkConnector,java.util.Set,java.util.concurrent.ThreadPoolExecutor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:void startNetworkConnector(org.apache.activemq.network.NetworkConnector,java.util.concurrent.ThreadPoolExecutor)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:void start()",
            "org.apache.activemq.broker.BrokerService:void start(boolean)",
            "org.apache.activemq.broker.BrokerService:void autoStart()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI,boolean)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void masterFailed()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler$1$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)",
            "org.apache.activemq.util.DefaultIOExceptionHandler$1:void run()",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void <init>(org.apache.activemq.broker.Broker,java.io.File)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,int,org.slf4j.Logger,java.lang.String,boolean,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,org.slf4j.Logger)",
            "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,java.lang.String,boolean,boolean,int)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startBroker(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void access$300(org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService$3:void run()"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.DotFileInterceptorSupport:void generateFile()"
        ]
    },
    "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:void registerMBean(javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void <init>(org.apache.activemq.broker.TransportConnector,org.apache.activemq.transport.Transport,org.apache.activemq.broker.Broker,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.broker.jmx.ManagementContext,javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector registerConnectorMBean(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void registerNetworkConnectorMBean(org.apache.activemq.network.NetworkConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void startNetworkConnector(org.apache.activemq.network.NetworkConnector,java.util.Set,java.util.concurrent.ThreadPoolExecutor)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void registerProxyConnectorMBean(org.apache.activemq.proxy.ProxyConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(org.apache.activemq.proxy.ProxyConnector)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void registerJmsConnectorMBean(org.apache.activemq.network.jms.JmsConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.jms.JmsConnector addJmsConnector(org.apache.activemq.network.jms.JmsConnector)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker addInterceptors(org.apache.activemq.broker.Broker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()"
        ]
    },
    "org.apache.activemq.network.NetworkConnector:void registerNetworkBridgeMBean(org.apache.activemq.network.NetworkBridge)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.MBeanNetworkListener:void onStart(org.apache.activemq.network.NetworkBridge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()"
        ]
    },
    "org.apache.activemq.network.MBeanBridgeDestination:void onOutboundMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.MBeanNetworkListener:void onOutboundMessage(org.apache.activemq.network.NetworkBridge,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.network.MBeanBridgeDestination:void onInboundMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.MBeanNetworkListener:void onInboundMessage(org.apache.activemq.network.NetworkBridge,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerView:void register()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerView:void <init>(org.apache.activemq.transport.TransportLogger,java.lang.String,int,org.apache.activemq.broker.jmx.ManagementContext)"
        ]
    },
    "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void enableJmx()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void <init>(org.apache.activemq.broker.Broker,java.io.File)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerDestination(javax.management.ObjectName,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.jmx.DestinationView)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void register(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerProducer(javax.management.ObjectName,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.jmx.ProducerView)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addInactiveSubscription(org.apache.activemq.util.SubscriptionKey,org.apache.activemq.command.SubscriptionInfo,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(javax.management.ObjectName,boolean)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSlowConsumerStrategy(org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.ObjectName getSlowConsumerStrategy()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerRecoveredTransactionMBean(org.apache.activemq.transaction.XATransaction)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void registerMBean(org.apache.activemq.transaction.XATransaction)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startNetworkConnector(org.apache.activemq.network.NetworkConnector,java.util.concurrent.ThreadPoolExecutor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void start(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void autoStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void postConstruct()"
        ]
    },
    "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)",
            "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.DestinationFilter:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean tryOrderedCursorAdd(org.apache.activemq.command.Message,org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.Queue:void access$600(org.apache.activemq.broker.region.Queue)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.Queue:void wakeup()",
            "org.apache.activemq.broker.region.DestinationFilter:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:void stop()",
            "org.apache.activemq.broker.jmx.BrokerView:void restart()",
            "org.apache.activemq.broker.BrokerService:void masterFailed()",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void preDestroy()",
            "org.apache.activemq.broker.BrokerService:void stopGracefully(java.lang.String,java.lang.String,long,long)",
            "org.apache.activemq.broker.BrokerService:void containerShutdown()",
            "org.apache.activemq.broker.LockableServiceSupport:void stopBroker()",
            "org.apache.activemq.util.DefaultIOExceptionHandler$2:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportStatusDetector:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnector:void start()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:void storeCommit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.transaction.LocalTransaction:void commit(boolean)"
        ]
    },
    "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)",
            "org.apache.activemq.util.DefaultIOExceptionHandler:void handle(java.io.IOException)",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void <init>(org.apache.activemq.broker.Broker,java.io.File)"
        ]
    },
    "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void <init>(org.apache.activemq.broker.Broker,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.plugin.SubQueueSelectorCacheBrokerPlugin:org.apache.activemq.broker.Broker installPlugin(org.apache.activemq.broker.Broker)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerFactorySPI:org.apache.activemq.transport.Transport createTransportLogger(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,org.slf4j.Logger)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,java.lang.String,boolean,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerFactorySPI:org.apache.activemq.transport.Transport createTransportLogger(org.apache.activemq.transport.Transport,java.lang.String,boolean,boolean,int)"
        ]
    },
    "org.apache.activemq.broker.BrokerService$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void startBroker(boolean)",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void <init>(org.apache.activemq.broker.Broker,java.io.File)"
        ]
    },
    "org.apache.activemq.broker.view.DotFileInterceptorSupport:void generateFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void access$000(org.apache.activemq.broker.region.virtual.CompositeDestinationFilter,org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.RedeliveryPlugin:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void scheduledJob(java.lang.String,org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.TimeStampingBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.UserIDBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.BrokerSupport:void resendNoCopy(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.plugin.StatisticsBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendSubStats(org.apache.activemq.broker.ConnectionContext,javax.management.ObjectName[],org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void fireFailedForwardAdvisory(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:void <init>(org.apache.activemq.broker.TransportConnector,org.apache.activemq.transport.Transport,org.apache.activemq.broker.Broker,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.broker.jmx.ManagementContext,javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnector:org.apache.activemq.broker.Connection createConnection(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addConnector(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(org.apache.activemq.proxy.ProxyConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(java.net.URI)",
            "org.apache.activemq.broker.BrokerService:void setProxyConnectors(java.util.List)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.jms.JmsConnector addJmsConnector(org.apache.activemq.network.jms.JmsConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void processHelperProperties()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker getBroker()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()"
        ]
    },
    "org.apache.activemq.network.MBeanNetworkListener:void onOutboundMessage(org.apache.activemq.network.NetworkBridge,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceOutbound(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.network.MBeanNetworkListener:void onInboundMessage(org.apache.activemq.network.NetworkBridge,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceInboundMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerView:void <init>(org.apache.activemq.transport.TransportLogger,java.lang.String,int,org.apache.activemq.broker.jmx.ManagementContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportLoggerFactory:org.apache.activemq.transport.TransportLogger createTransportLogger(org.apache.activemq.transport.Transport,int,org.slf4j.Logger,java.lang.String,boolean,boolean,int)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void register(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(javax.management.ObjectName,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.ObjectName getSlowConsumerStrategy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterDestination(javax.management.ObjectName)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void registerMBean(org.apache.activemq.transaction.XATransaction)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void access$100(org.apache.activemq.broker.TransactionBroker,org.apache.activemq.transaction.XATransaction)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void postConstruct()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.lang.String)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.DestinationFilter:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor$1:void run()",
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor$1:void run()",
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean tryOrderedCursorAdd(org.apache.activemq.command.Message,org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void access$600(org.apache.activemq.broker.region.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$CursorAddSync:void afterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void wakeup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription$2:void afterCommit()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.AbstractSubscription:void wakeupDestinationsForDispatch()",
            "org.apache.activemq.broker.region.Queue$8:void afterCommit()",
            "org.apache.activemq.broker.region.Queue$8:void afterRollback()",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Queue:void resumeDispatch()",
            "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void wakeup()",
            "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void restart()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void preDestroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void stopGracefully(java.lang.String,java.lang.String,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:void stopGracefully(java.lang.String,java.lang.String,long,long)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void containerShutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService$7:void run()"
        ]
    },
    "org.apache.activemq.broker.LockableServiceSupport:void stopBroker()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)",
            "org.apache.activemq.util.DefaultIOExceptionHandler:void stopBroker(java.lang.Exception)",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void <init>(org.apache.activemq.broker.Broker,java.io.File)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectorView:void start()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transaction.XATransaction:void storeCommit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:void commit(boolean)"
        ]
    },
    "org.apache.activemq.transaction.LocalTransaction:void commit(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$4:void run()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler:void handle(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void handleIOException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.plugin.SubQueueSelectorCacheBrokerPlugin:org.apache.activemq.broker.Broker installPlugin(org.apache.activemq.broker.Broker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker addInterceptors(org.apache.activemq.broker.Broker)"
        ]
    },
    "org.apache.activemq.transport.TransportLoggerFactorySPI:org.apache.activemq.transport.Transport createTransportLogger(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.TransportLoggerFactorySPI:org.apache.activemq.transport.Transport createTransportLogger(org.apache.activemq.transport.Transport,java.lang.String,boolean,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopic:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)",
            "org.apache.activemq.broker.util.DestinationsPlugin:void importDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor$1:void run()",
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void access$000(org.apache.activemq.broker.region.virtual.CompositeDestinationFilter,org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter$1:void run()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$CursorAddSync:void afterCommit()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean tryOrderedCursorAdd(org.apache.activemq.command.Message,org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.util.RedeliveryPlugin:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)",
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void scheduledJob(java.lang.String,org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.memory.InMemoryJobScheduler:void dispatch(org.apache.activemq.broker.scheduler.memory.InMemoryJob)"
        ]
    },
    "org.apache.activemq.broker.util.TimeStampingBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.broker.UserIDBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void doForward(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.BaseDestination:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void sendScheduledJob(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.scheduler.Job,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:void scheduleRedelivery(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,long,int)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void doResend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.plugin.ForcePersistencyModeBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.plugin.StatisticsBroker:void sendStats(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQMapMessage,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void resendNoCopy(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void fireFailedForwardAdvisory(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$4:void run()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void masterFailed()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnector:org.apache.activemq.broker.Connection createConnection(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector$1$1:void run()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$3:void onCommand(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.broker.TransportConnection,org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addConnector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void setProxyConnectors(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void processHelperProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker getBroker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.store.MessageStore,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.jmx.BrokerView:void gc()",
            "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.util.DestinationsPlugin:void start()",
            "org.apache.activemq.broker.util.DestinationsPlugin:void importDestinations()",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptorFilter getFilter()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.lang.String getBrokerId()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getDestinations()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.jmx.BrokerView getAdminView()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext getAdminConnectionContext()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:void startNetworkConnector(org.apache.activemq.network.NetworkConnector,java.util.concurrent.ThreadPoolExecutor)",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.util.NetworkBridgeUtils:org.apache.activemq.command.BrokerSubscriptionInfo getBrokerSubscriptionInfo(org.apache.activemq.broker.BrokerService,org.apache.activemq.network.NetworkBridgeConfiguration)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void fireFailedForwardAdvisory(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)",
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)",
            "org.apache.activemq.advisory.AdvisoryBroker:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void access$600(org.apache.activemq.network.DemandForwardingBridgeSupport)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceOutbound(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceInboundMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.BrokerService$6:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterDestination(javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregister(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void access$100(org.apache.activemq.broker.TransactionBroker,org.apache.activemq.transaction.XATransaction)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])"
        ]
    },
    "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor$1:void run()",
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor$1:void run()",
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor$1:void run()",
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$CursorAddSync:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$2:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractSubscription:void wakeupDestinationsForDispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$8:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.Queue$8:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TempQueue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void resumeDispatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:void resume()"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void wakeup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription$2:void afterCommit()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.AbstractSubscription:void wakeupDestinationsForDispatch()",
            "org.apache.activemq.broker.region.DestinationFilter:void wakeup()",
            "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void stopGracefully(java.lang.String,java.lang.String,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService$7:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void <init>(org.apache.activemq.broker.Broker,java.io.File)"
        ]
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler:void stopBroker(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.DefaultIOExceptionHandler:void handle(java.io.IOException)",
            "org.apache.activemq.util.DefaultIOExceptionHandler:void access$200(org.apache.activemq.util.DefaultIOExceptionHandler,java.lang.Exception)"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectorView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.transaction.XATransaction:void commit(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.RecoveredXATransactionView:void heuristicCommit()",
            "org.apache.activemq.broker.TransactionBroker:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void commit(org.apache.activemq.command.LocalTransactionId,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void handleIOException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.virtual.VirtualTopic:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.CompositeDestinationInterceptor:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopic:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)",
            "org.apache.activemq.broker.util.DestinationsPlugin:void importDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.DestinationsPlugin:void importDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.DestinationsPlugin:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination getMirrorDestination(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void doStartBroker()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startDestinations()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopic:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)",
            "org.apache.activemq.broker.util.DestinationsPlugin:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.util.DestinationsPlugin:void importDestinations()",
            "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.TransactionBroker:void forceDestinationWakeupOnCompletion(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.transaction.Transaction,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.BaseCommand)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopic:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)",
            "org.apache.activemq.broker.util.DestinationsPlugin:void importDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker$1:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:void remove(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void doStop()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.util.DestinationsPlugin:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId,long)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.cluster.ConnectionSplitBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId,long)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.Topic$4:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void dealWithDuplicates()",
            "org.apache.activemq.broker.region.DestinationFilter:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$4:void run()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doPageIn(boolean,boolean,int)",
            "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean,int)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)",
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.util.RedeliveryPlugin:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)",
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.scheduler.memory.InMemoryJobScheduler:void dispatch(org.apache.activemq.broker.scheduler.memory.InMemoryJob)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.memory.InMemoryJobScheduler:void access$300(org.apache.activemq.broker.scheduler.memory.InMemoryJobScheduler,org.apache.activemq.broker.scheduler.memory.InMemoryJob)"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)",
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean copyMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int retryMessages(org.apache.activemq.broker.ConnectionContext,int)",
            "org.apache.activemq.broker.jmx.QueueView:boolean retryMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(org.apache.activemq.command.MessageDispatch,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$13:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.region.Topic$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discardExpiredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.Topic:void doBrowse(java.util.List,int)",
            "org.apache.activemq.broker.region.DestinationFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.PrefetchSubscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DestinationFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discardExpiredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DestinationFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.PrefetchSubscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DestinationFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$4:void run()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DestinationFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void messageSent(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DestinationFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DestinationFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.advisory.AdvisoryBroker:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.advisory.AdvisoryBroker:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void nowMasterBroker()",
            "org.apache.activemq.broker.BrokerService:void masterFailed()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()",
            "org.apache.activemq.advisory.AdvisoryBroker:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void networkBridgeStarted(org.apache.activemq.command.BrokerInfo,boolean,java.lang.String)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void networkBridgeStopped(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.NetworkBridgeView:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireVirtualDestinationAddAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.virtual.VirtualDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireVirtualDestinationRemoveAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector$1$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.TransportConnector$1:void onAccept(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$3:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.broker.TransportConnection,org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.DefaultBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.region.BaseDestination:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.store.MessageStore,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.Broker getRoot()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)",
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void gc()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.DestinationsPlugin:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.BrokerService$6:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptorFilter getFilter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptor(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptor(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptorForQueue(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptorForQueue(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptorForTopic(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptorForTopic(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptor(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptor(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.inteceptor.MessageInterceptor)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.lang.String getBrokerId()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTopics()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getQueues()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTempTopics()",
            "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTempQueues()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.jmx.BrokerView getAdminView()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext getAdminConnectionContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void remove(org.apache.activemq.broker.jmx.SubscriptionView,java.lang.String)",
            "org.apache.activemq.broker.util.DestinationsPlugin:void importDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.filter.DestinationFilter getVirtualTopicConsumerDestinationFilter()"
        ]
    },
    "org.apache.activemq.util.NetworkBridgeUtils:org.apache.activemq.command.BrokerSubscriptionInfo getBrokerSubscriptionInfo(org.apache.activemq.broker.BrokerService,org.apache.activemq.network.NetworkBridgeConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.NetworkBridgeView:void start()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.broker.TransportConnection,org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.LdapNetworkConnector:void start()",
            "org.apache.activemq.network.LdapNetworkConnector:void objectAdded(javax.naming.event.NamingEvent)",
            "org.apache.activemq.network.LdapNetworkConnector:void objectChanged(javax.naming.event.NamingEvent)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void access$600(org.apache.activemq.network.DemandForwardingBridgeSupport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()",
            "org.apache.activemq.broker.BrokerService$6:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService$6:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.BrokerService$6:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.BrokerService$6:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.scheduler.SchedulerBroker:void start()",
            "org.apache.activemq.broker.BrokerService$6:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerPluginSupport:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()",
            "org.apache.activemq.plugin.StatisticsBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.BrokerService$6:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregister(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessagePull(org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor$1:void run()",
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.transaction.Transaction:void fireAfterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.Transaction:void doPostCommit()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.transaction.Transaction:void fireAfterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:void doPostRollback()",
            "org.apache.activemq.transaction.LocalTransaction:void rollback()"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MappedQueueFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.security.AuthorizationDestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MappedQueueFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)",
            "org.apache.activemq.broker.region.DestinationFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.TempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.TempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:void resume()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processConsumerControl(org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.util.DefaultIOExceptionHandler:void access$200(org.apache.activemq.util.DefaultIOExceptionHandler,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.DefaultIOExceptionHandler$1$1:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.RecoveredXATransactionView:void heuristicCommit()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void commit(org.apache.activemq.command.LocalTransactionId,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void commit(org.apache.activemq.command.LocalTransactionId,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void commit(org.apache.activemq.command.LocalTransactionId,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.CompositeDestinationInterceptor:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.CompositeDestinationInterceptor:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.CompositeDestinationInterceptor:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination getMirrorDestination(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(java.lang.String,byte)"
        ]
    },
    "org.apache.activemq.broker.util.DestinationsPlugin:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopic:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)",
            "org.apache.activemq.broker.util.DestinationsPlugin:void importDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopic:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)",
            "org.apache.activemq.broker.util.DestinationsPlugin:void importDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopic:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)",
            "org.apache.activemq.broker.util.DestinationsPlugin:void importDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void forceDestinationWakeupOnCompletion(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.transaction.Transaction,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.BaseCommand)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void access$000(org.apache.activemq.broker.TransactionBroker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.transaction.Transaction,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.BaseCommand)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopic:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)",
            "org.apache.activemq.broker.util.DestinationsPlugin:void importDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopic:void create(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.RegionBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)",
            "org.apache.activemq.broker.util.DestinationsPlugin:void importDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:void remove(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.CompositeDestinationInterceptor:void remove(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$4:void run()"
        ]
    },
    "org.apache.activemq.broker.util.DestinationsPlugin:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void purgeInactiveDestinations()",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void removeDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.cluster.ConnectionSplitBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)"
        ]
    },
    "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.cluster.ConnectionSplitBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void dealWithDuplicates()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void doFillBatch()"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void dealWithDuplicates()",
            "org.apache.activemq.broker.region.DestinationFilter:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doPageIn(boolean,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:void doPageIn(boolean)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.AbstractSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doActualDispatch(org.apache.activemq.broker.region.cursors.PendingList)",
            "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.TopicSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.TopicSubscription:void setPrefetchSize(int)",
            "org.apache.activemq.broker.region.TopicSubscription:void access$100(org.apache.activemq.broker.region.TopicSubscription)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)",
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)",
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)",
            "org.apache.activemq.plugin.DiscardingDLQBroker:boolean sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.scheduler.memory.InMemoryJobScheduler:void access$300(org.apache.activemq.broker.scheduler.memory.InMemoryJobScheduler,org.apache.activemq.broker.scheduler.memory.InMemoryJob)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.scheduler.memory.InMemoryJobScheduler$ScheduledTask:void run()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean copyMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean copyMessageTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int retryMessages(org.apache.activemq.broker.ConnectionContext,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int retryMessages()"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean retryMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$13:void onCompletion(org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onException(java.io.IOException)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onException(java.io.IOException)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void collectBrokerInfos()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discardExpiredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.PrefetchSubscription$2:void afterCommit()",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long,boolean)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void setPrefetchSize(int)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void doBrowse(java.util.List,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Topic:void access$100(org.apache.activemq.broker.region.Topic,java.util.List,int)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.PrefetchSubscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DestinationFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void discardExpiredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.DestinationFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.PrefetchSubscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DestinationFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:void processExpired()",
            "org.apache.activemq.broker.region.Queue:void doBrowseList(java.util.List,int,org.apache.activemq.broker.region.cursors.PendingList,java.util.concurrent.locks.ReentrantReadWriteLock,org.apache.activemq.broker.ConnectionContext,java.lang.String)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$4:void run()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void unmatched(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Topic:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.DestinationFilter:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void unmatched(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.DestinationFilter:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageConsumed(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageDelivered(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DestinationFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageDiscarded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DestinationFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.BrokerFilter:void slowConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void fastProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.BaseDestination:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.usage.Usage)",
            "org.apache.activemq.broker.BrokerFilter:void isFull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination,org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void nowMasterBroker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void masterFailed()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerFilter:void nowMasterBroker()"
        ]
    },
    "org.apache.activemq.broker.jmx.NetworkBridgeView:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireVirtualDestinationAddAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.virtual.VirtualDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:void virtualDestinationAdded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.virtual.VirtualDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireVirtualDestinationRemoveAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void virtualDestinationRemoved(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.virtual.VirtualDestination)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector$1:void onAccept(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportServer:org.apache.activemq.transport.vm.VMTransport connect()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.DefaultBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI,boolean)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TempTopic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference,java.lang.Throwable)",
            "org.apache.activemq.broker.region.BaseDestination:void duplicateFromStore(org.apache.activemq.command.Message,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.inteceptor.MessageInterceptorFilter:void injectMessage(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()"
        ]
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptor(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptor(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptorForQueue(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptorForQueue(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptorForTopic(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptorForTopic(java.lang.String,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:org.apache.activemq.broker.inteceptor.MessageInterceptor addMessageInterceptor(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.inteceptor.MessageInterceptorRegistry:void removeMessageInterceptor(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.inteceptor.MessageInterceptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTopics()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getQueues()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTempTopics()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:java.util.Set getTempQueues()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void remove(org.apache.activemq.broker.jmx.SubscriptionView,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void removeMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.filter.DestinationFilter getVirtualTopicConsumerDestinationFilter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startVirtualConsumerDestinations()",
            "org.apache.activemq.broker.BrokerService:boolean shouldRecordVirtualDestination(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void doStartLocalAndRemoteBridges()"
        ]
    },
    "org.apache.activemq.broker.jmx.NetworkBridgeView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStart()"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.LdapNetworkConnector:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)",
            "org.apache.activemq.broker.jmx.NetworkConnectorView:void start()",
            "org.apache.activemq.broker.BrokerService$9:void run()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:void startNetworkConnector(org.apache.activemq.network.NetworkConnector,java.util.Set,java.util.concurrent.ThreadPoolExecutor)",
            "org.apache.activemq.network.LdapNetworkConnector:void addConnector(javax.naming.directory.SearchResult)"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:void objectAdded(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.LdapNetworkConnector:void objectChanged(javax.naming.event.NamingEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void triggerStartAsyncNetworkBridgeCreation()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.scheduler.SchedulerBroker:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.BrokerService$6:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerPluginSupport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.util.DestinationsPlugin:void start()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void start()",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void start()",
            "org.apache.activemq.broker.BrokerService$6:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.plugin.StatisticsBroker:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.BrokerService$6:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void start()"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessagePull(org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessagePull(org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.transaction.Transaction:void doPostCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.Transaction$2:java.lang.Object call()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.transaction.XATransaction:void doPostRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:void rollback()"
        ]
    },
    "org.apache.activemq.transaction.LocalTransaction:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.transaction.LocalTransaction:void commit(boolean)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MappedQueueFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationDestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MappedQueueFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void doCleanup()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processConsumerControl(org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processConsumerControl(org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void commit(org.apache.activemq.command.LocalTransactionId,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void commit(org.apache.activemq.command.LocalTransactionId,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.AbstractRegion:void reapplyInterceptor()",
            "org.apache.activemq.broker.region.CompositeDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(java.lang.String,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(java.lang.String)",
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getTopicDestinationView(java.lang.String)",
            "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getQueueDestinationView(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void access$000(org.apache.activemq.broker.TransactionBroker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.transaction.Transaction,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.BaseCommand)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])"
        ]
    },
    "org.apache.activemq.broker.region.CompositeDestinationInterceptor:void remove(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.CompositeDestinationInterceptor:void remove(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.TransportConnection:void stopAsync()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.Queue:boolean tryCursorAdd(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void doFillBatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void purge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.jmx.QueueView:void purge()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doPageIn(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void start()",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int retryMessages(org.apache.activemq.broker.ConnectionContext,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void expireMessages()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()"
        ]
    },
    "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PriorityNetworkDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.PriorityDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doActualDispatch(org.apache.activemq.broker.region.cursors.PendingList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doDispatch(org.apache.activemq.broker.region.cursors.PendingList)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.AbstractRegion:void processDispatchNotificationViaDestination(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void setPrefetchSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void access$100(org.apache.activemq.broker.region.TopicSubscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription$1:void afterCommit()"
        ]
    },
    "org.apache.activemq.broker.scheduler.memory.InMemoryJobScheduler$ScheduledTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean copyMessageTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean moveMessageTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int retryMessages()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void collectBrokerInfos()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void access$500(org.apache.activemq.network.DemandForwardingBridgeSupport)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.Queue:boolean tryCursorAdd(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean,long)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void dispatchPending()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)",
            "org.apache.activemq.broker.region.PrefetchSubscription$2:void afterCommit()",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long,boolean)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void setPrefetchSize(int)",
            "org.apache.activemq.broker.region.Topic:void clearPendingAndDispatch(org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription$1:void run()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long,boolean)",
            "org.apache.activemq.broker.region.AbstractSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doActualDispatch(org.apache.activemq.broker.region.cursors.PendingList)",
            "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void checkDone()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription$3:void onSuccess()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void setPrefetchSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.AbstractRegion:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.command.Message[] getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void access$100(org.apache.activemq.broker.region.Topic,java.util.List,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$6:void run()"
        ]
    },
    "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:void processExpired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void initialize()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doBrowseList(java.util.List,int,org.apache.activemq.broker.region.cursors.PendingList,java.util.concurrent.locks.ReentrantReadWriteLock,org.apache.activemq.broker.ConnectionContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doBrowse(java.util.List,int)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void unmatched(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void unmatched(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DestinationFilter:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference)",
            "org.apache.activemq.broker.region.QueueSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.SimpleAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.AbstractAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void virtualDestinationAdded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.virtual.VirtualDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.filter.DestinationFilter getVirtualTopicConsumerDestinationFilter()",
            "org.apache.activemq.broker.BrokerFilter:void virtualDestinationAdded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.virtual.VirtualDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void virtualDestinationRemoved(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.virtual.VirtualDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void virtualDestinationRemoved(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.virtual.VirtualDestination)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportServer:org.apache.activemq.transport.vm.VMTransport connect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopic:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractTempRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueue:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void removeMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:boolean shouldRecordVirtualDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.NetworkConnector$1:void doStart()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.NetworkConnectorView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.BrokerService$9:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.BrokerService:void startNetworkConnector(org.apache.activemq.network.NetworkConnector,java.util.Set,java.util.concurrent.ThreadPoolExecutor)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void triggerStartAsyncNetworkBridgeCreation()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.BrokerService$6:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.BrokerService$6:void start()",
            "org.apache.activemq.broker.BrokerService:void doStartBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerBroadcaster:void start()"
        ]
    },
    "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessagePull(org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessagePull(org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessagePull(org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.transaction.Transaction$2:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.PersistenceAdapterView:java.lang.String invoke(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.transaction.XATransaction:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.RecoveredXATransactionView:void heuristicRollback()",
            "org.apache.activemq.broker.TransactionBroker:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.transaction.XATransaction:void storeCommit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.transaction.XATransaction:void doPrePrepare()"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:void doCleanup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion$1:void run()"
        ]
    },
    "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processConsumerControl(org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.broker.BrokerFilter:void processConsumerControl(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void reapplyInterceptor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void reapplyInterceptor()"
        ]
    },
    "org.apache.activemq.broker.region.CompositeDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.region.AbstractRegion:void reapplyInterceptor()",
            "org.apache.activemq.broker.region.CompositeDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getDestinationView(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getTopicDestinationView(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.MessageBrokerView:org.apache.activemq.broker.view.BrokerDestinationView getQueueDestinationView(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:void stopAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void stopAsync()",
            "org.apache.activemq.broker.TransportConnection$3:void run()",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processShutdown(org.apache.activemq.command.ShutdownInfo)",
            "org.apache.activemq.broker.TransportConnection:void stop()",
            "org.apache.activemq.broker.TransportConnection:void stopAsync(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean cursorAdd(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.Queue:boolean tryCursorAdd(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean tryCursorAdd(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean tryOrderedCursorAdd(org.apache.activemq.command.Message,org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void fillBatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean hasNext()"
        ]
    },
    "org.apache.activemq.broker.region.TempQueue:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.AbstractRegion:void dispose(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractTempRegion:void dispose(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractTempRegion:void doDispose(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:void purge()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean removeMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void expireMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void access$100(org.apache.activemq.broker.region.Queue)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.command.Message[] getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PriorityNetworkDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PriorityDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy:void dispatchInitialMessage(javax.jms.Message,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.FixedCountSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.virtual.MappedQueueFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doDispatch(org.apache.activemq.broker.region.cursors.PendingList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)",
            "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean,int)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.AbstractRegion:void processDispatchNotificationViaDestination(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void processDispatchNotificationViaDestination(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueueRegion:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.QueueRegion:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription$1:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean moveMessageTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void access$500(org.apache.activemq.network.DemandForwardingBridgeSupport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean,long)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean,long)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)",
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void clearPendingAndDispatch(org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void clearPendingMessages()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long,boolean)",
            "org.apache.activemq.broker.region.AbstractSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doActualDispatch(org.apache.activemq.broker.region.cursors.PendingList)",
            "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void checkDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void destinationsAdded()",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void decrementQueueRef()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$3:void onSuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker$2:void onSuccess()",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.AbstractRegion:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:org.apache.activemq.command.Message[] browse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.command.Message[] getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:org.apache.activemq.command.Message[] getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable()"
        ]
    },
    "org.apache.activemq.broker.region.Topic$6:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.QueueMessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference)",
            "org.apache.activemq.broker.region.Queue:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.QueueSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.SimpleAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.JaasAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.security.AbstractAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.JaasDualAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void virtualDestinationAdded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.virtual.VirtualDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.filter.DestinationFilter getVirtualTopicConsumerDestinationFilter()",
            "org.apache.activemq.broker.BrokerFilter:void virtualDestinationAdded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.virtual.VirtualDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void virtualDestinationAdded(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.virtual.VirtualDestination)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void virtualDestinationRemoved(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.virtual.VirtualDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void virtualDestinationRemoved(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.virtual.VirtualDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void virtualDestinationRemoved(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.virtual.VirtualDestination)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractTempRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.jmx.PersistenceAdapterView:java.lang.String invoke(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.PersistenceAdapterView:java.lang.String getTransactions()",
            "org.apache.activemq.broker.jmx.PersistenceAdapterView:java.lang.String getData()"
        ]
    },
    "org.apache.activemq.broker.util.DestinationPathSeparatorBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.jmx.RecoveredXATransactionView:void heuristicRollback()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transaction.XATransaction:void doPrePrepare()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:void commit(boolean)",
            "org.apache.activemq.transaction.XATransaction:int prepare()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void reapplyInterceptor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void reapplyInterceptor()",
            "org.apache.activemq.broker.BrokerFilter:void reapplyInterceptor()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:void stopAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$3:void run()",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processShutdown(org.apache.activemq.command.ShutdownInfo)",
            "org.apache.activemq.broker.TransportConnection:void stop()",
            "org.apache.activemq.broker.TransportConnection:void stopAsync(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.TransportConnection:void delayedStop(int,java.lang.String,java.lang.Throwable)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy$1:void run()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long,boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void pullTimeout(long,boolean)",
            "org.apache.activemq.broker.TransportConnection$2:void run()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processShutdown(org.apache.activemq.command.ShutdownInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.jmx.ConnectionView:void stop()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection(org.apache.activemq.broker.TransportConnection)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void stopAsync(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean cursorAdd(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:boolean addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean tryAddMessageLast(org.apache.activemq.broker.region.MessageReference,long)",
            "org.apache.activemq.broker.region.Queue:boolean tryCursorAdd(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$BatchMessageRecoveryListener:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean cursorAdd(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean access$700(org.apache.activemq.broker.region.Queue,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void resetForGC()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void reset()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean,long)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:void clearPendingMessages()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractStoreCursor:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean,long)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.AbstractRegion:void dispose(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractTempRegion:void dispose(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractTempRegion:void doDispose(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void dispose(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractTempRegion:void dispose(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractTempRegion:void doDispose(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractTempRegion:void doPurge()"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,boolean)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean removeMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean removeMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void access$100(org.apache.activemq.broker.region.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$2:void run()"
        ]
    },
    "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy:void dispatchInitialMessage(javax.jms.Message,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy$1:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.policy.FixedCountSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueueRegion:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.QueueRegion:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TempTopic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void clearPendingMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void clearPendingMessages()",
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterRollback()",
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void destinationsAdded()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void decrementQueueRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,long)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker$2:void onSuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker$2:void onSuccess()",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchSync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.openmbean.CompositeData[] browseQueue(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.QueueMessageReference,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.jmx.PersistenceAdapterView:java.lang.String getTransactions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.PersistenceAdapterView:java.lang.String getData()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transaction.XATransaction:int prepare()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void reapplyInterceptor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void reapplyInterceptor()",
            "org.apache.activemq.broker.BrokerFilter:void reapplyInterceptor()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void delayedStop(int,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void pullTimeout(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void access$200(org.apache.activemq.broker.region.TopicSubscription,long,boolean)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.TransportConnection:void serviceExceptionAsync(java.io.IOException)",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void <init>(org.apache.activemq.broker.Broker,java.io.File)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy$2:void run()",
            "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectionView:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectionView:void start()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnector$1$1:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportStatusDetector:void doCollection(org.apache.activemq.broker.TransportConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$1:void onException(java.io.IOException)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void doBrowse(java.util.List,int)",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean access$700(org.apache.activemq.broker.region.Queue,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$CursorAddSync:void afterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void resetForGC()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void resetForGC()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void rebase()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void reset()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean,long)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:void clearPendingMessages()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void resetForGC()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void reset()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean,long)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:void clearPendingMessages()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:javax.management.openmbean.CompositeData getMessage(java.lang.String)",
            "org.apache.activemq.broker.jmx.QueueView:boolean retryMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void clearPendingMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void clearPendingMessages()",
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterRollback()",
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterCommit()",
            "org.apache.activemq.util.DefaultIOExceptionHandler$1$1:void run()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.AbstractRegion:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean,long)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean,long)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchPending()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.cursors.PendingList doPageInForDispatch(boolean,boolean,int)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.QueueMessageReference getMatchingMessage(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean hasNext()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractTempRegion:void doPurge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractTempRegion:void access$000(org.apache.activemq.broker.region.AbstractTempRegion)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean removeMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)"
        ]
    },
    "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy$1:void onMessage(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.BrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MappedQueueFilter:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.DestinationFilter:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void clearPendingMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void clearPendingMessages()",
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterRollback()",
            "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterCommit()"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker$PreparedDestinationCompletion:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatchSync(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.openmbean.CompositeData[] browseQueue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransactionBroker:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void access$200(org.apache.activemq.broker.region.TopicSubscription,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription$2:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void serviceExceptionAsync(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:void dispatchSync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectionView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.TransportStatusDetector:void doCollection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportStatusDetector:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void doBrowse(java.util.List,int)",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void doFillBatch()",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void doFillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void rebase()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void clearPendingMessages()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:javax.management.openmbean.CompositeData getMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractTempRegion:void access$000(org.apache.activemq.broker.region.AbstractTempRegion)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractTempRegion$1:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.BrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MappedQueueFilter:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.TopicSubscription:void pullTimeout(long,boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void abortSubscription(java.util.Map,boolean)",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void updateConsumerPrefetch(int)",
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$FlowControlTimeoutTask:void run()",
            "org.apache.activemq.broker.region.Queue$4:void run()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void updateConsumerPrefetch(int)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.TransportConnection:void updateClient(org.apache.activemq.command.ConnectionControl)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.TransportStatusDetector:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.RegionBroker)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void doFillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractTempRegion$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.BrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.BrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void abortSubscription(java.util.Map,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void run()",
            "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void abortConsumer(org.apache.activemq.broker.region.Subscription,boolean)",
            "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void abortAllQualifiedSlowConsumers()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void updateConsumerPrefetch(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$FlowControlTimeoutTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)",
            "org.apache.activemq.plugin.SubQueueSelectorCacheBroker:void <init>(org.apache.activemq.broker.Broker,java.io.File)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void updateConsumerPrefetch(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configurePrefetch(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void updateClient(org.apache.activemq.command.ConnectionControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:void updateClientClusterInfo()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy:void abortConsumer(org.apache.activemq.broker.region.Subscription,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConsumer(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConnection(javax.management.ObjectName)"
        ]
    },
    "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void abortAllQualifiedSlowConsumers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:void updateClientClusterInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addBrokerInClusterUpdate(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void removeBrokerInClusterUpdate(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConsumer(javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConsumer(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConnection(javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConnection(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.policy.AbortSlowAckConsumerStrategy:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void registerCallbackForNotFullNotification()",
            "org.apache.activemq.broker.region.Queue:void doPendingCursorAdditions()",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean,java.lang.Runnable,java.lang.Runnable)",
            "org.apache.activemq.store.InlineListenableFuture:void addListener(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void addBrokerInClusterUpdate(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeBrokerInClusterUpdate(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConsumer(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.AbortSlowConsumerStrategyView:void abortConnection(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void removeBroker(org.apache.activemq.broker.Connection,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()"
        ]
    }
}