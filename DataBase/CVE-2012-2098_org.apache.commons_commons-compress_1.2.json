{
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void blockSort()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void writeRun()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void writeRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void writeRun()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finish()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write0(int)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finalize()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream,int)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorOutputStream createCompressorOutputStream(java.lang.String,java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldAsciiEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endCompression()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsPutUByte(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsPutInt(int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void moveToFrontCodeAndSend()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void deflate()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryEnd()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[])"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeRecord(byte[])",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeRecord(byte[],int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void flushBlock()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)"
        ]
    },
    "org.apache.commons.compress.compressors.CompressorStreamFactory:org.apache.commons.compress.compressors.CompressorOutputStream createCompressorOutputStream(java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeNewEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldAsciiEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeOldBinaryEntry(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endCompression()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsPutUByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void init()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endCompression()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsPutInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endCompression()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void moveToFrontCodeAndSend()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void endBlock()"
        ]
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void moveToFrontCodeAndSend()"
        ]
    },
    "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void deflate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void deflateUntilInputIsNeeded()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralDirectoryEnd()",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeVersionNeededToExtractAndGeneralPurposeBits(int,boolean)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void writeRecord(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void writeEOFRecord()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void writeRecord(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarBuffer:void flushBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeCString(java.lang.String)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void closeArchiveEntry()",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long fill(long,long,char)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsFinishedWithStream()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void bsW(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues4()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues5(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues6(int,int)",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void sendMTFValues7()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.Lister:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void close()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:void close()",
            "org.apache.commons.compress.archivers.ar.ArArchiveInputStream:void close()",
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void writeHeader(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream:void <init>(java.io.OutputStream,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void deflateUntilInputIsNeeded()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void closeArchiveEntry()"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeVersionNeededToExtractAndGeneralPurposeBits(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeLocalFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeCentralFileHeader(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void closeArchiveEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.utils.IOUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:void writeOut(byte[],int,int)",
            "org.apache.commons.compress.archivers.tar.TarBuffer:void writeBlock()",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void write(byte[],int,int)",
            "org.apache.commons.compress.archivers.ArchiveOutputStream:void write(int)"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void writeEOFRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void finish()"
        ]
    },
    "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long fill(long,long,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long writeEntryHeader(org.apache.commons.compress.archivers.ar.ArArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:org.apache.commons.compress.changes.ChangeSetResults perform(org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveOutputStream)",
            "org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:void close()"
        ]
    },
    "org.apache.commons.compress.archivers.jar.JarArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.changes.ChangeSetPerformer:void copyStream(java.io.InputStream,org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    },
    "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:long writeEntryHeader(org.apache.commons.compress.archivers.ar.ArArchiveEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.commons.compress.archivers.ar.ArArchiveOutputStream:void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)"
        ]
    }
}