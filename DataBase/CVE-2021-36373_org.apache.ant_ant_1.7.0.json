{
    "org.apache.tools.zip.AsiExtraField:void parseFromLocalFileData(byte[],int,int)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.tools.zip.ExtraFieldUtils:org.apache.tools.zip.ZipExtraField[] parse(byte[])"
        ]
    },
    "org.apache.tools.zip.ExtraFieldUtils:org.apache.tools.zip.ZipExtraField[] parse(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipEntry:void <init>(java.util.zip.ZipEntry)",
            "org.apache.tools.zip.ZipEntry:void setExtra(byte[])"
        ]
    },
    "org.apache.tools.zip.ZipEntry:void <init>(java.util.zip.ZipEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipEntry:void <init>(org.apache.tools.zip.ZipEntry)"
        ]
    },
    "org.apache.tools.zip.ZipEntry:void setExtra(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipFile:void resolveLocalFileHeaderData()"
        ]
    },
    "org.apache.tools.zip.ZipEntry:void <init>(org.apache.tools.zip.ZipEntry)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.zip.ZipFile:void resolveLocalFileHeaderData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipFile:void <init>(java.io.File,java.lang.String)"
        ]
    },
    "org.apache.tools.zip.ZipFile:void <init>(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Expand:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:void fetchEntry()",
            "org.apache.tools.ant.types.ZipScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.zip.ZipFile:void <init>(java.io.File)",
            "org.apache.tools.zip.ZipFile:void <init>(java.lang.String)",
            "org.apache.tools.zip.ZipFile:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Expand:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Expand:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)"
        ]
    },
    "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.GUnzip:void extract()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.Resource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:int binaryCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.util.ResourceUtils:int textCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.resources.ZipResource:void fetchEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()"
        ]
    },
    "org.apache.tools.ant.types.ZipScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()"
        ]
    },
    "org.apache.tools.zip.ZipFile:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsSigned:boolean isSigned(java.io.File,java.lang.String)"
        ]
    },
    "org.apache.tools.zip.ZipFile:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.zip.ZipFile:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void grabFilesAndDirs(java.lang.String,java.util.List,java.util.List)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Expand:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:void executeMain()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.taskdefs.BUnzip2:void extract()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Unpack:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read(char[],int,int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.GUnzip:void extract()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Unpack:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.LoadProperties:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.LoadResource:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BZip2:void pack()",
            "org.apache.tools.ant.taskdefs.GZip:void pack()",
            "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.File,java.io.OutputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void access$000(org.apache.tools.ant.taskdefs.SQLExec$Transaction,java.io.PrintStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarFile(java.io.File,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Expand:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.GUnzip:void extract()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.CompressedResource:long getSize()",
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.Resource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:int binaryCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.util.ResourceUtils:int textCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.GUnzip:void extract()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.Resource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:int binaryCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.util.ResourceUtils:int textCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.GUnzip:void extract()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.JavaResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.Resource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:int binaryCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.util.ResourceUtils:int textCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.GUnzip:void extract()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.Resource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:int binaryCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.util.ResourceUtils:int textCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.resources.StringResource:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.GUnzip:void extract()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.Resource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:int binaryCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.util.ResourceUtils:int textCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.GUnzip:void extract()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.Resource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:int binaryCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.util.ResourceUtils:int textCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()"
        ]
    },
    "org.apache.tools.ant.types.resources.URLResource:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.GUnzip:void extract()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.Resource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:int binaryCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.util.ResourceUtils:int textCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.Resource:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.GUnzip:void extract()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.Resource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:int binaryCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.util.ResourceUtils:int textCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()"
        ]
    },
    "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ConcatResourceInputStream:int read()"
        ]
    },
    "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.ResourceUtils:int binaryCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.util.ResourceUtils:int textCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.ArchiveResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getSize()",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.ArchiveResource:int getMode()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveScanner:void scanme()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.ArchiveScanner:java.lang.String[] getIncludedFiles()",
            "org.apache.tools.ant.types.ArchiveScanner:int getIncludedFilesCount()",
            "org.apache.tools.ant.types.ArchiveScanner:java.lang.String[] getIncludedDirectories()",
            "org.apache.tools.ant.types.ArchiveScanner:int getIncludedDirsCount()",
            "org.apache.tools.ant.types.ArchiveScanner:java.util.Iterator getResourceFiles()",
            "org.apache.tools.ant.types.ArchiveScanner:java.util.Iterator getResourceDirectories()",
            "org.apache.tools.ant.types.ArchiveScanner:org.apache.tools.ant.types.Resource getResource(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.IsSigned:boolean isSigned(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsSigned:boolean eval()",
            "org.apache.tools.ant.taskdefs.SignJar:boolean isSigned(java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:void grabFilesAndDirs(java.lang.String,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void createIndexList(org.apache.tools.zip.ZipOutputStream)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Unpack:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read(char[],int,int)",
            "org.apache.tools.ant.taskdefs.Concat:void concatenate(char[],java.io.Writer,java.io.Reader)",
            "org.apache.tools.ant.taskdefs.VerifyJar$BufferingOutputFilterReader:int read(char[],int,int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.BZip2:void pack()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.GZip:void pack()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.File,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void access$000(org.apache.tools.ant.taskdefs.SQLExec$Transaction,java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar:void tarFile(java.io.File,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void execute()"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:long getSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.types.resources.comparators.Size:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Size:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getSize()",
            "org.apache.tools.ant.types.resources.FileResource:long getSize()",
            "org.apache.tools.ant.types.resources.PropertyResource:long getSize()",
            "org.apache.tools.ant.types.resources.StringResource:long getSize()",
            "org.apache.tools.ant.types.resources.URLResource:long getSize()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.JavaResource:boolean isExists()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.Exists:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Exists:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.JavaResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isExists()",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:boolean isExists()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.util.Collection cacheCollection()"
        ]
    },
    "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.util.ConcatResourceInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Untar$UntarCompressionMethod:java.io.InputStream decompress(java.lang.String,java.io.InputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.InputStream wrapStream(java.io.InputStream)",
            "org.apache.tools.ant.util.ConcatFileInputStream:int readCurrent()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:int readCurrent()",
            "org.apache.tools.bzip2.CBZip2InputStream:void init()",
            "org.apache.tools.bzip2.CBZip2InputStream:int bsR(int)",
            "org.apache.tools.bzip2.CBZip2InputStream:boolean bsGetBit()",
            "org.apache.tools.bzip2.CBZip2InputStream:void getAndMoveToFrontDecode()",
            "org.apache.tools.bzip2.CBZip2InputStream:int getAndMoveToFrontDecode0(int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.CopyPath:void execute()",
            "org.apache.tools.ant.taskdefs.FixCRLF:void processFile(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Move:void copyFile(java.io.File,java.io.File,boolean,boolean)",
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.Content:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:long getLastModified()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.comparators.Date:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Date:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.CompressedResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.FileResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.URLResource:long getLastModified()",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:long getSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.types.resources.comparators.Size:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Size:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getSize()",
            "org.apache.tools.ant.types.resources.FileResource:long getSize()",
            "org.apache.tools.ant.types.resources.PropertyResource:long getSize()",
            "org.apache.tools.ant.types.resources.StringResource:long getSize()",
            "org.apache.tools.ant.types.resources.URLResource:long getSize()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:boolean isDirectory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.Pack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[] selectFileResources(org.apache.tools.ant.types.Resource[])",
            "org.apache.tools.ant.types.resources.comparators.Type:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Type:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isDirectory()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.Resource:boolean isDirectory()",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:boolean isExists()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.Exists:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Exists:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.JavaResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isExists()",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:boolean isExists()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:int getMode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.ArchiveResource:int getMode()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveScanner:java.lang.String[] getIncludedFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copydir:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getFiles(java.io.File,org.apache.tools.ant.DirectoryScanner)",
            "org.apache.tools.ant.taskdefs.FixCRLF:void execute()",
            "org.apache.tools.ant.taskdefs.Javac:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.MakeUrl:java.lang.String filesetsToURL()",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.Rmic:void execute()",
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:java.lang.String[] getFileNames(org.apache.tools.ant.types.FileSet)",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabResources(org.apache.tools.ant.types.FileSet[])",
            "org.apache.tools.ant.types.resources.BCFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Files:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.String toString()",
            "org.apache.tools.ant.types.ArchiveScanner:java.util.Iterator getResourceFiles()",
            "org.apache.tools.ant.types.FileSet:java.util.Iterator iterator()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveScanner:int getIncludedFilesCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.types.resources.BCFileSet:int size()",
            "org.apache.tools.ant.types.resources.Files:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Files:int size()",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.FileSet:int size()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveScanner:java.lang.String[] getIncludedDirectories()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getDirs(java.io.File,org.apache.tools.ant.DirectoryScanner)",
            "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:java.lang.String[] getFileNames(org.apache.tools.ant.types.FileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabResources(org.apache.tools.ant.types.FileSet[])",
            "org.apache.tools.ant.types.resources.BCFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Files:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.ArchiveScanner:java.util.Iterator getResourceDirectories()",
            "org.apache.tools.ant.types.DirSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.DirSet:java.lang.String toString()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveScanner:int getIncludedDirsCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.types.resources.BCFileSet:int size()",
            "org.apache.tools.ant.types.resources.Files:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Files:int size()",
            "org.apache.tools.ant.types.DirSet:int size()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveScanner:java.util.Iterator getResourceFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveScanner:java.util.Iterator getResourceDirectories()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.ArchiveScanner:org.apache.tools.ant.types.Resource getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabResources(org.apache.tools.ant.types.FileSet[])",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.IsSigned:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()",
            "org.apache.tools.ant.types.selectors.SignedSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SignJar:boolean isSigned(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SignJar:boolean isUpToDate(java.io.File,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:void createIndexList(org.apache.tools.zip.ZipOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void finalizeZipOutputStream(org.apache.tools.zip.ZipOutputStream)"
        ]
    },
    "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.LineContains:int read()",
            "org.apache.tools.ant.filters.LineContainsRegExp:int read()",
            "org.apache.tools.ant.filters.PrefixLines:int read()",
            "org.apache.tools.ant.filters.StripLineComments:int read()"
        ]
    },
    "org.apache.tools.ant.filters.ConcatFilter:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.EscapeUnicode:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.FixCrLfFilter:void initInternalFilters()"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$AddEofFilter:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$AddTabFilter:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$MaskJavaTabLiteralsFilter:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$NormalizeEolFilter:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveTabFilter:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ReplaceTokens:int read()"
        ]
    },
    "org.apache.tools.ant.filters.StripJavaComments:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.StripLineBreaks:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.TabsToSpaces:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.HeadFilter:int read()",
            "org.apache.tools.ant.filters.TailFilter:int read()",
            "org.apache.tools.ant.filters.TokenFilter:int read()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.TokenFilter:int read()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Concat:void concatenate(char[],java.io.Writer,java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.VerifyJar$BufferingOutputFilterReader:int read(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read(char[],int,int)",
            "org.apache.tools.ant.taskdefs.Concat:void concatenate(char[],java.io.Writer,java.io.Reader)",
            "org.apache.tools.ant.taskdefs.VerifyJar$BufferingOutputFilterReader:int read(char[],int,int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Pack:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.SQLExec:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.Size:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.Size:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:long getSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.types.resources.comparators.Size:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Size:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getSize()",
            "org.apache.tools.ant.types.resources.FileResource:long getSize()",
            "org.apache.tools.ant.types.resources.PropertyResource:long getSize()",
            "org.apache.tools.ant.types.resources.StringResource:long getSize()",
            "org.apache.tools.ant.types.resources.URLResource:long getSize()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.PropertyResource:long getSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.types.resources.comparators.Size:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Size:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getSize()",
            "org.apache.tools.ant.types.resources.FileResource:long getSize()",
            "org.apache.tools.ant.types.resources.PropertyResource:long getSize()",
            "org.apache.tools.ant.types.resources.StringResource:long getSize()",
            "org.apache.tools.ant.types.resources.URLResource:long getSize()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.StringResource:long getSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.types.resources.comparators.Size:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Size:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getSize()",
            "org.apache.tools.ant.types.resources.FileResource:long getSize()",
            "org.apache.tools.ant.types.resources.PropertyResource:long getSize()",
            "org.apache.tools.ant.types.resources.StringResource:long getSize()",
            "org.apache.tools.ant.types.resources.URLResource:long getSize()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.URLResource:long getSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.types.resources.comparators.Size:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Size:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getSize()",
            "org.apache.tools.ant.types.resources.FileResource:long getSize()",
            "org.apache.tools.ant.types.resources.PropertyResource:long getSize()",
            "org.apache.tools.ant.types.resources.StringResource:long getSize()",
            "org.apache.tools.ant.types.resources.URLResource:long getSize()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.Resource:long getSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.types.resources.comparators.Size:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Size:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getSize()",
            "org.apache.tools.ant.types.resources.FileResource:long getSize()",
            "org.apache.tools.ant.types.resources.PropertyResource:long getSize()",
            "org.apache.tools.ant.types.resources.StringResource:long getSize()",
            "org.apache.tools.ant.types.resources.URLResource:long getSize()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.util.FileUtils:boolean contentEquals(java.io.File,java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copy:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Sync:void execute()",
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Length:void execute()",
            "org.apache.tools.ant.taskdefs.Length:boolean eval()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Touch:void touch()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Unpack:void setSrc(java.io.File)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XSLTProcess:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getNonFileSetResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.Exists:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.Exists:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:boolean isExists()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.Exists:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Exists:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.CompressedResource:long getSize()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.JavaResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isExists()",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:boolean isExists()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:boolean isExists()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.Exists:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Exists:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.JavaResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isExists()",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:boolean isExists()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.URLResource:boolean isExists()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.Exists:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Exists:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.JavaResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isExists()",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:boolean isExists()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:boolean archiveIsUpToDate(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,int)",
            "org.apache.tools.ant.util.ResourceUtils$Outdated:boolean isSelected(org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.MakeUrl:java.lang.String filesetsToURL()",
            "org.apache.tools.ant.taskdefs.MatchingTask:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(java.io.File)",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:java.lang.String[] getFileNames(org.apache.tools.ant.types.FileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabResources(org.apache.tools.ant.types.FileSet[])",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.String toString()",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.FileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.FileSet:int size()"
        ]
    },
    "org.apache.tools.ant.types.Resource:boolean isExists()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.Exists:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Exists:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.JavaResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isExists()",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:boolean isExists()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.Resource:long getLastModified()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.comparators.Date:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Date:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.CompressedResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.FileResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.URLResource:long getLastModified()",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.util.Collection cacheCollection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:int size()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DirectoryScanner:void scan()",
            "org.apache.tools.ant.DirectoryScanner:void processIncluded(java.lang.String,java.io.File,java.util.Vector,java.util.Vector,java.util.Vector)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Untar$UntarCompressionMethod:java.io.InputStream decompress(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Untar:void expandStream(java.lang.String,java.io.InputStream,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.resources.BZip2Resource:java.io.InputStream wrapStream(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.InputStream getInputStream()"
        ]
    },
    "org.apache.tools.ant.util.ConcatFileInputStream:int readCurrent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ConcatFileInputStream:int read()"
        ]
    },
    "org.apache.tools.ant.util.ConcatResourceInputStream:int readCurrent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ConcatResourceInputStream:int read()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void <init>(java.io.InputStream)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:int bsR(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void initBlock()",
            "org.apache.tools.bzip2.CBZip2InputStream:char bsGetUByte()",
            "org.apache.tools.bzip2.CBZip2InputStream:int bsGetInt()",
            "org.apache.tools.bzip2.CBZip2InputStream:void recvDecodingTables()",
            "org.apache.tools.bzip2.CBZip2InputStream:void getAndMoveToFrontDecode()",
            "org.apache.tools.bzip2.CBZip2InputStream:int getAndMoveToFrontDecode0(int)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:boolean bsGetBit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void recvDecodingTables()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void getAndMoveToFrontDecode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void initBlock()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:int getAndMoveToFrontDecode0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void getAndMoveToFrontDecode()"
        ]
    },
    "org.apache.tools.ant.taskdefs.CopyPath:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.FixCRLF:void processFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.FixCRLF:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Move:void copyFile(java.io.File,java.io.File,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Move:void moveFile(java.io.File,java.io.File,boolean,boolean)"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void doFileOperations()"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File,org.apache.tools.ant.types.FilterSetCollection,boolean,boolean,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.Content:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XSLTProcess:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.io.File,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XSLTProcess:void execute()"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.Date:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.Date:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:long getLastModified()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.comparators.Date:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Date:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.CompressedResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.FileResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.URLResource:long getLastModified()",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:long getLastModified()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.comparators.Date:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Date:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.CompressedResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.FileResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.URLResource:long getLastModified()",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.URLResource:long getLastModified()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.comparators.Date:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Date:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.CompressedResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.FileResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.URLResource:long getLastModified()",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Pack:void setSrcResource(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void setSrc(java.io.File)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:void setSrcResource(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XmlProperty:void setFile(java.io.File)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[] selectFileResources(org.apache.tools.ant.types.Resource[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getNonFileSetResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.Type:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.Type:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:boolean isDirectory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.Pack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[] selectFileResources(org.apache.tools.ant.types.Resource[])",
            "org.apache.tools.ant.types.resources.comparators.Type:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Type:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isDirectory()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.Resource:boolean isDirectory()",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:boolean isDirectory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.Pack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[] selectFileResources(org.apache.tools.ant.types.Resource[])",
            "org.apache.tools.ant.types.resources.comparators.Type:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Type:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isDirectory()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.Resource:boolean isDirectory()",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.URLResource:boolean isDirectory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.Pack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[] selectFileResources(org.apache.tools.ant.types.Resource[])",
            "org.apache.tools.ant.types.resources.comparators.Type:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Type:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isDirectory()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.Resource:boolean isDirectory()",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.Resource:boolean isDirectory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.Pack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[] selectFileResources(org.apache.tools.ant.types.Resource[])",
            "org.apache.tools.ant.types.resources.comparators.Type:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Type:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isDirectory()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.Resource:boolean isDirectory()",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copydir:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getFiles(java.io.File,org.apache.tools.ant.DirectoryScanner)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)"
        ]
    },
    "org.apache.tools.ant.taskdefs.FixCRLF:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Apt:void execute()",
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MakeUrl:java.lang.String filesetsToURL()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MakeUrl:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Move:void doFileOperations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Replace:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Rmic:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Sync:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar:java.lang.String[] getFileNames(org.apache.tools.ant.types.FileSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar$TarFileSet:java.lang.String[] getFiles(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.UpToDate:void execute()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabResources(org.apache.tools.ant.types.FileSet[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.BCFileSet:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.DependSet$HideMissingBasedir:java.util.Iterator iterator()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BCFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.FileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Files:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.FileSet:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.DependSet$HideMissingBasedir:java.util.Iterator iterator()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BCFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.FileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.resources.BCFileSet:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.DependSet$HideMissingBasedir:int size()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BCFileSet:int size()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.FileSet:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Files:int size()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.DependSet$HideMissingBasedir:int size()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BCFileSet:int size()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.FileSet:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.types.FileSet:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.DependSet$HideMissingBasedir:int size()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BCFileSet:int size()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.FileSet:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Delete:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getDirs(java.io.File,org.apache.tools.ant.DirectoryScanner)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Touch:void touch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Touch:void execute()"
        ]
    },
    "org.apache.tools.ant.types.DirSet:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.DirSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.DirSet:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.DirSet:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.DirSet:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.DependSet$HideMissingBasedir:java.util.Iterator iterator()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BCFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.FileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.And:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ConditionTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.Exit:boolean testNestedCondition()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.WaitFor:void execute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.selectors.SignedSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SignJar:boolean isUpToDate(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SignJar:void signOneJar(java.io.File,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:void finalizeZipOutputStream(org.apache.tools.zip.ZipOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:boolean createEmptyZip(java.io.File)",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.filters.LineContains:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.LineContains:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.LineContainsRegExp:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.LineContainsRegExp:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.PrefixLines:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.PrefixLines:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.StripLineComments:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.StripLineComments:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read(char[],int,int)",
            "org.apache.tools.ant.taskdefs.Concat:void concatenate(char[],java.io.Writer,java.io.Reader)",
            "org.apache.tools.ant.taskdefs.VerifyJar$BufferingOutputFilterReader:int read(char[],int,int)"
        ]
    },
    "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:long skip(long)"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter:void initInternalFilters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.FixCrLfFilter:java.io.Reader chain(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter$AddEofFilter:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter$AddTabFilter:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter$MaskJavaTabLiteralsFilter:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter$NormalizeEolFilter:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$NormalizeEolFilter:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter$RemoveTabFilter:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read(char[])",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read(char[],int,int)",
            "org.apache.tools.ant.taskdefs.Concat:void concatenate(char[],java.io.Writer,java.io.Reader)",
            "org.apache.tools.ant.taskdefs.VerifyJar$BufferingOutputFilterReader:int read(char[],int,int)"
        ]
    },
    "org.apache.tools.ant.filters.ReplaceTokens:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.ReplaceTokens:int read()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.HeadFilter:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.TailFilter:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.TokenFilter:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.util.Collection cacheCollection()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.Reverse:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(java.io.File,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:boolean contentEquals(java.io.File,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.FilesMatch:boolean eval()",
            "org.apache.tools.ant.util.FileUtils:boolean contentEquals(java.io.File,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Sync:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Chmod:void execute()",
            "org.apache.tools.ant.taskdefs.GenerateKey:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void signOneJar(java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.VerifyJar:void verifyOneJar(java.io.File)",
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Length:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Length:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Unpack:void setSrc(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Unpack:void setSrc(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getNonFileSetResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar:boolean archiveIsUpToDate(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.ResourceUtils$Outdated:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MatchingTask:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copydir:void execute()",
            "org.apache.tools.ant.taskdefs.FixCRLF:void execute()",
            "org.apache.tools.ant.taskdefs.Javac:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.Rmic:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void execute()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.types.resources.BCFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.BCFileSet:int size()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.MakeUrl:java.lang.String filesetsToURL()",
            "org.apache.tools.ant.taskdefs.MatchingTask:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(java.io.File)",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:java.lang.String[] getFileNames(org.apache.tools.ant.types.FileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabResources(org.apache.tools.ant.types.FileSet[])",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.String toString()",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DirSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.DirSet:int size()",
            "org.apache.tools.ant.types.DirSet:java.lang.String toString()",
            "org.apache.tools.ant.types.FileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.FileSet:int size()"
        ]
    },
    "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:java.util.Map buildMap(org.apache.tools.ant.types.Resource[],java.io.File,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory)",
            "org.apache.tools.ant.util.SourceFileScanner:java.lang.String[] restrict(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Restrict:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:int size()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Restrict:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Tar:boolean isFileFileSet(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Restrict:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.ZipResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.ResourceCollection assertFilesystemOnly(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.DirectoryScanner:void scan()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.types.resources.Files:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Files:int size()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveScanner:void scan()"
        ]
    },
    "org.apache.tools.ant.DirectoryScanner:void processIncluded(java.lang.String,java.io.File,java.util.Vector,java.util.Vector,java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DirectoryScanner:void accountForIncludedFile(java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:void accountForIncludedDir(java.lang.String,java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Untar:void expandStream(java.lang.String,java.io.InputStream,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Untar:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)"
        ]
    },
    "org.apache.tools.ant.util.ConcatFileInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Untar$UntarCompressionMethod:java.io.InputStream decompress(java.lang.String,java.io.InputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.InputStream wrapStream(java.io.InputStream)",
            "org.apache.tools.ant.util.ConcatFileInputStream:int readCurrent()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:int readCurrent()",
            "org.apache.tools.bzip2.CBZip2InputStream:void init()",
            "org.apache.tools.bzip2.CBZip2InputStream:int bsR(int)",
            "org.apache.tools.bzip2.CBZip2InputStream:boolean bsGetBit()",
            "org.apache.tools.bzip2.CBZip2InputStream:void getAndMoveToFrontDecode()",
            "org.apache.tools.bzip2.CBZip2InputStream:int getAndMoveToFrontDecode0(int)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Untar$UntarCompressionMethod:java.io.InputStream decompress(java.lang.String,java.io.InputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.InputStream wrapStream(java.io.InputStream)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void initBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void init()",
            "org.apache.tools.bzip2.CBZip2InputStream:void setupRandPartA()",
            "org.apache.tools.bzip2.CBZip2InputStream:void setupNoRandPartA()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:char bsGetUByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void initBlock()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:int bsGetInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void initBlock()",
            "org.apache.tools.bzip2.CBZip2InputStream:void complete()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void recvDecodingTables()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void getAndMoveToFrontDecode()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Move:void moveFile(java.io.File,java.io.File,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copy:void doFileOperations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File,org.apache.tools.ant.types.FilterSetCollection,boolean,boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String,org.apache.tools.ant.types.FilterSetCollection,boolean,boolean,java.lang.String)",
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File,org.apache.tools.ant.types.FilterSetCollection,boolean,boolean)"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Concat:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Pack:void setSrc(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:void setFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Apt:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MakeUrl:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar$TarFileSet:java.lang.String[] getFiles(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.UpToDate:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.taskdefs.Concat$1)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Move:void validateAttributes()"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet$HideMissingBasedir:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.LoadProperties:void setSrcFile(java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.LoadFile:void setSrcFile(java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.ArchiveResource:void <init>(org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.types.resources.ZipResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.CompressedResource:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.util.Collection cacheCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.util.Collection cacheCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.taskdefs.Execute:java.util.Vector addVMSLogicals(java.util.Vector,java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void writeIndexLikeList(java.util.List,java.util.List,java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredText(org.apache.tools.ant.taskdefs.MacroDef$Text)",
            "org.apache.tools.ant.taskdefs.MacroInstance:java.util.Map getNsElements()",
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.Sequential:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void addAll(java.util.Collection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.FailFast:void <init>(java.lang.Object,java.util.Iterator)",
            "org.apache.tools.ant.types.resources.FailFast:boolean hasNext()",
            "org.apache.tools.ant.types.resources.FailFast:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()",
            "org.apache.tools.ant.types.spi.Service:java.io.InputStream getAsStream()",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.RedirectorElement:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CollectionUtils$1:boolean hasMoreElements()",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ContainerMapper:boolean contains(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)",
            "org.apache.tools.ant.util.DOMElementWriter:void removeNSDefinitions(org.w3c.dom.Element)",
            "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List,char)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:void initSubProject(org.apache.tools.ant.ComponentHelper)",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)",
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.Project:void fireBuildStarted()",
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireSubBuildStarted()",
            "org.apache.tools.ant.Project:void fireSubBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTaskStarted(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)",
            "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.Target:org.apache.tools.ant.Task[] getTasks()",
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void addConfiguredStyle(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.util.Collection cacheCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Union:java.lang.String[] list()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.Path:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Task:void perform()",
            "org.apache.tools.ant.TaskAdapter:void execute()"
        ]
    },
    "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Input:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.MailLogger:void sendMimeMail(org.apache.tools.ant.Project,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Property:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void overrideProperties()",
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.Object processNode(org.w3c.dom.Node,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:java.lang.String toLongString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:java.lang.String toLongString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:java.lang.String toLongString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:java.lang.String toLongString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:java.lang.String toLongString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.AndSelector:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.MajoritySelector:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.NoneSelector:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.OrSelector:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.SelectSelector:java.lang.String toString()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.FilterSet:java.lang.String iReplaceTokens(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.Path:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.JavaResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.Commandline$Argument:void setPath(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.types.Commandline$Argument:void setPathref(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.types.CommandlineJava:void addCommandsToList(java.util.ListIterator)",
            "org.apache.tools.ant.types.CommandlineJava:boolean haveClasspath()",
            "org.apache.tools.ant.types.Environment$Variable:void setPath(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.PropertySet:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete$ReverseDirs$1:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.Reverse:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.CompressedResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.JavaResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.Resource:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:java.lang.String toLongString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Diagnostics:void doReport(java.io.PrintStream)"
        ]
    },
    "org.apache.tools.ant.Location:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.taskdefs.MacroDef:boolean sameOrSimilar(java.lang.Object,boolean)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.URLResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.selectors.modifiedselector.EqualComparator:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)"
        ]
    },
    "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getUserProperty(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:java.lang.String replaceProperties(java.lang.String)",
            "org.apache.tools.ant.ProjectHelper:java.lang.String replaceProperties(org.apache.tools.ant.Project,java.lang.String,java.util.Hashtable)"
        ]
    },
    "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void copyInheritedProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet$HideMissingBasedir:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.ResourceCount:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Resources:void validate()"
        ]
    },
    "org.apache.tools.ant.types.resources.Resources:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void addConfiguredStyle(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.types.Path:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)",
            "org.apache.tools.ant.taskdefs.compilers.Gcj:org.apache.tools.ant.types.Commandline setupGCJCommand()",
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jvc:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Kjc:org.apache.tools.ant.types.Commandline setupKjcCommand()",
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.DependSet:void execute()",
            "org.apache.tools.ant.taskdefs.Javac:void checkParameters()",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.CommandlineJava:void addCommandsToList(java.util.ListIterator)",
            "org.apache.tools.ant.types.CommandlineJava:int size()",
            "org.apache.tools.ant.types.CommandlineJava:boolean haveBootclasspath(boolean)",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Touch:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Exit:boolean testNestedCondition()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Exit:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.SignJar:void signOneJar(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SignJar:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:boolean createEmptyZip(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:long skip(long)"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter:java.io.Reader chain(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.util.ChainReaderHelper:java.io.Reader getAssembledReader()",
            "org.apache.tools.ant.taskdefs.FixCRLF:java.io.Reader chain(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Replace$FileInput:boolean readChunk()",
            "org.apache.tools.ant.util.FileUtils:java.lang.String readFully(java.io.Reader,int)",
            "org.apache.tools.ant.util.ReaderInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.Reverse:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(java.io.File,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.FilesMatch:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:boolean contentEquals(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.FixCRLF:void processFile(java.lang.String)",
            "org.apache.tools.ant.types.selectors.DifferentSelector:boolean selectionTest(java.io.File,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Chmod:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.GenerateKey:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void signOneJar(java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.VerifyJar:void verifyOneJar(java.io.File)",
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.GenerateKey:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.VerifyJar:void verifyOneJar(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Unpack:void setSrc(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copy:java.util.Map buildMap(org.apache.tools.ant.types.Resource[],java.io.File,org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)"
        ]
    },
    "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getNonFileSetResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.util.SourceFileScanner:java.lang.String[] restrict(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void buildMap(java.io.File,java.io.File,java.lang.String[],org.apache.tools.ant.util.FileNameMapper,java.util.Hashtable)",
            "org.apache.tools.ant.util.SourceFileScanner:java.lang.String[] restrict(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.SourceFileScanner:java.io.File[] restrictAsFiles(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.Restrict:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Restrict:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.Restrict:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Restrict:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar:boolean isFileFileSet(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Tar:boolean isFileFileSet(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.ZipResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.ResourceCollection assertFilesystemOnly(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Tar:boolean isFileFileSet(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.ZipResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.ResourceCollection assertFilesystemOnly(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.resources.Restrict:boolean isFilesystemOnly()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Tar:boolean isFileFileSet(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Restrict:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.ZipResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.ResourceCollection assertFilesystemOnly(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.resources.ZipResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.ArchiveResource:void <init>(org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.ResourceCollection assertFilesystemOnly(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Path:java.lang.String[] list()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:boolean isFilesystemOnly()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveScanner:void scan()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.types.resources.Files:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Files:int size()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.DirectoryScanner:void accountForIncludedFile(java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.DirectoryScanner:void scandir(java.io.File,java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.DirectoryScanner:void accountForIncludedDir(java.lang.String,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.DirectoryScanner:void scandir(java.io.File,java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Untar:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Expand:void execute()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void setupRandPartA()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void setupBlock()",
            "org.apache.tools.bzip2.CBZip2InputStream:void setupRandPartB()",
            "org.apache.tools.bzip2.CBZip2InputStream:void setupRandPartC()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void setupNoRandPartA()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void setupBlock()",
            "org.apache.tools.bzip2.CBZip2InputStream:void setupNoRandPartB()",
            "org.apache.tools.bzip2.CBZip2InputStream:void setupNoRandPartC()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void initBlock()"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String,org.apache.tools.ant.types.FilterSetCollection,boolean,boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File,org.apache.tools.ant.types.FilterSetCollection,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String,org.apache.tools.ant.types.FilterSetCollection)",
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String,org.apache.tools.ant.types.FilterSetCollection,boolean)",
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String,org.apache.tools.ant.types.FilterSetCollection,boolean,boolean)",
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File)",
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File,org.apache.tools.ant.types.FilterSetCollection)",
            "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File,org.apache.tools.ant.types.FilterSetCollection,boolean)",
            "org.apache.tools.ant.Project:void copyFile(java.io.File,java.io.File,boolean,boolean,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.taskdefs.Concat$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Move:void validateAttributes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.LoadProperties:void setSrcFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.LoadFile:void setSrcFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:void <init>(org.apache.tools.ant.types.Resource,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.TarResource:void <init>(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarEntry)"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:void <init>(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BZip2Resource:void <init>(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.GZipResource:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.util.Collection cacheCollection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:int size()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()"
        ]
    },
    "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.util.Collection cacheCollection()"
        ]
    },
    "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ant:void initializeProject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ant:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.CallTarget:void execute()",
            "org.apache.tools.ant.taskdefs.SubAnt:void execute(java.io.File,java.io.File)",
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Antlib:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Definer:void loadAntlib(java.lang.ClassLoader,java.net.URL)",
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Checksum:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean eval()"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute:java.util.Vector addVMSLogicals(java.util.Vector,java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:java.util.Vector getProcEnvironment()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Expand:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Untar:void expandStream(java.lang.String,java.io.InputStream,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void initZipOutputStream(org.apache.tools.zip.ZipOutputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:void writeIndexLikeList(java.util.List,java.util.List,java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void createIndexList(org.apache.tools.zip.ZipOutputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredText(org.apache.tools.ant.taskdefs.MacroDef$Text)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.MacroInstance:java.util.Map getNsElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroInstance:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Sequential:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.SignJar:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.VerifyJar:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void invokeCircularReferenceCheck(org.apache.tools.ant.types.DataType,java.util.Stack,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void invokeCircularReferenceCheck(org.apache.tools.ant.types.DataType,java.util.Stack,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void addAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void invokeCircularReferenceCheck(org.apache.tools.ant.types.DataType,java.util.Stack,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.FailFast:void <init>(java.lang.Object,java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()"
        ]
    },
    "org.apache.tools.ant.types.resources.FailFast:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.taskdefs.Execute:java.util.Vector addVMSLogicals(java.util.Vector,java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void writeIndexLikeList(java.util.List,java.util.List,java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredText(org.apache.tools.ant.taskdefs.MacroDef$Text)",
            "org.apache.tools.ant.taskdefs.MacroInstance:java.util.Map getNsElements()",
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.Sequential:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void addAll(java.util.Collection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.FailFast:void <init>(java.lang.Object,java.util.Iterator)",
            "org.apache.tools.ant.types.resources.FailFast:boolean hasNext()",
            "org.apache.tools.ant.types.resources.FailFast:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()",
            "org.apache.tools.ant.types.spi.Service:java.io.InputStream getAsStream()",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.RedirectorElement:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CollectionUtils$1:boolean hasMoreElements()",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ContainerMapper:boolean contains(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)",
            "org.apache.tools.ant.util.DOMElementWriter:void removeNSDefinitions(org.w3c.dom.Element)",
            "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List,char)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:void initSubProject(org.apache.tools.ant.ComponentHelper)",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)",
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.Project:void fireBuildStarted()",
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireSubBuildStarted()",
            "org.apache.tools.ant.Project:void fireSubBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTaskStarted(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)",
            "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.Target:org.apache.tools.ant.Task[] getTasks()",
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.FailFast:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.taskdefs.Execute:java.util.Vector addVMSLogicals(java.util.Vector,java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void writeIndexLikeList(java.util.List,java.util.List,java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredText(org.apache.tools.ant.taskdefs.MacroDef$Text)",
            "org.apache.tools.ant.taskdefs.MacroInstance:java.util.Map getNsElements()",
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.Sequential:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void addConfiguredStyle(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void addAll(java.util.Collection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Difference:org.apache.tools.ant.types.ResourceCollection nextRC(java.util.Iterator)",
            "org.apache.tools.ant.types.resources.FailFast:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.resources.Union:org.apache.tools.ant.types.ResourceCollection nextRC(java.util.Iterator)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()",
            "org.apache.tools.ant.types.spi.Service:java.io.InputStream getAsStream()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.RedirectorElement:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CollectionUtils$1:java.lang.Object nextElement()",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ContainerMapper:boolean contains(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)",
            "org.apache.tools.ant.util.DOMElementWriter:void removeNSDefinitions(org.w3c.dom.Element)",
            "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List,char)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:void initSubProject(org.apache.tools.ant.ComponentHelper)",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)",
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.Project:void fireBuildStarted()",
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireSubBuildStarted()",
            "org.apache.tools.ant.Project:void fireSubBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTaskStarted(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)",
            "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.Target:org.apache.tools.ant.Task[] getTasks()",
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.taskdefs.Execute:java.util.Vector addVMSLogicals(java.util.Vector,java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void writeIndexLikeList(java.util.List,java.util.List,java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredText(org.apache.tools.ant.taskdefs.MacroDef$Text)",
            "org.apache.tools.ant.taskdefs.MacroInstance:java.util.Map getNsElements()",
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.Sequential:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void addConfiguredStyle(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void addAll(java.util.Collection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Difference:org.apache.tools.ant.types.ResourceCollection nextRC(java.util.Iterator)",
            "org.apache.tools.ant.types.resources.FailFast:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.resources.Union:org.apache.tools.ant.types.ResourceCollection nextRC(java.util.Iterator)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()",
            "org.apache.tools.ant.types.spi.Service:java.io.InputStream getAsStream()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.RedirectorElement:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CollectionUtils$1:java.lang.Object nextElement()",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ContainerMapper:boolean contains(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)",
            "org.apache.tools.ant.util.DOMElementWriter:void removeNSDefinitions(org.w3c.dom.Element)",
            "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List,char)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:void initSubProject(org.apache.tools.ant.ComponentHelper)",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)",
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.Project:void fireBuildStarted()",
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireSubBuildStarted()",
            "org.apache.tools.ant.Project:void fireSubBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTaskStarted(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)",
            "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.Target:org.apache.tools.ant.Task[] getTasks()",
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void invokeCircularReferenceCheck(org.apache.tools.ant.types.DataType,java.util.Stack,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.taskdefs.Execute:java.util.Vector addVMSLogicals(java.util.Vector,java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void writeIndexLikeList(java.util.List,java.util.List,java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredText(org.apache.tools.ant.taskdefs.MacroDef$Text)",
            "org.apache.tools.ant.taskdefs.MacroInstance:java.util.Map getNsElements()",
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.Sequential:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void addAll(java.util.Collection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.FailFast:void <init>(java.lang.Object,java.util.Iterator)",
            "org.apache.tools.ant.types.resources.FailFast:boolean hasNext()",
            "org.apache.tools.ant.types.resources.FailFast:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()",
            "org.apache.tools.ant.types.spi.Service:java.io.InputStream getAsStream()",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.RedirectorElement:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CollectionUtils$1:boolean hasMoreElements()",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ContainerMapper:boolean contains(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)",
            "org.apache.tools.ant.util.DOMElementWriter:void removeNSDefinitions(org.w3c.dom.Element)",
            "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List,char)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:void initSubProject(org.apache.tools.ant.ComponentHelper)",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)",
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.Project:void fireBuildStarted()",
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireSubBuildStarted()",
            "org.apache.tools.ant.Project:void fireSubBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTaskStarted(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)",
            "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.Target:org.apache.tools.ant.Task[] getTasks()",
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void verifySettings()"
        ]
    },
    "org.apache.tools.ant.types.spi.Service:java.io.InputStream getAsStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)"
        ]
    },
    "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.Assertions:void applyAssertions(org.apache.tools.ant.types.CommandlineJava)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.CommandlineJava:void addCommandsToList(java.util.ListIterator)"
        ]
    },
    "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:java.util.Properties mergePropertySets()",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.PropertySet:int size()"
        ]
    },
    "org.apache.tools.ant.types.RedirectorElement:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void invokeCircularReferenceCheck(org.apache.tools.ant.types.DataType,java.util.Stack,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void buildMap(java.io.File,java.io.File,java.lang.String[],org.apache.tools.ant.util.FileNameMapper,java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Copy:java.util.Map buildMap(org.apache.tools.ant.types.Resource[],java.io.File,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.CopyPath:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getCommandline(java.lang.String[],java.io.File[])",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.PathConvert:void execute()",
            "org.apache.tools.ant.taskdefs.Rmic:void moveGeneratedFile(java.io.File,java.io.File,java.lang.String,org.apache.tools.ant.taskdefs.rmic.RmicAdapter)",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.MappingSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.PresentSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.RedirectorElement:void configure(org.apache.tools.ant.taskdefs.Redirector,java.lang.String)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.util.CollectionUtils$1:boolean hasMoreElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ReplaceTokens:void initialize()",
            "org.apache.tools.ant.filters.TokenFilter:int read()",
            "org.apache.tools.ant.input.DefaultInputHandler:java.lang.String getPrompt(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:void setAptCommandlineSwitches(org.apache.tools.ant.taskdefs.Apt,org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.IsSigned:boolean isSigned(java.io.File,java.lang.String)",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:org.apache.tools.ant.taskdefs.cvslib.CVSEntry[] getEntrySetAsArray()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter:void printEntry(org.w3c.dom.Document,java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CVSEntry)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:void setCommonOptions(org.apache.tools.ant.taskdefs.ExecTask)",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:org.apache.tools.ant.types.Path createUnifiedSourcePath()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void overrideProperties()",
            "org.apache.tools.ant.taskdefs.Ant:void addReferences()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printHead(java.io.PrintWriter,java.util.Enumeration,java.util.Enumeration)",
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.taskdefs.AntStructure:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean generateChecksums()",
            "org.apache.tools.ant.taskdefs.Copy:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Copydir:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:java.util.Enumeration resourceToURLs(java.lang.ClassLoader)",
            "org.apache.tools.ant.taskdefs.Definer:void loadProperties(java.lang.ClassLoader,java.net.URL)",
            "org.apache.tools.ant.taskdefs.ExecTask:java.lang.String resolveExecutable(java.lang.String,boolean)",
            "org.apache.tools.ant.taskdefs.Expand:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest getManifestFromJar(java.io.File)",
            "org.apache.tools.ant.taskdefs.Jar:void writeManifest(org.apache.tools.zip.ZipOutputStream,org.apache.tools.ant.taskdefs.Manifest)",
            "org.apache.tools.ant.taskdefs.Jar:void grabFilesAndDirs(java.lang.String,java.util.List,java.util.List)",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.Manifest$Attribute:java.lang.String getValue()",
            "org.apache.tools.ant.taskdefs.Manifest$Attribute:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void merge(org.apache.tools.ant.taskdefs.Manifest$Section)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String addAttributeAndCheck(org.apache.tools.ant.taskdefs.Manifest$Attribute)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.Object clone()",
            "org.apache.tools.ant.taskdefs.Manifest:void merge(org.apache.tools.ant.taskdefs.Manifest,boolean)",
            "org.apache.tools.ant.taskdefs.Manifest:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest:java.util.Enumeration getWarnings()",
            "org.apache.tools.ant.taskdefs.ManifestTask:void execute()",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Move:void copyFile(java.io.File,java.io.File,boolean,boolean)",
            "org.apache.tools.ant.taskdefs.Parallel:void spinThreads()",
            "org.apache.tools.ant.taskdefs.ProcessDestroyer:void run()",
            "org.apache.tools.ant.taskdefs.Property:void loadEnvironment(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Property:void addProperties(java.util.Properties)",
            "org.apache.tools.ant.taskdefs.Property:void resolveAllProperties(java.util.Properties)",
            "org.apache.tools.ant.taskdefs.Property:void resolve(java.util.Properties,java.lang.String,java.util.Stack)",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.taskdefs.Ant createAntTask(java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:void execute()",
            "org.apache.tools.ant.taskdefs.Tstamp:void execute()",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void configureLiaison(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void cleanUp()",
            "org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache:void save()",
            "org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasPatterns()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:void addDefinitionsToList(java.util.ListIterator)",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:void setSystem()",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:java.util.Properties mergePropertySets()",
            "org.apache.tools.ant.types.FilterSet:java.util.Hashtable getFilterHash()",
            "org.apache.tools.ant.types.FilterSet:void readFiltersFromFile(java.io.File)",
            "org.apache.tools.ant.types.FilterSet:void addConfiguredFilterSet(org.apache.tools.ant.types.FilterSet)",
            "org.apache.tools.ant.types.FilterSetCollection:java.lang.String replaceTokens(java.lang.String)",
            "org.apache.tools.ant.types.FilterSetCollection:boolean hasFilters()",
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] makeArray(java.util.Vector,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:void readFiles(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PropertySet$1:boolean hasNext()",
            "org.apache.tools.ant.types.PropertySet:java.util.Hashtable getAllSystemProperties()",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:void addPropertyNames(java.util.Set,java.util.Hashtable)",
            "org.apache.tools.ant.types.XMLCatalog:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.ResourceLocation findMatchingEntry(java.lang.String)",
            "org.apache.tools.ant.types.ZipScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.facade.FacadeTaskHelper:java.lang.String[] getArgs()",
            "org.apache.tools.ant.util.CollectionUtils$2:boolean hasNext()",
            "org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration:boolean hasMoreElements()",
            "org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration:java.lang.Object nextElement()",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.CollectionUtils:void putAll(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.Watchdog:void fireTimeoutOccured()",
            "org.apache.tools.ant.AntClassLoader:java.lang.String getClasspath()",
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream loadResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:boolean isParentFirst(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.net.URL getResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:boolean isInPath(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:void cleanup()",
            "org.apache.tools.ant.AntClassLoader:void addJavaLibraries()",
            "org.apache.tools.ant.ComponentHelper:void initTasks()",
            "org.apache.tools.ant.ComponentHelper:void initTypes()",
            "org.apache.tools.ant.Diagnostics:void doReportSystemProperties(java.io.PrintStream)",
            "org.apache.tools.ant.Diagnostics:void doReportTasksAvailability(java.io.PrintStream)",
            "org.apache.tools.ant.Main:void startAnt(java.lang.String[],java.util.Properties,java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void processArgs(java.lang.String[])",
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void printTargets(org.apache.tools.ant.Project,boolean)",
            "org.apache.tools.ant.Project:void setSystemProperties()",
            "org.apache.tools.ant.Project:void executeSortedTargets(java.util.Vector)",
            "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String[],java.util.Hashtable,boolean)",
            "org.apache.tools.ant.Project:void tsort(java.lang.String,java.util.Hashtable,java.util.Hashtable,java.util.Stack,java.util.Vector)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Task:void replaceChildren(org.apache.tools.ant.RuntimeConfigurable,org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.XmlLogger:org.apache.tools.ant.XmlLogger$TimedElement getTaskElement(org.apache.tools.ant.Task)",
            "org.apache.tools.mail.MailMessage:java.lang.String vectorToList(java.util.Vector)",
            "org.apache.tools.zip.ZipFile:void resolveLocalFileHeaderData()"
        ]
    },
    "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void buildMap(java.io.File,java.io.File,java.lang.String[],org.apache.tools.ant.util.FileNameMapper,java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Copy:java.util.Map buildMap(org.apache.tools.ant.types.Resource[],java.io.File,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.CopyPath:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getCommandline(java.lang.String[],java.io.File[])",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.PathConvert:void execute()",
            "org.apache.tools.ant.taskdefs.Rmic:void moveGeneratedFile(java.io.File,java.io.File,java.lang.String,org.apache.tools.ant.taskdefs.rmic.RmicAdapter)",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.MappingSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.PresentSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.RedirectorElement:void configure(org.apache.tools.ant.taskdefs.Redirector,java.lang.String)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.util.ContainerMapper:boolean contains(org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ContainerMapper:void add(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.ContainerMapper:boolean contains(org.apache.tools.ant.util.FileNameMapper)"
        ]
    },
    "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.DOMElementWriter:void write(org.w3c.dom.Element,java.io.Writer,int,java.lang.String)",
            "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.util.DOMElementWriter:void removeNSDefinitions(org.w3c.dom.Element)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)",
            "org.apache.tools.ant.util.DOMElementWriter:void closeElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List)"
        ]
    },
    "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getCommandline(java.lang.String[],java.io.File[])",
            "org.apache.tools.ant.taskdefs.Zip:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean containsValue(java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:void initSubProject(org.apache.tools.ant.ComponentHelper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void initSubProject(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:java.util.Hashtable getTaskDefinitions()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:java.util.Hashtable getDataTypeDefinitions()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(org.apache.tools.ant.Project,java.lang.Object,boolean)"
        ]
    },
    "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DirectoryScanner:void scan()"
        ]
    },
    "org.apache.tools.ant.Project:void fireBuildStarted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)"
        ]
    },
    "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)"
        ]
    },
    "org.apache.tools.ant.Project:void fireSubBuildStarted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void execute()"
        ]
    },
    "org.apache.tools.ant.Project:void fireSubBuildFinished(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void execute()"
        ]
    },
    "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Target:void performTasks()"
        ]
    },
    "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Target:void performTasks()"
        ]
    },
    "org.apache.tools.ant.Project:void fireTaskStarted(org.apache.tools.ant.Task)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Task:void perform()"
        ]
    },
    "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Task:void perform()"
        ]
    },
    "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireMessageLogged(org.apache.tools.ant.Project,java.lang.String,java.lang.Throwable,int)",
            "org.apache.tools.ant.Project:void fireMessageLogged(org.apache.tools.ant.Target,java.lang.String,java.lang.Throwable,int)",
            "org.apache.tools.ant.Project:void fireMessageLogged(org.apache.tools.ant.Task,java.lang.String,java.lang.Throwable,int)"
        ]
    },
    "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void applyPreSet(org.apache.tools.ant.UnknownElement)"
        ]
    },
    "org.apache.tools.ant.Target:org.apache.tools.ant.Task[] getTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2:org.apache.tools.ant.UnknownElement parseUnknownElement(org.apache.tools.ant.Project,java.net.URL)",
            "org.apache.tools.ant.types.Description:java.util.Vector findElementInTarget(org.apache.tools.ant.Project,org.apache.tools.ant.Target,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void configure(java.lang.Object)",
            "org.apache.tools.ant.UnknownElement:boolean handleChild(java.lang.String,org.apache.tools.ant.IntrospectionHelper,java.lang.Object,org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void addConfiguredStyle(org.apache.tools.ant.types.resources.Resources)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.resources.Union:java.lang.String[] list()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.PathConvert:void execute()",
            "org.apache.tools.ant.types.resources.Union:java.lang.String[] list()",
            "org.apache.tools.ant.types.Path:java.lang.String[] list()"
        ]
    },
    "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.util.Collection cacheCollection()",
            "org.apache.tools.ant.types.resources.Union:org.apache.tools.ant.types.Resource[] listResources()"
        ]
    },
    "org.apache.tools.ant.Task:void perform()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet:void execute()",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.Parallel$TaskRunnable:void run()",
            "org.apache.tools.ant.taskdefs.Sequential:void execute()",
            "org.apache.tools.ant.Target:void execute()",
            "org.apache.tools.ant.Task:void perform()"
        ]
    },
    "org.apache.tools.ant.TaskAdapter:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Input:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.listener.MailLogger:void sendMimeMail(org.apache.tools.ant.Project,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ant:void overrideProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.Object processNode(org.w3c.dom.Node,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XmlProperty:void addNodeRecursively(org.w3c.dom.Node,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length$EachHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:java.lang.String toLongString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.Resource:java.lang.String toLongString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.Resource:java.lang.String toLongString()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()"
        ]
    },
    "org.apache.tools.ant.types.selectors.AndSelector:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.selectors.MajoritySelector:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.selectors.NoneSelector:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.NotSelector:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.selectors.OrSelector:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.selectors.SelectSelector:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:java.lang.String iReplaceTokens(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String)",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.resources.JavaResource:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete$ReverseDirs$1:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.Reverse:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.CompressedResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.JavaResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.Commandline$Argument:void setPath(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:void setAptCommandlineSwitches(org.apache.tools.ant.taskdefs.Apt,org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)",
            "org.apache.tools.ant.taskdefs.compilers.Gcj:org.apache.tools.ant.types.Commandline setupGCJCommand()",
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jvc:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Kjc:org.apache.tools.ant.types.Commandline setupKjcCommand()",
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Commandline setupRmicCommand(java.lang.String[])",
            "org.apache.tools.ant.taskdefs.Javadoc:void setExtdirs(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()"
        ]
    },
    "org.apache.tools.ant.types.Commandline$Argument:void setPathref(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.CommandlineJava:void addCommandsToList(java.util.ListIterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.CommandlineJava:java.lang.String[] getCommandline()"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava:boolean haveClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.CommandlineJava:void addCommandsToList(java.util.ListIterator)",
            "org.apache.tools.ant.types.CommandlineJava:int size()"
        ]
    },
    "org.apache.tools.ant.types.Environment$Variable:void setPath(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Delete$ReverseDirs$1:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(java.io.File,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete$ReverseDirs$1:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.Reverse:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.CompressedResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.JavaResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete$ReverseDirs$1:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.Reverse:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.CompressedResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.JavaResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete$ReverseDirs$1:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.Reverse:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.CompressedResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.JavaResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.URLResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.selectors.modifiedselector.EqualComparator:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.Diagnostics:void doReport(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Diagnostics:void main(java.lang.String[])",
            "org.apache.tools.ant.Main:void processArgs(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.taskdefs.AntStructure:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef:boolean sameOrSimilar(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:boolean similar(java.lang.Object)",
            "org.apache.tools.ant.taskdefs.MacroDef:boolean sameDefinition(java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.URLResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.selectors.modifiedselector.EqualComparator:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.ResourceComparator:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.URLResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.selectors.modifiedselector.EqualComparator:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)"
        ]
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.ArchiveResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.URLResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.selectors.modifiedselector.EqualComparator:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.URLResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.selectors.modifiedselector.EqualComparator:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.URLResource:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.URLResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.selectors.modifiedselector.EqualComparator:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.EqualComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(java.io.File,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.PropertyHelper:java.lang.Object getProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:java.lang.String getProperty(java.lang.String)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)"
        ]
    },
    "org.apache.tools.ant.PropertyHelper:java.lang.Object getUserProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:java.lang.String getUserProperty(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.Project:java.lang.String replaceProperties(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ExpandProperties:int read()",
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.taskdefs.email.Message:void print(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.Concat$TextElement:void addText(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Echo:void addText(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Exit:void addText(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Input:void addText(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Javadoc:java.lang.String expand(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Property:void addProperties(java.util.Properties)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addText(java.lang.String)",
            "org.apache.tools.ant.taskdefs.SQLExec:void runStatements(java.io.Reader,java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String getContent()",
            "org.apache.tools.ant.types.Description:void concatDescriptions(org.apache.tools.ant.Project,org.apache.tools.ant.Target,java.lang.StringBuffer)",
            "org.apache.tools.ant.types.PatternSet:void readPatterns(java.io.File,java.util.Vector,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.XMLFragment:void addText(org.w3c.dom.Node,java.lang.String)",
            "org.apache.tools.ant.ProjectHelper:java.lang.String replaceProperties(org.apache.tools.ant.Project,java.lang.String)",
            "org.apache.tools.ant.RuntimeConfigurable:void maybeConfigure(org.apache.tools.ant.Project,boolean)",
            "org.apache.tools.ant.Target:void execute()",
            "org.apache.tools.ant.Target:boolean testIfCondition()",
            "org.apache.tools.ant.Target:boolean testUnlessCondition()"
        ]
    },
    "org.apache.tools.ant.ProjectHelper:java.lang.String replaceProperties(org.apache.tools.ant.Project,java.lang.String,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ProjectHelper:void configure(java.lang.Object,org.xml.sax.AttributeList,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.Project:void copyInheritedProperties(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void overrideProperties()"
        ]
    },
    "org.apache.tools.ant.Project:void copyUserProperties(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()"
        ]
    },
    "org.apache.tools.ant.types.resources.Resources:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupModernJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommand(boolean)",
            "org.apache.tools.ant.taskdefs.compilers.JavacExternal:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.Gcj:org.apache.tools.ant.types.Commandline setupGCJCommand()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.Gcj:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.Jvc:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.Kjc:org.apache.tools.ant.types.Commandline setupKjcCommand()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.Kjc:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:void checkParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void execute()"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava:int size()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.CommandlineJava:boolean haveBootclasspath(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Exit:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.filters.util.ChainReaderHelper:java.io.Reader getAssembledReader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void concatenate(char[],java.io.Writer,java.io.Reader)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Redirector:void createStreams()",
            "org.apache.tools.ant.types.mappers.FilterMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.taskdefs.FixCRLF:java.io.Reader chain(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.util.ChainReaderHelper:java.io.Reader getAssembledReader()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Replace$FileInput:boolean readChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Replace:void processFile(java.io.File)"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:java.lang.String readFully(java.io.Reader,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.util.ChainReaderHelper:java.lang.String readFully(java.io.Reader)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readFully()",
            "org.apache.tools.ant.util.FileUtils:java.lang.String readFully(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.util.ReaderInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:int handleInput(byte[],int,int)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Zip:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)",
            "org.apache.tools.ant.types.resources.CompressedResource:long getSize()",
            "org.apache.tools.ant.util.ReaderInputStream:int read()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.UUEncoder:void encode(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class getClassFromStream(java.io.InputStream,java.lang.String,java.io.File)",
            "org.apache.tools.ant.Project:int defaultInput(byte[],int,int)",
            "org.apache.tools.tar.TarBuffer:boolean readBlock()"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.DifferentSelector:boolean selectionTest(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.MappingSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copy:void buildMap(java.io.File,java.io.File,java.lang.String[],org.apache.tools.ant.util.FileNameMapper,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void scan(java.io.File,java.io.File,java.lang.String[],java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.util.SourceFileScanner:java.lang.String[] restrict(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] restrict(java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Rmic:void scanDir(java.io.File,java.lang.String[],org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Tar:boolean archiveIsUpToDate(java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean scanDir(java.io.File,java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.util.SourceFileScanner:java.io.File[] restrictAsFiles(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.SourceFileScanner:java.io.File[] restrictAsFiles(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper)"
        ]
    },
    "org.apache.tools.ant.types.Path:java.lang.String[] list()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Available:boolean checkFile()",
            "org.apache.tools.ant.taskdefs.Classloader:void execute()",
            "org.apache.tools.ant.taskdefs.CopyPath:void execute()",
            "org.apache.tools.ant.taskdefs.ExecTask:java.lang.String resolveExecutable(java.lang.String,boolean)",
            "org.apache.tools.ant.taskdefs.Jar:void createIndexList(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Javac:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.MakeUrl:java.lang.String pathsToURL()",
            "org.apache.tools.ant.taskdefs.ManifestClassPath:void execute()",
            "org.apache.tools.ant.taskdefs.SubAnt:void execute()",
            "org.apache.tools.ant.types.Path:void addExisting(org.apache.tools.ant.types.Path,boolean)",
            "org.apache.tools.ant.types.Path:java.lang.String[] list()",
            "org.apache.tools.ant.types.Path:void addExtdirs(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:void processExternalCatalogs()",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.XMLCatalog$CatalogResolver getCatalogResolver()",
            "org.apache.tools.ant.AntClassLoader:void setClassPath(org.apache.tools.ant.types.Path)"
        ]
    },
    "org.apache.tools.ant.types.Path:boolean isFilesystemOnly()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Tar:boolean isFileFileSet(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.ZipResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Path:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.ResourceCollection assertFilesystemOnly(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.DirectoryScanner:void scandir(java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.DirectoryScanner:void processSlowScan(java.lang.String[])",
            "org.apache.tools.ant.DirectoryScanner:void scandir(java.io.File,java.lang.String,boolean)",
            "org.apache.tools.ant.DirectoryScanner:void accountForIncludedDir(java.lang.String,java.io.File,boolean)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void setupBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:void init()",
            "org.apache.tools.bzip2.CBZip2InputStream:void setupRandPartA()",
            "org.apache.tools.bzip2.CBZip2InputStream:void setupNoRandPartA()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void setupRandPartB()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:int read0()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void setupRandPartC()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:int read0()",
            "org.apache.tools.bzip2.CBZip2InputStream:void setupRandPartB()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void setupNoRandPartB()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:int read0()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void setupNoRandPartC()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:int read0()",
            "org.apache.tools.bzip2.CBZip2InputStream:void setupNoRandPartB()"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void copyFile(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String,org.apache.tools.ant.types.FilterSetCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void copyFile(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String,org.apache.tools.ant.types.FilterSetCollection,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void copyFile(java.lang.String,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.lang.String,java.lang.String,org.apache.tools.ant.types.FilterSetCollection,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void copyFile(java.lang.String,java.lang.String,boolean,boolean,boolean)"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Rmic:void moveGeneratedFile(java.io.File,java.io.File,java.lang.String,org.apache.tools.ant.taskdefs.rmic.RmicAdapter)",
            "org.apache.tools.ant.util.FileUtils:void rename(java.io.File,java.io.File)",
            "org.apache.tools.ant.Project:void copyFile(java.io.File,java.io.File)"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File,org.apache.tools.ant.types.FilterSetCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Rmic:void moveGeneratedFile(java.io.File,java.io.File,java.lang.String,org.apache.tools.ant.taskdefs.rmic.RmicAdapter)",
            "org.apache.tools.ant.Project:void copyFile(java.io.File,java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void copyFile(java.io.File,java.io.File,org.apache.tools.ant.types.FilterSetCollection,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void copyFile(java.io.File,java.io.File,boolean,boolean)"
        ]
    },
    "org.apache.tools.ant.Project:void copyFile(java.io.File,java.io.File,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.resources.TarResource:void <init>(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "org.apache.tools.ant.types.resources.BZip2Resource:void <init>(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.resources.GZipResource:void <init>(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.DependSet:void execute()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.Touch:void checkConfiguration()",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:int size()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.CallTarget:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.SubAnt:void execute(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SubAnt:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Definer:void loadAntlib(java.lang.ClassLoader,java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Definer:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Checksum:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Checksum:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute:java.util.Vector getProcEnvironment()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:java.lang.String resolveExecutable(java.lang.String,boolean)",
            "org.apache.tools.ant.taskdefs.Execute:java.lang.String[] patchEnvironment()",
            "org.apache.tools.ant.taskdefs.Property:void loadEnvironment(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:void initZipOutputStream(org.apache.tools.zip.ZipOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ear:void initZipOutputStream(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:boolean createEmptyZip(java.io.File)",
            "org.apache.tools.ant.taskdefs.War:void initZipOutputStream(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.types.DataType:void dieOnCircularReference(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference()",
            "org.apache.tools.ant.types.DataType:java.lang.Object getCheckedRef(java.lang.Class,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.TarFileSet:org.apache.tools.ant.types.AbstractFileSet getRef(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ZipFileSet:org.apache.tools.ant.types.AbstractFileSet getRef(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.Compare:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void invokeCircularReferenceCheck(org.apache.tools.ant.types.DataType,java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.Path:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.RedirectorElement:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.DataType:void invokeCircularReferenceCheck(org.apache.tools.ant.types.DataType,java.util.Stack,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.Compare:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Sort:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Tokens:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.Path:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Difference:org.apache.tools.ant.types.ResourceCollection nextRC(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.taskdefs.Execute:java.util.Vector addVMSLogicals(java.util.Vector,java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void writeIndexLikeList(java.util.List,java.util.List,java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredText(org.apache.tools.ant.taskdefs.MacroDef$Text)",
            "org.apache.tools.ant.taskdefs.MacroInstance:java.util.Map getNsElements()",
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.Sequential:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void addConfiguredStyle(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void addAll(java.util.Collection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Difference:org.apache.tools.ant.types.ResourceCollection nextRC(java.util.Iterator)",
            "org.apache.tools.ant.types.resources.FailFast:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.resources.Union:org.apache.tools.ant.types.ResourceCollection nextRC(java.util.Iterator)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()",
            "org.apache.tools.ant.types.spi.Service:java.io.InputStream getAsStream()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.RedirectorElement:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CollectionUtils$1:java.lang.Object nextElement()",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ContainerMapper:boolean contains(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)",
            "org.apache.tools.ant.util.DOMElementWriter:void removeNSDefinitions(org.w3c.dom.Element)",
            "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List,char)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:void initSubProject(org.apache.tools.ant.ComponentHelper)",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)",
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.Project:void fireBuildStarted()",
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireSubBuildStarted()",
            "org.apache.tools.ant.Project:void fireSubBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTaskStarted(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)",
            "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.Target:org.apache.tools.ant.Task[] getTasks()",
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Union:org.apache.tools.ant.types.ResourceCollection nextRC(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)"
        ]
    },
    "org.apache.tools.ant.util.CollectionUtils$1:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ReplaceTokens:void initialize()",
            "org.apache.tools.ant.filters.TokenFilter:int read()",
            "org.apache.tools.ant.input.DefaultInputHandler:java.lang.String getPrompt(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:void setAptCommandlineSwitches(org.apache.tools.ant.taskdefs.Apt,org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.IsSigned:boolean isSigned(java.io.File,java.lang.String)",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:org.apache.tools.ant.taskdefs.cvslib.CVSEntry[] getEntrySetAsArray()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter:void printEntry(org.w3c.dom.Document,java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CVSEntry)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:void setCommonOptions(org.apache.tools.ant.taskdefs.ExecTask)",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:org.apache.tools.ant.types.Path createUnifiedSourcePath()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void overrideProperties()",
            "org.apache.tools.ant.taskdefs.Ant:void addReferences()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printHead(java.io.PrintWriter,java.util.Enumeration,java.util.Enumeration)",
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.taskdefs.AntStructure:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean generateChecksums()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Copydir:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:void loadProperties(java.lang.ClassLoader,java.net.URL)",
            "org.apache.tools.ant.taskdefs.ExecTask:java.lang.String resolveExecutable(java.lang.String,boolean)",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.Expand:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest getManifestFromJar(java.io.File)",
            "org.apache.tools.ant.taskdefs.Jar:void writeManifest(org.apache.tools.zip.ZipOutputStream,org.apache.tools.ant.taskdefs.Manifest)",
            "org.apache.tools.ant.taskdefs.Jar:void grabFilesAndDirs(java.lang.String,java.util.List,java.util.List)",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.Manifest$Attribute:java.lang.String getValue()",
            "org.apache.tools.ant.taskdefs.Manifest$Attribute:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void merge(org.apache.tools.ant.taskdefs.Manifest$Section)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String addAttributeAndCheck(org.apache.tools.ant.taskdefs.Manifest$Attribute)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.Object clone()",
            "org.apache.tools.ant.taskdefs.Manifest:void merge(org.apache.tools.ant.taskdefs.Manifest,boolean)",
            "org.apache.tools.ant.taskdefs.Manifest:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest:java.util.Enumeration getWarnings()",
            "org.apache.tools.ant.taskdefs.ManifestTask:void execute()",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Move:void copyFile(java.io.File,java.io.File,boolean,boolean)",
            "org.apache.tools.ant.taskdefs.Parallel:void spinThreads()",
            "org.apache.tools.ant.taskdefs.ProcessDestroyer:void run()",
            "org.apache.tools.ant.taskdefs.Property:void loadEnvironment(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Property:void addProperties(java.util.Properties)",
            "org.apache.tools.ant.taskdefs.Property:void resolveAllProperties(java.util.Properties)",
            "org.apache.tools.ant.taskdefs.Property:void resolve(java.util.Properties,java.lang.String,java.util.Stack)",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.taskdefs.Ant createAntTask(java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:void execute()",
            "org.apache.tools.ant.taskdefs.Tstamp:void execute()",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void configureLiaison(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void cleanUp()",
            "org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasPatterns()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:void addDefinitionsToList(java.util.ListIterator)",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:void setSystem()",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:java.util.Properties mergePropertySets()",
            "org.apache.tools.ant.types.FilterSet:java.util.Hashtable getFilterHash()",
            "org.apache.tools.ant.types.FilterSet:void readFiltersFromFile(java.io.File)",
            "org.apache.tools.ant.types.FilterSet:void addConfiguredFilterSet(org.apache.tools.ant.types.FilterSet)",
            "org.apache.tools.ant.types.FilterSetCollection:java.lang.String replaceTokens(java.lang.String)",
            "org.apache.tools.ant.types.FilterSetCollection:boolean hasFilters()",
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] makeArray(java.util.Vector,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:void readFiles(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PropertySet$1:java.lang.Object next()",
            "org.apache.tools.ant.types.PropertySet:java.util.Hashtable getAllSystemProperties()",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:void addPropertyNames(java.util.Set,java.util.Hashtable)",
            "org.apache.tools.ant.types.XMLCatalog:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.ResourceLocation findMatchingEntry(java.lang.String)",
            "org.apache.tools.ant.types.ZipScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.facade.FacadeTaskHelper:java.lang.String[] getArgs()",
            "org.apache.tools.ant.util.CollectionUtils$2:java.lang.Object next()",
            "org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration:java.lang.Object nextElement()",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.CollectionUtils:void putAll(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.Watchdog:void fireTimeoutOccured()",
            "org.apache.tools.ant.AntClassLoader:java.lang.String getClasspath()",
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream loadResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:boolean isParentFirst(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.net.URL getResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:boolean isInPath(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:void cleanup()",
            "org.apache.tools.ant.AntClassLoader:void addJavaLibraries()",
            "org.apache.tools.ant.ComponentHelper:void initTasks()",
            "org.apache.tools.ant.ComponentHelper:void initTypes()",
            "org.apache.tools.ant.Diagnostics:void doReportSystemProperties(java.io.PrintStream)",
            "org.apache.tools.ant.Diagnostics:void doReportTasksAvailability(java.io.PrintStream)",
            "org.apache.tools.ant.Main:void startAnt(java.lang.String[],java.util.Properties,java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void processArgs(java.lang.String[])",
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void printTargets(org.apache.tools.ant.Project,boolean)",
            "org.apache.tools.ant.Project:void setSystemProperties()",
            "org.apache.tools.ant.Project:void executeSortedTargets(java.util.Vector)",
            "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String[],java.util.Hashtable,boolean)",
            "org.apache.tools.ant.Project:void tsort(java.lang.String,java.util.Hashtable,java.util.Hashtable,java.util.Stack,java.util.Vector)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Task:void replaceChildren(org.apache.tools.ant.RuntimeConfigurable,org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.XmlLogger:org.apache.tools.ant.XmlLogger$TimedElement getTaskElement(org.apache.tools.ant.Task)",
            "org.apache.tools.mail.MailMessage:java.lang.String vectorToList(java.util.Vector)",
            "org.apache.tools.zip.ZipFile:void resolveLocalFileHeaderData()"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void verifySettings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.BaseSelector:void verifySettings()",
            "org.apache.tools.ant.types.selectors.BaseSelector:void validate()"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava$SysProperties:java.util.Properties mergePropertySets()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:void addDefinitionsToList(java.util.ListIterator)",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:int size()",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:void setSystem()"
        ]
    },
    "org.apache.tools.ant.types.PropertySet:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.PropertySet:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.types.PropertySet:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getCommandline(java.lang.String[],java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getCommandline(java.lang.String,java.io.File)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runParallel(org.apache.tools.ant.taskdefs.Execute,java.util.Vector,java.util.Vector)"
        ]
    },
    "org.apache.tools.ant.taskdefs.PathConvert:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Rmic:void moveGeneratedFile(java.io.File,java.io.File,java.lang.String,org.apache.tools.ant.taskdefs.rmic.RmicAdapter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Rmic:void execute()"
        ]
    },
    "org.apache.tools.ant.types.selectors.MappingSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.PresentSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.RedirectorElement:void configure(org.apache.tools.ant.taskdefs.Redirector,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runParallel(org.apache.tools.ant.taskdefs.Execute,java.util.Vector,java.util.Vector)",
            "org.apache.tools.ant.types.RedirectorElement:void configure(org.apache.tools.ant.taskdefs.Redirector)",
            "org.apache.tools.ant.types.RedirectorElement:void configure(org.apache.tools.ant.taskdefs.Redirector,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.filters.ReplaceTokens:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ReplaceTokens:int read()"
        ]
    },
    "org.apache.tools.ant.input.DefaultInputHandler:java.lang.String getPrompt(org.apache.tools.ant.input.InputRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.input.DefaultInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.input.GreedyInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)"
        ]
    },
    "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:void setAptCommandlineSwitches(org.apache.tools.ant.taskdefs.Apt,org.apache.tools.ant.types.Commandline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:void setAptCommandlineSwitches(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.compilers.AptExternalCompilerAdapter:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:org.apache.tools.ant.taskdefs.cvslib.CVSEntry[] getEntrySetAsArray()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter:void printEntry(org.w3c.dom.Document,java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CVSEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter:void printChangeLog(java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CVSEntry[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:void setCommonOptions(org.apache.tools.ant.taskdefs.ExecTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SignJar:void signOneJar(java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.VerifyJar:void verifyOneJar(java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:org.apache.tools.ant.types.Path createUnifiedSourcePath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ant:void addReferences()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printHead(java.io.PrintWriter,java.util.Enumeration,java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printHead(java.io.PrintWriter,org.apache.tools.ant.Project,java.util.Hashtable,java.util.Hashtable)"
        ]
    },
    "org.apache.tools.ant.taskdefs.AntStructure:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Checksum:boolean generateChecksums()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Definer:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.ComponentHelper:void checkNamespace(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Definer:java.util.Enumeration resourceToURLs(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Definer:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Definer:void loadProperties(java.lang.ClassLoader,java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Definer:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecTask:java.lang.String resolveExecutable(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest getManifestFromJar(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:void writeManifest(org.apache.tools.zip.ZipOutputStream,org.apache.tools.ant.taskdefs.Manifest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void initZipOutputStream(org.apache.tools.zip.ZipOutputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest$Attribute:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void createIndexList(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String getAttributeValue(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String addAttributeAndCheck(org.apache.tools.ant.taskdefs.Manifest$Attribute)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.Object clone()",
            "org.apache.tools.ant.taskdefs.Manifest:void <init>(java.io.Reader)",
            "org.apache.tools.ant.taskdefs.Manifest:void addConfiguredAttribute(org.apache.tools.ant.taskdefs.Manifest$Attribute)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest$Attribute:void write(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Manifest$Section:void write(java.io.PrintWriter)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest$Section:void merge(org.apache.tools.ant.taskdefs.Manifest$Section)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Manifest:void merge(org.apache.tools.ant.taskdefs.Manifest,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest$Section:void write(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Manifest:void write(java.io.PrintWriter)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String addAttributeAndCheck(org.apache.tools.ant.taskdefs.Manifest$Attribute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String read(java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void addConfiguredAttribute(org.apache.tools.ant.taskdefs.Manifest$Attribute)",
            "org.apache.tools.ant.taskdefs.Manifest:void <init>(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Manifest:void merge(org.apache.tools.ant.taskdefs.Manifest,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest:void merge(org.apache.tools.ant.taskdefs.Manifest,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest createManifest()",
            "org.apache.tools.ant.taskdefs.Manifest:void merge(org.apache.tools.ant.taskdefs.Manifest)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest:void write(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void writeManifest(org.apache.tools.zip.ZipOutputStream,org.apache.tools.ant.taskdefs.Manifest)",
            "org.apache.tools.ant.taskdefs.Manifest:java.lang.String toString()",
            "org.apache.tools.ant.taskdefs.ManifestTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest:java.util.Enumeration getWarnings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void writeManifest(org.apache.tools.zip.ZipOutputStream,org.apache.tools.ant.taskdefs.Manifest)",
            "org.apache.tools.ant.taskdefs.ManifestTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ManifestTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Parallel:void spinThreads()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Parallel:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ProcessDestroyer:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ProcessDestroyer$ProcessDestroyerImpl:void run()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Property:void loadEnvironment(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Property:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Property:void addProperties(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void loadUrl(java.net.URL)",
            "org.apache.tools.ant.taskdefs.Property:void loadFile(java.io.File)",
            "org.apache.tools.ant.taskdefs.Property:void loadResource(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Property:void loadEnvironment(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Property:void resolveAllProperties(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Property:void addProperties(java.util.Properties)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Property:void resolve(java.util.Properties,java.lang.String,java.util.Stack)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Property:void resolveAllProperties(java.util.Properties)",
            "org.apache.tools.ant.taskdefs.Property:void resolve(java.util.Properties,java.lang.String,java.util.Stack)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.taskdefs.Ant createAntTask(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SubAnt:void execute(java.io.File,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tstamp:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void configureLiaison(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void configureLiaison(java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:void cleanUp()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void cleanUp()",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache:void save()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void saveCache()"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:void validate()"
        ]
    },
    "org.apache.tools.ant.types.selectors.BaseSelectorContainer:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:boolean hasPatterns()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasPatterns()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.DirSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.FileSet:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava$SysProperties:void addDefinitionsToList(java.util.ListIterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:java.lang.String[] getVariables()",
            "org.apache.tools.ant.types.CommandlineJava:void addCommandsToList(java.util.ListIterator)"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava$SysProperties:void setSystem()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.CommandlineJava:void setSystemProperties()"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:java.util.Hashtable getFilterHash()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.FilterSet:java.lang.String iReplaceTokens(java.lang.String)",
            "org.apache.tools.ant.Project:java.util.Hashtable getFilters()"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:void readFiltersFromFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Filter:void readFilters()",
            "org.apache.tools.ant.types.FilterSet:java.util.Vector getFilters()"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:void addConfiguredFilterSet(org.apache.tools.ant.types.FilterSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.FilterSetCollection:java.lang.String replaceTokens(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.FilterSetCollection:boolean hasFilters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.PatternSet:java.lang.String[] makeArray(java.util.Vector,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] getIncludePatterns(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] getExcludePatterns(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.PatternSet:void readFiles(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] getIncludePatterns(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] getExcludePatterns(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.PropertySet$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.taskdefs.Execute:java.util.Vector addVMSLogicals(java.util.Vector,java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void writeIndexLikeList(java.util.List,java.util.List,java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredText(org.apache.tools.ant.taskdefs.MacroDef$Text)",
            "org.apache.tools.ant.taskdefs.MacroInstance:java.util.Map getNsElements()",
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.Sequential:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void addAll(java.util.Collection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.FailFast:void <init>(java.lang.Object,java.util.Iterator)",
            "org.apache.tools.ant.types.resources.FailFast:boolean hasNext()",
            "org.apache.tools.ant.types.resources.FailFast:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()",
            "org.apache.tools.ant.types.spi.Service:java.io.InputStream getAsStream()",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.RedirectorElement:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CollectionUtils$1:boolean hasMoreElements()",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ContainerMapper:boolean contains(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)",
            "org.apache.tools.ant.util.DOMElementWriter:void removeNSDefinitions(org.w3c.dom.Element)",
            "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List,char)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:void initSubProject(org.apache.tools.ant.ComponentHelper)",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)",
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.Project:void fireBuildStarted()",
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireSubBuildStarted()",
            "org.apache.tools.ant.Project:void fireSubBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTaskStarted(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)",
            "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.Target:org.apache.tools.ant.Task[] getTasks()",
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.PropertySet:java.util.Hashtable getAllSystemProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()"
        ]
    },
    "org.apache.tools.ant.types.PropertySet:void addPropertyNames(java.util.Set,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XSLTProcess:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.ResourceLocation findMatchingEntry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.ResourceLocation access$000(org.apache.tools.ant.types.XMLCatalog,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.util.facade.FacadeTaskHelper:java.lang.String[] getArgs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:java.lang.String[] getCurrentCompilerArgs()",
            "org.apache.tools.ant.taskdefs.Rmic:java.lang.String[] getCurrentCompilerArgs()"
        ]
    },
    "org.apache.tools.ant.util.CollectionUtils$2:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.taskdefs.Execute:java.util.Vector addVMSLogicals(java.util.Vector,java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void writeIndexLikeList(java.util.List,java.util.List,java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredText(org.apache.tools.ant.taskdefs.MacroDef$Text)",
            "org.apache.tools.ant.taskdefs.MacroInstance:java.util.Map getNsElements()",
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.Sequential:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void addAll(java.util.Collection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.FailFast:void <init>(java.lang.Object,java.util.Iterator)",
            "org.apache.tools.ant.types.resources.FailFast:boolean hasNext()",
            "org.apache.tools.ant.types.resources.FailFast:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()",
            "org.apache.tools.ant.types.spi.Service:java.io.InputStream getAsStream()",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.RedirectorElement:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CollectionUtils$1:boolean hasMoreElements()",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ContainerMapper:boolean contains(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)",
            "org.apache.tools.ant.util.DOMElementWriter:void removeNSDefinitions(org.w3c.dom.Element)",
            "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List,char)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:void initSubProject(org.apache.tools.ant.ComponentHelper)",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)",
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.Project:void fireBuildStarted()",
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireSubBuildStarted()",
            "org.apache.tools.ant.Project:void fireSubBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTaskStarted(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)",
            "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.Target:org.apache.tools.ant.Task[] getTasks()",
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration:boolean hasMoreElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ReplaceTokens:void initialize()",
            "org.apache.tools.ant.filters.TokenFilter:int read()",
            "org.apache.tools.ant.input.DefaultInputHandler:java.lang.String getPrompt(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:void setAptCommandlineSwitches(org.apache.tools.ant.taskdefs.Apt,org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.IsSigned:boolean isSigned(java.io.File,java.lang.String)",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:org.apache.tools.ant.taskdefs.cvslib.CVSEntry[] getEntrySetAsArray()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter:void printEntry(org.w3c.dom.Document,java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CVSEntry)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:void setCommonOptions(org.apache.tools.ant.taskdefs.ExecTask)",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:org.apache.tools.ant.types.Path createUnifiedSourcePath()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void overrideProperties()",
            "org.apache.tools.ant.taskdefs.Ant:void addReferences()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printHead(java.io.PrintWriter,java.util.Enumeration,java.util.Enumeration)",
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.taskdefs.AntStructure:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean generateChecksums()",
            "org.apache.tools.ant.taskdefs.Copy:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Copydir:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:java.util.Enumeration resourceToURLs(java.lang.ClassLoader)",
            "org.apache.tools.ant.taskdefs.Definer:void loadProperties(java.lang.ClassLoader,java.net.URL)",
            "org.apache.tools.ant.taskdefs.ExecTask:java.lang.String resolveExecutable(java.lang.String,boolean)",
            "org.apache.tools.ant.taskdefs.Expand:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest getManifestFromJar(java.io.File)",
            "org.apache.tools.ant.taskdefs.Jar:void writeManifest(org.apache.tools.zip.ZipOutputStream,org.apache.tools.ant.taskdefs.Manifest)",
            "org.apache.tools.ant.taskdefs.Jar:void grabFilesAndDirs(java.lang.String,java.util.List,java.util.List)",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.Manifest$Attribute:java.lang.String getValue()",
            "org.apache.tools.ant.taskdefs.Manifest$Attribute:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void merge(org.apache.tools.ant.taskdefs.Manifest$Section)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String addAttributeAndCheck(org.apache.tools.ant.taskdefs.Manifest$Attribute)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.Object clone()",
            "org.apache.tools.ant.taskdefs.Manifest:void merge(org.apache.tools.ant.taskdefs.Manifest,boolean)",
            "org.apache.tools.ant.taskdefs.Manifest:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest:java.util.Enumeration getWarnings()",
            "org.apache.tools.ant.taskdefs.ManifestTask:void execute()",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Move:void copyFile(java.io.File,java.io.File,boolean,boolean)",
            "org.apache.tools.ant.taskdefs.Parallel:void spinThreads()",
            "org.apache.tools.ant.taskdefs.ProcessDestroyer:void run()",
            "org.apache.tools.ant.taskdefs.Property:void loadEnvironment(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Property:void addProperties(java.util.Properties)",
            "org.apache.tools.ant.taskdefs.Property:void resolveAllProperties(java.util.Properties)",
            "org.apache.tools.ant.taskdefs.Property:void resolve(java.util.Properties,java.lang.String,java.util.Stack)",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.taskdefs.Ant createAntTask(java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:void execute()",
            "org.apache.tools.ant.taskdefs.Tstamp:void execute()",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void configureLiaison(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void cleanUp()",
            "org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache:void save()",
            "org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasPatterns()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:void addDefinitionsToList(java.util.ListIterator)",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:void setSystem()",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:java.util.Properties mergePropertySets()",
            "org.apache.tools.ant.types.FilterSet:java.util.Hashtable getFilterHash()",
            "org.apache.tools.ant.types.FilterSet:void readFiltersFromFile(java.io.File)",
            "org.apache.tools.ant.types.FilterSet:void addConfiguredFilterSet(org.apache.tools.ant.types.FilterSet)",
            "org.apache.tools.ant.types.FilterSetCollection:java.lang.String replaceTokens(java.lang.String)",
            "org.apache.tools.ant.types.FilterSetCollection:boolean hasFilters()",
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] makeArray(java.util.Vector,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:void readFiles(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PropertySet$1:boolean hasNext()",
            "org.apache.tools.ant.types.PropertySet:java.util.Hashtable getAllSystemProperties()",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:void addPropertyNames(java.util.Set,java.util.Hashtable)",
            "org.apache.tools.ant.types.XMLCatalog:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.ResourceLocation findMatchingEntry(java.lang.String)",
            "org.apache.tools.ant.types.ZipScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.facade.FacadeTaskHelper:java.lang.String[] getArgs()",
            "org.apache.tools.ant.util.CollectionUtils$2:boolean hasNext()",
            "org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration:boolean hasMoreElements()",
            "org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration:java.lang.Object nextElement()",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.CollectionUtils:void putAll(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.Watchdog:void fireTimeoutOccured()",
            "org.apache.tools.ant.AntClassLoader:java.lang.String getClasspath()",
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream loadResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:boolean isParentFirst(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.net.URL getResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:boolean isInPath(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:void cleanup()",
            "org.apache.tools.ant.AntClassLoader:void addJavaLibraries()",
            "org.apache.tools.ant.ComponentHelper:void initTasks()",
            "org.apache.tools.ant.ComponentHelper:void initTypes()",
            "org.apache.tools.ant.Diagnostics:void doReportSystemProperties(java.io.PrintStream)",
            "org.apache.tools.ant.Diagnostics:void doReportTasksAvailability(java.io.PrintStream)",
            "org.apache.tools.ant.Main:void startAnt(java.lang.String[],java.util.Properties,java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void processArgs(java.lang.String[])",
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void printTargets(org.apache.tools.ant.Project,boolean)",
            "org.apache.tools.ant.Project:void setSystemProperties()",
            "org.apache.tools.ant.Project:void executeSortedTargets(java.util.Vector)",
            "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String[],java.util.Hashtable,boolean)",
            "org.apache.tools.ant.Project:void tsort(java.lang.String,java.util.Hashtable,java.util.Hashtable,java.util.Stack,java.util.Vector)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Task:void replaceChildren(org.apache.tools.ant.RuntimeConfigurable,org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.XmlLogger:org.apache.tools.ant.XmlLogger$TimedElement getTaskElement(org.apache.tools.ant.Task)",
            "org.apache.tools.mail.MailMessage:java.lang.String vectorToList(java.util.Vector)",
            "org.apache.tools.zip.ZipFile:void resolveLocalFileHeaderData()"
        ]
    },
    "org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ReplaceTokens:void initialize()",
            "org.apache.tools.ant.filters.TokenFilter:int read()",
            "org.apache.tools.ant.input.DefaultInputHandler:java.lang.String getPrompt(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:void setAptCommandlineSwitches(org.apache.tools.ant.taskdefs.Apt,org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.IsSigned:boolean isSigned(java.io.File,java.lang.String)",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:org.apache.tools.ant.taskdefs.cvslib.CVSEntry[] getEntrySetAsArray()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter:void printEntry(org.w3c.dom.Document,java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CVSEntry)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:void setCommonOptions(org.apache.tools.ant.taskdefs.ExecTask)",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:org.apache.tools.ant.types.Path createUnifiedSourcePath()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void overrideProperties()",
            "org.apache.tools.ant.taskdefs.Ant:void addReferences()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printHead(java.io.PrintWriter,java.util.Enumeration,java.util.Enumeration)",
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.taskdefs.AntStructure:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean generateChecksums()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Copydir:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:void loadProperties(java.lang.ClassLoader,java.net.URL)",
            "org.apache.tools.ant.taskdefs.ExecTask:java.lang.String resolveExecutable(java.lang.String,boolean)",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.Expand:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest getManifestFromJar(java.io.File)",
            "org.apache.tools.ant.taskdefs.Jar:void writeManifest(org.apache.tools.zip.ZipOutputStream,org.apache.tools.ant.taskdefs.Manifest)",
            "org.apache.tools.ant.taskdefs.Jar:void grabFilesAndDirs(java.lang.String,java.util.List,java.util.List)",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.Manifest$Attribute:java.lang.String getValue()",
            "org.apache.tools.ant.taskdefs.Manifest$Attribute:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void merge(org.apache.tools.ant.taskdefs.Manifest$Section)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String addAttributeAndCheck(org.apache.tools.ant.taskdefs.Manifest$Attribute)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.Object clone()",
            "org.apache.tools.ant.taskdefs.Manifest:void merge(org.apache.tools.ant.taskdefs.Manifest,boolean)",
            "org.apache.tools.ant.taskdefs.Manifest:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest:java.util.Enumeration getWarnings()",
            "org.apache.tools.ant.taskdefs.ManifestTask:void execute()",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Move:void copyFile(java.io.File,java.io.File,boolean,boolean)",
            "org.apache.tools.ant.taskdefs.Parallel:void spinThreads()",
            "org.apache.tools.ant.taskdefs.ProcessDestroyer:void run()",
            "org.apache.tools.ant.taskdefs.Property:void loadEnvironment(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Property:void addProperties(java.util.Properties)",
            "org.apache.tools.ant.taskdefs.Property:void resolveAllProperties(java.util.Properties)",
            "org.apache.tools.ant.taskdefs.Property:void resolve(java.util.Properties,java.lang.String,java.util.Stack)",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.taskdefs.Ant createAntTask(java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:void execute()",
            "org.apache.tools.ant.taskdefs.Tstamp:void execute()",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void configureLiaison(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void cleanUp()",
            "org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasPatterns()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:void addDefinitionsToList(java.util.ListIterator)",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:void setSystem()",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:java.util.Properties mergePropertySets()",
            "org.apache.tools.ant.types.FilterSet:java.util.Hashtable getFilterHash()",
            "org.apache.tools.ant.types.FilterSet:void readFiltersFromFile(java.io.File)",
            "org.apache.tools.ant.types.FilterSet:void addConfiguredFilterSet(org.apache.tools.ant.types.FilterSet)",
            "org.apache.tools.ant.types.FilterSetCollection:java.lang.String replaceTokens(java.lang.String)",
            "org.apache.tools.ant.types.FilterSetCollection:boolean hasFilters()",
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] makeArray(java.util.Vector,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:void readFiles(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PropertySet$1:java.lang.Object next()",
            "org.apache.tools.ant.types.PropertySet:java.util.Hashtable getAllSystemProperties()",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:void addPropertyNames(java.util.Set,java.util.Hashtable)",
            "org.apache.tools.ant.types.XMLCatalog:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.ResourceLocation findMatchingEntry(java.lang.String)",
            "org.apache.tools.ant.types.ZipScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.facade.FacadeTaskHelper:java.lang.String[] getArgs()",
            "org.apache.tools.ant.util.CollectionUtils$2:java.lang.Object next()",
            "org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration:java.lang.Object nextElement()",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.CollectionUtils:void putAll(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.Watchdog:void fireTimeoutOccured()",
            "org.apache.tools.ant.AntClassLoader:java.lang.String getClasspath()",
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream loadResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:boolean isParentFirst(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.net.URL getResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:boolean isInPath(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:void cleanup()",
            "org.apache.tools.ant.AntClassLoader:void addJavaLibraries()",
            "org.apache.tools.ant.ComponentHelper:void initTasks()",
            "org.apache.tools.ant.ComponentHelper:void initTypes()",
            "org.apache.tools.ant.Diagnostics:void doReportSystemProperties(java.io.PrintStream)",
            "org.apache.tools.ant.Diagnostics:void doReportTasksAvailability(java.io.PrintStream)",
            "org.apache.tools.ant.Main:void startAnt(java.lang.String[],java.util.Properties,java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void processArgs(java.lang.String[])",
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void printTargets(org.apache.tools.ant.Project,boolean)",
            "org.apache.tools.ant.Project:void setSystemProperties()",
            "org.apache.tools.ant.Project:void executeSortedTargets(java.util.Vector)",
            "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String[],java.util.Hashtable,boolean)",
            "org.apache.tools.ant.Project:void tsort(java.lang.String,java.util.Hashtable,java.util.Hashtable,java.util.Stack,java.util.Vector)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Task:void replaceChildren(org.apache.tools.ant.RuntimeConfigurable,org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.XmlLogger:org.apache.tools.ant.XmlLogger$TimedElement getTaskElement(org.apache.tools.ant.Task)",
            "org.apache.tools.mail.MailMessage:java.lang.String vectorToList(java.util.Vector)",
            "org.apache.tools.zip.ZipFile:void resolveLocalFileHeaderData()"
        ]
    },
    "org.apache.tools.ant.util.CollectionUtils:void putAll(java.util.Dictionary,java.util.Dictionary)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.Watchdog:void fireTimeoutOccured()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.Watchdog:void run()"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.lang.String getClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:java.lang.String toString()",
            "org.apache.tools.ant.AntTypeDefinition:boolean similarDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.io.InputStream loadResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream getResourceAsStream(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:boolean isParentFirst(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.net.URL getResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.util.Enumeration findResources(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class loadClass(java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.net.URL getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.WhichResource:void execute()",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource classpathLookup(org.apache.tools.ant.types.ResourceLocation)",
            "org.apache.tools.ant.util.LoaderUtils:boolean classExists(java.lang.ClassLoader,java.lang.String)",
            "org.apache.tools.ant.util.ScriptRunnerCreator:org.apache.tools.ant.util.ScriptRunnerBase createRunner(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.net.URL getResource(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:boolean isInPath(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClass(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void cleanup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.rmic.WLRmic:boolean execute()",
            "org.apache.tools.ant.taskdefs.Available:boolean eval()",
            "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void execute()",
            "org.apache.tools.ant.AntClassLoader:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.AntClassLoader:void subBuildFinished(org.apache.tools.ant.BuildEvent)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void addJavaLibraries()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.HasMethod:java.lang.Class loadClass(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Available:boolean checkClass(java.lang.String)",
            "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getUniqueClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,boolean)",
            "org.apache.tools.ant.AntClassLoader:void <init>(java.lang.ClassLoader,org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,boolean)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:void initTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:void initDefaultDefinitions()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:void initTypes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:void initDefaultDefinitions()"
        ]
    },
    "org.apache.tools.ant.Diagnostics:void doReportSystemProperties(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Diagnostics:void doReport(java.io.PrintStream)"
        ]
    },
    "org.apache.tools.ant.Diagnostics:void doReportTasksAvailability(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Diagnostics:void doReport(java.io.PrintStream)"
        ]
    },
    "org.apache.tools.ant.Main:void startAnt(java.lang.String[],java.util.Properties,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Main:void start(java.lang.String[],java.util.Properties,java.lang.ClassLoader)"
        ]
    },
    "org.apache.tools.ant.Main:void processArgs(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Main:void startAnt(java.lang.String[],java.util.Properties,java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void <init>(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Main:void startAnt(java.lang.String[],java.util.Properties,java.lang.ClassLoader)"
        ]
    },
    "org.apache.tools.ant.Main:void printTargets(org.apache.tools.ant.Project,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)"
        ]
    },
    "org.apache.tools.ant.Project:void setSystemProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.Project:void initProperties()"
        ]
    },
    "org.apache.tools.ant.Project:void executeSortedTargets(java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.SingleCheckExecutor:void executeTargets(org.apache.tools.ant.Project,java.lang.String[])",
            "org.apache.tools.ant.Project:void executeTarget(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String[],java.util.Hashtable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.SingleCheckExecutor:void executeTargets(org.apache.tools.ant.Project,java.lang.String[])",
            "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String,java.util.Hashtable,boolean)"
        ]
    },
    "org.apache.tools.ant.Project:void tsort(java.lang.String,java.util.Hashtable,java.util.Hashtable,java.util.Stack,java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String[],java.util.Hashtable,boolean)",
            "org.apache.tools.ant.Project:void tsort(java.lang.String,java.util.Hashtable,java.util.Hashtable,java.util.Stack,java.util.Vector)"
        ]
    },
    "org.apache.tools.ant.Task:void replaceChildren(org.apache.tools.ant.RuntimeConfigurable,org.apache.tools.ant.UnknownElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Task:org.apache.tools.ant.UnknownElement getReplacement()",
            "org.apache.tools.ant.Task:void replaceChildren(org.apache.tools.ant.RuntimeConfigurable,org.apache.tools.ant.UnknownElement)"
        ]
    },
    "org.apache.tools.ant.XmlLogger:org.apache.tools.ant.XmlLogger$TimedElement getTaskElement(org.apache.tools.ant.Task)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.XmlLogger:void messageLogged(org.apache.tools.ant.BuildEvent)"
        ]
    },
    "org.apache.tools.mail.MailMessage:java.lang.String vectorToList(java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.mail.MailMessage:void setReplyToHeader()",
            "org.apache.tools.mail.MailMessage:void setToHeader()",
            "org.apache.tools.mail.MailMessage:void setCcHeader()"
        ]
    },
    "org.apache.tools.ant.util.ContainerMapper:void add(org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Mapper:void add(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.ContainerMapper:void addConfiguredMapper(org.apache.tools.ant.types.Mapper)",
            "org.apache.tools.ant.util.ContainerMapper:void addConfigured(org.apache.tools.ant.util.FileNameMapper)"
        ]
    },
    "org.apache.tools.ant.util.DOMElementWriter:void write(org.w3c.dom.Element,java.io.Writer,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter:void printEntry(org.w3c.dom.Document,java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CVSEntry)",
            "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:void writeTagEntry(org.w3c.dom.Document,java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CvsTagEntry)",
            "org.apache.tools.ant.util.DOMElementWriter:void write(org.w3c.dom.Element,java.io.OutputStream)",
            "org.apache.tools.ant.util.DOMElementWriter:void write(org.w3c.dom.Element,java.io.Writer,int,java.lang.String)",
            "org.apache.tools.ant.XmlLogger:void buildFinished(org.apache.tools.ant.BuildEvent)"
        ]
    },
    "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter:void printChangeLog(java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CVSEntry[])",
            "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:void writeTagDiff(org.apache.tools.ant.taskdefs.cvslib.CvsTagEntry[])"
        ]
    },
    "org.apache.tools.ant.util.DOMElementWriter:void closeElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter:void printChangeLog(java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CVSEntry[])",
            "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:void writeTagDiff(org.apache.tools.ant.taskdefs.cvslib.CvsTagEntry[])",
            "org.apache.tools.ant.util.DOMElementWriter:void write(org.w3c.dom.Element,java.io.Writer,int,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.FileUtils:java.lang.String getRelativePath(java.io.File,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void writeManifest(org.apache.tools.zip.ZipOutputStream,org.apache.tools.ant.taskdefs.Manifest)",
            "org.apache.tools.ant.taskdefs.Jar:void createIndexList(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void zipFile(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void initSubProject(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:org.apache.tools.ant.Project createSubProject()"
        ]
    },
    "org.apache.tools.ant.Project:java.util.Hashtable getTaskDefinitions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsReference:boolean eval()",
            "org.apache.tools.ant.taskdefs.AntStructure:void execute()"
        ]
    },
    "org.apache.tools.ant.Project:java.util.Hashtable getDataTypeDefinitions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl:void handleElement(org.apache.tools.ant.helper.ProjectHelperImpl,org.xml.sax.DocumentHandler,org.apache.tools.ant.Target,java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.taskdefs.condition.IsReference:boolean eval()",
            "org.apache.tools.ant.taskdefs.AntStructure:void execute()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:java.lang.String getElementName(java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(org.apache.tools.ant.Project,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:java.lang.String getDataTypeName()"
        ]
    },
    "org.apache.tools.ant.Target:void performTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void executeSortedTargets(java.util.Vector)"
        ]
    },
    "org.apache.tools.ant.Project:void fireMessageLogged(org.apache.tools.ant.Project,java.lang.String,java.lang.Throwable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void log(java.lang.String,java.lang.Throwable,int)",
            "org.apache.tools.ant.Project:void fireMessageLogged(org.apache.tools.ant.Project,java.lang.String,int)"
        ]
    },
    "org.apache.tools.ant.Project:void fireMessageLogged(org.apache.tools.ant.Target,java.lang.String,java.lang.Throwable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void log(org.apache.tools.ant.Target,java.lang.String,java.lang.Throwable,int)",
            "org.apache.tools.ant.Project:void fireMessageLogged(org.apache.tools.ant.Target,java.lang.String,int)"
        ]
    },
    "org.apache.tools.ant.Project:void fireMessageLogged(org.apache.tools.ant.Task,java.lang.String,java.lang.Throwable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void log(org.apache.tools.ant.Task,java.lang.String,int)",
            "org.apache.tools.ant.Project:void log(org.apache.tools.ant.Task,java.lang.String,java.lang.Throwable,int)",
            "org.apache.tools.ant.Project:void fireMessageLogged(org.apache.tools.ant.Task,java.lang.String,int)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:void applyPreSet(org.apache.tools.ant.UnknownElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:void <init>(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.UnknownElement:java.lang.Object makeObject(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:boolean handleChild(java.lang.String,org.apache.tools.ant.IntrospectionHelper,java.lang.Object,org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelper2:org.apache.tools.ant.UnknownElement parseUnknownElement(org.apache.tools.ant.Project,java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Antlib:org.apache.tools.ant.taskdefs.Antlib createAntlib(org.apache.tools.ant.Project,java.net.URL,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.Description:java.util.Vector findElementInTarget(org.apache.tools.ant.Project,org.apache.tools.ant.Target,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Description:void concatDescriptions(org.apache.tools.ant.Project,org.apache.tools.ant.Target,java.lang.StringBuffer)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:void configure(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Antlib:org.apache.tools.ant.taskdefs.Antlib createAntlib(org.apache.tools.ant.Project,java.net.URL,java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void maybeConfigure()"
        ]
    },
    "org.apache.tools.ant.UnknownElement:boolean handleChild(java.lang.String,org.apache.tools.ant.IntrospectionHelper,java.lang.Object,org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.Project:java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Project:java.lang.Object getReference(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.resources.Union:org.apache.tools.ant.types.Resource[] listResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.types.resources.Union:org.apache.tools.ant.types.Resource[] listResources()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Parallel$TaskRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Target:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2:void parse(org.apache.tools.ant.Project,java.lang.Object)",
            "org.apache.tools.ant.Target:void performTasks()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:void addNodeRecursively(org.w3c.dom.Node,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addNodeRecursively(org.w3c.dom.Node,java.lang.String,java.lang.Object)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addNodeRecursively(org.w3c.dom.Node,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.selectors.NotSelector:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.FilterSetCollection:java.lang.String replaceTokens(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Commandline setupRmicCommand(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Commandline setupRmicCommand()",
            "org.apache.tools.ant.taskdefs.rmic.WLRmic:boolean execute()",
            "org.apache.tools.ant.taskdefs.rmic.XNewRmic:org.apache.tools.ant.types.Commandline setupRmicCommand()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc:void setExtdirs(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.CommandlineJava:java.lang.String[] getCommandline()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteJava:int fork(org.apache.tools.ant.ProjectComponent)",
            "org.apache.tools.ant.taskdefs.Java:int executeJava()",
            "org.apache.tools.ant.types.CommandlineJava:java.lang.String toString()",
            "org.apache.tools.ant.types.CommandlineJava:java.lang.String describeCommand()"
        ]
    },
    "org.apache.tools.ant.Diagnostics:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DiagnosticsTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef:boolean similar(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef$MyAntTypeDefinition:boolean similarDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef:boolean sameDefinition(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef$MyAntTypeDefinition:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.Project:java.lang.String getProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jvc:boolean execute()",
            "org.apache.tools.ant.taskdefs.condition.AntVersion:org.apache.tools.ant.util.DeweyDecimal getVersion()",
            "org.apache.tools.ant.taskdefs.condition.IsSet:boolean eval()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Available:void execute()",
            "org.apache.tools.ant.taskdefs.CallTarget:void execute()",
            "org.apache.tools.ant.taskdefs.Classloader:void execute()",
            "org.apache.tools.ant.taskdefs.Exec:int run(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Execute$PerlScriptCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute$ScriptCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Exit:void execute()",
            "org.apache.tools.ant.taskdefs.Exit:boolean testIfCondition()",
            "org.apache.tools.ant.taskdefs.Exit:boolean testUnlessCondition()",
            "org.apache.tools.ant.taskdefs.Input:void execute()",
            "org.apache.tools.ant.taskdefs.Javac:java.lang.String getSource()",
            "org.apache.tools.ant.taskdefs.Javac:java.lang.String getTarget()",
            "org.apache.tools.ant.taskdefs.Javac:java.lang.String getCompilerVersion()",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.MakeUrl:void execute()",
            "org.apache.tools.ant.taskdefs.ManifestClassPath:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void resolve(java.util.Properties,java.lang.String,java.util.Stack)",
            "org.apache.tools.ant.taskdefs.Rmic:java.lang.String getCompiler()",
            "org.apache.tools.ant.taskdefs.XSLTProcess$Param:boolean shouldUse()",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addProperty(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String getValue()",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean passesConditions()",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSpecialPath(java.lang.String,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.types.PatternSet$NameEntry:boolean valid(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.regexp.RegexpFactory:org.apache.tools.ant.util.regexp.Regexp newRegexp(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.regexp.RegexpMatcherFactory:org.apache.tools.ant.util.regexp.RegexpMatcher newRegexpMatcher(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ClasspathUtils:boolean isMagicPropertySet(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ProxySetup:void enableProxies()",
            "org.apache.tools.ant.AntClassLoader:void setThreadContextLoader()",
            "org.apache.tools.ant.ComponentHelper:java.lang.ClassLoader getClassLoader(java.lang.ClassLoader)",
            "org.apache.tools.ant.Diagnostics:void doReportAntProperties(java.io.PrintStream)",
            "org.apache.tools.ant.Project:org.apache.tools.ant.Executor getExecutor()",
            "org.apache.tools.ant.Target:boolean testIfCondition()",
            "org.apache.tools.ant.Target:boolean testUnlessCondition()",
            "org.apache.tools.ant.XmlLogger:void buildFinished(org.apache.tools.ant.BuildEvent)"
        ]
    },
    "org.apache.tools.ant.Project:java.lang.String getUserProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Property:void addProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.filters.ExpandProperties:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.ExpandProperties:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.taskdefs.email.Message:void print(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Concat$TextElement:void addText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Echo:void addText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Exit:void addText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Input:void addText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javadoc:java.lang.String expand(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.SQLExec:void runStatements(java.io.Reader,java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)"
        ]
    },
    "org.apache.tools.ant.types.resources.StringResource:java.lang.String getContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.StringResource:long getSize()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String getContent()"
        ]
    },
    "org.apache.tools.ant.types.Description:void concatDescriptions(org.apache.tools.ant.Project,org.apache.tools.ant.Target,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Description:java.lang.String getDescription(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.PatternSet:void readPatterns(java.io.File,java.util.Vector,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PatternSet:void readFiles(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.XMLFragment:void addText(org.w3c.dom.Node,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.XMLFragment:void addText(java.lang.String)",
            "org.apache.tools.ant.util.XMLFragment:void access$000(org.apache.tools.ant.util.XMLFragment,org.w3c.dom.Node,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.ProjectHelper:java.lang.String replaceProperties(org.apache.tools.ant.Project,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.RuntimeConfigurable:void maybeConfigure(org.apache.tools.ant.Project,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.RuntimeConfigurable:void maybeConfigure(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.Target:boolean testIfCondition()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Target:void execute()"
        ]
    },
    "org.apache.tools.ant.Target:boolean testUnlessCondition()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Target:void execute()"
        ]
    },
    "org.apache.tools.ant.ProjectHelper:void configure(java.lang.Object,org.xml.sax.AttributeList,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupModernJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.AptExternalCompilerAdapter:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupModernJavacCommand()",
            "org.apache.tools.ant.taskdefs.compilers.JavacExternal:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommand(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommand()",
            "org.apache.tools.ant.taskdefs.compilers.Javac12:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.JavacExternal:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.Gcj:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:void compile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.Kjc:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Redirector:void createStreams()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:void run(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.taskdefs.Redirector:org.apache.tools.ant.taskdefs.ExecuteStreamHandler createHandler()"
        ]
    },
    "org.apache.tools.ant.types.mappers.FilterMapper:java.lang.String[] mapFileName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void buildMap(java.io.File,java.io.File,java.lang.String[],org.apache.tools.ant.util.FileNameMapper,java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Copy:java.util.Map buildMap(org.apache.tools.ant.types.Resource[],java.io.File,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.CopyPath:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getCommandline(java.lang.String[],java.io.File[])",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.PathConvert:void execute()",
            "org.apache.tools.ant.taskdefs.Rmic:void moveGeneratedFile(java.io.File,java.io.File,java.lang.String,org.apache.tools.ant.taskdefs.rmic.RmicAdapter)",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.MappingSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.PresentSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.RedirectorElement:void configure(org.apache.tools.ant.taskdefs.Redirector,java.lang.String)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Replace:void processFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Replace:void execute()"
        ]
    },
    "org.apache.tools.ant.filters.util.ChainReaderHelper:java.lang.String readFully(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()"
        ]
    },
    "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readFully()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ClassConstants:int read()",
            "org.apache.tools.ant.filters.ExpandProperties:int read()"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:java.lang.String readFully(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$TextElement:void setFile(java.io.File)",
            "org.apache.tools.ant.types.mappers.FilterMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.FileTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void setSrc(java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Redirector:int handleInput(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:int handleInput(byte[],int,int)"
        ]
    },
    "org.apache.tools.ant.util.ReaderInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Untar$UntarCompressionMethod:java.io.InputStream decompress(java.lang.String,java.io.InputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.InputStream wrapStream(java.io.InputStream)",
            "org.apache.tools.ant.util.ConcatFileInputStream:int readCurrent()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:int readCurrent()",
            "org.apache.tools.bzip2.CBZip2InputStream:void init()",
            "org.apache.tools.bzip2.CBZip2InputStream:int bsR(int)",
            "org.apache.tools.bzip2.CBZip2InputStream:boolean bsGetBit()",
            "org.apache.tools.bzip2.CBZip2InputStream:void getAndMoveToFrontDecode()",
            "org.apache.tools.bzip2.CBZip2InputStream:int getAndMoveToFrontDecode0(int)"
        ]
    },
    "org.apache.tools.ant.util.UUEncoder:void encode(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.email.UUMailer:void attach(java.io.File,java.io.PrintStream)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.lang.Class getClassFromStream(java.io.InputStream,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.Project:int defaultInput(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Redirector:int handleInput(byte[],int,int)",
            "org.apache.tools.ant.Project:int demuxInput(byte[],int,int)",
            "org.apache.tools.ant.Task:int handleInput(byte[],int,int)"
        ]
    },
    "org.apache.tools.tar.TarBuffer:boolean readBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.tar.TarBuffer:void skipRecord()",
            "org.apache.tools.tar.TarBuffer:byte[] readRecord()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copy:void scan(java.io.File,java.io.File,java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:void scan(java.io.File,java.io.File,java.lang.String[],java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] restrict(java.lang.String[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getFiles(java.io.File,org.apache.tools.ant.DirectoryScanner)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getDirs(java.io.File,org.apache.tools.ant.DirectoryScanner)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getFilesAndDirs(org.apache.tools.ant.types.FileList)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Rmic:void scanDir(java.io.File,java.lang.String[],org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Rmic:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar:boolean archiveIsUpToDate(java.lang.String[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:boolean archiveIsUpToDate(java.lang.String[])",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(java.io.File,java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.UpToDate:boolean scanDir(java.io.File,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()"
        ]
    },
    "org.apache.tools.ant.util.SourceFileScanner:java.io.File[] restrictAsFiles(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void scanDir(java.io.File,java.io.File,java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.Available:boolean checkFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Available:boolean eval()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Classloader:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MakeUrl:java.lang.String pathsToURL()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MakeUrl:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ManifestClassPath:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.SubAnt:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.types.Path:void addExisting(org.apache.tools.ant.types.Path,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Path:void addExisting(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSpecialPath(java.lang.String,org.apache.tools.ant.types.Path)"
        ]
    },
    "org.apache.tools.ant.types.Path:void addExtdirs(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:void addExtdirsToClasspath(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.compilers.Gcj:org.apache.tools.ant.types.Commandline setupGCJCommand()",
            "org.apache.tools.ant.taskdefs.compilers.Jvc:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Kjc:org.apache.tools.ant.types.Commandline setupKjcCommand()"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:void processExternalCatalogs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.XMLCatalog$CatalogResolver getCatalogResolver()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void setClassPath(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:void <init>(java.lang.ClassLoader,org.apache.tools.ant.Project,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.AntClassLoader:void <init>(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path)"
        ]
    },
    "org.apache.tools.ant.DirectoryScanner:void processSlowScan(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DirectoryScanner:void slowScan()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:int read0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2InputStream:int read()",
            "org.apache.tools.bzip2.CBZip2InputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.tools.ant.Project:void copyFile(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void copyFile(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void copyFile(java.lang.String,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copydir:void execute()"
        ]
    },
    "org.apache.tools.ant.Project:void copyFile(java.lang.String,java.lang.String,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.FileUtils:void rename(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.FixCRLF:void processFile(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Rename:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void processFile(java.io.File)",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.Project:void copyFile(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void copyFile(java.io.File,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void copyFile(java.io.File,java.io.File,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copyfile:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Touch:void checkConfiguration()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Touch:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute:java.lang.String[] patchEnvironment()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:java.lang.String[] getEnvironment()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ear:void initZipOutputStream(org.apache.tools.zip.ZipOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:boolean createEmptyZip(java.io.File)",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.taskdefs.War:void initZipOutputStream(org.apache.tools.zip.ZipOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:boolean createEmptyZip(java.io.File)",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.types.DataType:void dieOnCircularReference()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:boolean hasSelectors()",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:int selectorCount()",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:java.util.Iterator getSelectors()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:int size()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.util.List getResourceCollections()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:int size()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:org.apache.tools.ant.types.ResourceCollection getResourceCollection()",
            "org.apache.tools.ant.types.resources.Resources:void validate()",
            "org.apache.tools.ant.types.resources.Restrict:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict:int size()",
            "org.apache.tools.ant.types.resources.Restrict:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.DataType:java.lang.Object getCheckedRef(java.lang.Class,java.lang.String,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:java.lang.Object getCheckedRef(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:java.lang.Object getCheckedRef(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.TarFileSet:org.apache.tools.ant.types.AbstractFileSet getRef(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.AbstractFileSet:java.io.File getDir(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean getDefaultexcludes()",
            "org.apache.tools.ant.types.AbstractFileSet:boolean isCaseSensitive()",
            "org.apache.tools.ant.types.AbstractFileSet:boolean isFollowSymlinks()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasSelectors()",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasPatterns()",
            "org.apache.tools.ant.types.AbstractFileSet:int selectorCount()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.selectors.FileSelector[] getSelectors(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:java.util.Enumeration selectorElements()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.PatternSet mergePatterns(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.io.File getSrc(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String getPrefix(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String getFullpath(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.ArchiveFileSet:int getFileMode(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:boolean hasFileModeBeenSet()",
            "org.apache.tools.ant.types.ArchiveFileSet:int getDirMode(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:boolean hasDirModeBeenSet()",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.FileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.FileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.FileSet:int size()",
            "org.apache.tools.ant.types.TarFileSet:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.ZipFileSet:org.apache.tools.ant.types.AbstractFileSet getRef(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.AbstractFileSet:java.io.File getDir(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean getDefaultexcludes()",
            "org.apache.tools.ant.types.AbstractFileSet:boolean isCaseSensitive()",
            "org.apache.tools.ant.types.AbstractFileSet:boolean isFollowSymlinks()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasSelectors()",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasPatterns()",
            "org.apache.tools.ant.types.AbstractFileSet:int selectorCount()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.selectors.FileSelector[] getSelectors(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:java.util.Enumeration selectorElements()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.PatternSet mergePatterns(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.io.File getSrc(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String getPrefix(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String getFullpath(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.ArchiveFileSet:int getFileMode(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:boolean hasFileModeBeenSet()",
            "org.apache.tools.ant.types.ArchiveFileSet:int getDirMode(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:boolean hasDirModeBeenSet()",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.FileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.FileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.FileSet:int size()",
            "org.apache.tools.ant.types.ZipFileSet:java.lang.String getEncoding()",
            "org.apache.tools.ant.types.ZipFileSet:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.Compare:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void invokeCircularReferenceCheck(org.apache.tools.ant.types.DataType,java.util.Stack,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Sort:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Tokens:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void invokeCircularReferenceCheck(org.apache.tools.ant.types.DataType,java.util.Stack,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.Path:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void invokeCircularReferenceCheck(org.apache.tools.ant.types.DataType,java.util.Stack,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Sort:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void invokeCircularReferenceCheck(org.apache.tools.ant.types.DataType,java.util.Stack,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Tokens:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:void invokeCircularReferenceCheck(org.apache.tools.ant.types.DataType,java.util.Stack,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.PropertySet$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.taskdefs.Execute:java.util.Vector addVMSLogicals(java.util.Vector,java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void writeIndexLikeList(java.util.List,java.util.List,java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredText(org.apache.tools.ant.taskdefs.MacroDef$Text)",
            "org.apache.tools.ant.taskdefs.MacroInstance:java.util.Map getNsElements()",
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.Sequential:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void addConfiguredStyle(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void addAll(java.util.Collection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Difference:org.apache.tools.ant.types.ResourceCollection nextRC(java.util.Iterator)",
            "org.apache.tools.ant.types.resources.FailFast:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.resources.Union:org.apache.tools.ant.types.ResourceCollection nextRC(java.util.Iterator)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()",
            "org.apache.tools.ant.types.spi.Service:java.io.InputStream getAsStream()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.RedirectorElement:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CollectionUtils$1:java.lang.Object nextElement()",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ContainerMapper:boolean contains(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)",
            "org.apache.tools.ant.util.DOMElementWriter:void removeNSDefinitions(org.w3c.dom.Element)",
            "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List,char)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:void initSubProject(org.apache.tools.ant.ComponentHelper)",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)",
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.Project:void fireBuildStarted()",
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireSubBuildStarted()",
            "org.apache.tools.ant.Project:void fireSubBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTaskStarted(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)",
            "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.Target:org.apache.tools.ant.Task[] getTasks()",
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.CollectionUtils$2:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ResourcesMatch:boolean eval()",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.taskdefs.Execute:java.util.Vector addVMSLogicals(java.util.Vector,java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Jar:void writeServices(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void writeIndexLikeList(java.util.List,java.util.List,java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredText(org.apache.tools.ant.taskdefs.MacroDef$Text)",
            "org.apache.tools.ant.taskdefs.MacroInstance:java.util.Map getNsElements()",
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.Sequential:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void addConfiguredStyle(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void addAll(java.util.Collection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Difference:org.apache.tools.ant.types.ResourceCollection nextRC(java.util.Iterator)",
            "org.apache.tools.ant.types.resources.FailFast:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort$SortedBag$MyIterator:java.lang.Object next()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.resources.Union:org.apache.tools.ant.types.ResourceCollection nextRC(java.util.Iterator)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()",
            "org.apache.tools.ant.types.spi.Service:java.io.InputStream getAsStream()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.RedirectorElement:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CollectionUtils$1:java.lang.Object nextElement()",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ContainerMapper:boolean contains(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.util.DOMElementWriter:void openElement(org.w3c.dom.Element,java.io.Writer,int,java.lang.String,boolean)",
            "org.apache.tools.ant.util.DOMElementWriter:void removeNSDefinitions(org.w3c.dom.Element)",
            "org.apache.tools.ant.util.FileUtils:java.lang.String getPath(java.util.List,char)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:void initSubProject(org.apache.tools.ant.ComponentHelper)",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)",
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()",
            "org.apache.tools.ant.Project:void fireBuildStarted()",
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireSubBuildStarted()",
            "org.apache.tools.ant.Project:void fireSubBuildFinished(java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireTaskStarted(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)",
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)",
            "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.Target:org.apache.tools.ant.Task[] getTasks()",
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.selectors.BaseSelector:void verifySettings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.BaseSelector:void verifySettings()",
            "org.apache.tools.ant.types.selectors.BaseSelector:void validate()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:void validate()"
        ]
    },
    "org.apache.tools.ant.types.selectors.BaseSelector:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(java.io.File,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.ContainsSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.DateSelector:long getMillis()",
            "org.apache.tools.ant.types.selectors.DateSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.DepthSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.FilenameSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MappingSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.PresentSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SizeSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.TypeSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava$SysProperties:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.CommandlineJava:int size()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getCommandline(java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecuteOn:void runParallel(org.apache.tools.ant.taskdefs.Execute,java.util.Vector,java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)"
        ]
    },
    "org.apache.tools.ant.types.RedirectorElement:void configure(org.apache.tools.ant.taskdefs.Redirector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:org.apache.tools.ant.taskdefs.Execute prepareExec()",
            "org.apache.tools.ant.taskdefs.Java:void setupRedirector()"
        ]
    },
    "org.apache.tools.ant.input.DefaultInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Input:void execute()"
        ]
    },
    "org.apache.tools.ant.input.GreedyInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Input:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:void setAptCommandlineSwitches(org.apache.tools.ant.types.Commandline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.AptExternalCompilerAdapter:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter:void printChangeLog(java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CVSEntry[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void writeChangeLog(org.apache.tools.ant.taskdefs.cvslib.CVSEntry[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printHead(java.io.PrintWriter,org.apache.tools.ant.Project,java.util.Hashtable,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AntStructure:void execute()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:void checkNamespace(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:org.apache.tools.ant.AntTypeDefinition getDefinition(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String getAttributeValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Manifest:void <init>(java.io.Reader)",
            "org.apache.tools.ant.taskdefs.Manifest:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest:void <init>(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest getManifest(java.io.Reader)",
            "org.apache.tools.ant.taskdefs.Manifest:org.apache.tools.ant.taskdefs.Manifest getDefaultManifest()",
            "org.apache.tools.ant.taskdefs.ManifestTask:void execute()",
            "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest:void addConfiguredAttribute(org.apache.tools.ant.taskdefs.Manifest$Attribute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ManifestTask:void addConfiguredAttribute(org.apache.tools.ant.taskdefs.Manifest$Attribute)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String read(java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Manifest:void <init>(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest$Section:void addConfiguredAttribute(org.apache.tools.ant.taskdefs.Manifest$Attribute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Manifest:void addConfiguredAttribute(org.apache.tools.ant.taskdefs.Manifest$Attribute)",
            "org.apache.tools.ant.taskdefs.Manifest:void write(java.io.PrintWriter)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest createManifest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void initZipOutputStream(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:void createIndexList(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest:void merge(org.apache.tools.ant.taskdefs.Manifest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void addConfiguredManifest(org.apache.tools.ant.taskdefs.Manifest)",
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest createManifest()",
            "org.apache.tools.ant.taskdefs.Jar:void filesetManifest(java.io.File,java.io.InputStream)",
            "org.apache.tools.ant.taskdefs.ManifestTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Parallel:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ProcessDestroyer$ProcessDestroyerImpl:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.input.GreedyInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.Parallel:void spinThreads()",
            "org.apache.tools.ant.taskdefs.ProcessDestroyer:void removeShutdownHook()",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void start()",
            "org.apache.tools.ant.taskdefs.Redirector:void createStreams()",
            "org.apache.tools.ant.util.Watchdog:void start()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Property:void loadUrl(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Property:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Property:void loadFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Property:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Property:void loadResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Property:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void configureLiaison(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Jar:void cleanUp()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ear:void cleanUp()",
            "org.apache.tools.ant.taskdefs.War:void cleanUp()",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void saveCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(java.io.File,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void targetFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void taskFinished(org.apache.tools.ant.BuildEvent)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.IsFileSelected:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()"
        ]
    },
    "org.apache.tools.ant.types.DirSet:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.DirSet:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.FileSet:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.FileSet:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava$SysProperties:java.lang.String[] getVariables()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AbstractCvsTask:void runCommand(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.ExecTask:java.lang.String resolveExecutable(java.lang.String,boolean)",
            "org.apache.tools.ant.taskdefs.ExecTask:org.apache.tools.ant.taskdefs.Execute prepareExec()",
            "org.apache.tools.ant.taskdefs.Java:int executeJava()",
            "org.apache.tools.ant.taskdefs.Java:void setupEnvironment(org.apache.tools.ant.taskdefs.Execute)"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:void run(org.apache.tools.ant.types.CommandlineJava)"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava:void setSystemProperties()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:java.util.Hashtable getFilters()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Filter:void readFilters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Filter:void execute()"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:java.util.Vector getFilters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.FilterSet:void <init>(org.apache.tools.ant.types.FilterSet)",
            "org.apache.tools.ant.types.FilterSet:java.util.Vector getFilters()",
            "org.apache.tools.ant.types.FilterSet:java.util.Hashtable getFilterHash()",
            "org.apache.tools.ant.types.FilterSet:void readFiltersFromFile(java.io.File)",
            "org.apache.tools.ant.types.FilterSet:void addConfiguredFilterSet(org.apache.tools.ant.types.FilterSet)",
            "org.apache.tools.ant.types.FilterSet:boolean hasFilters()",
            "org.apache.tools.ant.types.FilterSet:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.PatternSet:java.lang.String[] getIncludePatterns(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.types.resources.Files:java.lang.String[] mergeIncludes(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Files:void ensureDirectoryScannerSetup()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns(org.apache.tools.ant.types.PatternSet)",
            "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.String[] mergeIncludes(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:void addConfiguredPatternset(org.apache.tools.ant.types.PatternSet)",
            "org.apache.tools.ant.types.PatternSet:void append(org.apache.tools.ant.types.PatternSet,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] getIncludePatterns(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.PatternSet:java.lang.String[] getExcludePatterns(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.types.resources.Files:java.lang.String[] mergeExcludes(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Files:void ensureDirectoryScannerSetup()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns(org.apache.tools.ant.types.PatternSet)",
            "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.String[] mergeExcludes(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:void addConfiguredPatternset(org.apache.tools.ant.types.PatternSet)",
            "org.apache.tools.ant.types.PatternSet:void append(org.apache.tools.ant.types.PatternSet,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] getExcludePatterns(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.ResourceLocation access$000(org.apache.tools.ant.types.XMLCatalog,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$InternalResolver:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$InternalResolver:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:java.lang.String[] getCurrentCompilerArgs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:void addCurrentCompilerArgs(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.compilers.Gcj:boolean isNativeBuild()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Rmic:java.lang.String[] getCurrentCompilerArgs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Commandline setupRmicCommand(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.util.Watchdog:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.ExecuteWatchdog:void start(java.lang.Process)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.AntTypeDefinition:boolean similarDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef$MyAntTypeDefinition:boolean similarDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:boolean similarDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper:void updateDataTypeDefinition(org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.io.InputStream getResourceAsStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Available:boolean checkResource(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Property:void loadResource(java.lang.String)",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource classpathLookup(org.apache.tools.ant.types.ResourceLocation)",
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream loadBaseResource(java.lang.String)",
            "org.apache.tools.ant.ProjectHelper:org.apache.tools.ant.ProjectHelper getProjectHelper()"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.util.Enumeration findResources(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.AntClassLoader:java.lang.Class loadClass(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.WhichResource:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource classpathLookup(org.apache.tools.ant.types.ResourceLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource access$200(org.apache.tools.ant.types.XMLCatalog,org.apache.tools.ant.types.ResourceLocation)"
        ]
    },
    "org.apache.tools.ant.util.LoaderUtils:boolean classExists(java.lang.ClassLoader,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.ScriptRunnerCreator:org.apache.tools.ant.util.ScriptRunnerBase createRunner(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ScriptRunnerCreator:org.apache.tools.ant.util.ScriptRunnerBase createRunner(java.lang.String,java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:void addPathElement(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.lang.Class findClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.HasMethod:java.lang.Class loadClass(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Available:boolean checkClass(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class forceLoadClass(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class loadClass(java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.rmic.WLRmic:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Rmic:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Available:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.Available:void execute()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void buildFinished(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void subBuildFinished(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireSubBuildFinished(java.lang.Throwable)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.HasMethod:java.lang.Class loadClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.HasMethod:boolean eval()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Available:boolean checkClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Available:boolean eval()"
        ]
    },
    "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getUniqueClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void <init>(java.lang.ClassLoader,org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Classloader:void execute()",
            "org.apache.tools.ant.taskdefs.WhichResource:void execute()",
            "org.apache.tools.ant.AntClassLoader:void <init>(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,boolean)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:void initDefaultDefinitions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void init()"
        ]
    },
    "org.apache.tools.ant.Main:void start(java.lang.String[],java.util.Properties,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Main:void main(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.Main:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void initProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Diagnostics:void doReportAntProperties(java.io.PrintStream)",
            "org.apache.tools.ant.Project:void init()"
        ]
    },
    "org.apache.tools.ant.helper.SingleCheckExecutor:void executeTargets(org.apache.tools.ant.Project,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void executeTargets(java.util.Vector)"
        ]
    },
    "org.apache.tools.ant.Project:void executeTarget(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.DefaultExecutor:void executeTargets(org.apache.tools.ant.Project,java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String,java.util.Hashtable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void executeTarget(java.lang.String)",
            "org.apache.tools.ant.Target:boolean dependsOn(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.Task:org.apache.tools.ant.UnknownElement getReplacement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Task:void maybeConfigure()",
            "org.apache.tools.ant.Task:void perform()"
        ]
    },
    "org.apache.tools.ant.XmlLogger:void messageLogged(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)"
        ]
    },
    "org.apache.tools.mail.MailMessage:void setReplyToHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.mail.MailMessage:java.io.PrintStream getPrintStream()"
        ]
    },
    "org.apache.tools.mail.MailMessage:void setToHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.mail.MailMessage:java.io.PrintStream getPrintStream()"
        ]
    },
    "org.apache.tools.mail.MailMessage:void setCcHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.mail.MailMessage:java.io.PrintStream getPrintStream()"
        ]
    },
    "org.apache.tools.ant.types.Mapper:void add(org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void add(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void add(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Expand:void add(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.PathConvert:void add(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.UpToDate:void add(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void add(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.types.Mapper:void addConfigured(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.types.Mapper:void addConfiguredMapper(org.apache.tools.ant.types.Mapper)",
            "org.apache.tools.ant.types.PropertySet:void add(org.apache.tools.ant.util.FileNameMapper)"
        ]
    },
    "org.apache.tools.ant.util.ContainerMapper:void addConfiguredMapper(org.apache.tools.ant.types.Mapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.ContainerMapper:void addConfigured(org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:void writeTagEntry(org.w3c.dom.Document,java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CvsTagEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:void writeTagDiff(org.apache.tools.ant.taskdefs.cvslib.CvsTagEntry[])"
        ]
    },
    "org.apache.tools.ant.util.DOMElementWriter:void write(org.w3c.dom.Element,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.EchoXML:void execute()"
        ]
    },
    "org.apache.tools.ant.XmlLogger:void buildFinished(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:void writeTagDiff(org.apache.tools.ant.taskdefs.cvslib.CvsTagEntry[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:void execute()"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:java.lang.String getRelativePath(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XSLTProcess:void setLiaisonDynamicFileParameters(org.apache.tools.ant.taskdefs.XSLTLiaison,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void zipFile(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:void zipFile(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ear:void zipFile(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)",
            "org.apache.tools.ant.taskdefs.War:void zipFile(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)"
        ]
    },
    "org.apache.tools.ant.Project:org.apache.tools.ant.Project createSubProject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void init()"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.IsReference:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl:void handleElement(org.apache.tools.ant.helper.ProjectHelperImpl,org.xml.sax.DocumentHandler,org.apache.tools.ant.Target,java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl:void access$700(org.apache.tools.ant.helper.ProjectHelperImpl,org.xml.sax.DocumentHandler,org.apache.tools.ant.Target,java.lang.String,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.Project:java.lang.String getElementName(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.IntrospectionHelper:void addText(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:void throwNotSupported(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:java.lang.String getElementName(org.apache.tools.ant.Project,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.DataType:java.lang.String getDataTypeName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:java.lang.Object getCheckedRef(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:java.lang.String toString()",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.ResourceCollection assertFilesystemOnly(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Resource:java.lang.String toLongString()"
        ]
    },
    "org.apache.tools.ant.Project:void log(java.lang.String,java.lang.Throwable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void log(java.lang.String,int)"
        ]
    },
    "org.apache.tools.ant.Project:void fireMessageLogged(org.apache.tools.ant.Project,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.Project:void log(org.apache.tools.ant.Target,java.lang.String,java.lang.Throwable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void log(org.apache.tools.ant.Target,java.lang.String,int)"
        ]
    },
    "org.apache.tools.ant.Project:void fireMessageLogged(org.apache.tools.ant.Target,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void log(org.apache.tools.ant.Task,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Task:void log(java.lang.String,int)"
        ]
    },
    "org.apache.tools.ant.Project:void log(org.apache.tools.ant.Task,java.lang.String,java.lang.Throwable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Task:void log(java.lang.String,java.lang.Throwable,int)"
        ]
    },
    "org.apache.tools.ant.Project:void fireMessageLogged(org.apache.tools.ant.Task,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:void <init>(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.UnknownElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.PreSetDef:void execute()"
        ]
    },
    "org.apache.tools.ant.UnknownElement:java.lang.Object makeObject(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void maybeConfigure()",
            "org.apache.tools.ant.UnknownElement:java.lang.Object makeObject(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Antlib:org.apache.tools.ant.taskdefs.Antlib createAntlib(org.apache.tools.ant.Project,java.net.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Definer:void loadAntlib(java.lang.ClassLoader,java.net.URL)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:void maybeConfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.Project$AntRefTable:java.lang.Object get(java.lang.Object)",
            "org.apache.tools.ant.Project:java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Task:void perform()",
            "org.apache.tools.ant.Task:org.apache.tools.ant.UnknownElement getReplacement()",
            "org.apache.tools.ant.UnknownElement:void configure(java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.Project:java.lang.Object getReference(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2:void parse(org.apache.tools.ant.Project,java.lang.Object)",
            "org.apache.tools.ant.taskdefs.condition.IsReference:boolean eval()",
            "org.apache.tools.ant.taskdefs.Ant:void copyReference(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Classloader:void execute()",
            "org.apache.tools.ant.taskdefs.ImportTask:void execute()",
            "org.apache.tools.ant.taskdefs.Input$Handler:org.apache.tools.ant.input.InputHandler getInputHandler()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.Description:java.lang.String getDescription(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.Reference:java.lang.Object getReferencedObject(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Reference,boolean)",
            "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,java.lang.String,boolean,boolean)",
            "org.apache.tools.ant.ComponentHelper:org.apache.tools.ant.ComponentHelper getComponentHelper(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Project:org.apache.tools.ant.Executor getExecutor()",
            "org.apache.tools.ant.PropertyHelper:org.apache.tools.ant.PropertyHelper getPropertyHelper(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelper2:void parse(org.apache.tools.ant.Project,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ImportTask:void execute()",
            "org.apache.tools.ant.ProjectHelper:void configureProject(org.apache.tools.ant.Project,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:void addNodeRecursively(org.w3c.dom.Node,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Commandline setupRmicCommand()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.rmic.ForkingSunRmic:boolean execute()",
            "org.apache.tools.ant.taskdefs.rmic.KaffeRmic:boolean execute()",
            "org.apache.tools.ant.taskdefs.rmic.SunRmic:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.rmic.XNewRmic:org.apache.tools.ant.types.Commandline setupRmicCommand()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.rmic.ForkingSunRmic:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecuteJava:int fork(org.apache.tools.ant.ProjectComponent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.Kjc:boolean execute()",
            "org.apache.tools.ant.taskdefs.rmic.KaffeRmic:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:int executeJava()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:void execute()"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava:java.lang.String describeCommand()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:int executeJava()"
        ]
    },
    "org.apache.tools.ant.taskdefs.DiagnosticsTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef$MyAntTypeDefinition:boolean similarDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:boolean similarDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper:void updateDataTypeDefinition(org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef$MyAntTypeDefinition:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$RootHandler:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler:void init(java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.AntVersion:org.apache.tools.ant.util.DeweyDecimal getVersion()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.AntVersion:boolean eval()"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.IsSet:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Available:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Exec:int run(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Exec:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute$PerlScriptCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:java.lang.Process launch(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute$ScriptCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:java.lang.Process launch(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Exit:boolean testIfCondition()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Exit:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Exit:boolean testUnlessCondition()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Exit:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:java.lang.String getSource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupModernJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:java.lang.String getTarget()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:void setJavac(org.apache.tools.ant.taskdefs.Javac)",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupModernJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:java.lang.String getCompilerVersion()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:boolean assumeJava11()",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:boolean assumeJava12()",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:boolean assumeJava13()",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:boolean assumeJava14()",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:boolean assumeJava15()",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:boolean assumeJava16()",
            "org.apache.tools.ant.taskdefs.Javac:java.lang.String getCompiler()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Rmic:java.lang.String getCompiler()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Rmic:java.lang.String[] getCurrentCompilerArgs()",
            "org.apache.tools.ant.taskdefs.Rmic:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess$Param:boolean shouldUse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XSLTProcess:void configureLiaison(org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:void addProperty(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.Object processNode(org.w3c.dom.Node,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.PropertyResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.PropertyResource:long getSize()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()"
        ]
    },
    "org.apache.tools.ant.types.selectors.SelectSelector:boolean passesConditions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSpecialPath(java.lang.String,org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSystemClasspath(java.lang.String)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSystemBootClasspath(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.PatternSet$NameEntry:boolean valid(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PatternSet$NameEntry:java.lang.String evalName(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.regexp.RegexpFactory:org.apache.tools.ant.util.regexp.Regexp newRegexp(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.RegularExpression:void init(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.regexp.RegexpFactory:org.apache.tools.ant.util.regexp.Regexp newRegexp()"
        ]
    },
    "org.apache.tools.ant.util.regexp.RegexpMatcherFactory:org.apache.tools.ant.util.regexp.RegexpMatcher newRegexpMatcher(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.regexp.RegexpMatcherFactory:org.apache.tools.ant.util.regexp.RegexpMatcher newRegexpMatcher()"
        ]
    },
    "org.apache.tools.ant.util.ClasspathUtils:boolean isMagicPropertySet(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,java.lang.String,boolean)",
            "org.apache.tools.ant.util.ClasspathUtils:boolean access$000(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.ProxySetup:void enableProxies()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void setThreadContextLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:java.lang.Class loadClass(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:java.lang.ClassLoader getClassLoader(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:void initTasks()",
            "org.apache.tools.ant.ComponentHelper:void initTypes()"
        ]
    },
    "org.apache.tools.ant.Diagnostics:void doReportAntProperties(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Diagnostics:void doReport(java.io.PrintStream)"
        ]
    },
    "org.apache.tools.ant.Project:org.apache.tools.ant.Executor getExecutor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void initSubProject(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Project:void executeTargets(java.util.Vector)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Property:void addProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void addProperties(java.util.Properties)"
        ]
    },
    "org.apache.tools.ant.types.Description:java.lang.String getDescription(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:java.lang.String getDescription()"
        ]
    },
    "org.apache.tools.ant.util.XMLFragment:void addText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.XMLFragment:void access$000(org.apache.tools.ant.util.XMLFragment,org.w3c.dom.Node,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.XMLFragment$Child:void addText(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.RuntimeConfigurable:void maybeConfigure(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.RuntimeConfigurable:void reconfigure(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Target:void execute()",
            "org.apache.tools.ant.Task:void maybeConfigure()",
            "org.apache.tools.ant.UnknownElement:void configure(java.lang.Object)",
            "org.apache.tools.ant.UnknownElement:boolean handleChild(java.lang.String,org.apache.tools.ant.IntrospectionHelper,java.lang.Object,org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupModernJavacCommand()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Javac13:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommand()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.Sj:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.Javac12:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:void run(org.apache.tools.ant.types.CommandlineJava)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:int executeJava()",
            "org.apache.tools.ant.taskdefs.Java:void run(java.lang.String,java.util.Vector)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Redirector:org.apache.tools.ant.taskdefs.ExecuteStreamHandler createHandler()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:org.apache.tools.ant.taskdefs.ExecuteStreamHandler createHandler()",
            "org.apache.tools.ant.taskdefs.ExecuteJava:int fork(org.apache.tools.ant.ProjectComponent)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runParallel(org.apache.tools.ant.taskdefs.Execute,java.util.Vector,java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Java:int fork(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.filters.ClassConstants:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.BaseFilterReader:int read(char[],int,int)",
            "org.apache.tools.ant.filters.BaseFilterReader:long skip(long)",
            "org.apache.tools.ant.filters.BaseFilterReader:java.lang.String readLine()",
            "org.apache.tools.ant.filters.ClassConstants:int read()",
            "org.apache.tools.ant.filters.ConcatFilter:int read()",
            "org.apache.tools.ant.filters.EscapeUnicode:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter$RemoveEofFilter:void <init>(java.io.Reader)",
            "org.apache.tools.ant.filters.FixCrLfFilter$SimpleFilterReader:int read()",
            "org.apache.tools.ant.filters.FixCrLfFilter:int read()",
            "org.apache.tools.ant.filters.ReplaceTokens:int getNextChar()",
            "org.apache.tools.ant.filters.StripJavaComments:int read()",
            "org.apache.tools.ant.filters.StripLineBreaks:int read()",
            "org.apache.tools.ant.filters.TabsToSpaces:int read()",
            "org.apache.tools.ant.filters.TokenFilter$DeleteCharacters$1:int read()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:int read()",
            "org.apache.tools.ant.util.LineTokenizer:java.lang.String getToken(java.io.Reader)",
            "org.apache.tools.ant.util.StringTokenizer:java.lang.String getToken(java.io.Reader)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Concat$TextElement:void setFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.FileTokenizer:java.lang.String getToken(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.TokenFilter:int read()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.util.ScriptRunnerBase:void setSrc(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Java:int handleInput(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:int demuxInput(byte[],int,int)",
            "org.apache.tools.ant.UnknownElement:int handleInput(byte[],int,int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.email.UUMailer:void attach(java.io.File,java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()"
        ]
    },
    "org.apache.tools.ant.Project:int demuxInput(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:int handleInput(byte[],int,int)",
            "org.apache.tools.ant.DemuxInputStream:int read()",
            "org.apache.tools.ant.DemuxInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.tools.ant.Task:int handleInput(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:int handleInput(byte[],int,int)",
            "org.apache.tools.ant.taskdefs.CallTarget:int handleInput(byte[],int,int)",
            "org.apache.tools.ant.taskdefs.SubAnt:int handleInput(byte[],int,int)",
            "org.apache.tools.ant.Project:int demuxInput(byte[],int,int)",
            "org.apache.tools.ant.UnknownElement:int handleInput(byte[],int,int)"
        ]
    },
    "org.apache.tools.tar.TarBuffer:void skipRecord()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.tar.TarBuffer:byte[] readRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.tar.TarInputStream:org.apache.tools.tar.TarEntry getNextEntry()",
            "org.apache.tools.tar.TarInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Sync$MyCopy:void scan(java.io.File,java.io.File,java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getFilesAndDirs(org.apache.tools.ant.types.FileList)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Tar:boolean archiveIsUpToDate(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Tar:boolean check(java.io.File,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:void scanDir(java.io.File,java.io.File,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void execute()"
        ]
    },
    "org.apache.tools.ant.types.Path:void addExisting(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Path getCompileClasspath()",
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Path getCompileClasspath()",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSpecialPath(java.lang.String,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.types.Path:void addJavaRuntime()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:void addExtdirsToClasspath(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void <init>(java.lang.ClassLoader,org.apache.tools.ant.Project,org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:org.apache.tools.ant.AntClassLoader createClassLoader(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.Project:org.apache.tools.ant.AntClassLoader createClassLoader(java.lang.ClassLoader,org.apache.tools.ant.types.Path)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void <init>(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:void <init>(java.lang.ClassLoader,org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,boolean)"
        ]
    },
    "org.apache.tools.ant.DirectoryScanner:void slowScan()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DirectoryScanner:java.lang.String[] getNotIncludedFiles()",
            "org.apache.tools.ant.DirectoryScanner:java.lang.String[] getExcludedFiles()",
            "org.apache.tools.ant.DirectoryScanner:java.lang.String[] getDeselectedFiles()",
            "org.apache.tools.ant.DirectoryScanner:java.lang.String[] getNotIncludedDirectories()",
            "org.apache.tools.ant.DirectoryScanner:java.lang.String[] getExcludedDirectories()",
            "org.apache.tools.ant.DirectoryScanner:java.lang.String[] getDeselectedDirectories()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Untar$UntarCompressionMethod:java.io.InputStream decompress(java.lang.String,java.io.InputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.InputStream wrapStream(java.io.InputStream)",
            "org.apache.tools.ant.util.ConcatFileInputStream:int readCurrent()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:int readCurrent()",
            "org.apache.tools.bzip2.CBZip2InputStream:void init()",
            "org.apache.tools.bzip2.CBZip2InputStream:int bsR(int)",
            "org.apache.tools.bzip2.CBZip2InputStream:boolean bsGetBit()",
            "org.apache.tools.bzip2.CBZip2InputStream:void getAndMoveToFrontDecode()",
            "org.apache.tools.bzip2.CBZip2InputStream:int getAndMoveToFrontDecode0(int)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:int handleInput(byte[],int,int)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Zip:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)",
            "org.apache.tools.ant.types.resources.CompressedResource:long getSize()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.UUEncoder:void encode(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class getClassFromStream(java.io.InputStream,java.lang.String,java.io.File)",
            "org.apache.tools.ant.Project:int defaultInput(byte[],int,int)",
            "org.apache.tools.tar.TarBuffer:boolean readBlock()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Rename:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copyfile:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute:java.lang.String[] getEnvironment()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AbstractCvsTask:java.lang.String executeToString(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Execute:int execute()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:boolean hasSelectors()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:boolean hasSelectors()"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:int selectorCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:int selectorCount()"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:java.util.Iterator getSelectors()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:java.util.Iterator getSelectors()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.util.List getResourceCollections()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:org.apache.tools.ant.types.ResourceCollection getResourceCollection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.DataType:java.lang.Object getCheckedRef(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.AbstractFileSet getRef(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:java.lang.Object getCheckedRef()",
            "org.apache.tools.ant.types.FileList:org.apache.tools.ant.types.FileList getRef(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:org.apache.tools.ant.types.PatternSet getRef(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.RegularExpression:org.apache.tools.ant.types.RegularExpression getRef(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.Substitution:org.apache.tools.ant.types.Substitution getRef(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.DataType:java.lang.Object getCheckedRef(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Resources:org.apache.tools.ant.types.ResourceCollection getRef()",
            "org.apache.tools.ant.types.selectors.SelectSelector:org.apache.tools.ant.types.selectors.SelectSelector getRef()",
            "org.apache.tools.ant.types.FilterSet:org.apache.tools.ant.types.FilterSet getRef()",
            "org.apache.tools.ant.types.PropertySet:org.apache.tools.ant.types.PropertySet getRef()",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.XMLCatalog getRef()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:java.io.File getDir(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Chmod:void checkConfiguration()",
            "org.apache.tools.ant.taskdefs.Chmod:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch()",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.types.AbstractFileSet:java.io.File getDir()",
            "org.apache.tools.ant.types.AbstractFileSet:java.io.File getDir(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DirSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.FileSet:java.util.Iterator iterator()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:boolean getDefaultexcludes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean getDefaultexcludes()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:boolean isCaseSensitive()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean isCaseSensitive()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:boolean isFollowSymlinks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean isFollowSymlinks()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner)",
            "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:boolean hasSelectors()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.MatchingTask:boolean hasSelectors()",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasSelectors()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:int selectorCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MatchingTask:int selectorCount()",
            "org.apache.tools.ant.types.AbstractFileSet:int selectorCount()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.selectors.FileSelector[] getSelectors(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MatchingTask:org.apache.tools.ant.types.selectors.FileSelector[] getSelectors(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.selectors.FileSelector[] getSelectors(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:java.util.Enumeration selectorElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MatchingTask:java.util.Enumeration selectorElements()",
            "org.apache.tools.ant.types.AbstractFileSet:java.util.Enumeration selectorElements()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.PatternSet mergePatterns(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.String[] mergeIncludes(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.String[] mergeExcludes(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.PatternSet mergePatterns(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:java.io.File getSrc(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.io.File getSrc(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String getPrefix(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabResources(org.apache.tools.ant.types.FileSet[])",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String getPrefix(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String getFullpath(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabResources(org.apache.tools.ant.types.FileSet[])",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String getFullpath(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:int getFileMode(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar$TarFileSet:int getMode()",
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.ArchiveFileSet:int getFileMode(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:boolean hasFileModeBeenSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.ArchiveFileSet:boolean hasFileModeBeenSet()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:int getDirMode(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.ArchiveFileSet:int getDirMode(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:boolean hasDirModeBeenSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.ArchiveFileSet:boolean hasDirModeBeenSet()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.TarFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.ZipFileSet:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.TarFileSet:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.FileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.TarFileSet:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.ZipFileSet:java.lang.String getEncoding()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.ZipFileSet:java.lang.String getEncoding()"
        ]
    },
    "org.apache.tools.ant.types.ZipFileSet:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.FileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.ZipFileSet:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.selectors.DateSelector:long getMillis()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.selectors.DateSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.DepthSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.FilenameSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.SizeSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.TypeSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.ExtendSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.DirectoryScanner:boolean isSelected(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecTask:org.apache.tools.ant.taskdefs.Execute prepareExec()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Chmod:void execute()",
            "org.apache.tools.ant.taskdefs.ExecTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:void setupRedirector()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:int executeJava()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void writeChangeLog(org.apache.tools.ant.taskdefs.cvslib.CVSEntry[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:org.apache.tools.ant.AntTypeDefinition getDefinition(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.TypeFound:boolean doesTypeExist(java.lang.String)",
            "org.apache.tools.ant.taskdefs.PreSetDef:void execute()",
            "org.apache.tools.ant.types.resources.selectors.InstanceOf:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.ComponentHelper:java.lang.Object createComponent(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper:java.lang.Class getComponentClass(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper:java.lang.String diagnoseCreationFailure(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest getManifest(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest getManifest(java.io.File)",
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest getManifestFromJar(java.io.File)",
            "org.apache.tools.ant.taskdefs.Jar:void filesetManifest(java.io.File,java.io.InputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest:org.apache.tools.ant.taskdefs.Manifest getDefaultManifest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest createManifest()",
            "org.apache.tools.ant.taskdefs.ManifestTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ManifestTask:void addConfiguredAttribute(org.apache.tools.ant.taskdefs.Manifest$Attribute)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Jar:void addConfiguredManifest(org.apache.tools.ant.taskdefs.Manifest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Jar:void filesetManifest(java.io.File,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.ProcessDestroyer:void removeShutdownHook()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ProcessDestroyer:boolean remove(java.lang.Process)"
        ]
    },
    "org.apache.tools.ant.taskdefs.PumpStreamHandler:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:int execute()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()"
        ]
    },
    "org.apache.tools.ant.util.Watchdog:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.ExecuteWatchdog:void start(java.lang.Process)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ear:void cleanUp()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.taskdefs.War:void cleanUp()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void buildFinished(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void targetFinished(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void taskFinished(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)"
        ]
    },
    "org.apache.tools.ant.taskdefs.AbstractCvsTask:void runCommand(org.apache.tools.ant.types.Commandline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AbstractCvsTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:void setupEnvironment(org.apache.tools.ant.taskdefs.Execute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:void setupExecutable(org.apache.tools.ant.taskdefs.Execute,java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.Filter:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:void <init>(org.apache.tools.ant.types.FilterSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.FilterSet:boolean hasFilters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.FilterSetCollection:boolean hasFilters()"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.FilterSet:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:java.lang.String[] mergeIncludes(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.resources.Files:void ensureDirectoryScannerSetup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Files:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Files:int size()"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:boolean hasPatterns(org.apache.tools.ant.types.PatternSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Files:void setRefid(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:java.lang.String[] mergeIncludes(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.PatternSet:void addConfiguredPatternset(org.apache.tools.ant.types.PatternSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)"
        ]
    },
    "org.apache.tools.ant.types.PatternSet:void append(org.apache.tools.ant.types.PatternSet,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Files:org.apache.tools.ant.types.PatternSet mergePatterns(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.PatternSet mergePatterns(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:java.lang.String[] mergeExcludes(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.AbstractFileSet:java.lang.String[] mergeExcludes(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.XMLCatalog$InternalResolver:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog$InternalResolver:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:void addCurrentCompilerArgs(org.apache.tools.ant.types.Commandline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)",
            "org.apache.tools.ant.taskdefs.compilers.Gcj:org.apache.tools.ant.types.Commandline setupGCJCommand()",
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jvc:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Kjc:org.apache.tools.ant.types.Commandline setupKjcCommand()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.Gcj:boolean isNativeBuild()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.Gcj:org.apache.tools.ant.types.Commandline setupGCJCommand()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecuteWatchdog:void start(java.lang.Process)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:int execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:boolean similarDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:boolean similarDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper:void updateDataTypeDefinition(org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:void updateDataTypeDefinition(org.apache.tools.ant.AntTypeDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:void addTaskDefinition(java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.ComponentHelper:void addDataTypeDefinition(java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.ComponentHelper:void addDataTypeDefinition(org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Available:boolean checkResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Available:boolean eval()"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.io.InputStream loadBaseResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream getResourceAsStream(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.ProjectHelper:org.apache.tools.ant.ProjectHelper getProjectHelper()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Description:void addText(java.lang.String)",
            "org.apache.tools.ant.ProjectHelper:void configureProject(org.apache.tools.ant.Project,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource access$200(org.apache.tools.ant.types.XMLCatalog,org.apache.tools.ant.types.ResourceLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$InternalResolver:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$InternalResolver:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.util.ScriptRunnerCreator:org.apache.tools.ant.util.ScriptRunnerBase createRunner(java.lang.String,java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ScriptRunnerHelper:org.apache.tools.ant.util.ScriptRunnerBase getRunner()"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void addPathElement(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Classloader:void execute()",
            "org.apache.tools.ant.AntClassLoader:void setClassPath(org.apache.tools.ant.types.Path)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.lang.Class forceLoadClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.HasMethod:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ClasspathUtils$Delegate:java.lang.ClassLoader getClassLoader()",
            "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void <init>(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.AntVersion:org.apache.tools.ant.util.DeweyDecimal getVersion()",
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)"
        ]
    },
    "org.apache.tools.ant.Main:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void executeTargets(java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)"
        ]
    },
    "org.apache.tools.ant.helper.DefaultExecutor:void executeTargets(org.apache.tools.ant.Project,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void executeTargets(java.util.Vector)"
        ]
    },
    "org.apache.tools.ant.Target:boolean dependsOn(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void execute()"
        ]
    },
    "org.apache.tools.ant.Task:void maybeConfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Task:void perform()",
            "org.apache.tools.ant.UnknownElement:void configure(java.lang.Object)"
        ]
    },
    "org.apache.tools.mail.MailMessage:java.io.PrintStream getPrintStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.MailLogger:void sendMail(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copy:void add(org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.ExecuteOn:void add(org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Expand:void add(org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.PathConvert:void add(org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.UpToDate:void add(org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void add(org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.Mapper:void addConfigured(org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.Mapper:void addConfiguredMapper(org.apache.tools.ant.types.Mapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.PropertySet:void add(org.apache.tools.ant.util.FileNameMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.EchoXML:void execute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void setLiaisonDynamicFileParameters(org.apache.tools.ant.taskdefs.XSLTLiaison,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.io.File,org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ear:void zipFile(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.War:void zipFile(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ant:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.taskdefs.Ant:void reinit()",
            "org.apache.tools.ant.taskdefs.CallTarget:void init()",
            "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.taskdefs.Ant createAntTask(java.io.File)",
            "org.apache.tools.ant.taskdefs.Sync:void configureTask(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.ComponentHelper:java.lang.Object createComponent(org.apache.tools.ant.UnknownElement,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.UnknownElement:java.lang.Object makeObject(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.Task makeTask(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl:void access$700(org.apache.tools.ant.helper.ProjectHelperImpl,org.xml.sax.DocumentHandler,org.apache.tools.ant.Target,java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:void addText(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ProjectHelper:void addText(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:void throwNotSupported(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$NestedCreator getNestedCreator(org.apache.tools.ant.Project,java.lang.String,java.lang.Object,java.lang.String,org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:java.lang.String getElementName(org.apache.tools.ant.Project,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.IntrospectionHelper:void setAttribute(org.apache.tools.ant.Project,java.lang.Object,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.DataType:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.selectors.Compare:org.apache.tools.ant.BuildException oneControl()",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:org.apache.tools.ant.BuildException oneNested()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.DependSelector:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.PresentSelector:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.Project:void log(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.helper.ProjectHelper2$RootHandler:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.helper.ProjectHelper2$TargetHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.helper.ProjectHelper2:void parse(org.apache.tools.ant.Project,java.lang.Object,org.apache.tools.ant.helper.ProjectHelper2$RootHandler)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.helper.ProjectHelperImpl:void parse(org.apache.tools.ant.Project,java.lang.Object)",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void writeChangeLog(org.apache.tools.ant.taskdefs.cvslib.CVSEntry[])",
            "org.apache.tools.ant.taskdefs.Classloader:void execute()",
            "org.apache.tools.ant.taskdefs.ExecTask:void checkConfiguration()",
            "org.apache.tools.ant.taskdefs.Execute$CommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[])",
            "org.apache.tools.ant.taskdefs.Execute$Java13CommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()",
            "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.ImportTask:void execute()",
            "org.apache.tools.ant.taskdefs.Java:int executeJava()",
            "org.apache.tools.ant.taskdefs.Javadoc$TagArgument:void setScope(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Recorder:void execute()",
            "org.apache.tools.ant.taskdefs.WhichResource:void execute()",
            "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)",
            "org.apache.tools.ant.types.Path:java.lang.String[] translatePath(org.apache.tools.ant.Project,java.lang.String)",
            "org.apache.tools.ant.util.ProxySetup:void enableProxies()",
            "org.apache.tools.ant.AntClassLoader:void log(java.lang.String,int)",
            "org.apache.tools.ant.AntTypeDefinition:java.lang.Class getTypeClass(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper:void checkTaskClass(java.lang.Class)",
            "org.apache.tools.ant.ComponentHelper:void addDataTypeDefinition(java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.ComponentHelper:org.apache.tools.ant.Task createNewTask(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper:void updateDataTypeDefinition(org.apache.tools.ant.AntTypeDefinition)",
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void printTargets(org.apache.tools.ant.Project,java.util.Vector,java.util.Vector,java.lang.String,int)",
            "org.apache.tools.ant.Project:void log(java.lang.String)",
            "org.apache.tools.ant.Project:void setBaseDir(java.io.File)",
            "org.apache.tools.ant.Project:void setJavaVersionProperty()",
            "org.apache.tools.ant.Project:void checkTaskClass(java.lang.Class)",
            "org.apache.tools.ant.Project:void addOrReplaceTarget(java.lang.String,org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:org.apache.tools.ant.Executor getExecutor()",
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Project:void setFileLastModified(java.io.File,long)",
            "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String[],java.util.Hashtable,boolean)",
            "org.apache.tools.ant.Project:java.lang.Object resolveIdReference(java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Project:void addReference(java.lang.String,java.lang.Object)",
            "org.apache.tools.ant.Project:java.lang.Object getReference(java.lang.String)",
            "org.apache.tools.ant.ProjectComponent:void log(java.lang.String,int)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)",
            "org.apache.tools.ant.PropertyHelper:void setNewProperty(java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:void setUserProperty(java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:void setInheritedProperty(java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tools.ant.TaskAdapter:void checkTaskClass(java.lang.Class,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Ant:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.DemuxOutputStream:void processFlush(java.io.ByteArrayOutputStream)"
        ]
    },
    "org.apache.tools.ant.Project:void log(org.apache.tools.ant.Target,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void executeSortedTargets(java.util.Vector)",
            "org.apache.tools.ant.Target:void execute()"
        ]
    },
    "org.apache.tools.ant.Task:void log(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.AptExternalCompilerAdapter:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory:org.apache.tools.ant.taskdefs.compilers.CompilerAdapter getCompiler(java.lang.String,org.apache.tools.ant.Task)",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupModernJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:void logAndAddFilesToCompile(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.compilers.Gcj:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Javac12:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Javac13:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.JavacExternal:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jvc:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Kjc:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Sj:boolean execute()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()",
            "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:org.apache.tools.ant.taskdefs.cvslib.CvsTagEntry[] parseRDiff(java.io.File)",
            "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:void writeTagDiff(org.apache.tools.ant.taskdefs.cvslib.CvsTagEntry[])",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter$RmicFileNameMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Commandline setupRmicCommand(java.lang.String[])",
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:void logAndAddFilesToCompile(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.rmic.KaffeRmic:boolean execute()",
            "org.apache.tools.ant.taskdefs.rmic.SunRmic:boolean execute()",
            "org.apache.tools.ant.taskdefs.rmic.WLRmic:boolean execute()",
            "org.apache.tools.ant.taskdefs.AbstractCvsTask:void runCommand(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void addReferences()",
            "org.apache.tools.ant.taskdefs.Ant:void copyReference(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Apt:void setCompiler(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Apt:void setFork(boolean)",
            "org.apache.tools.ant.taskdefs.Available:void setType(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Available:void execute()",
            "org.apache.tools.ant.taskdefs.Available:boolean eval()",
            "org.apache.tools.ant.taskdefs.Available:boolean checkFile()",
            "org.apache.tools.ant.taskdefs.Available:boolean checkFile(java.io.File,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Available:boolean checkClass(java.lang.String)",
            "org.apache.tools.ant.taskdefs.BuildNumber:void execute()",
            "org.apache.tools.ant.taskdefs.BuildNumber:java.util.Properties loadProperties()",
            "org.apache.tools.ant.taskdefs.CVSPass:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:void addToIncludeFileMap(java.io.File)",
            "org.apache.tools.ant.taskdefs.Checksum:boolean generateChecksums()",
            "org.apache.tools.ant.taskdefs.Classloader:void execute()",
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:java.io.Reader getReader()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.CopyPath:void execute()",
            "org.apache.tools.ant.taskdefs.Copydir:void execute()",
            "org.apache.tools.ant.taskdefs.Copyfile:void execute()",
            "org.apache.tools.ant.taskdefs.DefBase:void setReverseLoader(boolean)",
            "org.apache.tools.ant.taskdefs.DefaultExcludes:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:java.net.URL fileToURL()",
            "org.apache.tools.ant.taskdefs.Definer:java.util.Enumeration resourceToURLs(java.lang.ClassLoader)",
            "org.apache.tools.ant.taskdefs.Definer:void loadProperties(java.lang.ClassLoader,java.net.URL)",
            "org.apache.tools.ant.taskdefs.Definer:void addDefinition(java.lang.ClassLoader,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.Delete:boolean delete(java.io.File)",
            "org.apache.tools.ant.taskdefs.Delete:void removeDir(java.io.File)",
            "org.apache.tools.ant.taskdefs.Delete:void removeFiles(java.io.File,java.lang.String[],java.lang.String[])",
            "org.apache.tools.ant.taskdefs.DependSet:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.taskdefs.Ear:void zipFile(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)",
            "org.apache.tools.ant.taskdefs.Echo:void execute()",
            "org.apache.tools.ant.taskdefs.Exec:int run(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Exec:void outputLog(java.lang.String,int)",
            "org.apache.tools.ant.taskdefs.ExecTask:void setCommand(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.ExecTask:boolean isValidOs()",
            "org.apache.tools.ant.taskdefs.ExecTask:org.apache.tools.ant.taskdefs.Execute prepareExec()",
            "org.apache.tools.ant.taskdefs.ExecTask:void runExecute(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.ExecTask:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Execute:void runCommand(org.apache.tools.ant.Task,java.lang.String[])",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runParallel(org.apache.tools.ant.taskdefs.Execute,java.util.Vector,java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Exit:void execute()",
            "org.apache.tools.ant.taskdefs.Expand:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Filter:void readFilters()",
            "org.apache.tools.ant.taskdefs.FixCRLF:void setCr(org.apache.tools.ant.taskdefs.FixCRLF$AddAsisRemove)",
            "org.apache.tools.ant.taskdefs.FixCRLF:void execute()",
            "org.apache.tools.ant.taskdefs.FixCRLF:void processFile(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Get:boolean doGet(int,org.apache.tools.ant.taskdefs.Get$DownloadProgress)",
            "org.apache.tools.ant.taskdefs.JDBCTask:boolean isValidRdbms(java.sql.Connection)",
            "org.apache.tools.ant.taskdefs.JDBCTask:java.sql.Connection getConnection()",
            "org.apache.tools.ant.taskdefs.JDBCTask:java.sql.Driver getDriver()",
            "org.apache.tools.ant.taskdefs.Jar:void setWhenempty(org.apache.tools.ant.taskdefs.Zip$WhenEmpty)",
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest getManifest(java.io.Reader)",
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest createManifest()",
            "org.apache.tools.ant.taskdefs.Jar:void writeManifest(org.apache.tools.zip.ZipOutputStream,org.apache.tools.ant.taskdefs.Manifest)",
            "org.apache.tools.ant.taskdefs.Jar:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)",
            "org.apache.tools.ant.taskdefs.Jar:void filesetManifest(java.io.File,java.io.InputStream)",
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Jar:boolean createEmptyZip(java.io.File)",
            "org.apache.tools.ant.taskdefs.Java:void execute()",
            "org.apache.tools.ant.taskdefs.Java:int executeJava()",
            "org.apache.tools.ant.taskdefs.Java:void setArgs(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Java:void setJvmargs(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Java:void setupEnvironment(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Java:void log(java.lang.Throwable)",
            "org.apache.tools.ant.taskdefs.Javac:java.lang.String getCompiler()",
            "org.apache.tools.ant.taskdefs.Javac:void compile()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addArgIfNotEmpty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.JikesOutputParser:void log(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Length$AllHandler:void handle(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.LogOutputStream:void processLine(java.lang.String,int)",
            "org.apache.tools.ant.taskdefs.MacroDef:void execute()",
            "org.apache.tools.ant.taskdefs.MakeUrl:java.lang.String filesetsToURL()",
            "org.apache.tools.ant.taskdefs.MakeUrl:java.lang.String pathsToURL()",
            "org.apache.tools.ant.taskdefs.MakeUrl:void execute()",
            "org.apache.tools.ant.taskdefs.ManifestTask:void execute()",
            "org.apache.tools.ant.taskdefs.MatchingTask:void XsetItems(java.lang.String)",
            "org.apache.tools.ant.taskdefs.MatchingTask:void XsetIgnore(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Mkdir:void execute()",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Move:void moveFile(java.io.File,java.io.File,boolean,boolean)",
            "org.apache.tools.ant.taskdefs.Move:void copyFile(java.io.File,java.io.File,boolean,boolean)",
            "org.apache.tools.ant.taskdefs.Move:void deleteDir(java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Nice:void execute()",
            "org.apache.tools.ant.taskdefs.Patch:void execute()",
            "org.apache.tools.ant.taskdefs.PathConvert:void execute()",
            "org.apache.tools.ant.taskdefs.PreSetDef:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void setUserProperty(boolean)",
            "org.apache.tools.ant.taskdefs.Property:void loadUrl(java.net.URL)",
            "org.apache.tools.ant.taskdefs.Property:void loadFile(java.io.File)",
            "org.apache.tools.ant.taskdefs.Property:void loadResource(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Property:void loadEnvironment(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Property:void addProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Redirector:void createStreams()",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.Redirector:java.io.OutputStream foldFiles(java.io.File[],java.lang.String,int)",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void logFilterChain(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Rmic:void execute()",
            "org.apache.tools.ant.taskdefs.Rmic:void scanDir(java.io.File,java.lang.String[],org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.Rmic:boolean isValidRmiRemote(java.lang.String)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec:void execSQL(java.lang.String,java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.SQLExec:void printResults(java.sql.ResultSet,java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.SignJar:boolean isSigned(java.io.File)",
            "org.apache.tools.ant.taskdefs.Sleep:void execute()",
            "org.apache.tools.ant.taskdefs.SubAnt:void execute()",
            "org.apache.tools.ant.taskdefs.SubAnt:void execute(java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Sync:void execute()",
            "org.apache.tools.ant.taskdefs.Sync:void logRemovedCount(int,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Sync:int[] removeOrphanFiles(java.util.Set,java.io.File)",
            "org.apache.tools.ant.taskdefs.Sync:int removeEmptyDirectories(java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Tar:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.TaskOutputStream:void processLine()",
            "org.apache.tools.ant.taskdefs.Touch:void setDatetime(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Touch:void checkConfiguration()",
            "org.apache.tools.ant.taskdefs.Touch:void touch(java.io.File,long)",
            "org.apache.tools.ant.taskdefs.Untar:void expandStream(java.lang.String,java.io.InputStream,java.io.File)",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.UpToDate:void execute()",
            "org.apache.tools.ant.taskdefs.VerifyJar:void verifyOneJar(java.io.File)",
            "org.apache.tools.ant.taskdefs.War:void zipFile(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)",
            "org.apache.tools.ant.taskdefs.WhichResource:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void configureLiaison(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addProperty(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()",
            "org.apache.tools.ant.taskdefs.Zip:boolean createEmptyZip(java.io.File)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Zip:void zipDir(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int,org.apache.tools.zip.ZipExtraField[])",
            "org.apache.tools.ant.taskdefs.Zip:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[] selectFileResources(org.apache.tools.ant.types.Resource[])",
            "org.apache.tools.ant.util.ConcatFileInputStream:void log(java.lang.String,int)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void log(java.lang.String,int)",
            "org.apache.tools.ant.util.LeadPipeInputStream:void log(java.lang.String,int)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.RetryHandler:void execute(org.apache.tools.ant.util.Retryable,java.lang.String)",
            "org.apache.tools.ant.util.TaskLogger:void info(java.lang.String)",
            "org.apache.tools.ant.util.TaskLogger:void error(java.lang.String)",
            "org.apache.tools.ant.util.TaskLogger:void warning(java.lang.String)",
            "org.apache.tools.ant.util.TaskLogger:void verbose(java.lang.String)",
            "org.apache.tools.ant.util.TaskLogger:void debug(java.lang.String)",
            "org.apache.tools.ant.ProjectComponent:void log(java.lang.String)",
            "org.apache.tools.ant.Task:void handleOutput(java.lang.String)",
            "org.apache.tools.ant.Task:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.Task:void log(java.lang.String)",
            "org.apache.tools.ant.TaskAdapter:void execute()"
        ]
    },
    "org.apache.tools.ant.Task:void log(java.lang.String,java.lang.Throwable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Task:void log(java.lang.Throwable,int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.PreSetDef:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.Project$AntRefTable:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ReplaceTokens:int read()",
            "org.apache.tools.ant.helper.AntXMLContext:void startPrefixMapping(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.helper.AntXMLContext:void endPrefixMapping(java.lang.String)",
            "org.apache.tools.ant.helper.AntXMLContext:java.lang.String getPrefixMapping(java.lang.String)",
            "org.apache.tools.ant.helper.ProjectHelper2$TargetHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.helper.ProjectHelperImpl:void handleElement(org.apache.tools.ant.helper.ProjectHelperImpl,org.xml.sax.DocumentHandler,org.apache.tools.ant.Target,java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.listener.MailLogger:java.lang.String getValue(java.util.Hashtable,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.condition.IsReference:boolean eval()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:void saveEntry()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.AntStructure:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:java.io.File getChecksumFile(java.io.File)",
            "org.apache.tools.ant.taskdefs.Checksum:boolean generateChecksums()",
            "org.apache.tools.ant.taskdefs.Copy:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Copy:void add(java.io.File,java.lang.String[],java.util.Map)",
            "org.apache.tools.ant.taskdefs.Copydir:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:void execute()",
            "org.apache.tools.ant.taskdefs.JDBCTask:java.sql.Driver getDriver()",
            "org.apache.tools.ant.taskdefs.KeySubst:java.lang.String replace(java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredElement(org.apache.tools.ant.taskdefs.MacroDef$TemplateElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:java.lang.String macroSubs(java.lang.String,java.util.Map)",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.Manifest$Section:org.apache.tools.ant.taskdefs.Manifest$Attribute getAttribute(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String addAttributeAndCheck(org.apache.tools.ant.taskdefs.Manifest$Attribute)",
            "org.apache.tools.ant.taskdefs.Manifest:void merge(org.apache.tools.ant.taskdefs.Manifest,boolean)",
            "org.apache.tools.ant.taskdefs.Manifest:org.apache.tools.ant.taskdefs.Manifest$Section getSection(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Recorder:org.apache.tools.ant.taskdefs.RecorderEntry getRecorder(java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.Tstamp$Unit:int getCalendarField()",
            "org.apache.tools.ant.taskdefs.WaitFor$Unit:long getMultiplier()",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addProperty(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Zip:void zipDir(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int,org.apache.tools.zip.ZipExtraField[])",
            "org.apache.tools.ant.taskdefs.Zip:void addParentDirs(java.io.File,java.lang.String,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)",
            "org.apache.tools.ant.types.FilterSet:java.lang.String iReplaceTokens(java.lang.String)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:void addPropertyNames(java.util.Set,java.util.Hashtable)",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.CollectionUtils:void putAll(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)",
            "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream getResourceStream(java.io.File,java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.net.URL getResourceURL(java.io.File,java.lang.String)",
            "org.apache.tools.ant.DirectoryScanner:java.lang.String[] list(java.io.File)",
            "org.apache.tools.ant.IntrospectionHelper:void <init>(java.lang.Class)",
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper getHelper(org.apache.tools.ant.Project,java.lang.Class)",
            "org.apache.tools.ant.IntrospectionHelper:void setAttribute(org.apache.tools.ant.Project,java.lang.Object,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$NestedCreator getNestedCreator(org.apache.tools.ant.Project,java.lang.String,java.lang.Object,java.lang.String,org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.IntrospectionHelper:void storeElement(org.apache.tools.ant.Project,java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:java.lang.Class getElementType(java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:java.lang.Class getAttributeType(java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:java.lang.reflect.Method getElementMethod(java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:java.lang.reflect.Method getAttributeMethod(java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$AttributeSetter createAttributeSetter(java.lang.reflect.Method,java.lang.Class,java.lang.String)",
            "org.apache.tools.ant.Project:void addTarget(java.lang.String,org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String[],java.util.Hashtable,boolean)",
            "org.apache.tools.ant.Project:void tsort(java.lang.String,java.util.Hashtable,java.util.Hashtable,java.util.Stack,java.util.Vector)",
            "org.apache.tools.ant.Project:java.lang.Object getReference(java.lang.String)",
            "org.apache.tools.ant.Project:org.apache.tools.ant.Task getThreadTask(java.lang.Thread)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)",
            "org.apache.tools.ant.PropertyHelper:void setNewProperty(java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getUserProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.RuntimeConfigurable:void maybeConfigure(org.apache.tools.ant.Project,boolean)",
            "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.Target:boolean dependsOn(java.lang.String)",
            "org.apache.tools.ant.XmlLogger:java.util.Stack getStack()",
            "org.apache.tools.ant.XmlLogger:void targetFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.XmlLogger:void taskFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.XmlLogger:org.apache.tools.ant.XmlLogger$TimedElement getTaskElement(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.XmlLogger:void messageLogged(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.zip.ExtraFieldUtils:org.apache.tools.zip.ZipExtraField createExtraField(org.apache.tools.zip.ZipShort)",
            "org.apache.tools.zip.ZipFile:org.apache.tools.zip.ZipEntry getEntry(java.lang.String)",
            "org.apache.tools.zip.ZipFile:java.io.InputStream getInputStream(org.apache.tools.zip.ZipEntry)",
            "org.apache.tools.zip.ZipFile:void resolveLocalFileHeaderData()",
            "org.apache.tools.zip.ZipOutputStream:void writeCentralFileHeader(org.apache.tools.zip.ZipEntry)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ant:void copyReference(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void addReferences()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ImportTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Input$Handler:org.apache.tools.ant.input.InputHandler getInputHandler()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Input$Handler:org.apache.tools.ant.input.InputHandler access$100(org.apache.tools.ant.taskdefs.Input$Handler)"
        ]
    },
    "org.apache.tools.ant.types.Reference:java.lang.Object getReferencedObject(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Classloader:void setClasspathRef(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.taskdefs.PathConvert:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.types.AntFilterReader:void setRefid(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.types.ArchiveFileSet:void checkArchiveAttributesAllowed()",
            "org.apache.tools.ant.types.Assertions:org.apache.tools.ant.types.Assertions getFinalReference()",
            "org.apache.tools.ant.types.DataType:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DataType:java.lang.Object getCheckedRef(java.lang.Class,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.FilterChain:void setRefid(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.types.Reference:java.lang.Object getReferencedObject()",
            "org.apache.tools.ant.types.TarFileSet:org.apache.tools.ant.types.AbstractFileSet getRef(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.TarFileSet:void checkTarFileSetAttributesAllowed()",
            "org.apache.tools.ant.types.ZipFileSet:org.apache.tools.ant.types.AbstractFileSet getRef(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ZipFileSet:void checkZipFileSetAttributesAllowed()"
        ]
    },
    "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Reference,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:org.apache.tools.ant.ComponentHelper getComponentHelper(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ConditionBase:java.lang.Object createDynamicElement(java.lang.String)",
            "org.apache.tools.ant.taskdefs.condition.TypeFound:boolean doesTypeExist(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Antlib:org.apache.tools.ant.taskdefs.Antlib createAntlib(org.apache.tools.ant.Project,java.net.URL,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Definer:void addDefinition(java.lang.ClassLoader,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.MacroDef:void execute()",
            "org.apache.tools.ant.taskdefs.PreSetDef:void execute()",
            "org.apache.tools.ant.types.resources.selectors.InstanceOf:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(org.apache.tools.ant.Project,java.lang.Object,boolean)",
            "org.apache.tools.ant.IntrospectionHelper$Creator:java.lang.Object create()",
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$NestedCreator createAddTypeCreator(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)",
            "org.apache.tools.ant.Project:void initSubProject(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Project:void init()",
            "org.apache.tools.ant.Project:void addTaskDefinition(java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.Project:void checkTaskClass(java.lang.Class)",
            "org.apache.tools.ant.Project:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.Project:void addDataTypeDefinition(java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.Project:java.util.Hashtable getDataTypeDefinitions()",
            "org.apache.tools.ant.Project:org.apache.tools.ant.Task createTask(java.lang.String)",
            "org.apache.tools.ant.Project:java.lang.Object createDataType(java.lang.String)",
            "org.apache.tools.ant.Project:java.lang.String getElementName(java.lang.Object)",
            "org.apache.tools.ant.UnknownElement:void setNamespace(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:java.lang.Object makeObject(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.BuildException getNotFoundException(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.PropertyHelper:org.apache.tools.ant.PropertyHelper getPropertyHelper(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Property:void resolve(java.util.Properties,java.lang.String,java.util.Stack)",
            "org.apache.tools.ant.Project:void setProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.Project:void setNewProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.Project:void setUserProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.Project:void setInheritedProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.Project:void setPropertyInternal(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.Project:java.lang.String getProperty(java.lang.String)",
            "org.apache.tools.ant.Project:java.lang.String replaceProperties(java.lang.String)",
            "org.apache.tools.ant.Project:java.lang.String getUserProperty(java.lang.String)",
            "org.apache.tools.ant.Project:java.util.Hashtable getProperties()",
            "org.apache.tools.ant.Project:java.util.Hashtable getUserProperties()",
            "org.apache.tools.ant.Project:void copyUserProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Project:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Project:java.lang.Object getReference(java.lang.String)",
            "org.apache.tools.ant.ProjectHelper:java.lang.String replaceProperties(org.apache.tools.ant.Project,java.lang.String,java.util.Hashtable)"
        ]
    },
    "org.apache.tools.ant.ProjectHelper:void configureProject(org.apache.tools.ant.Project,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)"
        ]
    },
    "org.apache.tools.ant.taskdefs.rmic.ForkingSunRmic:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Rmic:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.rmic.KaffeRmic:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Rmic:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.rmic.SunRmic:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Rmic:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.AntTypeDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:void updateDataTypeDefinition(org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelper2$RootHandler:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.condition.AntVersion:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Exec:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute:java.lang.Process launch(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:int execute()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:void setJavac(org.apache.tools.ant.taskdefs.Javac)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:boolean assumeJava11()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:java.lang.String getNoDebugArgument()",
            "org.apache.tools.ant.taskdefs.compilers.JavacExternal:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:boolean assumeJava12()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)",
            "org.apache.tools.ant.taskdefs.compilers.JavacExternal:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:boolean assumeJava13()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupModernJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline)"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:boolean assumeJava14()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupModernJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline)"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:boolean assumeJava15()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupModernJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline)"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:boolean assumeJava16()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupModernJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:java.lang.String getCompiler()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Apt:java.lang.String getCompiler()",
            "org.apache.tools.ant.taskdefs.Javac:boolean isForkedJavac()",
            "org.apache.tools.ant.taskdefs.Javac:java.lang.String[] getCurrentCompilerArgs()",
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.types.resources.PropertyResource:boolean isExists()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Length:void handleResources(org.apache.tools.ant.taskdefs.Length$Handler)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.comparators.Exists:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Exists:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.JavaResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.PropertyResource:long getSize()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isExists()",
            "org.apache.tools.ant.types.selectors.SelectorUtils:boolean isOutOfDate(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:boolean isExists()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:boolean contentEquals(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)",
            "org.apache.tools.ant.util.ResourceUtils:int compareContent(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,boolean)"
        ]
    },
    "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSystemClasspath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Path getCompileClasspath()",
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Path getCompileClasspath()",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.WhichResource:void execute()",
            "org.apache.tools.ant.types.CommandlineJava:void addCommandsToList(java.util.ListIterator)",
            "org.apache.tools.ant.types.CommandlineJava:boolean haveClasspath()",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSystemClasspath()",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource classpathLookup(org.apache.tools.ant.types.ResourceLocation)",
            "org.apache.tools.ant.AntClassLoader:void setClassPath(org.apache.tools.ant.types.Path)"
        ]
    },
    "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSystemBootClasspath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Path getBootClassPath()",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.types.CommandlineJava:org.apache.tools.ant.types.Path calculateBootclasspath(boolean)"
        ]
    },
    "org.apache.tools.ant.types.PatternSet$NameEntry:java.lang.String evalName(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] makeArray(java.util.Vector,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:void readFiles(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.RegularExpression:void init(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.RegularExpression:java.lang.String getPattern(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.RegularExpression:org.apache.tools.ant.util.regexp.Regexp getRegexp(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.regexp.RegexpFactory:org.apache.tools.ant.util.regexp.Regexp newRegexp()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.regexp.RegexpMatcherFactory:org.apache.tools.ant.util.regexp.RegexpMatcher newRegexpMatcher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PropertySet:void addPropertyNames(java.util.Set,java.util.Hashtable)",
            "org.apache.tools.ant.util.RegexpPatternMapper:void <init>()"
        ]
    },
    "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Reference,boolean)",
            "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.util.ClasspathUtils:boolean access$000(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ClasspathUtils$Delegate:java.lang.ClassLoader getClassLoader()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:java.lang.Class loadClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XSLTProcess:void resolveProcessor(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.Project:java.lang.String getDescription()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$DescriptionHandler:void characters(char[],int,int)",
            "org.apache.tools.ant.types.Description:void addText(java.lang.String)",
            "org.apache.tools.ant.Main:void printDescription(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.XMLFragment$Child:void addText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.RuntimeConfigurable:void reconfigure(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Task:void reconfigure()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.Javac13:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.Sj:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:void run(java.lang.String,java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.ExecTask:org.apache.tools.ant.taskdefs.ExecuteStreamHandler createHandler()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:org.apache.tools.ant.taskdefs.Execute prepareExec()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:org.apache.tools.ant.taskdefs.ExecuteStreamHandler createHandler()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:int fork(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:int executeJava()"
        ]
    },
    "org.apache.tools.ant.UnknownElement:int handleInput(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:int demuxInput(byte[],int,int)",
            "org.apache.tools.ant.UnknownElement:int handleInput(byte[],int,int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ant:int handleInput(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.CallTarget:int handleInput(byte[],int,int)",
            "org.apache.tools.ant.taskdefs.SubAnt:int handleInput(byte[],int,int)",
            "org.apache.tools.ant.Project:int demuxInput(byte[],int,int)",
            "org.apache.tools.ant.UnknownElement:int handleInput(byte[],int,int)"
        ]
    },
    "org.apache.tools.ant.DemuxInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Untar$UntarCompressionMethod:java.io.InputStream decompress(java.lang.String,java.io.InputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.InputStream wrapStream(java.io.InputStream)",
            "org.apache.tools.ant.util.ConcatFileInputStream:int readCurrent()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:int readCurrent()",
            "org.apache.tools.bzip2.CBZip2InputStream:void init()",
            "org.apache.tools.bzip2.CBZip2InputStream:int bsR(int)",
            "org.apache.tools.bzip2.CBZip2InputStream:boolean bsGetBit()",
            "org.apache.tools.bzip2.CBZip2InputStream:void getAndMoveToFrontDecode()",
            "org.apache.tools.bzip2.CBZip2InputStream:int getAndMoveToFrontDecode0(int)"
        ]
    },
    "org.apache.tools.ant.DemuxInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:int handleInput(byte[],int,int)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Zip:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)",
            "org.apache.tools.ant.types.resources.CompressedResource:long getSize()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.UUEncoder:void encode(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class getClassFromStream(java.io.InputStream,java.lang.String,java.io.File)",
            "org.apache.tools.ant.Project:int defaultInput(byte[],int,int)",
            "org.apache.tools.tar.TarBuffer:boolean readBlock()"
        ]
    },
    "org.apache.tools.ant.taskdefs.CallTarget:int handleInput(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:int demuxInput(byte[],int,int)",
            "org.apache.tools.ant.UnknownElement:int handleInput(byte[],int,int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SubAnt:int handleInput(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:int demuxInput(byte[],int,int)",
            "org.apache.tools.ant.UnknownElement:int handleInput(byte[],int,int)"
        ]
    },
    "org.apache.tools.tar.TarInputStream:org.apache.tools.tar.TarEntry getNextEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Untar:void expandStream(java.lang.String,java.io.InputStream,java.io.File)",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.tar.TarInputStream:org.apache.tools.tar.TarEntry getNextEntry()"
        ]
    },
    "org.apache.tools.tar.TarInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:int handleInput(byte[],int,int)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Zip:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)",
            "org.apache.tools.ant.types.resources.CompressedResource:long getSize()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.UUEncoder:void encode(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class getClassFromStream(java.io.InputStream,java.lang.String,java.io.File)",
            "org.apache.tools.ant.Project:int defaultInput(byte[],int,int)",
            "org.apache.tools.tar.TarBuffer:boolean readBlock()",
            "org.apache.tools.tar.TarInputStream:long skip(long)",
            "org.apache.tools.tar.TarInputStream:int read()",
            "org.apache.tools.tar.TarInputStream:void copyEntryContents(java.io.OutputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Path getCompileClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)",
            "org.apache.tools.ant.taskdefs.compilers.Gcj:org.apache.tools.ant.types.Commandline setupGCJCommand()",
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jvc:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Kjc:org.apache.tools.ant.types.Commandline setupKjcCommand()"
        ]
    },
    "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Path getCompileClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Path getClasspath()",
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Commandline setupRmicCommand(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.types.Path:void addJavaRuntime()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Path getCompileClasspath()",
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Path getCompileClasspath()"
        ]
    },
    "org.apache.tools.ant.Project:org.apache.tools.ant.AntClassLoader createClassLoader(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.util.ChainReaderHelper:java.io.Reader getAssembledReader()",
            "org.apache.tools.ant.taskdefs.condition.HasMethod:java.lang.Class loadClass(java.lang.String)",
            "org.apache.tools.ant.taskdefs.rmic.WLRmic:boolean execute()",
            "org.apache.tools.ant.taskdefs.Available:boolean eval()",
            "org.apache.tools.ant.taskdefs.Available:boolean checkClass(java.lang.String)",
            "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.JDBCTask:java.sql.Driver getDriver()",
            "org.apache.tools.ant.taskdefs.Property:void loadResource(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Rmic:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:java.lang.Class loadClass(java.lang.String)",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:java.lang.ClassLoader getClassLoader()",
            "org.apache.tools.ant.types.selectors.ExtendSelector:void selectorCreate()",
            "org.apache.tools.ant.types.Mapper:java.lang.Class getImplementationClass()",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.XMLCatalog$CatalogResolver getCatalogResolver()",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource classpathLookup(org.apache.tools.ant.types.ResourceLocation)",
            "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getUniqueClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,boolean)"
        ]
    },
    "org.apache.tools.ant.Project:org.apache.tools.ant.AntClassLoader createClassLoader(java.lang.ClassLoader,org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.DirectoryScanner:java.lang.String[] getNotIncludedFiles()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.DirectoryScanner:java.lang.String[] getExcludedFiles()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.DirectoryScanner:java.lang.String[] getDeselectedFiles()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.DirectoryScanner:java.lang.String[] getNotIncludedDirectories()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.DirectoryScanner:java.lang.String[] getExcludedDirectories()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.DirectoryScanner:java.lang.String[] getDeselectedDirectories()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.AbstractCvsTask:java.lang.String executeToString(org.apache.tools.ant.taskdefs.Execute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AbstractCvsTask:void runCommand(org.apache.tools.ant.types.Commandline)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute:int execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:int executeExternalCompile(java.lang.String[],int,boolean)",
            "org.apache.tools.ant.taskdefs.rmic.ForkingSunRmic:boolean execute()",
            "org.apache.tools.ant.taskdefs.AbstractCvsTask:void runCommand(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.ExecTask:void runExecute(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Execute:java.util.Vector getProcEnvironment()",
            "org.apache.tools.ant.taskdefs.Execute:void runCommand(org.apache.tools.ant.Task,java.lang.String[])",
            "org.apache.tools.ant.taskdefs.ExecuteJava:int fork(org.apache.tools.ant.ProjectComponent)",
            "org.apache.tools.ant.taskdefs.Java:int fork(java.lang.String[])",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.Jikes:void compile(java.lang.String[])",
            "org.apache.tools.ant.taskdefs.Patch:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute:void spawn()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:void runExecute(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Java:void spawn(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.AbstractFileSet getRef(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BCFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.BCFileSet:int size()",
            "org.apache.tools.ant.types.AbstractFileSet:java.io.File getDir(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean getDefaultexcludes()",
            "org.apache.tools.ant.types.AbstractFileSet:boolean isCaseSensitive()",
            "org.apache.tools.ant.types.AbstractFileSet:boolean isFollowSymlinks()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasSelectors()",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasPatterns()",
            "org.apache.tools.ant.types.AbstractFileSet:int selectorCount()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.selectors.FileSelector[] getSelectors(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.AbstractFileSet:java.util.Enumeration selectorElements()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.PatternSet mergePatterns(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.DirSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.DirSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.DirSet:int size()",
            "org.apache.tools.ant.types.FileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.FileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.FileSet:int size()"
        ]
    },
    "org.apache.tools.ant.types.DataType:java.lang.Object getCheckedRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:boolean hasSelectors()",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:int selectorCount()",
            "org.apache.tools.ant.types.resources.selectors.ResourceSelectorContainer:java.util.Iterator getSelectors()",
            "org.apache.tools.ant.types.resources.ArchiveResource:org.apache.tools.ant.types.Resource getArchive()",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.ArchiveResource:long getSize()",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.ArchiveResource:int getMode()",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:int size()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:int size()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.CompressedResource:org.apache.tools.ant.types.Resource getResource()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.File getFile()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.File getBaseDir()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.FileResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.FileResource:long getSize()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.FileResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.FileResource:void touch(long)",
            "org.apache.tools.ant.types.resources.Files:org.apache.tools.ant.types.resources.Files getRef()",
            "org.apache.tools.ant.types.resources.JavaResource:org.apache.tools.ant.types.Path getClasspath()",
            "org.apache.tools.ant.types.resources.JavaResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.JavaResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.PropertyResource:long getSize()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict:int size()",
            "org.apache.tools.ant.types.resources.Restrict:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:long getSize()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String getContent()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.lang.String getUserName()",
            "org.apache.tools.ant.types.resources.TarResource:java.lang.String getGroup()",
            "org.apache.tools.ant.types.resources.TarResource:int getUid()",
            "org.apache.tools.ant.types.resources.TarResource:int getGid()",
            "org.apache.tools.ant.types.resources.URLResource:java.net.URL getURL()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.URLResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.URLResource:long getSize()",
            "org.apache.tools.ant.types.resources.URLResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.Union:java.lang.String[] list()",
            "org.apache.tools.ant.types.resources.Union:org.apache.tools.ant.types.Resource[] listResources()",
            "org.apache.tools.ant.types.resources.ZipResource:java.lang.String getEncoding()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.selectors.BaseSelector:void verifySettings()",
            "org.apache.tools.ant.types.Mapper:org.apache.tools.ant.types.Mapper getRef()",
            "org.apache.tools.ant.types.Path:java.lang.String[] list()",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.RedirectorElement:org.apache.tools.ant.types.RedirectorElement getRef()",
            "org.apache.tools.ant.types.Resource:java.lang.String getName()",
            "org.apache.tools.ant.types.Resource:boolean isExists()",
            "org.apache.tools.ant.types.Resource:long getLastModified()",
            "org.apache.tools.ant.types.Resource:boolean isDirectory()",
            "org.apache.tools.ant.types.Resource:long getSize()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:int hashCode()",
            "org.apache.tools.ant.types.Resource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.Resource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.Resource:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Resource:int size()",
            "org.apache.tools.ant.types.Resource:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:java.lang.String toLongString()",
            "org.apache.tools.ant.types.TarFileSet:java.lang.String getUserName()",
            "org.apache.tools.ant.types.TarFileSet:int getUid()",
            "org.apache.tools.ant.types.TarFileSet:java.lang.String getGroup()",
            "org.apache.tools.ant.types.TarFileSet:int getGid()"
        ]
    },
    "org.apache.tools.ant.types.FileList:org.apache.tools.ant.types.FileList getRef(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.FileList:java.io.File getDir(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.FileList:java.lang.String[] getFiles(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.FileList:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.FileList:int size()"
        ]
    },
    "org.apache.tools.ant.types.PatternSet:org.apache.tools.ant.types.PatternSet getRef(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] getIncludePatterns(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] getExcludePatterns(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:boolean hasPatterns(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.RegularExpression:org.apache.tools.ant.types.RegularExpression getRef(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.RegularExpression:java.lang.String getPattern(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.RegularExpression:org.apache.tools.ant.util.regexp.Regexp getRegexp(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.Substitution:org.apache.tools.ant.types.Substitution getRef(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Substitution:java.lang.String getExpression(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Resources:org.apache.tools.ant.types.ResourceCollection getRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()"
        ]
    },
    "org.apache.tools.ant.types.selectors.SelectSelector:org.apache.tools.ant.types.selectors.SelectSelector getRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean hasSelectors()",
            "org.apache.tools.ant.types.selectors.SelectSelector:int selectorCount()",
            "org.apache.tools.ant.types.selectors.SelectSelector:org.apache.tools.ant.types.selectors.FileSelector[] getSelectors(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.selectors.SelectSelector:java.util.Enumeration selectorElements()"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:org.apache.tools.ant.types.FilterSet getRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.FilterSet:java.util.Vector getFilters()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String getBeginToken()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String getEndToken()",
            "org.apache.tools.ant.types.FilterSet:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.PropertySet:org.apache.tools.ant.types.PropertySet getRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PropertySet:boolean getDynamic()",
            "org.apache.tools.ant.types.PropertySet:org.apache.tools.ant.types.Mapper getMapper()",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:int size()",
            "org.apache.tools.ant.types.PropertySet:boolean isFilesystemOnly()"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.XMLCatalog getRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:java.util.Vector getElements()",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.Path getClasspath()",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.Path getCatalogPath()",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Chmod:void checkConfiguration()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:void execute()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:java.io.File getDir()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet$HideMissingBasedir:boolean basedirExists()",
            "org.apache.tools.ant.types.resources.BCFileSet:java.util.Iterator iterator()"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:void setupDirectoryScanner(org.apache.tools.ant.FileScanner)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.MatchingTask:boolean hasSelectors()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.MatchingTask:int selectorCount()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.MatchingTask:org.apache.tools.ant.types.selectors.FileSelector[] getSelectors(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.MatchingTask:java.util.Enumeration selectorElements()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar$TarFileSet:int getMode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.TypeFound:boolean doesTypeExist(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.TypeFound:boolean eval()"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.InstanceOf:boolean isSelected(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.And:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Majority:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.None:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Not:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Or:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:java.lang.Object createComponent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ConditionBase:java.lang.Object createDynamicElement(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper:java.lang.Object createComponent(org.apache.tools.ant.UnknownElement,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.ComponentHelper:org.apache.tools.ant.Task createNewTask(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper:java.lang.Object createDataType(java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper$Creator:java.lang.Object create()",
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$NestedCreator createAddTypeCreator(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:java.lang.Class getComponentClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:org.apache.tools.ant.Task createNewTask(java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$NestedCreator createAddTypeCreator(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:java.lang.String diagnoseCreationFailure(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.TypeFound:boolean doesTypeExist(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.BuildException getNotFoundException(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest getManifest(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest createManifest()",
            "org.apache.tools.ant.taskdefs.Jar:void filesetManifest(java.io.File,java.io.InputStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.ProcessDestroyer:boolean remove(java.lang.Process)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:int execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.AbstractCvsTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()",
            "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:void execute()",
            "org.apache.tools.ant.taskdefs.cvslib.CvsVersion:void execute()",
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:void setupExecutable(org.apache.tools.ant.taskdefs.Execute,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:int fork(java.lang.String[])",
            "org.apache.tools.ant.taskdefs.Java:void spawn(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:void setRefid(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:org.apache.tools.ant.types.PatternSet mergePatterns(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Files:java.lang.String[] mergeIncludes(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Files:java.lang.String[] mergeExcludes(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Files:org.apache.tools.ant.types.PatternSet mergePatterns(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.resources.Files:void ensureDirectoryScannerSetup()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:void addTaskDefinition(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:org.apache.tools.ant.Task createTask(java.lang.String)",
            "org.apache.tools.ant.Project:void addTaskDefinition(java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:void addDataTypeDefinition(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void addDataTypeDefinition(java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:void addDataTypeDefinition(org.apache.tools.ant.AntTypeDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Definer:void addDefinition(java.lang.ClassLoader,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.MacroDef:void execute()",
            "org.apache.tools.ant.taskdefs.PreSetDef:void execute()"
        ]
    },
    "org.apache.tools.ant.types.Description:void addText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.ScriptRunnerHelper:org.apache.tools.ant.util.ScriptRunnerBase getRunner()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ScriptRunnerHelper:org.apache.tools.ant.util.ScriptRunnerBase getScriptRunner()"
        ]
    },
    "org.apache.tools.ant.util.ClasspathUtils$Delegate:java.lang.ClassLoader getClassLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DefBase:java.lang.ClassLoader createLoader()",
            "org.apache.tools.ant.util.ClasspathUtils$Delegate:java.lang.Object newInstance()",
            "org.apache.tools.ant.util.ScriptRunnerHelper:java.lang.ClassLoader generateClassLoader()"
        ]
    },
    "org.apache.tools.ant.listener.MailLogger:void sendMail(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler:void init(java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.helper.ProjectHelperImpl:void handleElement(org.apache.tools.ant.helper.ProjectHelperImpl,org.xml.sax.DocumentHandler,org.apache.tools.ant.Target,java.lang.String,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ant:void reinit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:org.apache.tools.ant.Project getNewProject()"
        ]
    },
    "org.apache.tools.ant.taskdefs.CallTarget:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.taskdefs.CallTarget:void execute()",
            "org.apache.tools.ant.taskdefs.CallTarget:org.apache.tools.ant.taskdefs.Property createParam()",
            "org.apache.tools.ant.taskdefs.CallTarget:void addReference(org.apache.tools.ant.taskdefs.Ant$Reference)",
            "org.apache.tools.ant.taskdefs.CallTarget:void addPropertyset(org.apache.tools.ant.types.PropertySet)",
            "org.apache.tools.ant.taskdefs.CallTarget:void setTarget(java.lang.String)",
            "org.apache.tools.ant.taskdefs.CallTarget:void addConfiguredTarget(org.apache.tools.ant.taskdefs.Ant$TargetElement)",
            "org.apache.tools.ant.taskdefs.Sync:void configureTask(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.ComponentHelper:java.lang.Object createComponent(org.apache.tools.ant.UnknownElement,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.UnknownElement:java.lang.Object makeObject(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.Task makeTask(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Sync:void configureTask(org.apache.tools.ant.Task)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Sync:void init()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:java.lang.Object createComponent(org.apache.tools.ant.UnknownElement,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:java.lang.Object makeObject(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.Task makeTask(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.ProjectHelper:void addText(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ProjectHelper:void addText(org.apache.tools.ant.Project,java.lang.Object,char[],int,int)",
            "org.apache.tools.ant.RuntimeConfigurable:void maybeConfigure(org.apache.tools.ant.Project,boolean)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$NestedCreator getNestedCreator(org.apache.tools.ant.Project,java.lang.String,java.lang.Object,java.lang.String,org.apache.tools.ant.UnknownElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.IntrospectionHelper:java.lang.Object createElement(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$Creator getElementCreator(org.apache.tools.ant.Project,java.lang.String,java.lang.Object,java.lang.String,org.apache.tools.ant.UnknownElement)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:void setAttribute(org.apache.tools.ant.Project,java.lang.Object,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void tryToSetAParameter(java.lang.Object,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.ProjectHelper:void configure(java.lang.Object,org.xml.sax.AttributeList,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.RuntimeConfigurable:void maybeConfigure(org.apache.tools.ant.Project,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.Compare:org.apache.tools.ant.BuildException oneControl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.selectors.Compare:org.apache.tools.ant.types.ResourceCollection createControl()",
            "org.apache.tools.ant.types.resources.selectors.Compare:boolean isSelected(org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:org.apache.tools.ant.BuildException oneNested()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:void add(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:org.apache.tools.ant.types.ResourceCollection getResourceCollection()"
        ]
    },
    "org.apache.tools.ant.types.selectors.DependSelector:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.selectors.PresentSelector:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.dispatch.DispatchUtils:void execute(java.lang.Object)",
            "org.apache.tools.ant.input.PropertyFileInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Javadoc$GroupArgument:java.lang.String getPackages()",
            "org.apache.tools.ant.taskdefs.Property:void execute()",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Resources:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Restrict:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String toString()",
            "org.apache.tools.ant.types.PropertySet:java.lang.String toString()",
            "org.apache.tools.ant.types.Resource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.Diagnostics:void doReportProxy(java.io.PrintStream)",
            "org.apache.tools.ant.Location:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelper2$RootHandler:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.helper.ProjectHelper2$TargetHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$RootHandler:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelper2:void parse(org.apache.tools.ant.Project,java.lang.Object,org.apache.tools.ant.helper.ProjectHelper2$RootHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2:org.apache.tools.ant.UnknownElement parseUnknownElement(org.apache.tools.ant.Project,java.net.URL)",
            "org.apache.tools.ant.helper.ProjectHelper2:void parse(org.apache.tools.ant.Project,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$RootHandler:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl:void parse(org.apache.tools.ant.Project,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ImportTask:void execute()",
            "org.apache.tools.ant.ProjectHelper:void configureProject(org.apache.tools.ant.Project,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecTask:void checkConfiguration()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void checkConfiguration()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute$CommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute$CommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute$CommandLauncherProxy:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[])",
            "org.apache.tools.ant.taskdefs.Execute$VmsCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute$Java13CommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute$VmsCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute:java.lang.Process launch(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc$TagArgument:void setScope(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Recorder:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.types.Path:java.lang.String[] translatePath(org.apache.tools.ant.Project,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Path$PathElement:void setPath(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:void log(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class forceLoadClass(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class forceLoadSystemClass(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream getResourceAsStream(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream getResourceStream(java.io.File,java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.net.URL getResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class loadClass(java.lang.String,boolean)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClass(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.AntTypeDefinition:java.lang.Class getTypeClass(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:java.lang.Class getTypeClass(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.AntTypeDefinition:java.lang.Class getExposedClass(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.AntTypeDefinition:java.lang.Object icreate(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.AntTypeDefinition:void checkClass(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.AntTypeDefinition:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:java.lang.Class getTypeClass(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper:boolean validDefinition(org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:void checkTaskClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:void addTaskDefinition(java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.Project:void checkTaskClass(java.lang.Class)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:org.apache.tools.ant.Task createNewTask(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:org.apache.tools.ant.Task createTask(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.Main:void printTargets(org.apache.tools.ant.Project,java.util.Vector,java.util.Vector,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Main:void printTargets(org.apache.tools.ant.Project,boolean)"
        ]
    },
    "org.apache.tools.ant.Project:void log(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ProxySetup:void enableProxies()",
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void printDescription(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Main:void printTargets(org.apache.tools.ant.Project,boolean)"
        ]
    },
    "org.apache.tools.ant.Project:void setBaseDir(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.Project:void setBasedir(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.Project:void setJavaVersionProperty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void init()",
            "org.apache.tools.ant.Project:void initProperties()"
        ]
    },
    "org.apache.tools.ant.Project:void checkTaskClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void addOrReplaceTarget(java.lang.String,org.apache.tools.ant.Target)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$TargetHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.Project:void addTarget(java.lang.String,org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:void addOrReplaceTarget(org.apache.tools.ant.Target)"
        ]
    },
    "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void handleOutput(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Ant:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.DemuxOutputStream:void processBuffer(java.io.ByteArrayOutputStream)"
        ]
    },
    "org.apache.tools.ant.Project:void setFileLastModified(java.io.File,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void addReference(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.helper.ProjectHelper2$TargetHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.helper.ProjectHelper2:void parse(org.apache.tools.ant.Project,java.lang.Object)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.helper.ProjectHelperImpl:void configureId(java.lang.Object,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.taskdefs.Ant:void copyReference(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Classloader:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.Object processNode(org.w3c.dom.Node,java.lang.String,java.lang.Object)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addProperty(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,java.lang.String,boolean,boolean)",
            "org.apache.tools.ant.ComponentHelper:org.apache.tools.ant.ComponentHelper getComponentHelper(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Project:void setExecutor(org.apache.tools.ant.Executor)",
            "org.apache.tools.ant.ProjectHelper:void configureProject(org.apache.tools.ant.Project,java.io.File)",
            "org.apache.tools.ant.PropertyHelper:org.apache.tools.ant.PropertyHelper getPropertyHelper(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.RuntimeConfigurable:void maybeConfigure(org.apache.tools.ant.Project,boolean)"
        ]
    },
    "org.apache.tools.ant.ProjectComponent:void log(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ConditionBase:java.lang.Object createDynamicElement(java.lang.String)",
            "org.apache.tools.ant.taskdefs.condition.Http:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.IsReachable:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.IsSigned:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.ParserSupports:boolean evalFeature()",
            "org.apache.tools.ant.taskdefs.condition.ParserSupports:boolean evalProperty()",
            "org.apache.tools.ant.taskdefs.condition.Socket:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.TypeFound:boolean doesTypeExist(java.lang.String)",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.LogOutputStream:void processLine(java.lang.String,int)",
            "org.apache.tools.ant.taskdefs.Redirector:void createStreams()",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.Redirector:java.io.OutputStream foldFiles(java.io.File[],java.lang.String,int)",
            "org.apache.tools.ant.taskdefs.WaitFor:void processSuccess()",
            "org.apache.tools.ant.taskdefs.WaitFor:void processTimeout()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.URLResource:void connect()",
            "org.apache.tools.ant.types.resources.ZipResource:void fetchEntry()",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.DataType:java.lang.Object getCheckedRef(java.lang.Class,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.FilterSet:void readFiltersFromFile(java.io.File)",
            "org.apache.tools.ant.types.FilterSet:java.lang.String iReplaceTokens(java.lang.String)",
            "org.apache.tools.ant.types.FilterSet:void handleMissingFile(java.lang.String)",
            "org.apache.tools.ant.types.Path:void addExisting(org.apache.tools.ant.types.Path,boolean)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSpecialPath(java.lang.String,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:void <init>(org.apache.tools.ant.types.XMLCatalog,java.lang.Class,java.lang.Object)",
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:void processExternalCatalogs()",
            "org.apache.tools.ant.types.XMLCatalog$InternalResolver:void <init>(org.apache.tools.ant.types.XMLCatalog)",
            "org.apache.tools.ant.types.XMLCatalog$InternalResolver:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$InternalResolver:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.XMLCatalog$CatalogResolver getCatalogResolver()",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource filesystemLookup(org.apache.tools.ant.types.ResourceLocation)",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource classpathLookup(org.apache.tools.ant.types.ResourceLocation)",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource urlLookup(org.apache.tools.ant.types.ResourceLocation)",
            "org.apache.tools.ant.util.ConcatFileInputStream:void log(java.lang.String,int)",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void log(java.lang.String,int)",
            "org.apache.tools.ant.util.LeadPipeInputStream:void log(java.lang.String,int)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.ProjectComponent:void log(java.lang.String)",
            "org.apache.tools.ant.Task:void log(java.lang.String,int)",
            "org.apache.tools.ant.Task:void log(java.lang.String,java.lang.Throwable,int)"
        ]
    },
    "org.apache.tools.ant.PropertyHelper:boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void setProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.Project:void setPropertyInternal(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.PropertyHelper:void setNewProperty(java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void setNewProperty(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.PropertyHelper:void setUserProperty(java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void setUserProperty(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.PropertyHelper:void setInheritedProperty(java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void setInheritedProperty(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.TaskAdapter:void checkTaskClass(java.lang.Class,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:void checkTaskClass(java.lang.Class)",
            "org.apache.tools.ant.Project:void checkTaskClass(java.lang.Class)",
            "org.apache.tools.ant.TaskAdapter:void checkProxyClass(java.lang.Class)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ant:void handleFlush(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.CallTarget:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.taskdefs.SubAnt:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)",
            "org.apache.tools.ant.UnknownElement:void handleFlush(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ant:void handleErrorFlush(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.CallTarget:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.taskdefs.SubAnt:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.DemuxOutputStream:void processFlush(java.io.ByteArrayOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DemuxOutputStream:void flush()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory:org.apache.tools.ant.taskdefs.compilers.CompilerAdapter getCompiler(java.lang.String,org.apache.tools.ant.Task)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:void logAndAddFilesToCompile(org.apache.tools.ant.types.Commandline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.AptExternalCompilerAdapter:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupModernJavacCommand()",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommand(boolean)",
            "org.apache.tools.ant.taskdefs.compilers.Gcj:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.JavacExternal:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jvc:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Kjc:org.apache.tools.ant.types.Commandline setupKjcCommand()"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:org.apache.tools.ant.taskdefs.cvslib.CvsTagEntry[] parseRDiff(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.CvsTagDiff:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter$RmicFileNameMapper:java.lang.String[] mapFileName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void buildMap(java.io.File,java.io.File,java.lang.String[],org.apache.tools.ant.util.FileNameMapper,java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Copy:java.util.Map buildMap(org.apache.tools.ant.types.Resource[],java.io.File,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.CopyPath:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getCommandline(java.lang.String[],java.io.File[])",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.PathConvert:void execute()",
            "org.apache.tools.ant.taskdefs.Rmic:void moveGeneratedFile(java.io.File,java.io.File,java.lang.String,org.apache.tools.ant.taskdefs.rmic.RmicAdapter)",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.MappingSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.PresentSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.RedirectorElement:void configure(org.apache.tools.ant.taskdefs.Redirector,java.lang.String)",
            "org.apache.tools.ant.util.ChainedMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.CompositeMapper:java.lang.String[] mapFileName(java.lang.String)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:void logAndAddFilesToCompile(org.apache.tools.ant.types.Commandline)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Commandline setupRmicCommand(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.Apt:void setCompiler(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Apt:void setFork(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Apt:void <init>()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Available:void setType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Available:boolean checkFile(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Available:boolean checkFile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.BuildNumber:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.BuildNumber:java.util.Properties loadProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BuildNumber:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.CVSPass:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Checksum:void addToIncludeFileMap(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.DefBase:void setReverseLoader(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.DefaultExcludes:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Definer:java.net.URL fileToURL()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Definer:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Definer:void addDefinition(java.lang.ClassLoader,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Definer:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:void loadProperties(java.lang.ClassLoader,java.net.URL)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Delete:boolean delete(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.Delete:void removeDir(java.io.File)",
            "org.apache.tools.ant.taskdefs.Delete:void removeFiles(java.io.File,java.lang.String[],java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.Delete:void removeDir(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.Delete:void removeDir(java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Delete:void removeFiles(java.io.File,java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Echo:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Exec:void outputLog(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Exec$StreamPumper:void pumpStream()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecTask:void setCommand(org.apache.tools.ant.types.Commandline)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.ExecTask:boolean isValidOs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Chmod:boolean isValidOs()",
            "org.apache.tools.ant.taskdefs.ExecTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecTask:void runExecute(org.apache.tools.ant.taskdefs.Execute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Chmod:void execute()",
            "org.apache.tools.ant.taskdefs.ExecTask:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runParallel(org.apache.tools.ant.taskdefs.Execute,java.util.Vector,java.util.Vector)"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecTask:void runExec(org.apache.tools.ant.taskdefs.Execute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute:void runCommand(org.apache.tools.ant.Task,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.FixCRLF:void setCr(org.apache.tools.ant.taskdefs.FixCRLF$AddAsisRemove)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Get:boolean doGet(int,org.apache.tools.ant.taskdefs.Get$DownloadProgress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Get:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.JDBCTask:boolean isValidRdbms(java.sql.Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.JDBCTask:java.sql.Connection getConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.JDBCTask:java.sql.Driver getDriver()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.JDBCTask:java.sql.Connection getConnection()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:void setWhenempty(org.apache.tools.ant.taskdefs.Zip$WhenEmpty)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Java:void setArgs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Java:void setJvmargs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Java:void log(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:int executeJava()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc:void addArgIfNotEmpty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc:void setWindowtitle(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Javadoc:void setCharset(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.JikesOutputParser:void log(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.JikesOutputParser:void parseStandardOutput(java.io.BufferedReader)"
        ]
    },
    "org.apache.tools.ant.taskdefs.LogOutputStream:void processLine(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc$JavadocOutputStream:void processLine(java.lang.String,int)",
            "org.apache.tools.ant.taskdefs.Javadoc$JavadocOutputStream:void logFlush()",
            "org.apache.tools.ant.taskdefs.LogOutputStream:void processLine(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Antlib:void execute()",
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MatchingTask:void XsetItems(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.MatchingTask:void XsetIgnore(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Mkdir:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Move:void deleteDir(java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Move:void deleteDir(java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Nice:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Patch:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Property:void setUserProperty(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Redirector:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:void runExecute(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.ExecuteJava:int fork(org.apache.tools.ant.ProjectComponent)",
            "org.apache.tools.ant.taskdefs.Java:void run(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.taskdefs.Java:int fork(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.Redirector:java.io.OutputStream foldFiles(java.io.File[],java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Redirector:void createStreams()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Replace:void logFilterChain(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Replace:void processFile(java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Rmic:boolean isValidRmiRemote(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter$RmicFileNameMapper:java.lang.String[] mapFileName(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SQLExec:void execSQL(java.lang.String,java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SQLExec:void runStatements(java.io.Reader,java.io.PrintStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SQLExec:void printResults(java.sql.ResultSet,java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SQLExec:void execSQL(java.lang.String,java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.SQLExec:void printResults(java.io.PrintStream)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Sleep:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Sync:void logRemovedCount(int,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Sync:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Sync:int removeEmptyDirectories(java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Sync:void execute()",
            "org.apache.tools.ant.taskdefs.Sync:int removeEmptyDirectories(java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.TaskOutputStream:void processLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.TaskOutputStream:void write(int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Touch:void setDatetime(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Touch:void touch(java.io.File,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Touch:void touch(java.io.File)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:boolean createEmptyZip(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:void zipDir(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int,org.apache.tools.zip.ZipExtraField[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void writeManifest(org.apache.tools.zip.ZipOutputStream,org.apache.tools.ant.taskdefs.Manifest)",
            "org.apache.tools.ant.taskdefs.Zip:void zipDir(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)"
        ]
    },
    "org.apache.tools.ant.util.ConcatFileInputStream:void log(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ConcatFileInputStream:void openFile(int)"
        ]
    },
    "org.apache.tools.ant.util.ConcatResourceInputStream:void log(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()"
        ]
    },
    "org.apache.tools.ant.util.LeadPipeInputStream:void log(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.LeadPipeInputStream:int read()"
        ]
    },
    "org.apache.tools.ant.util.RetryHandler:void execute(org.apache.tools.ant.util.Retryable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.TaskLogger:void info(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.TaskLogger:void error(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.TaskLogger:void warning(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.TaskLogger:void verbose(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.TaskLogger:void debug(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.ProjectComponent:void log(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsReachable:boolean eval()",
            "org.apache.tools.ant.types.CommandlineJava:org.apache.tools.ant.types.Path calculateBootclasspath(boolean)"
        ]
    },
    "org.apache.tools.ant.Task:void handleOutput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void handleOutput(java.lang.String)",
            "org.apache.tools.ant.taskdefs.CallTarget:void handleOutput(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Java:void handleOutput(java.lang.String)",
            "org.apache.tools.ant.taskdefs.SubAnt:void handleOutput(java.lang.String)",
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Task:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleOutput(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.Task:void handleErrorOutput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.taskdefs.CallTarget:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Java:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Java:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.taskdefs.SubAnt:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Task:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleErrorFlush(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.Task:void log(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()",
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Commandline setupRmicCommand(java.lang.String[])",
            "org.apache.tools.ant.taskdefs.rmic.KaffeRmic:boolean execute()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Checksum:void addToIncludeFileMap(java.io.File)",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.CopyPath:void execute()",
            "org.apache.tools.ant.taskdefs.Copydir:void execute()",
            "org.apache.tools.ant.taskdefs.Copyfile:void execute()",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.Deltree:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void checkConfiguration()",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.GUnzip:void extract()",
            "org.apache.tools.ant.taskdefs.GenerateKey:void execute()",
            "org.apache.tools.ant.taskdefs.Get:void execute()",
            "org.apache.tools.ant.taskdefs.Input:void execute()",
            "org.apache.tools.ant.taskdefs.Jar:boolean createEmptyZip(java.io.File)",
            "org.apache.tools.ant.taskdefs.Java:int executeJava()",
            "org.apache.tools.ant.taskdefs.Javac:void compile()",
            "org.apache.tools.ant.taskdefs.KeySubst:void execute()",
            "org.apache.tools.ant.taskdefs.Mkdir:void execute()",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Pack:void execute()",
            "org.apache.tools.ant.taskdefs.PathConvert:void execute()",
            "org.apache.tools.ant.taskdefs.Rename:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.SignJar:void signOneJar(java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:void setLongfile(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Tstamp$CustomFormat:void setUnit(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrc(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Unpack:void setDest(java.lang.String)",
            "org.apache.tools.ant.taskdefs.VerifyJar:void verifyOneJar(java.io.File)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.Task:void log(java.lang.Throwable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete:void handle(java.lang.Exception)"
        ]
    },
    "org.apache.tools.ant.helper.AntXMLContext:void startPrefixMapping(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$RootHandler:void startPrefixMapping(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.helper.AntXMLContext:void endPrefixMapping(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$RootHandler:void endPrefixMapping(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.helper.AntXMLContext:java.lang.String getPrefixMapping(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$ElementHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)"
        ]
    },
    "org.apache.tools.ant.listener.MailLogger:java.lang.String getValue(java.util.Hashtable,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:void saveEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:void processComment(java.lang.String)",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:void processGetPreviousRevision(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Checksum:java.io.File getChecksumFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Checksum:void addToIncludeFileMap(java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copy:void add(java.io.File,java.lang.String[],java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void add(java.io.File,java.lang.String,java.util.Map)"
        ]
    },
    "org.apache.tools.ant.taskdefs.KeySubst:java.lang.String replace(java.lang.String,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.KeySubst:void execute()",
            "org.apache.tools.ant.taskdefs.KeySubst:void main(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredElement(org.apache.tools.ant.taskdefs.MacroDef$TemplateElement)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.MacroInstance:java.lang.String macroSubs(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest$Section:org.apache.tools.ant.taskdefs.Manifest$Attribute getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Jar:void createIndexList(org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String read(java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void merge(org.apache.tools.ant.taskdefs.Manifest$Section)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String getAttributeValue(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Manifest:org.apache.tools.ant.taskdefs.Manifest$Section getSection(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Manifest:void write(java.io.PrintWriter)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Recorder:org.apache.tools.ant.taskdefs.RecorderEntry getRecorder(java.lang.String,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Recorder:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tstamp$Unit:int getCalendarField()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tstamp$CustomFormat:void setUnit(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Tstamp$CustomFormat:void setUnit(org.apache.tools.ant.taskdefs.Tstamp$Unit)"
        ]
    },
    "org.apache.tools.ant.taskdefs.WaitFor$Unit:long getMultiplier()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.WaitFor:void setMaxWaitUnit(org.apache.tools.ant.taskdefs.WaitFor$Unit)",
            "org.apache.tools.ant.taskdefs.WaitFor:void setCheckEveryUnit(org.apache.tools.ant.taskdefs.WaitFor$Unit)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:void addParentDirs(java.io.File,java.lang.String,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.io.InputStream getResourceStream(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream loadResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.net.URL getResourceURL(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader$ResourceEnumeration:void findNextResource()",
            "org.apache.tools.ant.AntClassLoader:java.net.URL getResource(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.DirectoryScanner:java.lang.String[] list(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DirectoryScanner:java.io.File findFile(java.io.File,java.util.Vector,boolean)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper getHelper(org.apache.tools.ant.Project,java.lang.Class)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper getHelper(org.apache.tools.ant.Project,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void tryToSetAParameter(java.lang.Object,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper getHelper(java.lang.Class)",
            "org.apache.tools.ant.ProjectHelper:void configure(java.lang.Object,org.xml.sax.AttributeList,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ProjectHelper:void addText(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)",
            "org.apache.tools.ant.ProjectHelper:void storeChild(org.apache.tools.ant.Project,java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.tools.ant.RuntimeConfigurable:void maybeConfigure(org.apache.tools.ant.Project,boolean)",
            "org.apache.tools.ant.UnknownElement:void handleChildren(java.lang.Object,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:void storeElement(org.apache.tools.ant.Project,java.lang.Object,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ProjectHelper:void storeChild(org.apache.tools.ant.Project,java.lang.Object,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:java.lang.Class getElementType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:java.lang.Class getAttributeType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:java.lang.reflect.Method getElementMethod(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.IntrospectionHelper:java.lang.reflect.Method getAttributeMethod(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$AttributeSetter createAttributeSetter(java.lang.reflect.Method,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.IntrospectionHelper:void <init>(java.lang.Class)"
        ]
    },
    "org.apache.tools.ant.Project:void addTarget(java.lang.String,org.apache.tools.ant.Target)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.Project:void addTarget(org.apache.tools.ant.Target)"
        ]
    },
    "org.apache.tools.ant.Project:org.apache.tools.ant.Task getThreadTask(java.lang.Thread)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Project:int demuxInput(byte[],int,int)",
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.XmlLogger:java.util.Stack getStack()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.XmlLogger:void targetStarted(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.XmlLogger:void targetFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.XmlLogger:void taskStarted(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.XmlLogger:void taskFinished(org.apache.tools.ant.BuildEvent)"
        ]
    },
    "org.apache.tools.ant.XmlLogger:void targetFinished(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireTargetFinished(org.apache.tools.ant.Target,java.lang.Throwable)"
        ]
    },
    "org.apache.tools.ant.XmlLogger:void taskFinished(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireTaskFinished(org.apache.tools.ant.Task,java.lang.Throwable)"
        ]
    },
    "org.apache.tools.zip.ExtraFieldUtils:org.apache.tools.zip.ZipExtraField createExtraField(org.apache.tools.zip.ZipShort)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ExtraFieldUtils:org.apache.tools.zip.ZipExtraField[] parse(byte[])"
        ]
    },
    "org.apache.tools.zip.ZipFile:org.apache.tools.zip.ZipEntry getEntry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.IsSigned:boolean isSigned(java.io.File,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:void fetchEntry()"
        ]
    },
    "org.apache.tools.zip.ZipFile:java.io.InputStream getInputStream(org.apache.tools.zip.ZipEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Expand:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()"
        ]
    },
    "org.apache.tools.zip.ZipOutputStream:void writeCentralFileHeader(org.apache.tools.zip.ZipEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipOutputStream:void finish()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Input$Handler:org.apache.tools.ant.input.InputHandler access$100(org.apache.tools.ant.taskdefs.Input$Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Input:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Classloader:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.AntFilterReader:void setRefid(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:void checkArchiveAttributesAllowed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.ArchiveFileSet:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ArchiveFileSet:void setPrefix(java.lang.String)",
            "org.apache.tools.ant.types.ArchiveFileSet:void setFullpath(java.lang.String)",
            "org.apache.tools.ant.types.ArchiveFileSet:void setFileMode(java.lang.String)",
            "org.apache.tools.ant.types.ArchiveFileSet:void setDirMode(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.Assertions:org.apache.tools.ant.types.Assertions getFinalReference()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Assertions:int size()",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.List)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(org.apache.tools.ant.types.CommandlineJava)",
            "org.apache.tools.ant.types.Assertions:void applyAssertions(java.util.ListIterator)"
        ]
    },
    "org.apache.tools.ant.types.FilterChain:void setRefid(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.Reference:java.lang.Object getReferencedObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ResourceCount:void setRefid(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()"
        ]
    },
    "org.apache.tools.ant.types.TarFileSet:void checkTarFileSetAttributesAllowed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.TarFileSet:void setUserName(java.lang.String)",
            "org.apache.tools.ant.types.TarFileSet:void setUid(int)",
            "org.apache.tools.ant.types.TarFileSet:void setGroup(java.lang.String)",
            "org.apache.tools.ant.types.TarFileSet:void setGid(int)"
        ]
    },
    "org.apache.tools.ant.types.ZipFileSet:void checkZipFileSetAttributesAllowed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.ZipFileSet:void setEncoding(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.condition.ConditionBase:java.lang.Object createDynamicElement(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$NestedCreator getNestedCreator(org.apache.tools.ant.Project,java.lang.String,java.lang.Object,java.lang.String,org.apache.tools.ant.UnknownElement)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper$Creator:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:boolean handleChild(java.lang.String,org.apache.tools.ant.IntrospectionHelper,java.lang.Object,org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$NestedCreator createAddTypeCreator(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$NestedCreator getNestedCreator(org.apache.tools.ant.Project,java.lang.String,java.lang.Object,java.lang.String,org.apache.tools.ant.UnknownElement)"
        ]
    },
    "org.apache.tools.ant.Project:void addTaskDefinition(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void addDataTypeDefinition(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:org.apache.tools.ant.Task createTask(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.Task makeTask(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.Project:java.lang.Object createDataType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler:void init(java.lang.String,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:void setNamespace(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$ElementHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.taskdefs.MacroDef:org.apache.tools.ant.UnknownElement getNestedTask()",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.BuildException getNotFoundException(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:java.lang.Object makeObject(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.Project:void setProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Available:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addProperty(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.Project:void setNewProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.CvsVersion:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.Basename:void execute()",
            "org.apache.tools.ant.taskdefs.BuildNumber:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean generateChecksums()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Dirname:void execute()",
            "org.apache.tools.ant.taskdefs.ExecTask:void maybeSetResultPropertyValue(int)",
            "org.apache.tools.ant.taskdefs.Input:void execute()",
            "org.apache.tools.ant.taskdefs.Java:void maybeSetResultPropertyValue(int)",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.MakeUrl:void execute()",
            "org.apache.tools.ant.taskdefs.ManifestClassPath:void execute()",
            "org.apache.tools.ant.taskdefs.Nice:void execute()",
            "org.apache.tools.ant.taskdefs.PathConvert:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void addProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Redirector:void setPropertyFromBAOS(java.io.ByteArrayOutputStream,java.lang.String)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.TempFile:void execute()",
            "org.apache.tools.ant.taskdefs.Tstamp:void setProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.UpToDate:void execute()",
            "org.apache.tools.ant.taskdefs.WaitFor:void processTimeout()",
            "org.apache.tools.ant.taskdefs.WhichResource:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addProperty(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.util.PropertyOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.Project:void setUserProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)",
            "org.apache.tools.ant.Project:void setName(java.lang.String)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.Project:void setInheritedProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Property:void addProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.Project:void setPropertyInternal(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void initProperties()",
            "org.apache.tools.ant.Project:void setAntLib()",
            "org.apache.tools.ant.Project:void setBaseDir(java.io.File)",
            "org.apache.tools.ant.Project:void setJavaVersionProperty()",
            "org.apache.tools.ant.Project:void setSystemProperties()"
        ]
    },
    "org.apache.tools.ant.Project:java.util.Hashtable getProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.util.ScriptRunnerBase:void bindToComponent(org.apache.tools.ant.ProjectComponent)",
            "org.apache.tools.ant.ProjectHelper:void configure(java.lang.Object,org.xml.sax.AttributeList,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.Project:java.util.Hashtable getUserProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PropertySet:void addPropertyNames(java.util.Set,java.util.Hashtable)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void bindToComponent(org.apache.tools.ant.ProjectComponent)"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:java.lang.String getNoDebugArgument()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Apt:java.lang.String getCompiler()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:boolean isForkedJavac()",
            "org.apache.tools.ant.taskdefs.Javac:java.lang.String[] getCurrentCompilerArgs()",
            "org.apache.tools.ant.taskdefs.Javac:void compile()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:boolean isForkedJavac()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)",
            "org.apache.tools.ant.taskdefs.Javac:java.lang.String getJavacExecutable()"
        ]
    },
    "org.apache.tools.ant.types.resources.PropertyResource:java.io.OutputStream getOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.Resource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSystemClasspath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Path getBootClassPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)",
            "org.apache.tools.ant.taskdefs.compilers.Gcj:org.apache.tools.ant.types.Commandline setupGCJCommand()",
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jvc:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Kjc:org.apache.tools.ant.types.Commandline setupKjcCommand()"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava:org.apache.tools.ant.types.Path calculateBootclasspath(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.CommandlineJava:void addCommandsToList(java.util.ListIterator)",
            "org.apache.tools.ant.types.CommandlineJava:int size()",
            "org.apache.tools.ant.types.CommandlineJava:boolean haveBootclasspath(boolean)"
        ]
    },
    "org.apache.tools.ant.types.RegularExpression:java.lang.String getPattern(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.RegularExpression:java.lang.String getPattern(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.RegularExpression:org.apache.tools.ant.util.regexp.Regexp getRegexp(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.LineContainsRegExp:int read()",
            "org.apache.tools.ant.filters.TokenFilter$ContainsRegex:void initialize()",
            "org.apache.tools.ant.filters.TokenFilter$ReplaceRegex:void initialize()",
            "org.apache.tools.ant.taskdefs.condition.Matches:boolean eval()",
            "org.apache.tools.ant.types.selectors.ContainsRegexpSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.RegularExpression:org.apache.tools.ant.util.regexp.Regexp getRegexp(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.util.RegexpPatternMapper:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.ClasspathUtils:java.lang.ClassLoader getClassLoaderForPath(org.apache.tools.ant.Project,org.apache.tools.ant.types.Path,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void resolveProcessor(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XSLTProcess:org.apache.tools.ant.taskdefs.XSLTLiaison getLiaison()"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$DescriptionHandler:void characters(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Main:void printDescription(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)"
        ]
    },
    "org.apache.tools.ant.Task:void reconfigure()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.ExecuteOn:org.apache.tools.ant.taskdefs.ExecuteStreamHandler createHandler()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:org.apache.tools.ant.taskdefs.Execute prepareExec()"
        ]
    },
    "org.apache.tools.tar.TarInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.tar.TarInputStream:org.apache.tools.tar.TarEntry getNextEntry()"
        ]
    },
    "org.apache.tools.tar.TarInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Untar$UntarCompressionMethod:java.io.InputStream decompress(java.lang.String,java.io.InputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.InputStream wrapStream(java.io.InputStream)",
            "org.apache.tools.ant.util.ConcatFileInputStream:int readCurrent()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:int readCurrent()",
            "org.apache.tools.bzip2.CBZip2InputStream:void init()",
            "org.apache.tools.bzip2.CBZip2InputStream:int bsR(int)",
            "org.apache.tools.bzip2.CBZip2InputStream:boolean bsGetBit()",
            "org.apache.tools.bzip2.CBZip2InputStream:void getAndMoveToFrontDecode()",
            "org.apache.tools.bzip2.CBZip2InputStream:int getAndMoveToFrontDecode0(int)"
        ]
    },
    "org.apache.tools.tar.TarInputStream:void copyEntryContents(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Path getClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Rmic:void execute()"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:java.lang.ClassLoader getClassLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:java.lang.Object loadClass(java.lang.String,java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.tools.ant.types.selectors.ExtendSelector:void selectorCreate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.ExtendSelector:void verifySettings()"
        ]
    },
    "org.apache.tools.ant.types.Mapper:java.lang.Class getImplementationClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Mapper:org.apache.tools.ant.util.FileNameMapper getImplementation()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:int executeExternalCompile(java.lang.String[],int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.AptExternalCompilerAdapter:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:int executeExternalCompile(java.lang.String[],int)",
            "org.apache.tools.ant.taskdefs.compilers.JavacExternal:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.JavacExternal:boolean execOnVMS(org.apache.tools.ant.types.Commandline,int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jikes:void compile(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Java:void spawn(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:int executeJava()"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.Resource:int hashCode()"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.Resource:int hashCode()"
        ]
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:org.apache.tools.ant.types.Resource getArchive()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.ArchiveResource:org.apache.tools.ant.types.Resource getArchive()",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.ArchiveResource:int hashCode()",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.File getZipfile()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:org.apache.tools.ant.types.Resource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.CompressedResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.CompressedResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.CompressedResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.CompressedResource:int hashCode()",
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String toString()"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:java.io.File getFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.email.EmailTask:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Expand:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Pack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Unpack:void setSrcResource(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.VerifyJar:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void configureLiaison(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.io.File getFile()",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getNonFileSetResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)",
            "org.apache.tools.ant.types.resources.comparators.FileSystem:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.FileResource:java.io.File getFile()",
            "org.apache.tools.ant.types.resources.FileResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.File getNotNullFile()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.File getZipfile()",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.io.File getSrc()",
            "org.apache.tools.ant.types.ArchiveScanner:void setSrc(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ZipScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:java.io.File getBaseDir()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.FileResource:java.io.File getBaseDir()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String getName()",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:java.lang.String getName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Checksum:boolean validateAndExecute()",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:java.util.Map buildMap(org.apache.tools.ant.types.Resource[],java.io.File,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.SignJar:void execute()",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[] selectFileResources(org.apache.tools.ant.types.Resource[])",
            "org.apache.tools.ant.types.resources.comparators.Name:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String getName()",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String toString()",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:java.lang.String getName()",
            "org.apache.tools.ant.types.Resource:int hashCode()",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.SourceFileScanner:java.lang.String[] restrict(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:java.io.OutputStream getOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.Resource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.ArchiveResource:int hashCode()",
            "org.apache.tools.ant.types.resources.CompressedResource:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.Resource:int hashCode()"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:boolean isFilesystemOnly()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Tar:boolean isFileFileSet(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.ZipResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.ResourceCollection assertFilesystemOnly(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Resource:boolean isFilesystemOnly()"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:void touch(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.types.resources.FileResource:void touch(long)",
            "org.apache.tools.ant.util.ResourceUtils:void setLastModified(org.apache.tools.ant.types.resources.Touchable,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:org.apache.tools.ant.types.resources.Files getRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Files:boolean getDefaultexcludes()",
            "org.apache.tools.ant.types.resources.Files:boolean isCaseSensitive()",
            "org.apache.tools.ant.types.resources.Files:boolean isFollowSymlinks()",
            "org.apache.tools.ant.types.resources.Files:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Files:int size()",
            "org.apache.tools.ant.types.resources.Files:boolean hasPatterns()",
            "org.apache.tools.ant.types.resources.Files:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.resources.Files:org.apache.tools.ant.types.PatternSet mergePatterns(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.JavaResource:org.apache.tools.ant.types.Path getClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.LoadProperties:org.apache.tools.ant.types.Path getClasspath()",
            "org.apache.tools.ant.types.resources.JavaResource:org.apache.tools.ant.types.Path getClasspath()",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.JavaResource:int compareTo(java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.ArchiveResource:int hashCode()",
            "org.apache.tools.ant.types.resources.CompressedResource:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.Resource:int hashCode()"
        ]
    },
    "org.apache.tools.ant.types.resources.StringResource:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.ArchiveResource:int hashCode()",
            "org.apache.tools.ant.types.resources.CompressedResource:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.Resource:int hashCode()"
        ]
    },
    "org.apache.tools.ant.types.resources.StringResource:java.io.OutputStream getOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.Resource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.TarResource:java.io.OutputStream getOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.Resource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.TarResource:java.lang.String getUserName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.types.resources.TarResource:java.lang.String getUserName()"
        ]
    },
    "org.apache.tools.ant.types.resources.TarResource:java.lang.String getGroup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.types.resources.TarResource:java.lang.String getGroup()"
        ]
    },
    "org.apache.tools.ant.types.resources.TarResource:int getUid()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.types.resources.TarResource:int getUid()"
        ]
    },
    "org.apache.tools.ant.types.resources.TarResource:int getGid()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.types.resources.TarResource:int getGid()"
        ]
    },
    "org.apache.tools.ant.types.resources.URLResource:java.net.URL getURL()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.URLResource:java.net.URL getURL()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isExists(boolean)",
            "org.apache.tools.ant.types.resources.URLResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:void connect()"
        ]
    },
    "org.apache.tools.ant.types.resources.URLResource:java.lang.String getName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:java.util.Map buildMap(org.apache.tools.ant.types.Resource[],java.io.File,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[] selectFileResources(org.apache.tools.ant.types.Resource[])",
            "org.apache.tools.ant.types.resources.comparators.Name:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.URLResource:boolean isDirectory()",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String toString()",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:java.lang.String getName()",
            "org.apache.tools.ant.types.Resource:int hashCode()",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.SourceFileScanner:java.lang.String[] restrict(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.URLResource:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.ArchiveResource:int hashCode()",
            "org.apache.tools.ant.types.resources.CompressedResource:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.Resource:int hashCode()"
        ]
    },
    "org.apache.tools.ant.types.resources.URLResource:java.io.OutputStream getOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.Resource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.ZipResource:java.lang.String getEncoding()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.ZipResource:java.lang.String getEncoding()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:void fetchEntry()"
        ]
    },
    "org.apache.tools.ant.types.resources.ZipResource:java.io.OutputStream getOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.Resource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.Mapper:org.apache.tools.ant.types.Mapper getRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Mapper:org.apache.tools.ant.util.FileNameMapper getImplementation()"
        ]
    },
    "org.apache.tools.ant.types.RedirectorElement:org.apache.tools.ant.types.RedirectorElement getRef()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.RedirectorElement:void configure(org.apache.tools.ant.taskdefs.Redirector,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.Resource:java.lang.String getName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:java.util.Map buildMap(org.apache.tools.ant.types.Resource[],java.io.File,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[] selectFileResources(org.apache.tools.ant.types.Resource[])",
            "org.apache.tools.ant.types.resources.comparators.Name:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.ArchiveResource:boolean equals(java.lang.Object)",
            "org.apache.tools.ant.types.resources.ArchiveResource:java.lang.String toString()",
            "org.apache.tools.ant.types.resources.ArchiveResource:void checkEntry()",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.JavaResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.JavaResource:int compareTo(java.lang.Object)",
            "org.apache.tools.ant.types.resources.PropertyResource:java.lang.String getValue()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:void fetchEntry()",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String toString()",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:java.lang.String getName()",
            "org.apache.tools.ant.types.Resource:int hashCode()",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.SourceFileScanner:java.lang.String[] restrict(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper,long)"
        ]
    },
    "org.apache.tools.ant.types.Resource:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.ArchiveResource:int hashCode()",
            "org.apache.tools.ant.types.resources.CompressedResource:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.Resource:int hashCode()"
        ]
    },
    "org.apache.tools.ant.types.Resource:java.io.OutputStream getOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.Resource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.Resource:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Resource:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.Resource:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.types.Resource:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.types.Resource:boolean isFilesystemOnly()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Tar:boolean isFileFileSet(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.ZipResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.ResourceCollection assertFilesystemOnly(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Resource:boolean isFilesystemOnly()"
        ]
    },
    "org.apache.tools.ant.types.TarFileSet:java.lang.String getUserName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.types.TarFileSet:java.lang.String getUserName()"
        ]
    },
    "org.apache.tools.ant.types.TarFileSet:int getUid()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.types.TarFileSet:int getUid()"
        ]
    },
    "org.apache.tools.ant.types.TarFileSet:java.lang.String getGroup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.types.TarFileSet:java.lang.String getGroup()"
        ]
    },
    "org.apache.tools.ant.types.TarFileSet:int getGid()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.types.TarFileSet:int getGid()"
        ]
    },
    "org.apache.tools.ant.types.FileList:java.io.File getDir(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getFilesAndDirs(org.apache.tools.ant.types.FileList)",
            "org.apache.tools.ant.types.FileList:java.io.File getDir(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.FileList:java.lang.String[] getFiles(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:java.lang.String[] getFilesAndDirs(org.apache.tools.ant.types.FileList)",
            "org.apache.tools.ant.types.FileList:java.lang.String[] getFiles(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.FileList:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat$MultiReader:void <init>(org.apache.tools.ant.taskdefs.Concat,org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[][] grabNonFileSetResources(org.apache.tools.ant.types.ResourceCollection[])",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Difference:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.First:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Intersect:java.util.ArrayList collect(java.lang.Object)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
            "org.apache.tools.ant.types.resources.Resources:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.resources.Restrict$1:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Sort:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.resources.Union:java.util.Collection getCollection(boolean)",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.FileList:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.types.FileList:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void execute()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.LoadProperties:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.LoadResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Pack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.ResourceCount:void execute()",
            "org.apache.tools.ant.taskdefs.ResourceCount:boolean eval()",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Unpack:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.ArchiveResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.CompressedResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.Resources$MyCollection:void <init>(org.apache.tools.ant.types.resources.Resources)",
            "org.apache.tools.ant.types.resources.Resources:int size()",
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()",
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:int size()",
            "org.apache.tools.ant.types.FileList:int size()",
            "org.apache.tools.ant.types.Path:int size()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.Resource[] selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.Resource[],org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.types.PatternSet:boolean hasPatterns(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.AbstractFileSet:void setRefid(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasPatterns()",
            "org.apache.tools.ant.types.PatternSet:boolean hasPatterns(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.Substitution:java.lang.String getExpression(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.TokenFilter$ContainsRegex:java.lang.String filter(java.lang.String)",
            "org.apache.tools.ant.filters.TokenFilter$ReplaceRegex:java.lang.String filter(java.lang.String)",
            "org.apache.tools.ant.types.Substitution:java.lang.String getExpression(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.selectors.SelectSelector:boolean hasSelectors()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.SelectSelector:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean hasSelectors()"
        ]
    },
    "org.apache.tools.ant.types.selectors.SelectSelector:int selectorCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.SelectSelector:int selectorCount()",
            "org.apache.tools.ant.types.selectors.SelectSelector:void verifySettings()"
        ]
    },
    "org.apache.tools.ant.types.selectors.SelectSelector:org.apache.tools.ant.types.selectors.FileSelector[] getSelectors(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.SelectSelector:org.apache.tools.ant.types.selectors.FileSelector[] getSelectors(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.selectors.SelectSelector:java.util.Enumeration selectorElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.SelectSelector:java.util.Enumeration selectorElements()",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:java.lang.String getBeginToken()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.FilterSet:java.lang.String getBeginToken()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String iReplaceTokens(java.lang.String)",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:java.lang.String getEndToken()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.FilterSet:java.lang.String getEndToken()",
            "org.apache.tools.ant.types.FilterSet:java.lang.String iReplaceTokens(java.lang.String)",
            "org.apache.tools.ant.types.FilterSet:java.lang.String replaceTokens(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.PropertySet:boolean getDynamic()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()"
        ]
    },
    "org.apache.tools.ant.types.PropertySet:org.apache.tools.ant.types.Mapper getMapper()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()"
        ]
    },
    "org.apache.tools.ant.types.PropertySet:boolean isFilesystemOnly()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void validateAttributes()",
            "org.apache.tools.ant.taskdefs.Javadoc:void addSourceFiles(java.util.Vector)",
            "org.apache.tools.ant.taskdefs.Tar:boolean check(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Tar:boolean isFileFileSet(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.Resources:boolean isFilesystemOnly()",
            "org.apache.tools.ant.types.resources.ZipResource:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.ResourceCollection assertFilesystemOnly(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.PropertySet:boolean isFilesystemOnly()"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:java.util.Vector getElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:void addDTD(org.apache.tools.ant.types.ResourceLocation)",
            "org.apache.tools.ant.types.XMLCatalog:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.ResourceLocation findMatchingEntry(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.Path getClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.Path getCatalogPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:void processExternalCatalogs()",
            "org.apache.tools.ant.types.XMLCatalog:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.XMLCatalog$CatalogResolver getCatalogResolver()"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet$HideMissingBasedir:boolean basedirExists()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet$HideMissingBasedir:java.util.Iterator iterator()",
            "org.apache.tools.ant.taskdefs.DependSet$HideMissingBasedir:int size()"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.TypeFound:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:java.lang.Object createDataType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:java.lang.Object createDataType(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.CvsVersion:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()",
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.types.DataType:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.Object clone()",
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.Assertions:java.lang.Object clone()",
            "org.apache.tools.ant.types.FilterSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.Path:java.lang.Object clone()",
            "org.apache.tools.ant.types.PatternSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.Resource:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:org.apache.tools.ant.Task createTask(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:org.apache.tools.ant.Task createTask(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.util.ScriptRunnerHelper:org.apache.tools.ant.util.ScriptRunnerBase getScriptRunner()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.DefBase:java.lang.ClassLoader createLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Definer:void execute()",
            "org.apache.tools.ant.taskdefs.Input$Handler:org.apache.tools.ant.input.InputHandler getInputHandler()"
        ]
    },
    "org.apache.tools.ant.util.ClasspathUtils$Delegate:java.lang.Object newInstance()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.ScriptRunnerHelper:java.lang.ClassLoader generateClassLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ScriptRunnerHelper:org.apache.tools.ant.util.ScriptRunnerBase getRunner()"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Ant:org.apache.tools.ant.Project getNewProject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:org.apache.tools.ant.taskdefs.Property createProperty()"
        ]
    },
    "org.apache.tools.ant.taskdefs.CallTarget:org.apache.tools.ant.taskdefs.Property createParam()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.CallTarget:void addReference(org.apache.tools.ant.taskdefs.Ant$Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.CallTarget:void addPropertyset(org.apache.tools.ant.types.PropertySet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.CallTarget:void setTarget(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.CallTarget:void addConfiguredTarget(org.apache.tools.ant.taskdefs.Ant$TargetElement)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Sync:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.taskdefs.Sync:void configureTask(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.ComponentHelper:java.lang.Object createComponent(org.apache.tools.ant.UnknownElement,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.UnknownElement:java.lang.Object makeObject(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.Task makeTask(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.ProjectHelper:void addText(org.apache.tools.ant.Project,java.lang.Object,char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.IntrospectionHelper:java.lang.Object createElement(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler:void init(java.lang.String,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$Creator getElementCreator(org.apache.tools.ant.Project,java.lang.String,java.lang.Object,java.lang.String,org.apache.tools.ant.UnknownElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:boolean handleChild(java.lang.String,org.apache.tools.ant.IntrospectionHelper,java.lang.Object,org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void tryToSetAParameter(java.lang.Object,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void useParameter(org.apache.tools.ant.types.Parameter)"
        ]
    },
    "org.apache.tools.ant.types.resources.selectors.Compare:org.apache.tools.ant.types.ResourceCollection createControl()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionWrapper:void add(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet$Xest:void <init>(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.comparators.ResourceComparator)",
            "org.apache.tools.ant.types.resources.Restrict:void add(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecuteOn:void checkConfiguration()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Chmod:void checkConfiguration()",
            "org.apache.tools.ant.taskdefs.ExecTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute$CommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:java.lang.Process launch(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute$CommandLauncherProxy:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute$CommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute$CommandLauncherProxy:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[])",
            "org.apache.tools.ant.taskdefs.Execute$MacCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute$OS2CommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute$PerlScriptCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute$ScriptCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute$WinNTCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute$VmsCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute$CommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute$CommandLauncherProxy:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute$VmsCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:java.lang.Process launch(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.types.Path$PathElement:void setPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Path:void <init>(org.apache.tools.ant.Project,java.lang.String)",
            "org.apache.tools.ant.types.Path:void setPath(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader:java.lang.Class forceLoadSystemClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:java.lang.Class getTypeClass(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:java.lang.Class getTypeClass(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.AntTypeDefinition:java.lang.Class getExposedClass(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.AntTypeDefinition:java.lang.Object icreate(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.AntTypeDefinition:void checkClass(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.AntTypeDefinition:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:java.lang.Class getTypeClass(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper:boolean validDefinition(org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.AntTypeDefinition:java.lang.Class getExposedClass(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.TypeFound:boolean doesTypeExist(java.lang.String)",
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:java.lang.Class getExposedClass(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.AntTypeDefinition:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:java.lang.Class getExposedClass(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:java.lang.Class getComponentClass(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)",
            "org.apache.tools.ant.ComponentHelper:boolean validDefinition(org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.AntTypeDefinition:java.lang.Object icreate(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntTypeDefinition:java.lang.Object create(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.AntTypeDefinition:void checkClass(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Definer:void addDefinition(java.lang.ClassLoader,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:void checkClass(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.AntTypeDefinition:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef$MyAntTypeDefinition:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper$AntTypeTable:java.lang.Class getTypeClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:java.lang.Object get(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:boolean validDefinition(org.apache.tools.ant.AntTypeDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.Project:void setBasedir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.Project:java.io.File getBaseDir()"
        ]
    },
    "org.apache.tools.ant.Project:void addOrReplaceTarget(org.apache.tools.ant.Target)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Ant:void handleOutput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.CallTarget:void handleOutput(java.lang.String)",
            "org.apache.tools.ant.taskdefs.SubAnt:void handleOutput(java.lang.String)",
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Task:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleOutput(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ant:void handleErrorOutput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.CallTarget:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.taskdefs.SubAnt:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Task:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleErrorFlush(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.DemuxOutputStream:void processBuffer(java.io.ByteArrayOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DemuxOutputStream:void write(int)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$TargetHandler:void init(java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler:void handleTarget(java.lang.String,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl:void configureId(java.lang.Object,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl:void access$800(org.apache.tools.ant.helper.ProjectHelperImpl,java.lang.Object,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.Project:void setExecutor(org.apache.tools.ant.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void initSubProject(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Project:org.apache.tools.ant.Executor getExecutor()"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.Http:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.IsReachable:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.ParserSupports:boolean evalFeature()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ParserSupports:boolean eval()"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.ParserSupports:boolean evalProperty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.ParserSupports:boolean eval()"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.Socket:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.WaitFor:void processSuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.WaitFor:void processTimeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.types.resources.URLResource:void connect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.URLResource:boolean isExists(boolean)",
            "org.apache.tools.ant.types.resources.URLResource:long getSize()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.OutputStream getOutputStream()"
        ]
    },
    "org.apache.tools.ant.types.FilterSet:void handleMissingFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.FilterSet:void readFiltersFromFile(java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:void <init>(org.apache.tools.ant.types.XMLCatalog,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.XMLCatalog$CatalogResolver getCatalogResolver()"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog$InternalResolver:void <init>(org.apache.tools.ant.types.XMLCatalog)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.XMLCatalog$CatalogResolver getCatalogResolver()"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource filesystemLookup(org.apache.tools.ant.types.ResourceLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource access$100(org.apache.tools.ant.types.XMLCatalog,org.apache.tools.ant.types.ResourceLocation)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource urlLookup(org.apache.tools.ant.types.ResourceLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource access$300(org.apache.tools.ant.types.XMLCatalog,org.apache.tools.ant.types.ResourceLocation)"
        ]
    },
    "org.apache.tools.ant.TaskAdapter:void checkProxyClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntTypeDefinition:void checkClass(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.taskdefs.CallTarget:void handleFlush(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)",
            "org.apache.tools.ant.UnknownElement:void handleFlush(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SubAnt:void handleFlush(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)",
            "org.apache.tools.ant.UnknownElement:void handleFlush(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:void handleFlush(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)",
            "org.apache.tools.ant.UnknownElement:void handleFlush(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.CallTarget:void handleErrorFlush(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SubAnt:void handleErrorFlush(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.DemuxOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void flush()",
            "org.apache.tools.ant.util.TeeOutputStream:void flush()",
            "org.apache.tools.ant.util.UUEncoder:void encode(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.DemuxOutputStream:void close()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void flush()",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.zip.ZipOutputStream:void flush()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Apt:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Exec$StreamPumper:void pumpStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Exec$StreamPumper:void run()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Chmod:boolean isValidOs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Chmod:void execute()",
            "org.apache.tools.ant.taskdefs.ExecTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Get:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc:void setWindowtitle(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javadoc:void setCharset(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.JikesOutputParser:void parseStandardOutput(java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.JikesOutputParser:void parseOutput(java.io.BufferedReader)",
            "org.apache.tools.ant.taskdefs.JikesOutputParser:void parseEmacsOutput(java.io.BufferedReader)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc$JavadocOutputStream:void processLine(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.LogOutputStream:void processLine(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc$JavadocOutputStream:void logFlush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.LogOutputStream:void processLine(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.LineOrientedOutputStream:void processBuffer()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Move:void deleteDir(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Move:void deleteDir(java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SQLExec:void printResults(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.TaskOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod:java.io.OutputStream compress(java.io.OutputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.OutputStream wrapStream(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(int)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(int)",
            "org.apache.tools.ant.util.UUEncoder:void encodeLine(byte[],int,int,java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsFinishedWithStream()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsW(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues4()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues5(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues6(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues7(int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Touch:void touch(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Zip:void zipDir(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void addParentDirs(java.io.File,java.lang.String,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)"
        ]
    },
    "org.apache.tools.ant.util.ConcatFileInputStream:void openFile(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ConcatFileInputStream:int read()"
        ]
    },
    "org.apache.tools.ant.util.LeadPipeInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Untar$UntarCompressionMethod:java.io.InputStream decompress(java.lang.String,java.io.InputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.InputStream wrapStream(java.io.InputStream)",
            "org.apache.tools.ant.util.ConcatFileInputStream:int readCurrent()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:int readCurrent()",
            "org.apache.tools.bzip2.CBZip2InputStream:void init()",
            "org.apache.tools.bzip2.CBZip2InputStream:int bsR(int)",
            "org.apache.tools.bzip2.CBZip2InputStream:boolean bsGetBit()",
            "org.apache.tools.bzip2.CBZip2InputStream:void getAndMoveToFrontDecode()",
            "org.apache.tools.bzip2.CBZip2InputStream:int getAndMoveToFrontDecode0(int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.CallTarget:void handleOutput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Task:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleOutput(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:void handleOutput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Task:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleOutput(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SubAnt:void handleOutput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Task:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleOutput(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.Task:void handleFlush(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.taskdefs.CallTarget:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Java:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.taskdefs.SubAnt:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)",
            "org.apache.tools.ant.UnknownElement:void handleFlush(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:void handleOutput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Task:void handleFlush(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleOutput(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.CallTarget:void handleErrorOutput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Task:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleErrorFlush(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:void handleErrorOutput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Task:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleErrorFlush(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:void handleErrorFlush(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SubAnt:void handleErrorOutput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Task:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleErrorFlush(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.Task:void handleErrorFlush(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ant:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.taskdefs.CallTarget:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.taskdefs.SubAnt:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:void handleErrorOutput(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxOutput(java.lang.String,boolean)",
            "org.apache.tools.ant.Task:void handleErrorFlush(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleErrorOutput(java.lang.String)",
            "org.apache.tools.ant.UnknownElement:void handleErrorFlush(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.UnknownElement:void handleErrorFlush(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Deltree:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.KeySubst:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar:void setLongfile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Tstamp$CustomFormat:void setUnit(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Unpack:void setDest(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Delete:void handle(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.Delete:void handle(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelper2$RootHandler:void startPrefixMapping(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.helper.ProjectHelper2$RootHandler:void endPrefixMapping(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.helper.ProjectHelper2$ElementHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$RootHandler:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:void processComment(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:void stdout(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:void processGetPreviousRevision(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:void stdout(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copy:void add(java.io.File,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.KeySubst:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Tstamp$CustomFormat:void setUnit(org.apache.tools.ant.taskdefs.Tstamp$Unit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.WaitFor:void setMaxWaitUnit(org.apache.tools.ant.taskdefs.WaitFor$Unit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.WaitFor:void setCheckEveryUnit(org.apache.tools.ant.taskdefs.WaitFor$Unit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.AntClassLoader$ResourceEnumeration:void findNextResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader$ResourceEnumeration:void <init>(org.apache.tools.ant.AntClassLoader,java.lang.String)",
            "org.apache.tools.ant.AntClassLoader$ResourceEnumeration:java.lang.Object nextElement()"
        ]
    },
    "org.apache.tools.ant.DirectoryScanner:java.io.File findFile(java.io.File,java.util.Vector,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DirectoryScanner:java.io.File findFile(java.io.File,java.lang.String,boolean)",
            "org.apache.tools.ant.DirectoryScanner:java.io.File findFile(java.io.File,java.util.Vector,boolean)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler:void init(java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper getHelper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.ProjectHelper:void storeChild(org.apache.tools.ant.Project,java.lang.Object,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.Project:void addTarget(org.apache.tools.ant.Target)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.XmlLogger:void targetStarted(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)"
        ]
    },
    "org.apache.tools.ant.XmlLogger:void taskStarted(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireTaskStarted(org.apache.tools.ant.Task)"
        ]
    },
    "org.apache.tools.zip.ZipOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:void setSrcResource(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.ArchiveFileSet:void addConfigured(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.types.ArchiveFileSet:void setSrc(java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:void setPrefix(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ear:void addArchives(org.apache.tools.ant.types.ZipFileSet)",
            "org.apache.tools.ant.taskdefs.Jar:void addMetainf(org.apache.tools.ant.types.ZipFileSet)",
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.taskdefs.War:void addLib(org.apache.tools.ant.types.ZipFileSet)",
            "org.apache.tools.ant.taskdefs.War:void addClasses(org.apache.tools.ant.types.ZipFileSet)",
            "org.apache.tools.ant.taskdefs.War:void addWebinf(org.apache.tools.ant.types.ZipFileSet)",
            "org.apache.tools.ant.types.ArchiveFileSet:void configureFileSet(org.apache.tools.ant.types.ArchiveFileSet)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:void setFullpath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Ear:void setAppxml(java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.taskdefs.War:void setWebxml(java.io.File)",
            "org.apache.tools.ant.types.ArchiveFileSet:void configureFileSet(org.apache.tools.ant.types.ArchiveFileSet)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:void setFileMode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar$TarFileSet:void setMode(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:void setDirMode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.Assertions:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.CommandlineJava:int size()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ResourceCount:void setRefid(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.TarFileSet:void setUserName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.types.TarFileSet:void configureFileSet(org.apache.tools.ant.types.ArchiveFileSet)"
        ]
    },
    "org.apache.tools.ant.types.TarFileSet:void setUid(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.types.TarFileSet:void configureFileSet(org.apache.tools.ant.types.ArchiveFileSet)"
        ]
    },
    "org.apache.tools.ant.types.TarFileSet:void setGroup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.types.TarFileSet:void configureFileSet(org.apache.tools.ant.types.ArchiveFileSet)"
        ]
    },
    "org.apache.tools.ant.types.TarFileSet:void setGid(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:org.apache.tools.ant.taskdefs.Tar$TarFileSet asTarFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.types.TarFileSet:void configureFileSet(org.apache.tools.ant.types.ArchiveFileSet)"
        ]
    },
    "org.apache.tools.ant.types.ZipFileSet:void setEncoding(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler:void init(java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl:void handleElement(org.apache.tools.ant.helper.ProjectHelperImpl,org.xml.sax.DocumentHandler,org.apache.tools.ant.Target,java.lang.String,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef:org.apache.tools.ant.UnknownElement getNestedTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Basename:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Dirname:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.ExecTask:void maybeSetResultPropertyValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecTask:void runExecute(org.apache.tools.ant.taskdefs.Execute)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:void maybeSetResultPropertyValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Redirector:void setPropertyFromBAOS(java.io.ByteArrayOutputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Redirector:void access$200(org.apache.tools.ant.taskdefs.Redirector,java.io.ByteArrayOutputStream,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.TempFile:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.UnknownElement:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tstamp:void setProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tstamp:void execute()",
            "org.apache.tools.ant.taskdefs.Tstamp:void access$000(org.apache.tools.ant.taskdefs.Tstamp,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.util.PropertyOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()",
            "org.apache.tools.ant.taskdefs.LogStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void setProcessInputStream(java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler:void close()",
            "org.apache.tools.ant.util.TeeOutputStream:void close()",
            "org.apache.tools.ant.DemuxOutputStream:void resetBufferInfo()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()",
            "org.apache.tools.tar.TarOutputStream:void close()",
            "org.apache.tools.zip.ZipOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.Project:void setName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelper2$ProjectHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler:void init(java.lang.String,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.Project:void setAntLib()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void initProperties()"
        ]
    },
    "org.apache.tools.ant.util.ScriptRunnerBase:void bindToComponent(org.apache.tools.ant.ProjectComponent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javac:java.lang.String getJavacExecutable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.JavacExternal:boolean execute()"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:java.io.OutputStream getOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.PropertyResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.URLResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.Resource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.filters.TokenFilter$ContainsRegex:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.TokenFilter$ContainsRegex:java.lang.String filter(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.filters.TokenFilter$ReplaceRegex:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.TokenFilter$ReplaceRegex:java.lang.String filter(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.Matches:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:org.apache.tools.ant.taskdefs.XSLTLiaison getLiaison()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XSLTProcess:void execute()"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:java.lang.Object loadClass(java.lang.String,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()"
        ]
    },
    "org.apache.tools.ant.types.selectors.ExtendSelector:void verifySettings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.BaseSelector:void verifySettings()",
            "org.apache.tools.ant.types.selectors.BaseSelector:void validate()"
        ]
    },
    "org.apache.tools.ant.types.Mapper:org.apache.tools.ant.util.FileNameMapper getImplementation()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:org.apache.tools.ant.util.FileNameMapper getMapper()",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void checkConfiguration()",
            "org.apache.tools.ant.taskdefs.Expand:org.apache.tools.ant.util.FileNameMapper getMapper()",
            "org.apache.tools.ant.taskdefs.PathConvert:void execute()",
            "org.apache.tools.ant.taskdefs.Touch:void addConfiguredMapper(org.apache.tools.ant.types.Mapper)",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.UpToDate:org.apache.tools.ant.util.FileNameMapper getMapper()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void process(java.io.File,java.lang.String,java.io.File,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.selectors.MappingSelector:void verifySettings()",
            "org.apache.tools.ant.types.selectors.PresentSelector:void verifySettings()",
            "org.apache.tools.ant.types.Mapper:void add(org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.types.Mapper:void addConfiguredMapper(org.apache.tools.ant.types.Mapper)",
            "org.apache.tools.ant.types.Mapper:org.apache.tools.ant.util.FileNameMapper getImplementation()",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.RedirectorElement:void configure(org.apache.tools.ant.taskdefs.Redirector,java.lang.String)",
            "org.apache.tools.ant.util.ContainerMapper:void addConfiguredMapper(org.apache.tools.ant.types.Mapper)"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:int executeExternalCompile(java.lang.String[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.Gcj:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jvc:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Sj:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.compilers.JavacExternal:boolean execOnVMS(org.apache.tools.ant.types.Commandline,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.JavacExternal:boolean execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int access$100(java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.ArchiveResource:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.ArchiveResource:int hashCode()",
            "org.apache.tools.ant.types.resources.CompressedResource:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.Resource:int hashCode()"
        ]
    },
    "org.apache.tools.ant.types.resources.ZipResource:java.io.File getZipfile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.ZipResource:void fetchEntry()"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String getName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:java.util.Map buildMap(org.apache.tools.ant.types.Resource[],java.io.File,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[] selectFileResources(org.apache.tools.ant.types.Resource[])",
            "org.apache.tools.ant.types.resources.comparators.Name:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.CompressedResource:long getSize()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String getName()",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String toString()",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:java.lang.String getName()",
            "org.apache.tools.ant.types.Resource:int hashCode()",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.SourceFileScanner:java.lang.String[] restrict(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.CompressedResource:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.ArchiveResource:int hashCode()",
            "org.apache.tools.ant.types.resources.CompressedResource:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.Resource:int hashCode()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:java.io.File getFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XmlProperty:org.apache.tools.ant.types.Resource getResource()"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.FileSystem:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.types.resources.FileResource:java.io.File getNotNullFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.FileResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.FileResource:boolean isDirectory()",
            "org.apache.tools.ant.types.resources.FileResource:long getSize()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.FileResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.FileResource:void touch(long)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:java.io.File getSrc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.ArchiveFileSet:java.io.File getSrc(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.ArchiveScanner:void setSrc(org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.ArchiveScanner:void setSrc(java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.resources.comparators.Name:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.util.ResourceUtils:void setLastModified(org.apache.tools.ant.types.resources.Touchable,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.FileUtils:void setFileLastModified(java.io.File,long)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:boolean getDefaultexcludes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Files:boolean getDefaultexcludes()"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:boolean isCaseSensitive()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Files:boolean isCaseSensitive()"
        ]
    },
    "org.apache.tools.ant.types.resources.Files:boolean isFollowSymlinks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Files:boolean isFollowSymlinks()"
        ]
    },
    "org.apache.tools.ant.taskdefs.LoadProperties:org.apache.tools.ant.types.Path getClasspath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.resources.URLResource:boolean isExists(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.URLResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.URLResource:long getLastModified()",
            "org.apache.tools.ant.types.resources.URLResource:long getSize()"
        ]
    },
    "org.apache.tools.ant.types.resources.StringResource:java.lang.String getName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:java.util.Map buildMap(org.apache.tools.ant.types.Resource[],java.io.File,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Sync$MyCopy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:void tar(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.tar.TarOutputStream)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(org.apache.tools.ant.types.Resource,long)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void processResources(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.Resource[] selectFileResources(org.apache.tools.ant.types.Resource[])",
            "org.apache.tools.ant.types.resources.comparators.Name:int resourceCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.selectors.Name:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.resources.CompressedResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.FileResource:java.lang.String getName()",
            "org.apache.tools.ant.types.resources.StringResource:void setName(java.lang.String)",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String getValue()",
            "org.apache.tools.ant.types.resources.URLResource:java.lang.String getName()",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:boolean isSelected(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.types.ArchiveFileSet:java.lang.String toString()",
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()",
            "org.apache.tools.ant.types.Resource:java.lang.String getName()",
            "org.apache.tools.ant.types.Resource:int hashCode()",
            "org.apache.tools.ant.types.Resource:java.lang.String toString()",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)",
            "org.apache.tools.ant.util.SourceFileScanner:java.lang.String[] restrict(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper,long)"
        ]
    },
    "org.apache.tools.ant.types.AbstractFileSet:void setRefid(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:java.lang.Object clone()",
            "org.apache.tools.ant.types.TarFileSet:void setRefid(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.filters.TokenFilter$ContainsRegex:java.lang.String filter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.TokenFilter:int read()"
        ]
    },
    "org.apache.tools.ant.filters.TokenFilter$ReplaceRegex:java.lang.String filter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.TokenFilter:int read()"
        ]
    },
    "org.apache.tools.ant.types.selectors.SelectSelector:void verifySettings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.BaseSelector:void verifySettings()",
            "org.apache.tools.ant.types.selectors.BaseSelector:void validate()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:void validate()"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:void addDTD(org.apache.tools.ant.types.ResourceLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:void addEntity(org.apache.tools.ant.types.ResourceLocation)"
        ]
    },
    "org.apache.tools.ant.types.resources.BaseResourceCollectionContainer:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Path:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.Assertions:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.CommandlineJava:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.Path:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:org.apache.tools.ant.types.Path createUnifiedSourcePath()",
            "org.apache.tools.ant.types.CommandlineJava:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.PatternSet:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Files:java.lang.Object clone()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.PatternSet mergePatterns(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.types.Resource:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Ant:org.apache.tools.ant.taskdefs.Property createProperty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.CallTarget:org.apache.tools.ant.taskdefs.Property createParam()",
            "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.taskdefs.Ant createAntTask(java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void useParameter(org.apache.tools.ant.types.Parameter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet$Xest:void <init>(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.comparators.ResourceComparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet$Xest:void <init>(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.comparators.ResourceComparator,org.apache.tools.ant.taskdefs.DependSet$1)"
        ]
    },
    "org.apache.tools.ant.types.resources.Restrict:void add(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Checksum$FileUnion:void <init>()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.DependSet$NonExistent:void <init>(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.DependSet:void logFuture(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.selectors.ResourceSelector)",
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)",
            "org.apache.tools.ant.util.ResourceUtils:void logFuture(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute$MacCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:java.lang.Process launch(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute$OS2CommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:java.lang.Process launch(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute$WinNTCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:java.lang.Process launch(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.types.Path:void <init>(org.apache.tools.ant.Project,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()",
            "org.apache.tools.ant.taskdefs.ExecTask:java.lang.String resolveExecutable(java.lang.String,boolean)",
            "org.apache.tools.ant.types.Path:void addJavaRuntime()",
            "org.apache.tools.ant.types.Path:void addExtdirs(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.types.Path:void <clinit>()"
        ]
    },
    "org.apache.tools.ant.types.Path:void setPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.Object processNode(org.w3c.dom.Node,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:java.lang.Class getExposedClass(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.TypeFound:boolean doesTypeExist(java.lang.String)",
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:java.lang.Class getExposedClass(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.AntTypeDefinition:boolean sameDefinition(org.apache.tools.ant.AntTypeDefinition,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:java.lang.Class getExposedClass(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:boolean contains(java.lang.Object)",
            "org.apache.tools.ant.ComponentHelper:java.lang.Class getComponentClass(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper:java.lang.String getElementName(java.lang.Object,boolean)",
            "org.apache.tools.ant.ComponentHelper:boolean validDefinition(org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper$AntTypeTable:java.lang.Class getExposedClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getTaskDefinitions()",
            "org.apache.tools.ant.ComponentHelper:java.util.Hashtable getDataTypeDefinitions()",
            "org.apache.tools.ant.ComponentHelper:void updateDataTypeDefinition(org.apache.tools.ant.AntTypeDefinition)"
        ]
    },
    "org.apache.tools.ant.AntTypeDefinition:java.lang.Object create(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef$MyAntTypeDefinition:java.lang.Object create(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:java.lang.Object createObject(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:java.lang.Object create(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper:java.lang.Object createComponent(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:void checkClass(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Definer:void addDefinition(java.lang.ClassLoader,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:void checkClass(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper$AntTypeTable:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ReplaceTokens:int read()",
            "org.apache.tools.ant.helper.AntXMLContext:void startPrefixMapping(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.helper.AntXMLContext:void endPrefixMapping(java.lang.String)",
            "org.apache.tools.ant.helper.AntXMLContext:java.lang.String getPrefixMapping(java.lang.String)",
            "org.apache.tools.ant.helper.ProjectHelper2$TargetHandler:void onStartElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes,org.apache.tools.ant.helper.AntXMLContext)",
            "org.apache.tools.ant.helper.ProjectHelperImpl:void handleElement(org.apache.tools.ant.helper.ProjectHelperImpl,org.xml.sax.DocumentHandler,org.apache.tools.ant.Target,java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.listener.MailLogger:java.lang.String getValue(java.util.Hashtable,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.condition.IsReference:boolean eval()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:void saveEntry()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.AntStructure:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:java.io.File getChecksumFile(java.io.File)",
            "org.apache.tools.ant.taskdefs.Checksum:boolean generateChecksums()",
            "org.apache.tools.ant.taskdefs.Copy:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Copy:void add(java.io.File,java.lang.String[],java.util.Map)",
            "org.apache.tools.ant.taskdefs.Copydir:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:void execute()",
            "org.apache.tools.ant.taskdefs.JDBCTask:java.sql.Driver getDriver()",
            "org.apache.tools.ant.taskdefs.KeySubst:java.lang.String replace(java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.MacroDef:void addConfiguredElement(org.apache.tools.ant.taskdefs.MacroDef$TemplateElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void processTasks()",
            "org.apache.tools.ant.taskdefs.MacroInstance:java.lang.String macroSubs(java.lang.String,java.util.Map)",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.MacroInstance:void execute()",
            "org.apache.tools.ant.taskdefs.Manifest$Section:org.apache.tools.ant.taskdefs.Manifest$Attribute getAttribute(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String addAttributeAndCheck(org.apache.tools.ant.taskdefs.Manifest$Attribute)",
            "org.apache.tools.ant.taskdefs.Manifest:void merge(org.apache.tools.ant.taskdefs.Manifest,boolean)",
            "org.apache.tools.ant.taskdefs.Manifest:org.apache.tools.ant.taskdefs.Manifest$Section getSection(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Recorder:org.apache.tools.ant.taskdefs.RecorderEntry getRecorder(java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.Tstamp$Unit:int getCalendarField()",
            "org.apache.tools.ant.taskdefs.WaitFor$Unit:long getMultiplier()",
            "org.apache.tools.ant.taskdefs.XmlProperty:void addProperty(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.taskdefs.Zip:void zipDir(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int,org.apache.tools.zip.ZipExtraField[])",
            "org.apache.tools.ant.taskdefs.Zip:void addParentDirs(java.io.File,java.lang.String,org.apache.tools.zip.ZipOutputStream,java.lang.String,int)",
            "org.apache.tools.ant.types.FilterSet:java.lang.String iReplaceTokens(java.lang.String)",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:void addPropertyNames(java.util.Set,java.util.Hashtable)",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.CollectionUtils:void putAll(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.ScriptRunnerBase:void addBeans(java.util.Map)",
            "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream getResourceStream(java.io.File,java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.net.URL getResourceURL(java.io.File,java.lang.String)",
            "org.apache.tools.ant.DirectoryScanner:java.lang.String[] list(java.io.File)",
            "org.apache.tools.ant.IntrospectionHelper:void <init>(java.lang.Class)",
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper getHelper(org.apache.tools.ant.Project,java.lang.Class)",
            "org.apache.tools.ant.IntrospectionHelper:void setAttribute(org.apache.tools.ant.Project,java.lang.Object,java.lang.String,java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$NestedCreator getNestedCreator(org.apache.tools.ant.Project,java.lang.String,java.lang.Object,java.lang.String,org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.IntrospectionHelper:void storeElement(org.apache.tools.ant.Project,java.lang.Object,java.lang.Object,java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:java.lang.Class getElementType(java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:java.lang.Class getAttributeType(java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:java.lang.reflect.Method getElementMethod(java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:java.lang.reflect.Method getAttributeMethod(java.lang.String)",
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$AttributeSetter createAttributeSetter(java.lang.reflect.Method,java.lang.Class,java.lang.String)",
            "org.apache.tools.ant.Project:void addTarget(java.lang.String,org.apache.tools.ant.Target)",
            "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String[],java.util.Hashtable,boolean)",
            "org.apache.tools.ant.Project:void tsort(java.lang.String,java.util.Hashtable,java.util.Hashtable,java.util.Stack,java.util.Vector)",
            "org.apache.tools.ant.Project:java.lang.Object getReference(java.lang.String)",
            "org.apache.tools.ant.Project:org.apache.tools.ant.Task getThreadTask(java.lang.Thread)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:boolean setProperty(java.lang.String,java.lang.String,java.lang.Object,boolean)",
            "org.apache.tools.ant.PropertyHelper:void setNewProperty(java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.PropertyHelper:java.lang.Object getUserProperty(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.RuntimeConfigurable:void maybeConfigure(org.apache.tools.ant.Project,boolean)",
            "org.apache.tools.ant.RuntimeConfigurable:void applyPreSet(org.apache.tools.ant.RuntimeConfigurable)",
            "org.apache.tools.ant.Target:boolean dependsOn(java.lang.String)",
            "org.apache.tools.ant.XmlLogger:java.util.Stack getStack()",
            "org.apache.tools.ant.XmlLogger:void targetFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.XmlLogger:void taskFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.XmlLogger:org.apache.tools.ant.XmlLogger$TimedElement getTaskElement(org.apache.tools.ant.Task)",
            "org.apache.tools.ant.XmlLogger:void messageLogged(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.zip.ExtraFieldUtils:org.apache.tools.zip.ZipExtraField createExtraField(org.apache.tools.zip.ZipShort)",
            "org.apache.tools.zip.ZipFile:org.apache.tools.zip.ZipEntry getEntry(java.lang.String)",
            "org.apache.tools.zip.ZipFile:java.io.InputStream getInputStream(org.apache.tools.zip.ZipEntry)",
            "org.apache.tools.zip.ZipFile:void resolveLocalFileHeaderData()",
            "org.apache.tools.zip.ZipOutputStream:void writeCentralFileHeader(org.apache.tools.zip.ZipEntry)"
        ]
    },
    "org.apache.tools.ant.Project:java.io.File getBaseDir()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ConcatFilter:void initialize()",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:int executeExternalCompile(java.lang.String[],int,boolean)",
            "org.apache.tools.ant.taskdefs.condition.IsFileSelected:boolean eval()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void validate()",
            "org.apache.tools.ant.taskdefs.rmic.ForkingSunRmic:boolean execute()",
            "org.apache.tools.ant.taskdefs.AbstractCvsTask:void runCommand(org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Available:void setFile(java.io.File)",
            "org.apache.tools.ant.taskdefs.BuildNumber:void validate()",
            "org.apache.tools.ant.taskdefs.Exec:int run(java.lang.String)",
            "org.apache.tools.ant.taskdefs.ExecTask:org.apache.tools.ant.taskdefs.Execute prepareExec()",
            "org.apache.tools.ant.taskdefs.Execute$OS2CommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute$PerlScriptCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute$ScriptCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Execute$WinNTCommandLauncher:java.lang.Process exec(org.apache.tools.ant.Project,java.lang.String[],java.lang.String[],java.io.File)",
            "org.apache.tools.ant.taskdefs.Java:void setupWorkingDir(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Jikes:void compile(java.lang.String[])",
            "org.apache.tools.ant.taskdefs.Patch:void execute()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.io.File resolveFile(java.lang.String)",
            "org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector:void configure()",
            "org.apache.tools.ant.types.ArchiveFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.Path:java.io.File resolveFile(org.apache.tools.ant.Project,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource filesystemLookup(org.apache.tools.ant.types.ResourceLocation)",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource urlLookup(org.apache.tools.ant.types.ResourceLocation)",
            "org.apache.tools.ant.Project:org.apache.tools.ant.types.Resource getResource(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.DemuxOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod:java.io.OutputStream compress(java.io.OutputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.OutputStream wrapStream(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(int)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(int)",
            "org.apache.tools.ant.util.UUEncoder:void encodeLine(byte[],int,int,java.io.OutputStream)",
            "org.apache.tools.ant.DemuxOutputStream:void write(byte[],int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsFinishedWithStream()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsW(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues4()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues5(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues6(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues7(int)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler:void handleTarget(java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$ProjectHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl:void access$800(org.apache.tools.ant.helper.ProjectHelperImpl,java.lang.Object,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.helper.ProjectHelperImpl$NestedElementHandler:void init(java.lang.String,org.xml.sax.AttributeList)",
            "org.apache.tools.ant.helper.ProjectHelperImpl$TaskHandler:void init(java.lang.String,org.xml.sax.AttributeList)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.ParserSupports:boolean eval()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource access$100(org.apache.tools.ant.types.XMLCatalog,org.apache.tools.ant.types.ResourceLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$ExternalResolver:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$InternalResolver:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$InternalResolver:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource access$300(org.apache.tools.ant.types.XMLCatalog,org.apache.tools.ant.types.ResourceLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog$InternalResolver:org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)",
            "org.apache.tools.ant.types.XMLCatalog$InternalResolver:javax.xml.transform.Source resolve(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.PumpStreamHandler:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Execute:int execute()",
            "org.apache.tools.ant.taskdefs.LogStreamHandler:void stop()"
        ]
    },
    "org.apache.tools.ant.taskdefs.StreamPumper:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void flush()",
            "org.apache.tools.ant.util.TeeOutputStream:void flush()",
            "org.apache.tools.ant.util.UUEncoder:void encode(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void flush()",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.zip.ZipOutputStream:void flush()"
        ]
    },
    "org.apache.tools.ant.util.TeeOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void flush()",
            "org.apache.tools.ant.util.TeeOutputStream:void flush()",
            "org.apache.tools.ant.util.UUEncoder:void encode(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void flush()",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.zip.ZipOutputStream:void flush()"
        ]
    },
    "org.apache.tools.ant.DemuxOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()",
            "org.apache.tools.ant.taskdefs.LogStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void setProcessInputStream(java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler:void close()",
            "org.apache.tools.ant.util.TeeOutputStream:void close()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()",
            "org.apache.tools.tar.TarOutputStream:void close()",
            "org.apache.tools.zip.ZipOutputStream:void close()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void flush()",
            "org.apache.tools.ant.util.TeeOutputStream:void flush()",
            "org.apache.tools.ant.util.UUEncoder:void encode(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void flush()",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.zip.ZipOutputStream:void flush()"
        ]
    },
    "org.apache.tools.tar.TarBuffer:void writeBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.tar.TarBuffer:void writeRecord(byte[])",
            "org.apache.tools.tar.TarBuffer:void writeRecord(byte[],int)",
            "org.apache.tools.tar.TarBuffer:void flushBlock()"
        ]
    },
    "org.apache.tools.zip.ZipOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void flush()",
            "org.apache.tools.ant.util.TeeOutputStream:void flush()",
            "org.apache.tools.ant.util.UUEncoder:void encode(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void flush()",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.zip.ZipOutputStream:void flush()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Exec$StreamPumper:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.input.GreedyInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Exec:int run(java.lang.String)",
            "org.apache.tools.ant.taskdefs.ExecuteJava:void execute(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.taskdefs.Parallel:void spinThreads()",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void start()",
            "org.apache.tools.ant.taskdefs.Redirector:void createStreams()",
            "org.apache.tools.ant.util.Watchdog:void start()"
        ]
    },
    "org.apache.tools.ant.taskdefs.JikesOutputParser:void parseOutput(java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.JikesOutputParser:void start()"
        ]
    },
    "org.apache.tools.ant.taskdefs.JikesOutputParser:void parseEmacsOutput(java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.JikesOutputParser:void parseOutput(java.io.BufferedReader)"
        ]
    },
    "org.apache.tools.ant.util.LineOrientedOutputStream:void processBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.LogOutputStream:void processBuffer()",
            "org.apache.tools.ant.util.LineOrientedOutputStream:void write(int)",
            "org.apache.tools.ant.util.LineOrientedOutputStream:void flush()",
            "org.apache.tools.ant.util.LineOrientedOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod:java.io.OutputStream compress(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod:java.io.OutputStream access$000(org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod,java.io.OutputStream)"
        ]
    },
    "org.apache.tools.ant.types.resources.BZip2Resource:java.io.OutputStream wrapStream(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.CompressedResource:java.io.OutputStream getOutputStream()"
        ]
    },
    "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod:java.io.OutputStream compress(java.io.OutputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.OutputStream wrapStream(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(int)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(int)",
            "org.apache.tools.ant.util.UUEncoder:void encodeLine(byte[],int,int,java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsFinishedWithStream()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsW(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues4()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues5(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues6(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues7(int)"
        ]
    },
    "org.apache.tools.ant.util.TeeOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod:java.io.OutputStream compress(java.io.OutputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.OutputStream wrapStream(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(int)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(int)",
            "org.apache.tools.ant.util.UUEncoder:void encodeLine(byte[],int,int,java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsFinishedWithStream()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsW(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues4()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues5(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues6(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues7(int)"
        ]
    },
    "org.apache.tools.ant.util.UUEncoder:void encodeLine(byte[],int,int,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.UUEncoder:void encode(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void bsFinishedWithStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void endCompression()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void bsW(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void endBlock()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsPutUByte(int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsPutInt(int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues4()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues5(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void moveToFrontCodeAndSend()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues4()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues5(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues6(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues7(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:void handleFlush(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void demuxFlush(java.lang.String,boolean)",
            "org.apache.tools.ant.UnknownElement:void handleFlush(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Delete:void handle(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Delete:void execute()",
            "org.apache.tools.ant.taskdefs.Delete:void removeDir(java.io.File)",
            "org.apache.tools.ant.taskdefs.Delete:void removeFiles(java.io.File,java.lang.String[],java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:void stdout(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.RedirectingOutputStream:void processLine(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader$ResourceEnumeration:void <init>(org.apache.tools.ant.AntClassLoader,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.AntClassLoader:java.util.Enumeration findResources(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.AntClassLoader$ResourceEnumeration:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ReplaceTokens:void initialize()",
            "org.apache.tools.ant.filters.TokenFilter:int read()",
            "org.apache.tools.ant.input.DefaultInputHandler:java.lang.String getPrompt(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.taskdefs.compilers.AptCompilerAdapter:void setAptCommandlineSwitches(org.apache.tools.ant.taskdefs.Apt,org.apache.tools.ant.types.Commandline)",
            "org.apache.tools.ant.taskdefs.condition.And:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.IsSigned:boolean isSigned(java.io.File,java.lang.String)",
            "org.apache.tools.ant.taskdefs.condition.Not:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Or:boolean eval()",
            "org.apache.tools.ant.taskdefs.condition.Xor:boolean eval()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogParser:org.apache.tools.ant.taskdefs.cvslib.CVSEntry[] getEntrySetAsArray()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogWriter:void printEntry(org.w3c.dom.Document,java.io.PrintWriter,org.apache.tools.ant.taskdefs.cvslib.CVSEntry)",
            "org.apache.tools.ant.taskdefs.email.PlainMailer:void send()",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:void setCommonOptions(org.apache.tools.ant.taskdefs.ExecTask)",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:org.apache.tools.ant.types.Path createUnifiedSourcePath()",
            "org.apache.tools.ant.taskdefs.Ant:void initializeProject()",
            "org.apache.tools.ant.taskdefs.Ant:void execute()",
            "org.apache.tools.ant.taskdefs.Ant:void overrideProperties()",
            "org.apache.tools.ant.taskdefs.Ant:void addReferences()",
            "org.apache.tools.ant.taskdefs.Ant:void addAlmostAll(java.util.Hashtable)",
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printHead(java.io.PrintWriter,java.util.Enumeration,java.util.Enumeration)",
            "org.apache.tools.ant.taskdefs.AntStructure$DTDPrinter:void printElementDecl(java.io.PrintWriter,org.apache.tools.ant.Project,java.lang.String,java.lang.Class)",
            "org.apache.tools.ant.taskdefs.AntStructure:void execute()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean generateChecksums()",
            "org.apache.tools.ant.taskdefs.ConditionTask:void execute()",
            "org.apache.tools.ant.taskdefs.Copy:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Copy:void doResourceOperations(java.util.Map)",
            "org.apache.tools.ant.taskdefs.Copydir:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:void execute()",
            "org.apache.tools.ant.taskdefs.Definer:void loadProperties(java.lang.ClassLoader,java.net.URL)",
            "org.apache.tools.ant.taskdefs.ExecTask:java.lang.String resolveExecutable(java.lang.String,boolean)",
            "org.apache.tools.ant.taskdefs.Exit$NestedCondition:boolean eval()",
            "org.apache.tools.ant.taskdefs.Expand:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Jar:org.apache.tools.ant.taskdefs.Manifest getManifestFromJar(java.io.File)",
            "org.apache.tools.ant.taskdefs.Jar:void writeManifest(org.apache.tools.zip.ZipOutputStream,org.apache.tools.ant.taskdefs.Manifest)",
            "org.apache.tools.ant.taskdefs.Jar:void grabFilesAndDirs(java.lang.String,java.util.List,java.util.List)",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.MacroInstance:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.taskdefs.Manifest$Attribute:java.lang.String getValue()",
            "org.apache.tools.ant.taskdefs.Manifest$Attribute:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void merge(org.apache.tools.ant.taskdefs.Manifest$Section)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.String addAttributeAndCheck(org.apache.tools.ant.taskdefs.Manifest$Attribute)",
            "org.apache.tools.ant.taskdefs.Manifest$Section:java.lang.Object clone()",
            "org.apache.tools.ant.taskdefs.Manifest:void merge(org.apache.tools.ant.taskdefs.Manifest,boolean)",
            "org.apache.tools.ant.taskdefs.Manifest:void write(java.io.PrintWriter)",
            "org.apache.tools.ant.taskdefs.Manifest:java.util.Enumeration getWarnings()",
            "org.apache.tools.ant.taskdefs.ManifestTask:void execute()",
            "org.apache.tools.ant.taskdefs.Move:void doFileOperations()",
            "org.apache.tools.ant.taskdefs.Move:void copyFile(java.io.File,java.io.File,boolean,boolean)",
            "org.apache.tools.ant.taskdefs.Parallel:void spinThreads()",
            "org.apache.tools.ant.taskdefs.ProcessDestroyer:void run()",
            "org.apache.tools.ant.taskdefs.Property:void loadEnvironment(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Property:void addProperties(java.util.Properties)",
            "org.apache.tools.ant.taskdefs.Property:void resolveAllProperties(java.util.Properties)",
            "org.apache.tools.ant.taskdefs.Property:void resolve(java.util.Properties,java.lang.String,java.util.Stack)",
            "org.apache.tools.ant.taskdefs.Replace:void execute()",
            "org.apache.tools.ant.taskdefs.SQLExec:void execute()",
            "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.taskdefs.Ant createAntTask(java.io.File)",
            "org.apache.tools.ant.taskdefs.Tar:void execute()",
            "org.apache.tools.ant.taskdefs.Tstamp:void execute()",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.WaitFor:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void configureLiaison(org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.taskdefs.Zip:void cleanUp()",
            "org.apache.tools.ant.types.selectors.modifiedselector.PropertiesfileCache:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.AbstractSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.AndSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:java.lang.String toString()",
            "org.apache.tools.ant.types.selectors.BaseSelectorContainer:void validate()",
            "org.apache.tools.ant.types.selectors.MajoritySelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.NoneSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.OrSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.selectors.SelectSelector:boolean isSelected(java.io.File,java.lang.String,java.io.File)",
            "org.apache.tools.ant.types.AbstractFileSet:boolean hasPatterns()",
            "org.apache.tools.ant.types.AbstractFileSet:java.lang.Object clone()",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:void addDefinitionsToList(java.util.ListIterator)",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:void setSystem()",
            "org.apache.tools.ant.types.CommandlineJava$SysProperties:java.util.Properties mergePropertySets()",
            "org.apache.tools.ant.types.FilterSet:java.util.Hashtable getFilterHash()",
            "org.apache.tools.ant.types.FilterSet:void readFiltersFromFile(java.io.File)",
            "org.apache.tools.ant.types.FilterSet:void addConfiguredFilterSet(org.apache.tools.ant.types.FilterSet)",
            "org.apache.tools.ant.types.FilterSetCollection:java.lang.String replaceTokens(java.lang.String)",
            "org.apache.tools.ant.types.FilterSetCollection:boolean hasFilters()",
            "org.apache.tools.ant.types.PatternSet:java.lang.String[] makeArray(java.util.Vector,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PatternSet:void readFiles(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.PropertySet$1:java.lang.Object next()",
            "org.apache.tools.ant.types.PropertySet:java.util.Hashtable getAllSystemProperties()",
            "org.apache.tools.ant.types.PropertySet:java.util.Properties getProperties()",
            "org.apache.tools.ant.types.PropertySet:void addPropertyNames(java.util.Set,java.util.Hashtable)",
            "org.apache.tools.ant.types.XMLCatalog:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.ResourceLocation findMatchingEntry(java.lang.String)",
            "org.apache.tools.ant.types.ZipScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.facade.FacadeTaskHelper:java.lang.String[] getArgs()",
            "org.apache.tools.ant.util.CollectionUtils$2:java.lang.Object next()",
            "org.apache.tools.ant.util.CollectionUtils$CompoundEnumeration:java.lang.Object nextElement()",
            "org.apache.tools.ant.util.CollectionUtils:boolean equals(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.CollectionUtils:void putAll(java.util.Dictionary,java.util.Dictionary)",
            "org.apache.tools.ant.util.Watchdog:void fireTimeoutOccured()",
            "org.apache.tools.ant.AntClassLoader:java.lang.String getClasspath()",
            "org.apache.tools.ant.AntClassLoader:java.io.InputStream loadResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:boolean isParentFirst(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:java.net.URL getResource(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:boolean isInPath(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)",
            "org.apache.tools.ant.AntClassLoader:void cleanup()",
            "org.apache.tools.ant.AntClassLoader:void addJavaLibraries()",
            "org.apache.tools.ant.ComponentHelper:void initTasks()",
            "org.apache.tools.ant.ComponentHelper:void initTypes()",
            "org.apache.tools.ant.Diagnostics:void doReportSystemProperties(java.io.PrintStream)",
            "org.apache.tools.ant.Diagnostics:void doReportTasksAvailability(java.io.PrintStream)",
            "org.apache.tools.ant.Main:void startAnt(java.lang.String[],java.util.Properties,java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void processArgs(java.lang.String[])",
            "org.apache.tools.ant.Main:void runBuild(java.lang.ClassLoader)",
            "org.apache.tools.ant.Main:void printTargets(org.apache.tools.ant.Project,boolean)",
            "org.apache.tools.ant.Project:void setSystemProperties()",
            "org.apache.tools.ant.Project:void executeSortedTargets(java.util.Vector)",
            "org.apache.tools.ant.Project:java.util.Vector topoSort(java.lang.String[],java.util.Hashtable,boolean)",
            "org.apache.tools.ant.Project:void tsort(java.lang.String,java.util.Hashtable,java.util.Hashtable,java.util.Stack,java.util.Vector)",
            "org.apache.tools.ant.PropertyHelper:java.lang.String replaceProperties(java.lang.String,java.lang.String,java.util.Hashtable)",
            "org.apache.tools.ant.PropertyHelper:void copyInheritedProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.PropertyHelper:void copyUserProperties(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Task:void replaceChildren(org.apache.tools.ant.RuntimeConfigurable,org.apache.tools.ant.UnknownElement)",
            "org.apache.tools.ant.UnknownElement:org.apache.tools.ant.UnknownElement copy(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.XmlLogger:org.apache.tools.ant.XmlLogger$TimedElement getTaskElement(org.apache.tools.ant.Task)",
            "org.apache.tools.mail.MailMessage:java.lang.String vectorToList(java.util.Vector)",
            "org.apache.tools.zip.ZipFile:void resolveLocalFileHeaderData()"
        ]
    },
    "org.apache.tools.ant.DirectoryScanner:java.io.File findFile(java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DirectoryScanner:void checkIncludePatterns()"
        ]
    },
    "org.apache.tools.ant.helper.ProjectHelperImpl$DataTypeHandler:void startElement(java.lang.String,org.xml.sax.AttributeList)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.zip.ZipOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()",
            "org.apache.tools.ant.taskdefs.Jar:boolean createEmptyZip(java.io.File)",
            "org.apache.tools.ant.taskdefs.LogStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void setProcessInputStream(java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler:void close()",
            "org.apache.tools.ant.util.TeeOutputStream:void close()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()",
            "org.apache.tools.tar.TarOutputStream:void close()",
            "org.apache.tools.zip.ZipOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveFileSet:void setSrc(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void executeMain()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ear:void addArchives(org.apache.tools.ant.types.ZipFileSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Jar:void addMetainf(org.apache.tools.ant.types.ZipFileSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.War:void addLib(org.apache.tools.ant.types.ZipFileSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.War:void addClasses(org.apache.tools.ant.types.ZipFileSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.War:void addWebinf(org.apache.tools.ant.types.ZipFileSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.ArchiveFileSet:void configureFileSet(org.apache.tools.ant.types.ArchiveFileSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.TarFileSet:void configureFileSet(org.apache.tools.ant.types.ArchiveFileSet)",
            "org.apache.tools.ant.types.ZipFileSet:org.apache.tools.ant.types.AbstractFileSet getRef(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Ear:void setAppxml(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.War:void setWebxml(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Tar$TarFileSet:void setMode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.TarFileSet:void configureFileSet(org.apache.tools.ant.types.ArchiveFileSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.TarFileSet:org.apache.tools.ant.types.AbstractFileSet getRef(org.apache.tools.ant.Project)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Redirector:void access$200(org.apache.tools.ant.taskdefs.Redirector,java.io.ByteArrayOutputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Redirector$PropertyOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tstamp:void access$000(org.apache.tools.ant.taskdefs.Tstamp,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tstamp$CustomFormat:void execute(org.apache.tools.ant.Project,java.util.Date,org.apache.tools.ant.Location)"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:int execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.LogStreamHandler:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:int execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.PumpStreamHandler:void setProcessInputStream(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:int execute()"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void close(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.Javac12:boolean execute()",
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void writeChangeLog(org.apache.tools.ant.taskdefs.cvslib.CVSEntry[])",
            "org.apache.tools.ant.taskdefs.AbstractCvsTask:void execute()",
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.BZip2:void pack()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean generateChecksums()",
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.EchoXML:void execute()",
            "org.apache.tools.ant.taskdefs.Execute:void closeStreams(java.lang.Process)",
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.GUnzip:void extract()",
            "org.apache.tools.ant.taskdefs.GZip:void pack()",
            "org.apache.tools.ant.taskdefs.Get:boolean doGet(int,org.apache.tools.ant.taskdefs.Get$DownloadProgress)",
            "org.apache.tools.ant.taskdefs.Tar:void execute()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.Diagnostics:void doReportTempDir(java.io.PrintStream)",
            "org.apache.tools.ant.Main:void handleLogfile()"
        ]
    },
    "org.apache.tools.ant.util.OutputStreamFunneler:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.OutputStreamFunneler:void release(org.apache.tools.ant.util.OutputStreamFunneler$Funnel)"
        ]
    },
    "org.apache.tools.ant.util.TeeOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()",
            "org.apache.tools.ant.taskdefs.LogStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void setProcessInputStream(java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler:void close()",
            "org.apache.tools.ant.util.TeeOutputStream:void close()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()",
            "org.apache.tools.tar.TarOutputStream:void close()",
            "org.apache.tools.zip.ZipOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.DemuxOutputStream:void resetBufferInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DemuxOutputStream:void processBuffer(java.io.ByteArrayOutputStream)",
            "org.apache.tools.ant.DemuxOutputStream:void processFlush(java.io.ByteArrayOutputStream)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()",
            "org.apache.tools.ant.taskdefs.LogStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void setProcessInputStream(java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler:void close()",
            "org.apache.tools.ant.util.TeeOutputStream:void close()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void finalize()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()",
            "org.apache.tools.tar.TarOutputStream:void close()",
            "org.apache.tools.zip.ZipOutputStream:void close()"
        ]
    },
    "org.apache.tools.tar.TarBuffer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.tar.TarInputStream:void close()",
            "org.apache.tools.tar.TarOutputStream:void close()"
        ]
    },
    "org.apache.tools.tar.TarOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()",
            "org.apache.tools.ant.taskdefs.LogStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void setProcessInputStream(java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler:void close()",
            "org.apache.tools.ant.util.TeeOutputStream:void close()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()",
            "org.apache.tools.tar.TarOutputStream:void close()",
            "org.apache.tools.zip.ZipOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Copy:org.apache.tools.ant.util.FileNameMapper getMapper()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Copy:void scan(java.io.File,java.io.File,java.lang.String[],java.lang.String[])",
            "org.apache.tools.ant.taskdefs.Copy:java.util.Map scan(org.apache.tools.ant.types.Resource[],java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Expand:org.apache.tools.ant.util.FileNameMapper getMapper()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Expand:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Untar:void expandStream(java.lang.String,java.io.InputStream,java.io.File)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Touch:void addConfiguredMapper(org.apache.tools.ant.types.Mapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.UpToDate:org.apache.tools.ant.util.FileNameMapper getMapper()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.UpToDate:boolean eval()",
            "org.apache.tools.ant.taskdefs.UpToDate:boolean scanDir(java.io.File,java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.types.selectors.MappingSelector:void verifySettings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.BaseSelector:void verifySettings()",
            "org.apache.tools.ant.types.selectors.BaseSelector:void validate()"
        ]
    },
    "org.apache.tools.ant.types.selectors.PresentSelector:void verifySettings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.BaseSelector:void verifySettings()",
            "org.apache.tools.ant.types.selectors.BaseSelector:void validate()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef:int access$100(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef$Attribute:int hashCode()",
            "org.apache.tools.ant.taskdefs.MacroDef$TemplateElement:int hashCode()",
            "org.apache.tools.ant.taskdefs.MacroDef$Text:int hashCode()"
        ]
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:org.apache.tools.ant.types.Resource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XmlProperty:void execute()"
        ]
    },
    "org.apache.tools.ant.types.ArchiveScanner:void setSrc(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.ZipScanner getZipScanner()"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void setFileLastModified(java.io.File,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Expand:void extractFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File,java.io.InputStream,java.lang.String,java.util.Date,boolean,org.apache.tools.ant.util.FileNameMapper)",
            "org.apache.tools.ant.taskdefs.FixCRLF:void processFile(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Get:boolean doGet(int,org.apache.tools.ant.taskdefs.Get$DownloadProgress)",
            "org.apache.tools.ant.taskdefs.Touch:void touch(java.io.File,long)",
            "org.apache.tools.ant.Project:void setFileLastModified(java.io.File,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.StringResource:void setName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.StringResource:void setValue(java.lang.String)",
            "org.apache.tools.ant.types.Resource:void <init>(java.lang.String,boolean,long,boolean,long)"
        ]
    },
    "org.apache.tools.ant.types.resources.StringResource:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.StringResource:java.io.OutputStream getOutputStream()",
            "org.apache.tools.ant.types.resources.StringResource:java.lang.String getContent()"
        ]
    },
    "org.apache.tools.ant.types.TarFileSet:void setRefid(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.DataType:java.lang.Object clone()"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:void addEntity(org.apache.tools.ant.types.ResourceLocation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.CommandlineJava:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.DependSet$Xest:void <init>(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.resources.comparators.ResourceComparator,org.apache.tools.ant.taskdefs.DependSet$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet$Newest:void <init>(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.DependSet$Oldest:void <init>(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Checksum$FileUnion:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Checksum:void add(org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet$NonExistent:void <init>(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet$NonExistent:void <init>(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.taskdefs.DependSet$1)"
        ]
    },
    "org.apache.tools.ant.types.Path:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Path getCompileClasspath()",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Commandline setupJavacCommandlineSwitches(org.apache.tools.ant.types.Commandline,boolean)",
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Path getBootClassPath()",
            "org.apache.tools.ant.taskdefs.compilers.Gcj:org.apache.tools.ant.types.Commandline setupGCJCommand()",
            "org.apache.tools.ant.taskdefs.compilers.Jikes:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Jvc:boolean execute()",
            "org.apache.tools.ant.taskdefs.compilers.Kjc:org.apache.tools.ant.types.Commandline setupKjcCommand()",
            "org.apache.tools.ant.taskdefs.condition.HasMethod:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.email.EmailTask:org.apache.tools.ant.types.Path createAttachments()",
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Path getCompileClasspath()",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:org.apache.tools.ant.types.Path createPath()",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:org.apache.tools.ant.types.Path createUnifiedSourcePath()",
            "org.apache.tools.ant.taskdefs.Apt:org.apache.tools.ant.types.Path createFactoryPath()",
            "org.apache.tools.ant.taskdefs.Available:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Available:org.apache.tools.ant.types.Path createFilepath()",
            "org.apache.tools.ant.taskdefs.Classloader:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.Path createPath()",
            "org.apache.tools.ant.taskdefs.CopyPath:org.apache.tools.ant.types.Path createPath()",
            "org.apache.tools.ant.taskdefs.DependSet:org.apache.tools.ant.types.Path createTargets()",
            "org.apache.tools.ant.taskdefs.ExecTask:java.lang.String resolveExecutable(java.lang.String,boolean)",
            "org.apache.tools.ant.taskdefs.JDBCTask:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Jar:void addConfiguredIndexJars(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createSrc()",
            "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createSourcepath()",
            "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createBootclasspath()",
            "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createExtdirs()",
            "org.apache.tools.ant.taskdefs.Javadoc$ExtensionInfo:org.apache.tools.ant.types.Path createPath()",
            "org.apache.tools.ant.taskdefs.Javadoc:org.apache.tools.ant.types.Path createSourcepath()",
            "org.apache.tools.ant.taskdefs.Javadoc:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Javadoc:org.apache.tools.ant.types.Path createBootclasspath()",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.PathConvert:org.apache.tools.ant.types.Path createPath()",
            "org.apache.tools.ant.taskdefs.Property:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Rmic:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Rmic:org.apache.tools.ant.types.Path createExtdirs()",
            "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.types.Path getBuildpath()",
            "org.apache.tools.ant.taskdefs.WhichResource:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.WhichResource:void execute()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.Object processNode(org.w3c.dom.Node,java.lang.String,java.lang.Object)",
            "org.apache.tools.ant.types.resources.JavaResource:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.types.selectors.ExtendSelector:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.types.AntFilterReader:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.types.Commandline$Argument:void setPathref(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.types.CommandlineJava:org.apache.tools.ant.types.Path createClasspath(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.CommandlineJava:org.apache.tools.ant.types.Path createBootclasspath(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.CommandlineJava:org.apache.tools.ant.types.Path calculateBootclasspath(boolean)",
            "org.apache.tools.ant.types.Mapper:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.types.Path$PathElement:void setLocation(java.io.File)",
            "org.apache.tools.ant.types.Path$PathElement:void setPath(java.lang.String)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path createPath()",
            "org.apache.tools.ant.types.Path:void addExisting(org.apache.tools.ant.types.Path,boolean)",
            "org.apache.tools.ant.types.Path:java.lang.String[] translatePath(org.apache.tools.ant.Project,java.lang.String)",
            "org.apache.tools.ant.types.Path:java.lang.String translateFile(java.lang.String)",
            "org.apache.tools.ant.types.Path:void dieOnCircularReference(java.util.Stack,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSystemClasspath(java.lang.String)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSystemBootClasspath(java.lang.String)",
            "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path concatSpecialPath(java.lang.String,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.types.Path:void addJavaRuntime()",
            "org.apache.tools.ant.types.Path:void addExtdirs(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.types.Path:java.util.Iterator iterator()",
            "org.apache.tools.ant.types.Path:void <clinit>()",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.Path createCatalogPath()",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.XMLCatalog$CatalogResolver getCatalogResolver()",
            "org.apache.tools.ant.types.XMLCatalog:org.xml.sax.InputSource classpathLookup(org.apache.tools.ant.types.ResourceLocation)",
            "org.apache.tools.ant.util.ClasspathUtils$Delegate:org.apache.tools.ant.types.Path createClasspath()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef$MyAntTypeDefinition:java.lang.Object create(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:java.lang.Object createObject(org.apache.tools.ant.Project)",
            "org.apache.tools.ant.ComponentHelper$AntTypeTable:java.lang.Object create(java.lang.String)",
            "org.apache.tools.ant.ComponentHelper:java.lang.Object createComponent(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.taskdefs.PreSetDef$PreSetDefinition:java.lang.Object createObject(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.IntrospectionHelper$AddNestedCreator:java.lang.Object create(org.apache.tools.ant.Project,java.lang.Object,java.lang.Object)",
            "org.apache.tools.ant.IntrospectionHelper:org.apache.tools.ant.IntrospectionHelper$NestedCreator createAddTypeCreator(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)",
            "org.apache.tools.ant.UnknownElement:java.lang.Object makeObject(org.apache.tools.ant.UnknownElement,org.apache.tools.ant.RuntimeConfigurable)"
        ]
    },
    "org.apache.tools.ant.ComponentHelper$AntTypeTable:java.lang.Object create(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.filters.ConcatFilter:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ConcatFilter:int read()"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.ChangeLogTask:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Available:void setFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.BuildNumber:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BuildNumber:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:void setupWorkingDir(org.apache.tools.ant.taskdefs.Execute)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:void setupExecutable(org.apache.tools.ant.taskdefs.Execute,java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.taskdefs.XmlProperty:java.io.File resolveFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.Object processNode(org.w3c.dom.Node,java.lang.String,java.lang.Object)",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.String getAttributeValue(org.w3c.dom.Node)"
        ]
    },
    "org.apache.tools.ant.types.Path:java.io.File resolveFile(org.apache.tools.ant.Project,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Path:void addExisting(org.apache.tools.ant.types.Path,boolean)",
            "org.apache.tools.ant.types.Path:java.lang.String[] translatePath(org.apache.tools.ant.Project,java.lang.String)",
            "org.apache.tools.ant.types.Path:void addExtdirs(org.apache.tools.ant.types.Path)"
        ]
    },
    "org.apache.tools.ant.Project:org.apache.tools.ant.types.Resource getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ResourceUtils:org.apache.tools.ant.types.ResourceCollection selectOutOfDateSources(org.apache.tools.ant.ProjectComponent,org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.util.FileNameMapper,org.apache.tools.ant.types.ResourceFactory,long)"
        ]
    },
    "org.apache.tools.ant.DemuxOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(byte[],int,int)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(byte[],int,int)",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.tar.TarInputStream:void copyEntryContents(java.io.OutputStream)",
            "org.apache.tools.zip.ZipOutputStream:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.tools.tar.TarBuffer:void writeRecord(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.tar.TarOutputStream:void putNextEntry(org.apache.tools.tar.TarEntry)",
            "org.apache.tools.tar.TarOutputStream:void closeEntry()",
            "org.apache.tools.tar.TarOutputStream:void write(byte[],int,int)",
            "org.apache.tools.tar.TarOutputStream:void writeEOFRecord()"
        ]
    },
    "org.apache.tools.tar.TarBuffer:void writeRecord(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.tar.TarOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.tools.tar.TarBuffer:void flushBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.tar.TarBuffer:void close()"
        ]
    },
    "org.apache.tools.ant.taskdefs.JikesOutputParser:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:int execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.LogOutputStream:void processBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.LineOrientedOutputStream:void write(int)",
            "org.apache.tools.ant.util.LineOrientedOutputStream:void flush()",
            "org.apache.tools.ant.util.LineOrientedOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.util.LineOrientedOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod:java.io.OutputStream compress(java.io.OutputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.OutputStream wrapStream(java.io.OutputStream)",
            "org.apache.tools.ant.util.LineOrientedOutputStream:void write(byte[],int,int)",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(int)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(int)",
            "org.apache.tools.ant.util.UUEncoder:void encodeLine(byte[],int,int,java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsFinishedWithStream()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsW(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues4()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues5(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues6(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues7(int)"
        ]
    },
    "org.apache.tools.ant.util.LineOrientedOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:void cat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void flush()",
            "org.apache.tools.ant.util.TeeOutputStream:void flush()",
            "org.apache.tools.ant.util.UUEncoder:void encode(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void flush()",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.zip.ZipOutputStream:void flush()"
        ]
    },
    "org.apache.tools.ant.util.LineOrientedOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.rmic.SunRmic:boolean execute()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()",
            "org.apache.tools.ant.taskdefs.Javadoc:void execute()",
            "org.apache.tools.ant.taskdefs.LogStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void setProcessInputStream(java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler:void close()",
            "org.apache.tools.ant.util.TeeOutputStream:void close()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()",
            "org.apache.tools.tar.TarOutputStream:void close()",
            "org.apache.tools.zip.ZipOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod:java.io.OutputStream access$000(org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void execute()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void endCompression()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void endBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void writeRun()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void bsPutUByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void init()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void endBlock()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void endCompression()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void bsPutInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void endBlock()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void endCompression()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void moveToFrontCodeAndSend()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void endBlock()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void moveToFrontCodeAndSend()"
        ]
    },
    "org.apache.tools.ant.taskdefs.cvslib.RedirectingOutputStream:void processLine(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.LineOrientedOutputStream:void processBuffer()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Redirector$PropertyOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()",
            "org.apache.tools.ant.taskdefs.LogStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void setProcessInputStream(java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.Redirector:void setProperties()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler:void close()",
            "org.apache.tools.ant.util.TeeOutputStream:void close()",
            "org.apache.tools.ant.DemuxOutputStream:void resetBufferInfo()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()",
            "org.apache.tools.tar.TarOutputStream:void close()",
            "org.apache.tools.zip.ZipOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Tstamp$CustomFormat:void execute(org.apache.tools.ant.Project,java.util.Date,org.apache.tools.ant.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tstamp:void execute()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Execute:void closeStreams(java.lang.Process)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Execute:int execute()"
        ]
    },
    "org.apache.tools.ant.Diagnostics:void doReportTempDir(java.io.PrintStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Diagnostics:void doReport(java.io.PrintStream)"
        ]
    },
    "org.apache.tools.ant.Main:void handleLogfile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Main:void startAnt(java.lang.String[],java.util.Properties,java.lang.ClassLoader)"
        ]
    },
    "org.apache.tools.ant.util.OutputStreamFunneler:void release(org.apache.tools.ant.util.OutputStreamFunneler$Funnel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.OutputStreamFunneler:void access$300(org.apache.tools.ant.util.OutputStreamFunneler,org.apache.tools.ant.util.OutputStreamFunneler$Funnel)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void finalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void <init>(java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void <init>(java.io.OutputStream,int)"
        ]
    },
    "org.apache.tools.tar.TarInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.AnsiColorLogger:void setColors()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Property:void loadUrl(java.net.URL)",
            "org.apache.tools.ant.taskdefs.Property:void loadResource(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.types.TarScanner:void fillMapsFromArchive(org.apache.tools.ant.types.Resource,java.lang.String,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.InputStream)",
            "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)",
            "org.apache.tools.ant.Main:java.lang.String getAntVersion()",
            "org.apache.tools.bzip2.CBZip2InputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef$Attribute:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.Resource:int hashCode()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef$TemplateElement:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.Resource:int hashCode()"
        ]
    },
    "org.apache.tools.ant.taskdefs.MacroDef$Text:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.MacroDef:int objectHashCode(java.lang.Object)",
            "org.apache.tools.ant.types.resources.comparators.DelegatedResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.comparators.ResourceComparator:int hashCode()",
            "org.apache.tools.ant.types.resources.FileResource:int hashCode()",
            "org.apache.tools.ant.types.resources.PropertyResource:int hashCode()",
            "org.apache.tools.ant.types.resources.StringResource:int hashCode()",
            "org.apache.tools.ant.types.resources.URLResource:int hashCode()",
            "org.apache.tools.ant.types.Resource:int hashCode()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.types.ZipScanner getZipScanner()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getResourcesToAdd(org.apache.tools.ant.types.FileSet[],java.io.File,boolean)",
            "org.apache.tools.ant.taskdefs.Zip:org.apache.tools.ant.taskdefs.Zip$ArchiveState getNonFileSetResourcesToAdd(org.apache.tools.ant.types.ResourceCollection[],java.io.File,boolean)"
        ]
    },
    "org.apache.tools.ant.types.resources.StringResource:void setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.ResourceCollection validate()",
            "org.apache.tools.ant.types.resources.StringResource$1:void close()",
            "org.apache.tools.ant.types.resources.StringResource:void <init>(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.Resource:void <init>(java.lang.String,boolean,long,boolean,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Resource:void <init>(java.lang.String,boolean,long,boolean)"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet$Newest:void <init>(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet$Newest:void <init>(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.taskdefs.DependSet$1)"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet$Oldest:void <init>(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet$Oldest:void <init>(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.taskdefs.DependSet$1)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Checksum:void add(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Checksum:void addFileset(org.apache.tools.ant.types.FileSet)"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet$NonExistent:void <init>(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.taskdefs.DependSet$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.condition.HasMethod:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.HasMethod:void setClasspath(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.condition.HasMethod:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.email.EmailTask:org.apache.tools.ant.types.Path createAttachments()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.email.EmailTask:void setFiles(java.lang.String)",
            "org.apache.tools.ant.taskdefs.email.EmailTask:void addFileset(org.apache.tools.ant.types.FileSet)"
        ]
    },
    "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:org.apache.tools.ant.types.Path createPath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Apt:org.apache.tools.ant.types.Path createFactoryPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Apt:void setFactoryPathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Available:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Available:void setClasspath(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.Available:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Available:org.apache.tools.ant.types.Path createFilepath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Available:void setFilepath(org.apache.tools.ant.types.Path)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Classloader:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Concat:org.apache.tools.ant.types.Path createPath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.CopyPath:org.apache.tools.ant.types.Path createPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.CopyPath:void setPath(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.CopyPath:void setPathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet:org.apache.tools.ant.types.Path createTargets()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet:void addTargetfileset(org.apache.tools.ant.types.FileSet)",
            "org.apache.tools.ant.taskdefs.DependSet:void addTargetfilelist(org.apache.tools.ant.types.FileList)"
        ]
    },
    "org.apache.tools.ant.taskdefs.JDBCTask:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.JDBCTask:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Jar:void addConfiguredIndexJars(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createSrc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path recreateSrc()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createSourcepath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void setSourcepathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createBootclasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javac:void setBootClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createExtdirs()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javadoc$ExtensionInfo:org.apache.tools.ant.types.Path createPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc$ExtensionInfo:void setPathRef(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.taskdefs.Javadoc:void setDocletPathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc:org.apache.tools.ant.types.Path createSourcepath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc:void setSourcepathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Javadoc:org.apache.tools.ant.types.Path createBootclasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc:void setBootClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.PathConvert:org.apache.tools.ant.types.Path createPath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Property:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Property:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Rmic:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Rmic:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Rmic:org.apache.tools.ant.types.Path createExtdirs()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.types.Path getBuildpath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SubAnt:void add(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.SubAnt:void setBuildpath(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.types.Path createBuildpath()",
            "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.types.Path$PathElement createBuildpathElement()"
        ]
    },
    "org.apache.tools.ant.taskdefs.WhichResource:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.XSLTProcess:void setClasspath(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.XSLTProcess:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.types.resources.JavaResource:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.LoadProperties:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.types.resources.JavaResource:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.types.selectors.ExtendSelector:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.selectors.ExtendSelector:void setClasspathref(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.types.AntFilterReader:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.AntFilterReader:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava:org.apache.tools.ant.types.Path createClasspath(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteJava:int fork(org.apache.tools.ant.ProjectComponent)",
            "org.apache.tools.ant.taskdefs.Java:org.apache.tools.ant.types.Path createClasspath()"
        ]
    },
    "org.apache.tools.ant.types.CommandlineJava:org.apache.tools.ant.types.Path createBootclasspath(org.apache.tools.ant.Project)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:org.apache.tools.ant.types.Path createBootclasspath()"
        ]
    },
    "org.apache.tools.ant.types.Mapper:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Mapper:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.types.Path$PathElement:void setLocation(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Javadoc:void parsePackages(java.util.Vector,org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.types.Path:void setLocation(java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.Path:org.apache.tools.ant.types.Path createPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.condition.HasMethod:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.email.EmailTask:org.apache.tools.ant.types.Path createAttachments()",
            "org.apache.tools.ant.taskdefs.AbstractJarSignerTask:org.apache.tools.ant.types.Path createPath()",
            "org.apache.tools.ant.taskdefs.Apt:org.apache.tools.ant.types.Path createFactoryPath()",
            "org.apache.tools.ant.taskdefs.Available:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Available:org.apache.tools.ant.types.Path createFilepath()",
            "org.apache.tools.ant.taskdefs.Classloader:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.JDBCTask:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Java:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Java:org.apache.tools.ant.types.Path createBootclasspath()",
            "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createSrc()",
            "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createSourcepath()",
            "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createBootclasspath()",
            "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path createExtdirs()",
            "org.apache.tools.ant.taskdefs.Javadoc$ExtensionInfo:org.apache.tools.ant.types.Path createPath()",
            "org.apache.tools.ant.taskdefs.Javadoc:org.apache.tools.ant.types.Path createSourcepath()",
            "org.apache.tools.ant.taskdefs.Javadoc:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Javadoc:org.apache.tools.ant.types.Path createBootclasspath()",
            "org.apache.tools.ant.taskdefs.Property:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Rmic:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.Rmic:org.apache.tools.ant.types.Path createExtdirs()",
            "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.types.Path createBuildpath()",
            "org.apache.tools.ant.taskdefs.WhichResource:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.taskdefs.XSLTProcess:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.types.resources.JavaResource:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.types.selectors.ExtendSelector:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.types.AntFilterReader:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.types.Mapper:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.Path createCatalogPath()",
            "org.apache.tools.ant.util.ClasspathUtils$Delegate:org.apache.tools.ant.types.Path createClasspath()"
        ]
    },
    "org.apache.tools.ant.types.Path:java.lang.String translateFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.Path$PathElement:void setLocation(java.io.File)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:void setClasspathRef(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.types.XMLCatalog:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:org.apache.tools.ant.types.Path createCatalogPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.XMLCatalog:void setCatalogPathRef(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.types.XMLCatalog:void addConfiguredXMLCatalog(org.apache.tools.ant.types.XMLCatalog)"
        ]
    },
    "org.apache.tools.ant.util.ClasspathUtils$Delegate:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DefBase:org.apache.tools.ant.types.Path createClasspath()",
            "org.apache.tools.ant.util.ClasspathUtils$Delegate:void setClasspathref(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.util.ScriptRunnerHelper:org.apache.tools.ant.types.Path createClasspath()"
        ]
    },
    "org.apache.tools.ant.IntrospectionHelper$AddNestedCreator:java.lang.Object create(org.apache.tools.ant.Project,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.IntrospectionHelper$Creator:java.lang.Object create()",
            "org.apache.tools.ant.IntrospectionHelper:java.lang.Object createElement(org.apache.tools.ant.Project,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(byte[],int,int)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(byte[],int,int)",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.tar.TarInputStream:void copyEntryContents(java.io.OutputStream)",
            "org.apache.tools.zip.ZipOutputStream:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.tools.ant.util.TeeOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(byte[],int,int)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(byte[],int,int)",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.tar.TarInputStream:void copyEntryContents(java.io.OutputStream)",
            "org.apache.tools.zip.ZipOutputStream:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.tools.zip.ZipOutputStream:void writeOut(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipOutputStream:void write(byte[],int,int)",
            "org.apache.tools.zip.ZipOutputStream:void deflate()",
            "org.apache.tools.zip.ZipOutputStream:void writeOut(byte[])"
        ]
    },
    "org.apache.tools.tar.TarOutputStream:void putNextEntry(org.apache.tools.tar.TarEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.tar.TarOutputStream:void putNextEntry(org.apache.tools.tar.TarEntry)"
        ]
    },
    "org.apache.tools.tar.TarOutputStream:void closeEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.tar.TarOutputStream:void putNextEntry(org.apache.tools.tar.TarEntry)"
        ]
    },
    "org.apache.tools.tar.TarOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(byte[],int,int)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(byte[],int,int)",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.tar.TarInputStream:void copyEntryContents(java.io.OutputStream)",
            "org.apache.tools.tar.TarOutputStream:void write(int)",
            "org.apache.tools.tar.TarOutputStream:void write(byte[])",
            "org.apache.tools.zip.ZipOutputStream:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.tools.tar.TarOutputStream:void writeEOFRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.tar.TarOutputStream:void finish()"
        ]
    },
    "org.apache.tools.ant.util.LineOrientedOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(byte[],int,int)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(byte[],int,int)",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.tar.TarInputStream:void copyEntryContents(java.io.OutputStream)",
            "org.apache.tools.zip.ZipOutputStream:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void writeRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void writeRun()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void write0(int)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void <init>(java.io.OutputStream,int)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Redirector:void setProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.ExecuteOn:void runExec(org.apache.tools.ant.taskdefs.Execute)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()"
        ]
    },
    "org.apache.tools.ant.util.OutputStreamFunneler:void access$300(org.apache.tools.ant.util.OutputStreamFunneler,org.apache.tools.ant.util.OutputStreamFunneler$Funnel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void close()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void <init>(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.BZip2:void pack()",
            "org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod:java.io.OutputStream compress(java.io.OutputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.OutputStream wrapStream(java.io.OutputStream)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void <init>(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void <init>(java.io.OutputStream)"
        ]
    },
    "org.apache.tools.ant.listener.AnsiColorLogger:void setColors()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.AnsiColorLogger:void printMessage(java.lang.String,java.io.PrintStream,int)"
        ]
    },
    "org.apache.tools.ant.util.FileUtils:void close(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ReplaceTokens:java.util.Properties getPropertiesFromFile(java.lang.String)",
            "org.apache.tools.ant.helper.ProjectHelper2:void parse(org.apache.tools.ant.Project,java.lang.Object,org.apache.tools.ant.helper.ProjectHelper2$RootHandler)",
            "org.apache.tools.ant.helper.ProjectHelperImpl:void parse(org.apache.tools.ant.Project,java.lang.Object)",
            "org.apache.tools.ant.input.GreedyInputHandler:void handleInput(org.apache.tools.ant.input.InputRequest)",
            "org.apache.tools.ant.taskdefs.BUnzip2:void extract()",
            "org.apache.tools.ant.taskdefs.Checksum:boolean generateChecksums()",
            "org.apache.tools.ant.taskdefs.Concat:void binaryCat(org.apache.tools.ant.types.ResourceCollection)",
            "org.apache.tools.ant.taskdefs.Definer:void loadProperties(java.lang.ClassLoader,java.net.URL)",
            "org.apache.tools.ant.taskdefs.Execute:void closeStreams(java.lang.Process)",
            "org.apache.tools.ant.taskdefs.GUnzip:void extract()",
            "org.apache.tools.ant.taskdefs.Get:boolean doGet(int,org.apache.tools.ant.taskdefs.Get$DownloadProgress)",
            "org.apache.tools.ant.taskdefs.LoadProperties:void execute()",
            "org.apache.tools.ant.taskdefs.LoadResource:void execute()",
            "org.apache.tools.ant.taskdefs.Manifest:org.apache.tools.ant.taskdefs.Manifest getDefaultManifest()",
            "org.apache.tools.ant.taskdefs.Replace:java.util.Properties getProperties(java.io.File)",
            "org.apache.tools.ant.taskdefs.SQLExec$Transaction:void runTransaction(java.io.PrintStream)",
            "org.apache.tools.ant.taskdefs.Tar:void tarResource(org.apache.tools.ant.types.Resource,org.apache.tools.tar.TarOutputStream,java.lang.String,org.apache.tools.ant.taskdefs.Tar$TarFileSet)",
            "org.apache.tools.ant.taskdefs.Untar:void expandFile(org.apache.tools.ant.util.FileUtils,java.io.File,java.io.File)",
            "org.apache.tools.ant.taskdefs.Untar:void expandResource(org.apache.tools.ant.types.Resource,java.io.File)",
            "org.apache.tools.ant.taskdefs.Untar:void expandStream(java.lang.String,java.io.InputStream,java.io.File)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.FileSet,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.taskdefs.Zip:void addResources(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.Resource[],org.apache.tools.zip.ZipOutputStream)",
            "org.apache.tools.ant.types.resources.CompressedResource:long getSize()",
            "org.apache.tools.ant.types.resources.JavaResource:boolean isExists()",
            "org.apache.tools.ant.types.resources.TarResource:java.io.InputStream getInputStream()",
            "org.apache.tools.ant.types.resources.TarResource:void fetchEntry()",
            "org.apache.tools.ant.types.resources.ZipResource$1:void close()",
            "org.apache.tools.ant.types.FilterSet:void readFiltersFromFile(java.io.File)",
            "org.apache.tools.ant.util.ConcatFileInputStream:void closeCurrent()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void closeCurrent()",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.ResourceUtils:int binaryCompare(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource)",
            "org.apache.tools.ant.ComponentHelper:java.util.Properties getDefaultDefinitions(boolean)",
            "org.apache.tools.ant.Main:void processArgs(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.Main:java.lang.String getAntVersion()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Diagnostics:void doReport(java.io.PrintStream)",
            "org.apache.tools.ant.Main:void printVersion()",
            "org.apache.tools.ant.Project:void initProperties()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2InputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.AnsiColorLogger:void setColors()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Property:void loadUrl(java.net.URL)",
            "org.apache.tools.ant.taskdefs.Property:void loadResource(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.InputStream)",
            "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)",
            "org.apache.tools.ant.Main:java.lang.String getAntVersion()",
            "org.apache.tools.bzip2.CBZip2InputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()"
        ]
    },
    "org.apache.tools.ant.types.resources.StringResource$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()",
            "org.apache.tools.ant.taskdefs.LogStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void setProcessInputStream(java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler:void close()",
            "org.apache.tools.ant.util.TeeOutputStream:void close()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()",
            "org.apache.tools.tar.TarOutputStream:void close()",
            "org.apache.tools.zip.ZipOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.types.resources.StringResource:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.Tokens:java.util.Collection getCollection()"
        ]
    },
    "org.apache.tools.ant.types.Resource:void <init>(java.lang.String,boolean,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.ArchiveScanner:org.apache.tools.ant.types.Resource getResource(java.lang.String)",
            "org.apache.tools.ant.types.Resource:void <init>(java.lang.String)",
            "org.apache.tools.ant.types.Resource:void <init>(java.lang.String,boolean,long)",
            "org.apache.tools.ant.util.SourceFileScanner:java.lang.String[] restrict(java.lang.String[],java.io.File,java.io.File,org.apache.tools.ant.util.FileNameMapper,long)"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet$Newest:void <init>(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.taskdefs.DependSet$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.DependSet$Oldest:void <init>(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.taskdefs.DependSet$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DependSet:boolean uptodate(org.apache.tools.ant.types.ResourceCollection,org.apache.tools.ant.types.ResourceCollection)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Checksum:void addFileset(org.apache.tools.ant.types.FileSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.condition.HasMethod:void setClasspath(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.condition.HasMethod:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.email.EmailTask:void setFiles(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.email.EmailTask:void addFileset(org.apache.tools.ant.types.FileSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Apt:void setFactoryPathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Available:void setClasspath(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Available:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Available:void setFilepath(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.CopyPath:void setPath(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.CopyPath:void setPathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.DependSet:void addTargetfileset(org.apache.tools.ant.types.FileSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.DependSet:void addTargetfilelist(org.apache.tools.ant.types.FileList)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.JDBCTask:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javac:org.apache.tools.ant.types.Path recreateSrc()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javac:void setSourcepathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javac:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javac:void setBootClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javadoc$ExtensionInfo:void setPathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javadoc:void setDocletPathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javadoc:void setSourcepathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javadoc:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Javadoc:void setBootClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Property:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Rmic:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.SubAnt:void add(org.apache.tools.ant.types.ResourceCollection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SubAnt:void addDirset(org.apache.tools.ant.types.DirSet)",
            "org.apache.tools.ant.taskdefs.SubAnt:void addFileset(org.apache.tools.ant.types.FileSet)",
            "org.apache.tools.ant.taskdefs.SubAnt:void addFilelist(org.apache.tools.ant.types.FileList)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SubAnt:void setBuildpath(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.types.Path createBuildpath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.SubAnt:void setBuildpathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.SubAnt:org.apache.tools.ant.types.Path$PathElement createBuildpathElement()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void setClasspath(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.XSLTProcess:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.LoadProperties:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.resources.JavaResource:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.LoadProperties:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.types.selectors.ExtendSelector:void setClasspathref(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.AntFilterReader:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Java:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Java:void setClasspath(org.apache.tools.ant.types.Path)",
            "org.apache.tools.ant.taskdefs.Java:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.taskdefs.Java:org.apache.tools.ant.types.Path createBootclasspath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.Mapper:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.Path:void setLocation(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:org.apache.tools.ant.types.Path getCompileClasspath()",
            "org.apache.tools.ant.taskdefs.rmic.DefaultRmicAdapter:org.apache.tools.ant.types.Path getCompileClasspath()",
            "org.apache.tools.ant.taskdefs.XmlProperty:java.lang.Object processNode(org.w3c.dom.Node,java.lang.String,java.lang.Object)",
            "org.apache.tools.ant.types.Path:void addExisting(org.apache.tools.ant.types.Path,boolean)"
        ]
    },
    "org.apache.tools.ant.types.XMLCatalog:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.types.XMLCatalog:void setCatalogPathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.DefBase:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.ClasspathUtils$Delegate:void setClasspathref(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.DefBase:void setClasspathRef(org.apache.tools.ant.types.Reference)",
            "org.apache.tools.ant.util.ScriptRunnerHelper:void setClasspathRef(org.apache.tools.ant.types.Reference)"
        ]
    },
    "org.apache.tools.ant.util.ScriptRunnerHelper:org.apache.tools.ant.types.Path createClasspath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.zip.ZipOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.taskdefs.Zip:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(byte[],int,int)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(byte[],int,int)",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.tar.TarInputStream:void copyEntryContents(java.io.OutputStream)",
            "org.apache.tools.zip.ZipOutputStream:void write(int)",
            "org.apache.tools.zip.ZipOutputStream:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.tools.zip.ZipOutputStream:void deflate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipOutputStream:void closeEntry()",
            "org.apache.tools.zip.ZipOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.tools.zip.ZipOutputStream:void writeOut(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipOutputStream:void closeEntry()",
            "org.apache.tools.zip.ZipOutputStream:void writeLocalFileHeader(org.apache.tools.zip.ZipEntry)",
            "org.apache.tools.zip.ZipOutputStream:void writeDataDescriptor(org.apache.tools.zip.ZipEntry)",
            "org.apache.tools.zip.ZipOutputStream:void writeCentralFileHeader(org.apache.tools.zip.ZipEntry)",
            "org.apache.tools.zip.ZipOutputStream:void writeCentralDirectoryEnd()"
        ]
    },
    "org.apache.tools.tar.TarOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod:java.io.OutputStream compress(java.io.OutputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.OutputStream wrapStream(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(int)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(int)",
            "org.apache.tools.ant.util.UUEncoder:void encodeLine(byte[],int,int,java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsFinishedWithStream()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsW(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues4()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues5(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues6(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues7(int)",
            "org.apache.tools.tar.TarOutputStream:void putNextEntry(org.apache.tools.tar.TarEntry)"
        ]
    },
    "org.apache.tools.tar.TarOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(byte[])",
            "org.apache.tools.ant.util.TeeOutputStream:void write(byte[])",
            "org.apache.tools.tar.TarOutputStream:void putNextEntry(org.apache.tools.tar.TarEntry)"
        ]
    },
    "org.apache.tools.tar.TarOutputStream:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.tar.TarOutputStream:void close()"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void write0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.bzip2.CBZip2OutputStream:void write(int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.cvslib.RedirectingStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.Execute:void spawn()",
            "org.apache.tools.ant.taskdefs.LogStreamHandler:void stop()",
            "org.apache.tools.ant.taskdefs.PumpStreamHandler:void setProcessInputStream(java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler:void close()",
            "org.apache.tools.ant.util.TeeOutputStream:void close()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()",
            "org.apache.tools.tar.TarOutputStream:void close()",
            "org.apache.tools.zip.ZipOutputStream:void close()"
        ]
    },
    "org.apache.tools.ant.listener.AnsiColorLogger:void printMessage(java.lang.String,java.io.PrintStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.DefaultLogger:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.DefaultLogger:void targetStarted(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.DefaultLogger:void messageLogged(org.apache.tools.ant.BuildEvent)"
        ]
    },
    "org.apache.tools.ant.filters.ReplaceTokens:java.util.Properties getPropertiesFromFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.filters.ReplaceTokens:void initialize()"
        ]
    },
    "org.apache.tools.ant.taskdefs.Replace:java.util.Properties getProperties(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Replace:void execute()"
        ]
    },
    "org.apache.tools.ant.types.resources.ZipResource$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.AnsiColorLogger:void setColors()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Property:void loadUrl(java.net.URL)",
            "org.apache.tools.ant.taskdefs.Property:void loadResource(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.types.resources.ZipResource$1:void finalize()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.InputStream)",
            "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)",
            "org.apache.tools.ant.Main:java.lang.String getAntVersion()",
            "org.apache.tools.bzip2.CBZip2InputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()"
        ]
    },
    "org.apache.tools.ant.util.ConcatFileInputStream:void closeCurrent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ConcatFileInputStream:void close()",
            "org.apache.tools.ant.util.ConcatFileInputStream:void openFile(int)"
        ]
    },
    "org.apache.tools.ant.util.ConcatResourceInputStream:void closeCurrent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.ConcatResourceInputStream:void close()",
            "org.apache.tools.ant.util.ConcatResourceInputStream:void nextResource()"
        ]
    },
    "org.apache.tools.ant.ComponentHelper:java.util.Properties getDefaultDefinitions(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.ComponentHelper:void initTasks()",
            "org.apache.tools.ant.ComponentHelper:void initTypes()"
        ]
    },
    "org.apache.tools.ant.Main:void printVersion()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Main:void processArgs(java.lang.String[])"
        ]
    },
    "org.apache.tools.ant.types.Resource:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.PropertyResource:void <init>(org.apache.tools.ant.Project,java.lang.String)",
            "org.apache.tools.ant.types.ArchiveScanner:org.apache.tools.ant.types.Resource getResource(java.lang.String)"
        ]
    },
    "org.apache.tools.ant.types.Resource:void <init>(java.lang.String,boolean,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.ArchiveScanner:void scanme()"
        ]
    },
    "org.apache.tools.ant.taskdefs.SubAnt:void addDirset(org.apache.tools.ant.types.DirSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.SubAnt:void addFileset(org.apache.tools.ant.types.FileSet)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.SubAnt:void addFilelist(org.apache.tools.ant.types.FileList)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.SubAnt:void setBuildpathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.LoadProperties:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Java:void setClasspath(org.apache.tools.ant.types.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.Java:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.taskdefs.DefBase:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.ant.util.ScriptRunnerHelper:void setClasspathRef(org.apache.tools.ant.types.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tools.zip.ZipOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod:java.io.OutputStream compress(java.io.OutputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.OutputStream wrapStream(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(int)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(int)",
            "org.apache.tools.ant.util.UUEncoder:void encodeLine(byte[],int,int,java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsFinishedWithStream()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsW(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues4()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues5(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues6(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues7(int)"
        ]
    },
    "org.apache.tools.zip.ZipOutputStream:void closeEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipOutputStream:void finish()",
            "org.apache.tools.zip.ZipOutputStream:void putNextEntry(org.apache.tools.zip.ZipEntry)"
        ]
    },
    "org.apache.tools.zip.ZipOutputStream:void writeLocalFileHeader(org.apache.tools.zip.ZipEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipOutputStream:void putNextEntry(org.apache.tools.zip.ZipEntry)"
        ]
    },
    "org.apache.tools.zip.ZipOutputStream:void writeDataDescriptor(org.apache.tools.zip.ZipEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipOutputStream:void closeEntry()"
        ]
    },
    "org.apache.tools.zip.ZipOutputStream:void writeCentralDirectoryEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.zip.ZipOutputStream:void finish()"
        ]
    },
    "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(byte[])",
            "org.apache.tools.ant.util.TeeOutputStream:void write(byte[])"
        ]
    },
    "org.apache.tools.ant.util.TeeOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(byte[])",
            "org.apache.tools.ant.util.TeeOutputStream:void write(byte[])"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Tar$TarCompressionMethod:java.io.OutputStream compress(java.io.OutputStream)",
            "org.apache.tools.ant.types.resources.BZip2Resource:java.io.OutputStream wrapStream(java.io.OutputStream)",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(int)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(int)",
            "org.apache.tools.ant.util.UUEncoder:void encodeLine(byte[],int,int,java.io.OutputStream)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsFinishedWithStream()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void bsW(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues4()",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues5(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues6(int,int)",
            "org.apache.tools.bzip2.CBZip2OutputStream:void sendMTFValues7(int)"
        ]
    },
    "org.apache.tools.bzip2.CBZip2OutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Pack:void zipFile(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.StreamPumper:void run()",
            "org.apache.tools.ant.util.OutputStreamFunneler$Funnel:void write(byte[],int,int)",
            "org.apache.tools.ant.util.ResourceUtils:void copyResource(org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.Resource,org.apache.tools.ant.types.FilterSetCollection,java.util.Vector,boolean,boolean,java.lang.String,java.lang.String,org.apache.tools.ant.Project)",
            "org.apache.tools.ant.util.TeeOutputStream:void write(byte[],int,int)",
            "org.apache.tools.tar.TarBuffer:void writeBlock()",
            "org.apache.tools.tar.TarInputStream:void copyEntryContents(java.io.OutputStream)",
            "org.apache.tools.zip.ZipOutputStream:void writeOut(byte[],int,int)"
        ]
    },
    "org.apache.tools.ant.DefaultLogger:void buildFinished(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.MailLogger:void buildFinished(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.Project:void fireBuildFinished(java.lang.Throwable)"
        ]
    },
    "org.apache.tools.ant.DefaultLogger:void targetStarted(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireTargetStarted(org.apache.tools.ant.Target)"
        ]
    },
    "org.apache.tools.ant.DefaultLogger:void messageLogged(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.NoBannerLogger:void messageLogged(org.apache.tools.ant.BuildEvent)",
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)"
        ]
    },
    "org.apache.tools.ant.types.resources.ZipResource$1:void finalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.ZipResource$1:void <init>(org.apache.tools.ant.types.resources.ZipResource,java.io.InputStream,org.apache.tools.zip.ZipFile)"
        ]
    },
    "org.apache.tools.ant.util.ConcatFileInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.AnsiColorLogger:void setColors()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Property:void loadUrl(java.net.URL)",
            "org.apache.tools.ant.taskdefs.Property:void loadResource(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.InputStream)",
            "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)",
            "org.apache.tools.ant.Main:java.lang.String getAntVersion()",
            "org.apache.tools.bzip2.CBZip2InputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()"
        ]
    },
    "org.apache.tools.ant.util.ConcatResourceInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.listener.AnsiColorLogger:void setColors()",
            "org.apache.tools.ant.taskdefs.Pack:void zipResource(org.apache.tools.ant.types.Resource,java.io.OutputStream)",
            "org.apache.tools.ant.taskdefs.Property:void loadUrl(java.net.URL)",
            "org.apache.tools.ant.taskdefs.Property:void loadResource(java.lang.String)",
            "org.apache.tools.ant.taskdefs.Redirector:void complete()",
            "org.apache.tools.ant.util.FileUtils:void close(java.io.InputStream)",
            "org.apache.tools.ant.AntClassLoader:void addPathFile(java.io.File)",
            "org.apache.tools.ant.AntClassLoader:java.lang.Class findClassInComponents(java.lang.String)",
            "org.apache.tools.ant.Main:java.lang.String getAntVersion()",
            "org.apache.tools.bzip2.CBZip2InputStream:void close()",
            "org.apache.tools.tar.TarBuffer:void close()"
        ]
    },
    "org.apache.tools.ant.types.resources.PropertyResource:void <init>(org.apache.tools.ant.Project,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.PropertySet$1:java.lang.Object next()"
        ]
    },
    "org.apache.tools.zip.ZipOutputStream:void putNextEntry(org.apache.tools.zip.ZipEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.taskdefs.Zip:void zipDir(java.io.File,org.apache.tools.zip.ZipOutputStream,java.lang.String,int,org.apache.tools.zip.ZipExtraField[])",
            "org.apache.tools.ant.taskdefs.Zip:void zipFile(java.io.InputStream,org.apache.tools.zip.ZipOutputStream,java.lang.String,long,java.io.File,int)"
        ]
    },
    "org.apache.tools.ant.NoBannerLogger:void messageLogged(org.apache.tools.ant.BuildEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.Project:void fireMessageLoggedEvent(org.apache.tools.ant.BuildEvent,java.lang.String,int)"
        ]
    },
    "org.apache.tools.ant.types.resources.ZipResource$1:void <init>(org.apache.tools.ant.types.resources.ZipResource,java.io.InputStream,org.apache.tools.zip.ZipFile)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tools.ant.types.resources.ZipResource:java.io.InputStream getInputStream()"
        ]
    }
}