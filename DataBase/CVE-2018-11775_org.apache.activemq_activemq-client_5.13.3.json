{
    "org.apache.activemq.transport.tcp.TcpTransportServer:void configureServerSocket(java.net.ServerSocket)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void bind()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void connect()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void doStart()",
            "org.apache.activemq.transport.nio.NIOTransport:void doStart()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer:void bind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)",
            "org.apache.activemq.transport.tcp.SslTransportServer:void bind()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doStart()",
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.TransportServer bind(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.tcp.SslTransportServer:void bind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)",
            "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.TransportServerFilter:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.thread.Scheduler getScheduler()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.TransportServer bind(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.TransportServer bind(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.TransportServer bind(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void updateURIs(boolean,java.net.URI[])",
            "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void start()"
        ]
    },
    "org.apache.activemq.transport.TransportServerFilter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportServerFilter:void start()"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.reliable.ReliableTransport:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.WriteTimeoutFilter:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.WireFormatNegotiator:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.thread.Scheduler getScheduler()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispose()",
            "org.apache.activemq.ActiveMQMessageConsumer:void setOptimizedAckScheduledAckInterval(long)",
            "org.apache.activemq.ActiveMQSession:void clearMessagesInProgress(java.util.concurrent.atomic.AtomicInteger)",
            "org.apache.activemq.ActiveMQSession:org.apache.activemq.thread.Scheduler getScheduler()",
            "org.apache.activemq.ActiveMQSession$5:void afterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void updateURIs(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void updateURIs(boolean,java.net.URI[])",
            "org.apache.activemq.transport.failover.FailoverTransport:void processNewTransports(boolean,java.lang.String)",
            "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean access$800(org.apache.activemq.transport.fanout.FanoutTransport)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.WriteTimeoutFilter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void dispose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void doClose()",
            "org.apache.activemq.ActiveMQSession:void dispose()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void setOptimizedAckScheduledAckInterval(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void clearMessagesInProgress(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void transportInterupted()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:org.apache.activemq.thread.Scheduler getScheduler()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()"
        ]
    },
    "org.apache.activemq.ActiveMQSession$5:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection()"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner:void runTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner$1:void run()"
        ]
    },
    "org.apache.activemq.thread.DeterministicTaskRunner:void runTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DeterministicTaskRunner$1:void run()"
        ]
    },
    "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner$1:void run()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void updateURIs(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void updateURIs(boolean,java.net.URI[])",
            "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void processNewTransports(boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void handleConnectionControl(org.apache.activemq.command.ConnectionControl)",
            "org.apache.activemq.transport.failover.FailoverTransport:void doUpdateURIsFromDisk()"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void updateURIs(boolean,java.net.URI[])",
            "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:boolean access$800(org.apache.activemq.transport.fanout.FanoutTransport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport$1:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void close()",
            "org.apache.activemq.ActiveMQMessageConsumer$3:void afterCommit()",
            "org.apache.activemq.ActiveMQMessageConsumer$3:void afterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void dispose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.ActiveMQConnection:void doCleanup(boolean)",
            "org.apache.activemq.ActiveMQSession:void doClose()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser$1:void <init>(org.apache.activemq.ActiveMQQueueBrowser,org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQQueueReceiver:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,int,int,boolean)",
            "org.apache.activemq.ActiveMQTopicSubscriber:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void transportInterupted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(org.apache.activemq.transport.Transport,java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void transportInterupted()",
            "org.apache.activemq.ActiveMQConnection:void transportInterupted()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession:void recover()",
            "org.apache.activemq.ActiveMQMessageConsumer$5:void afterRollback()"
        ]
    },
    "org.apache.activemq.TransactionContext:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void rollback()",
            "org.apache.activemq.TransactionContext:void commit()",
            "org.apache.activemq.TransactionContext:int prepare(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.thread.PooledTaskRunner$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.thread.DeterministicTaskRunner$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.thread.DedicatedTaskRunner$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)",
            "org.apache.activemq.thread.TaskRunnerFactory:void doExecuteNewThread(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void handleConnectionControl(org.apache.activemq.command.ConnectionControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void doUpdateURIsFromDisk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$1:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ConsumerThread:void run()",
            "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()",
            "org.apache.activemq.ActiveMQSession:void close(org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$3:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterCommit()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$3:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void doCleanup(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$6:void run()",
            "org.apache.activemq.ActiveMQConnection:void cleanup()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void close()",
            "org.apache.activemq.ActiveMQSession:void access$000(org.apache.activemq.ActiveMQSession)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser$1:void <init>(org.apache.activemq.ActiveMQQueueBrowser,org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:org.apache.activemq.ActiveMQMessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueReceiver:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSubscriber:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(org.apache.activemq.transport.Transport,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void transportInterupted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(org.apache.activemq.transport.Transport,java.io.IOException)",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void transportInterupted()",
            "org.apache.activemq.transport.TransportFilter:void transportInterupted()",
            "org.apache.activemq.ActiveMQConnection:void transportInterupted()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser$1:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSessionExecutor:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()",
            "org.apache.activemq.ActiveMQSession$5$1:void run()",
            "org.apache.activemq.ActiveMQConnection$3:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void recover()",
            "org.apache.activemq.ActiveMQQueueSession:void recover()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$5:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()"
        ]
    },
    "org.apache.activemq.TransactionContext:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void commit()",
            "org.apache.activemq.ActiveMQSession:void rollback()"
        ]
    },
    "org.apache.activemq.TransactionContext:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void commit()"
        ]
    },
    "org.apache.activemq.TransactionContext:int prepare(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorWorker:void run()"
        ]
    },
    "org.apache.activemq.usage.Usage:void fireEvent(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.Usage:void setPercentUsage(int)"
        ]
    },
    "org.apache.activemq.usage.Usage:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.ActiveMQMessageProducer:void dispose()"
        ]
    },
    "org.apache.activemq.usage.Usage$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.thread.SchedulerTimerTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner:void wakeup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(org.apache.activemq.transport.Transport,java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void reconnect(boolean)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void reconnect()",
            "org.apache.activemq.ActiveMQSessionExecutor:void wakeup()"
        ]
    },
    "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(org.apache.activemq.transport.Transport,java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void reconnect(boolean)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void reconnect()",
            "org.apache.activemq.ActiveMQSessionExecutor:void wakeup()"
        ]
    },
    "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()"
        ]
    },
    "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.transport.TransportThreadSupport:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransport:void doStart()",
            "org.apache.activemq.transport.tcp.TcpTransport:void doStart()"
        ]
    },
    "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.TaskRunnerFactory:org.apache.activemq.thread.TaskRunner createTaskRunner(org.apache.activemq.thread.Task,java.lang.String)"
        ]
    },
    "org.apache.activemq.thread.TaskRunnerFactory:void doExecuteNewThread(java.lang.Runnable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:void access$1100(org.apache.activemq.transport.failover.FailoverTransport,java.lang.Object)"
        ]
    },
    "org.apache.activemq.util.ConsumerThread:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)",
            "org.apache.activemq.thread.TaskRunnerFactory:void doExecuteNewThread(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:boolean hasMoreElements()",
            "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()",
            "org.apache.activemq.ActiveMQQueueBrowser:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void close(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onConsumerControl(org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.TransactionContext:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void commit()",
            "org.apache.activemq.TransactionContext:int prepare(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection$6:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void cleanup()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.ConsumerEventSource:void stop()",
            "org.apache.activemq.advisory.DestinationSource:void stop()",
            "org.apache.activemq.advisory.ProducerEventSource:void stop()",
            "org.apache.activemq.ActiveMQTopicSession:void close()",
            "org.apache.activemq.ActiveMQQueueSession:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void access$000(org.apache.activemq.ActiveMQSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession$1:void afterCommit()",
            "org.apache.activemq.ActiveMQSession$1:void afterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:org.apache.activemq.ActiveMQMessageConsumer createConsumer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:java.util.Enumeration getEnumeration()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.ActiveMQConnection$6:void run()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void transportInterupted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(org.apache.activemq.transport.Transport,java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void transportInterupted()",
            "org.apache.activemq.ActiveMQConnection:void transportInterupted()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser$1:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSessionExecutor:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()",
            "org.apache.activemq.ActiveMQSession$5$1:void run()",
            "org.apache.activemq.ActiveMQConnection$3:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSessionExecutor:void execute(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSessionExecutor:boolean iterate()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSessionExecutor:boolean iterate()"
        ]
    },
    "org.apache.activemq.ActiveMQSession$5$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection$3:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.MessageDispatch:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void recover()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void recover()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void rollback()",
            "org.apache.activemq.ActiveMQSession:void dispose()",
            "org.apache.activemq.ActiveMQQueueSession:void rollback()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ProducerThread:void sendMessage(javax.jms.MessageProducer,java.lang.String)",
            "org.apache.activemq.util.ConsumerThread:void run()",
            "org.apache.activemq.ActiveMQTopicSession:void commit()",
            "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()",
            "org.apache.activemq.ActiveMQQueueSession:void commit()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport$2:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)",
            "org.apache.activemq.transport.nio.NIOSSLTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)",
            "org.apache.activemq.transport.nio.NIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorWorker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void <init>(org.apache.activemq.transport.nio.SelectorManager)",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.usage.Usage:void setPercentUsage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.Usage:void onLimitChange()",
            "org.apache.activemq.usage.Usage:void setPercentUsageMinDelta(int)",
            "org.apache.activemq.usage.MemoryUsage:void increaseUsage(long)",
            "org.apache.activemq.usage.MemoryUsage:void decreaseUsage(long)"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void disposeTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void remove(boolean,java.net.URI[])",
            "org.apache.activemq.ActiveMQConnection$6:void run()",
            "org.apache.activemq.ActiveMQConnection:void close()"
        ]
    },
    "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void stop()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducer:void dispose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void close()",
            "org.apache.activemq.ActiveMQSession:void dispose()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void reconnect(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport:void add(boolean,java.net.URI[])",
            "org.apache.activemq.transport.failover.FailoverTransport:void add(boolean,java.lang.String)",
            "org.apache.activemq.transport.failover.FailoverTransport:void updateURIs(boolean,java.net.URI[])",
            "org.apache.activemq.transport.failover.BackupTransport:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.ActiveMQConnection$6:void run()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:void add(boolean,java.net.URI[])"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void wakeup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSessionExecutor:void setDispatchedBySessionPool(boolean)",
            "org.apache.activemq.ActiveMQSessionExecutor:void execute(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSessionExecutor:void executeFirst(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSessionExecutor:void start()",
            "org.apache.activemq.ActiveMQMessageConsumer:void start()"
        ]
    },
    "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.nio.SelectorWorker:void <init>(org.apache.activemq.transport.nio.SelectorManager)",
            "org.apache.activemq.transport.nio.SelectorWorker:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransport:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.thread.TaskRunnerFactory:org.apache.activemq.thread.TaskRunner createTaskRunner(org.apache.activemq.thread.Task,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void <init>()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void <init>()",
            "org.apache.activemq.ActiveMQSessionExecutor:void wakeup()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void doAsyncSendPacket(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void access$1100(org.apache.activemq.transport.failover.FailoverTransport,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:boolean hasMoreElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:java.net.NetworkInterface findNetworkInterface()",
            "org.apache.activemq.jndi.JNDIReferenceFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.activemq.jndi.JNDIReferenceFactory:javax.naming.Reference createReference(java.lang.String,org.apache.activemq.jndi.JNDIStorableInterface)",
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:java.net.NetworkInterface findNetworkInterface()",
            "org.apache.activemq.jndi.JNDIReferenceFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.activemq.jndi.JNDIReferenceFactory:javax.naming.Reference createReference(java.lang.String,org.apache.activemq.jndi.JNDIStorableInterface)",
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:void onConsumerControl(org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$3:org.apache.activemq.command.Response processConsumerControl(org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.ActiveMQConnection$6:void run()",
            "org.apache.activemq.ActiveMQConnection:void forceCloseOnSecurityException(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.advisory.ConsumerEventSource:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.advisory.DestinationSource:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()"
        ]
    },
    "org.apache.activemq.advisory.ProducerEventSource:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQSession$1:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterCommit()"
        ]
    },
    "org.apache.activemq.ActiveMQSession$1:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:java.util.Enumeration getEnumeration()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ConsumerThread:void run()",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.ActiveMQConnection$6:void run()"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.reliable.DefaultReplayStrategy:boolean onDroppedPackets(org.apache.activemq.transport.reliable.ReliableTransport,int,int,int)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onMissingResponse(org.apache.activemq.command.Command,org.apache.activemq.transport.FutureResponse)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(org.apache.activemq.transport.Transport,java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()"
        ]
    },
    "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.FutureResponse:java.io.InterruptedIOException dealWithInterrupt(java.lang.InterruptedException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.ActiveMQConnection$6:void run()"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.FutureResponse:java.io.InterruptedIOException dealWithInterrupt(java.lang.InterruptedException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor$5:void run()",
            "org.apache.activemq.transport.AbstractInactivityMonitor$4:void run()",
            "org.apache.activemq.transport.AbstractInactivityMonitor$1$1:void run()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.InactivityMonitor:void processInboundWireFormatInfo(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.ActiveMQConnection$6:void run()"
        ]
    },
    "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.transport.tcp.TcpTransport:void run()",
            "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()",
            "org.apache.activemq.transport.nio.NIOSSLTransport$2:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()",
            "org.apache.activemq.transport.nio.NIOSSLTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.nio.NIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void execute(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void dispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void runTask()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.ActiveMQSessionExecutor:void wakeup()"
        ]
    },
    "org.apache.activemq.command.MessageDispatch:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void rollback()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void rollback()"
        ]
    },
    "org.apache.activemq.util.ProducerThread:void sendMessage(javax.jms.MessageProducer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ProducerThread:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void commit()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void commit()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport$2:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorWorker:void <init>(org.apache.activemq.transport.nio.SelectorManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorManager:org.apache.activemq.transport.nio.SelectorSelection register(java.nio.channels.spi.AbstractSelectableChannel,org.apache.activemq.transport.nio.SelectorManager$Listener)"
        ]
    },
    "org.apache.activemq.usage.Usage:void onLimitChange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.Usage:void setLimit(long)",
            "org.apache.activemq.usage.Usage:void onLimitChange()",
            "org.apache.activemq.usage.Usage:void setUsagePortion(float)"
        ]
    },
    "org.apache.activemq.usage.Usage:void setPercentUsageMinDelta(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.usage.MemoryUsage:void increaseUsage(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.Message:int incrementReferenceCount()",
            "org.apache.activemq.usage.MemoryUsage:void enqueueUsage(long)",
            "org.apache.activemq.usage.MemoryUsage:void increaseUsage(long)",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.usage.MemoryUsage:void decreaseUsage(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.Message:int decrementReferenceCount()",
            "org.apache.activemq.usage.MemoryUsage:void decreaseUsage(long)",
            "org.apache.activemq.ActiveMQMessageProducer:void onProducerAck(org.apache.activemq.command.ProducerAck)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void disposeTransport(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(org.apache.activemq.transport.Transport,java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void remove(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageProducer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ProducerThread:void run()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void add(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)",
            "org.apache.activemq.transport.failover.FailoverTransport:void reconnect(java.net.URI)",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void add(boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.failover.BackupTransport:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.ActiveMQConnection$6:void run()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void doAsyncSendPacket(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void add(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void reconnect(java.net.URI)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void updateURIs(boolean,java.net.URI[])"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void setDispatchedBySessionPool(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void executeFirst(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void redispatch(org.apache.activemq.ActiveMQDispatcher,org.apache.activemq.MessageDispatchChannel)",
            "org.apache.activemq.ActiveMQSession$5$1:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void start()",
            "org.apache.activemq.ActiveMQSession$5$1:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$7:void run()",
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()",
            "org.apache.activemq.ActiveMQSession:void start()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOTransport:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.failover.FailoverTransport createTransport(java.util.Map)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.fanout.FanoutTransport createTransport(java.util.Map)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void connectionInterruptProcessingComplete(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void doAsyncSendPacket(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void doAsyncSendPacket(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void doAsyncSendPacket(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.WriteTimeoutFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.ThreadNameFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void doAsyncSendPacket(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat()"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void access$800(org.apache.activemq.transport.AbstractInactivityMonitor,java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void doAsyncSendPacket(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.ActiveMQConnection:void syncSendPacket(org.apache.activemq.command.Command,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void doAsyncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$3:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:java.net.NetworkInterface findNetworkInterface()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()"
        ]
    },
    "org.apache.activemq.jndi.JNDIReferenceFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jndi.JNDIReferenceFactory:javax.naming.Reference createReference(java.lang.String,org.apache.activemq.jndi.JNDIStorableInterface)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.JNDIBaseStorable:javax.naming.Reference getReference()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.ActiveMQMessage createActiveMQMessage(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.MessageTransformerSupport:void copyProperties(javax.jms.Message,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection$3:org.apache.activemq.command.Response processConsumerControl(org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ConsumerControl:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void forceCloseOnSecurityException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:void access$200(org.apache.activemq.ActiveMQConnection,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.ConsumerEventSource:void start()",
            "org.apache.activemq.advisory.DestinationSource:void start()",
            "org.apache.activemq.advisory.ProducerEventSource:void start()",
            "org.apache.activemq.util.ConsumerThread:void run()",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.reliable.DefaultReplayStrategy:boolean onDroppedPackets(org.apache.activemq.transport.reliable.ReliableTransport,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void onMissingResponse(org.apache.activemq.command.Command,org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.udp.ResponseRedirectInterceptor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.transport.tcp.SslTransport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.tcp.TcpTransport:void doRun()",
            "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doConsume(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.FutureResponse:java.io.InterruptedIOException dealWithInterrupt(java.lang.InterruptedException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.FutureResponse:org.apache.activemq.command.Response getResult()",
            "org.apache.activemq.transport.FutureResponse:org.apache.activemq.command.Response getResult(int)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.FutureResponse:java.io.InterruptedIOException dealWithInterrupt(java.lang.InterruptedException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.WireFormatNegotiator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void negociate(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.ActiveMQConnection$6:void run()"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void replayCommands(org.apache.activemq.command.ReplayCommand)",
            "org.apache.activemq.transport.failover.FailoverTransport$3:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void propagateFailureToExceptionListener(java.lang.Exception)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.FutureResponse:java.io.InterruptedIOException dealWithInterrupt(java.lang.InterruptedException)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.ActiveMQConnection$6:void run()"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void readCheck()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void writeCheck()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$1$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.transport.AbstractInactivityMonitor$1:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void processInboundWireFormatInfo(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransport:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void start()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport$2:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession$5$1:void run()",
            "org.apache.activemq.ActiveMQConnectionConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQConnection$3:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer$6:void run()"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.util.ProducerThread:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)",
            "org.apache.activemq.thread.TaskRunnerFactory:void doExecuteNewThread(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorWorker$1:void run()"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorManager:org.apache.activemq.transport.nio.SelectorSelection register(java.nio.channels.spi.AbstractSelectableChannel,org.apache.activemq.transport.nio.SelectorManager$Listener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void run()",
            "org.apache.activemq.transport.nio.NIOTransport:void initializeStreams()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void initializeStreams()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void finishHandshake()"
        ]
    },
    "org.apache.activemq.usage.Usage:void setLimit(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.MemoryUsage:void setPercentOfJvmHeap(int)",
            "org.apache.activemq.ActiveMQMessageProducer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.usage.Usage:void setUsagePortion(float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.Message:int incrementReferenceCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.MessageEvaluationContext:org.apache.activemq.command.Message getMessage()"
        ]
    },
    "org.apache.activemq.usage.MemoryUsage:void enqueueUsage(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int,org.apache.activemq.AsyncCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.command.Message:int decrementReferenceCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.MessageEvaluationContext:org.apache.activemq.command.Message getMessage()",
            "org.apache.activemq.filter.MessageEvaluationContext:void clearMessageCache()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducer:void onProducerAck(org.apache.activemq.command.ProducerAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$3:org.apache.activemq.command.Response processProducerAck(org.apache.activemq.command.ProducerAck)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$1:void run()",
            "org.apache.activemq.transport.discovery.zeroconf.ZeroconfDiscoveryAgent:void removeService(javax.jmdns.JmDNS,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.WriteTimeoutFilter:void stop()",
            "org.apache.activemq.transport.CommandJoiner:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.WireFormatNegotiator:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.transport.ResponseCorrelator:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)",
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void reconnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void reconnect(java.net.URI)",
            "org.apache.activemq.transport.failover.FailoverTransport:void handleConnectionControl(org.apache.activemq.command.ConnectionControl)",
            "org.apache.activemq.transport.TransportFilter:void reconnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void start()",
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent$1:void run()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$2:void run()",
            "org.apache.activemq.transport.discovery.zeroconf.ZeroconfDiscoveryAgent:void addService(javax.jmdns.JmDNS,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void reconnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void reconnect(java.net.URI)",
            "org.apache.activemq.transport.TransportFilter:void reconnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void updateURIs(boolean,java.net.URI[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void updateURIs(boolean,java.net.URI[])",
            "org.apache.activemq.transport.TransportFilter:void updateURIs(boolean,java.net.URI[])"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void setMessageListener(javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQQueueSession:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void redispatch(org.apache.activemq.ActiveMQDispatcher,org.apache.activemq.MessageDispatchChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void start()",
            "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$7:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.transport.tcp.TcpTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.TransportServerFilter:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.ActiveMQConnection:void close()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.failover.FailoverTransport createTransport(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)",
            "org.apache.activemq.transport.discovery.DiscoveryTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.fanout.FanoutTransport createTransport(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport createTransport(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void connectionInterruptProcessingComplete(org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void signalInterruptionProcessingComplete()"
        ]
    },
    "org.apache.activemq.transport.WriteTimeoutFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void doAsyncSendPacket(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void doAsyncSendPacket(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.ThreadNameFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void doAsyncSendPacket(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void start()"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void connectionInterruptProcessingComplete(org.apache.activemq.transport.Transport,org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void doOnewaySend(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void doAsyncSendPacket(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void access$800(org.apache.activemq.transport.AbstractInactivityMonitor,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor$4:void run()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void syncSendPacket(org.apache.activemq.command.Command,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response doSyncSendPacket(org.apache.activemq.command.Command,int)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response doSyncSendPacket(org.apache.activemq.command.Command,int)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void syncSendPacket(org.apache.activemq.command.Command,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.ActiveMQConnection:void syncSendPacket(org.apache.activemq.command.Command,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response doSyncSendPacket(org.apache.activemq.command.Command,int)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response doSyncSendPacket(org.apache.activemq.command.Command,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void syncSendPacket(org.apache.activemq.command.Command,org.apache.activemq.AsyncCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void begin()",
            "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)",
            "org.apache.activemq.AdvisoryConsumer:void dispose()",
            "org.apache.activemq.AdvisoryConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQConnection:void send(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.command.MessageId,int,int,long,boolean)",
            "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean,boolean)",
            "org.apache.activemq.ActiveMQSession:void doClose()",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int,org.apache.activemq.AsyncCallback)",
            "org.apache.activemq.ActiveMQSession:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnectionConsumer:void close()"
        ]
    },
    "org.apache.activemq.jndi.JNDIBaseStorable:javax.naming.Reference getReference()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.ActiveMQMessage createActiveMQMessage(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.MessageTransformerSupport:void copyProperties(javax.jms.Message,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ConsumerControl:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void rollback()",
            "org.apache.activemq.TransactionContext:void commit()",
            "org.apache.activemq.TransactionContext:int prepare(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.TransactionContext:void forget(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:javax.transaction.xa.Xid[] recover(int)",
            "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)",
            "org.apache.activemq.AdvisoryConsumer:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.ActiveMQConnection:void syncSendPacket(org.apache.activemq.command.Command,org.apache.activemq.AsyncCallback)",
            "org.apache.activemq.ActiveMQConnection:void ensureConnectionInfoSent()",
            "org.apache.activemq.ActiveMQConnection:void doCleanup(boolean)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.ActiveMQTempDestination createTempDestination(boolean)",
            "org.apache.activemq.ActiveMQConnection:void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)",
            "org.apache.activemq.ActiveMQConnection:void destroyDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.ActiveMQConnection:void unsubscribe(java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:void send(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.command.MessageId,int,int,long,boolean)",
            "org.apache.activemq.ActiveMQSession:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnectionConsumer:void <init>(org.apache.activemq.ActiveMQConnection,javax.jms.ServerSessionPool,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void access$200(org.apache.activemq.ActiveMQConnection,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:void onCompletion(org.apache.activemq.transport.FutureResponse)"
        ]
    },
    "org.apache.activemq.advisory.ConsumerEventSource:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.advisory.DestinationSource:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.advisory.DestinationSource getDestinationSource()"
        ]
    },
    "org.apache.activemq.advisory.ProducerEventSource:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.udp.ResponseRedirectInterceptor:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void processCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.tcp.SslTransport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void doRun()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void doRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void run()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void doRun()",
            "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void processCommand(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.activemq.transport.FutureResponse:org.apache.activemq.command.Response getResult()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection$2:void onCompletion(org.apache.activemq.transport.FutureResponse)"
        ]
    },
    "org.apache.activemq.transport.FutureResponse:org.apache.activemq.command.Response getResult(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void negociate(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void replayCommands(org.apache.activemq.command.ReplayCommand)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void readCheck()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor$2:void run()"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor:void writeCheck()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.AbstractInactivityMonitor$3:void run()"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorWorker:void run()",
            "org.apache.activemq.transport.nio.SelectorWorker$1:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession$5$1:void run()",
            "org.apache.activemq.ActiveMQConnection$3:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$6:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorWorker$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.transport.nio.SelectorWorker:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.transport.TransportServerFilter:void start()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport:void initializeStreams()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void finishHandshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:int secureRead(java.nio.ByteBuffer)",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()"
        ]
    },
    "org.apache.activemq.usage.MemoryUsage:void setPercentOfJvmHeap(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageProducer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQTopicPublisher:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.ActiveMQQueueSender:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.filter.MessageEvaluationContext:org.apache.activemq.command.Message getMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.NetworkBridgeFilter:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MessageEvaluationContext:boolean isDropped()",
            "org.apache.activemq.filter.DestinationFilter:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.PropertyExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.XPathExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.NoLocalExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long,org.apache.activemq.AsyncCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)",
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Message,org.apache.activemq.AsyncCallback)",
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,org.apache.activemq.AsyncCallback)",
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Message,int,int,long,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.filter.MessageEvaluationContext:void clearMessageCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.MessageEvaluationContext:void setMessageReference(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.filter.MessageEvaluationContext:void clear()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection$3:org.apache.activemq.command.Response processProducerAck(org.apache.activemq.command.ProducerAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ProducerAck:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void fireServiceRemovedEvent(org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$RemoteBrokerData)",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.discovery.zeroconf.ZeroconfDiscoveryAgent:void removeService(javax.jmdns.JmDNS,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.zeroconf.ZeroconfDiscoveryAgent:void serviceRemoved(javax.jmdns.ServiceEvent)"
        ]
    },
    "org.apache.activemq.transport.WriteTimeoutFilter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.CommandJoiner:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void reconnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void reconnect(java.net.URI)",
            "org.apache.activemq.transport.TransportFilter:void reconnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void reconnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void reconnect(java.net.URI)",
            "org.apache.activemq.transport.TransportFilter:void reconnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()"
        ]
    },
    "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void fireServiceAddEvent(org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$RemoteBrokerData)",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.discovery.zeroconf.ZeroconfDiscoveryAgent:void addService(javax.jmdns.JmDNS,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.zeroconf.ZeroconfDiscoveryAgent:void serviceAdded(javax.jmdns.ServiceEvent)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.ConsumerEventSource:void start()",
            "org.apache.activemq.advisory.DestinationSource:void start()",
            "org.apache.activemq.advisory.ProducerEventSource:void start()",
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.Session createSession(boolean,int)",
            "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.AbstractInactivityMonitor:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.TransportServerFilter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportServerFilter:void stop()",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)",
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport createTransport(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)",
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void signalInterruptionProcessingComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void waitForTransportInterruptionProcessingToComplete()",
            "org.apache.activemq.ActiveMQConnection:void transportInterruptionProcessingComplete()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response doSyncSendPacket(org.apache.activemq.command.Command,int)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response doSyncSendPacket(org.apache.activemq.command.Command,int)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response doSyncSendPacket(org.apache.activemq.command.Command,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response doSyncSendPacket(org.apache.activemq.command.Command,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command,int)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response doSyncSendPacket(org.apache.activemq.command.Command,int)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response doSyncSendPacket(org.apache.activemq.command.Command,int)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response doSyncSendPacket(org.apache.activemq.command.Command,int)"
        ]
    },
    "org.apache.activemq.TransactionContext:void begin()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void doStartTransaction()"
        ]
    },
    "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void start(javax.transaction.xa.Xid,int)",
            "org.apache.activemq.TransactionContext:void invokeBeforeEnd()"
        ]
    },
    "org.apache.activemq.AdvisoryConsumer:void dispose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.ActiveMQConnection:void doCleanup(boolean)"
        ]
    },
    "org.apache.activemq.AdvisoryConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession$5$1:void run()",
            "org.apache.activemq.ActiveMQConnection$3:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void send(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.command.MessageId,int,int,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void asyncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void close()",
            "org.apache.activemq.ActiveMQMessageConsumer:void doClose()",
            "org.apache.activemq.ActiveMQMessageConsumer:void sendPullCommand(long)",
            "org.apache.activemq.ActiveMQSession:void run()",
            "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck,boolean)",
            "org.apache.activemq.ActiveMQSession$5:void afterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionConsumer:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ConsumerThread:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()"
        ]
    },
    "org.apache.activemq.TransactionContext:void forget(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:javax.transaction.xa.Xid[] recover(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.AdvisoryConsumer:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void ensureConnectionInfoSent()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void ensureConnectionInfoSent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void begin()",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.TransactionContext:javax.transaction.xa.Xid[] recover(int)",
            "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.Session createSession(boolean,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.Session createSession(boolean,int)",
            "org.apache.activemq.ActiveMQConnection:void setClientID(java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:void start()",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:java.lang.String getInitializedClientID()",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:void destroyDestination(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.ActiveMQTempDestination createTempDestination(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryQueue createTemporaryQueue()",
            "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryTopic createTemporaryTopic()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQTempDestination:void delete()",
            "org.apache.activemq.ActiveMQConnection:void cleanUpTempDestinations()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void destroyDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void unsubscribe(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionConsumer:void <init>(org.apache.activemq.ActiveMQConnection,javax.jms.ServerSessionPool,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection$2:void onCompletion(org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.FutureResponse:void set(org.apache.activemq.command.Response)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.advisory.DestinationSource getDestinationSource()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void processCommand(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doOpenWireInit()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.AbstractInactivityMonitor$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:int secureRead(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ProducerThread:void run()",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSender:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueSender createSender(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.command.NetworkBridgeFilter:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.NetworkBridgeFilter:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.MessageEvaluationContext:boolean isDropped()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationFilter:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.PropertyExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.XPathExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.NoLocalExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.DestinationFilter:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationFilter:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.PropertyExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.XPathExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.XPathExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.NoLocalExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.NoLocalExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message)",
            "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message,int,int,long)",
            "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Destination,javax.jms.Message)",
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message,int,int,long)",
            "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Message,org.apache.activemq.AsyncCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,org.apache.activemq.AsyncCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Message,int,int,long,org.apache.activemq.AsyncCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.MessageEvaluationContext:void setMessageReference(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.MessageEvaluationContext:void clear()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ProducerAck:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void fireServiceRemovedEvent(org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$RemoteBrokerData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processDead(java.lang.String)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.transport.discovery.zeroconf.ZeroconfDiscoveryAgent:void serviceRemoved(javax.jmdns.ServiceEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI,java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI,java.util.concurrent.Executor)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.transport.Transport createTransport()"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI,java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI,java.util.concurrent.Executor)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean doReconnect()",
            "org.apache.activemq.transport.failover.FailoverTransport:boolean buildBackups()",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void fireServiceAddEvent(org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$RemoteBrokerData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processAlive(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.discovery.zeroconf.ZeroconfDiscoveryAgent:void serviceAdded(javax.jmdns.ServiceEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.Session createSession(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.ConsumerEventSource:void start()",
            "org.apache.activemq.advisory.DestinationSource:void start()",
            "org.apache.activemq.advisory.ProducerEventSource:void start()",
            "org.apache.activemq.ActiveMQConnection:javax.jms.TopicSession createTopicSession(boolean,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.QueueSession createQueueSession(boolean,int)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQXASession:void <init>(org.apache.activemq.ActiveMQXAConnection,org.apache.activemq.command.SessionId,int,boolean)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void waitForTransportInterruptionProcessingToComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$3:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void transportInterruptionProcessingComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void clearMessagesInProgress()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void doStartTransaction()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void registerSync()",
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge()",
            "org.apache.activemq.ActiveMQSession:void run()",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage,int,org.apache.activemq.AsyncCallback)"
        ]
    },
    "org.apache.activemq.TransactionContext:void start(javax.transaction.xa.Xid,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void invokeBeforeEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void end(javax.transaction.xa.Xid,int)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void sendPullCommand(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:void waitForMessage()",
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void run()",
            "org.apache.activemq.ActiveMQConnection:void start()",
            "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean,boolean)",
            "org.apache.activemq.ActiveMQQueueSession:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$4:void run()",
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()",
            "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.Session createSession(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.ConsumerEventSource:void start()",
            "org.apache.activemq.advisory.DestinationSource:void start()",
            "org.apache.activemq.advisory.ProducerEventSource:void start()",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.XASession createXASession()",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.XATopicSession createXATopicSession()",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.XAQueueSession createXAQueueSession()",
            "org.apache.activemq.ActiveMQConnection:javax.jms.TopicSession createTopicSession(boolean,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.QueueSession createQueueSession(boolean,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void setClientID(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.lang.String getInitializedClientID()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryQueue createTemporaryQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.TemporaryQueue createTemporaryQueue()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryTopic createTemporaryTopic()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TemporaryTopic createTemporaryTopic()"
        ]
    },
    "org.apache.activemq.command.ActiveMQTempDestination:void delete()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:void cleanUpTempDestinations()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void unsubscribe(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.FutureResponse:void set(org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void dispose(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOSSLTransport:void doOpenWireInit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void serviceRead()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueSender createSender(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueSender createSender(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.command.NetworkBridgeFilter:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.DestinationFilter:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.FunctionCallExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.FunctionCallExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.FunctionCallExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.FunctionCallExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.FunctionCallExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$BooleanUnaryExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$BooleanUnaryExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$BooleanUnaryExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.XPathExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.NoLocalExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ProducerThread:void sendMessage(javax.jms.MessageProducer,java.lang.String)",
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Destination,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)",
            "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processDead(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processData(java.lang.String)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doExpireOldServices()"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI,java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.transport.Transport createTransport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSslConnectionFactory:org.apache.activemq.transport.Transport createTransport()",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI,java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)",
            "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processAlive(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processData(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.TopicSession createTopicSession(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.QueueSession createQueueSession(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXASession:void <init>(org.apache.activemq.ActiveMQXAConnection,org.apache.activemq.command.SessionId,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.Session createSession(boolean,int)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void clearMessagesInProgress()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession$2:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void registerSync()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void immediateIndividualTransactedAck(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispose()",
            "org.apache.activemq.ActiveMQSession:void acknowledge()",
            "org.apache.activemq.ActiveMQMessageConsumer$5:void beforeEnd()"
        ]
    },
    "org.apache.activemq.TransactionContext:void end(javax.transaction.xa.Xid,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void waitForMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:boolean hasMoreElements()",
            "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void sendAck(org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void posionAck(org.apache.activemq.command.MessageDispatch,java.lang.String)",
            "org.apache.activemq.ActiveMQMessageConsumer:void immediateIndividualTransactedAck(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)",
            "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)",
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge()",
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge(org.apache.activemq.command.MessageDispatch,byte)",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession$5:void beforeEnd()"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.XASession createXASession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.XATopicSession createXATopicSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.XAQueueSession createXAQueueSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.TemporaryQueue createTemporaryQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.TemporaryQueue createTemporaryQueue()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TemporaryTopic createTemporaryTopic()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TemporaryTopic createTemporaryTopic()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void unsubscribe(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void dispose(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)",
            "org.apache.activemq.transport.ResponseCorrelator:void stop()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueSender createSender(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueSender createSender(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.filter.FunctionCallExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.function.inListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.replaceFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.makeListFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.splitFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.function.regexMatchFunction:java.lang.Object evaluate(org.apache.activemq.filter.FunctionCallExpression,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.BooleanFunctionCallExpr:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.LogicExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.UnaryExpression$BooleanUnaryExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.ComparisonExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.ComparisonExpression$LikeExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processData(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void run()"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doExpireOldServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doTimeKeepingServices()"
        ]
    },
    "org.apache.activemq.ActiveMQSslConnectionFactory:org.apache.activemq.transport.Transport createTransport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.ActiveMQSession$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void immediateIndividualTransactedAck(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void beforeMessageIsConsumed(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void beforeMessageIsConsumed(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void acknowledge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$1:void execute()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$5:void beforeEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void beforeEnd()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void posionAck(org.apache.activemq.command.MessageDispatch,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge(org.apache.activemq.command.MessageDispatch,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)",
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQSession$5:void beforeEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void beforeEnd()"
        ]
    },
    "org.apache.activemq.filter.BooleanFunctionCallExpr:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()",
            "org.apache.activemq.transport.nio.NIOSSLTransport:void doHandshake()",
            "org.apache.activemq.transport.nio.SelectorWorker:void processIoTasks()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.thread.SchedulerTimerTask:void run()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.DeterministicTaskRunner:void wakeup()",
            "org.apache.activemq.thread.TaskRunnerFactory:void execute(java.lang.Runnable,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doTimeKeepingServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void beforeMessageIsConsumed(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$1:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void acknowledge()",
            "org.apache.activemq.util.ServiceStopper:void run(org.apache.activemq.util.Callback)"
        ]
    },
    "org.apache.activemq.TransactionContext:void beforeEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void rollback()",
            "org.apache.activemq.TransactionContext:void commit()",
            "org.apache.activemq.TransactionContext:void invokeBeforeEnd()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$2:void execute()"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:void acknowledge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ConsumerThread:void run()"
        ]
    },
    "org.apache.activemq.util.ServiceStopper:void run(org.apache.activemq.util.Callback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer$2:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void acknowledge()",
            "org.apache.activemq.util.ServiceStopper:void run(org.apache.activemq.util.Callback)"
        ]
    }
}