{
    "opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument:opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument parse(java.io.InputStream)": {
        "isVulRoot": true,
        "vulCaller": [
            "opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument:opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument parse(java.io.File)"
        ]
    },
    "opennlp.tools.util.featuregen.GeneratorFactory:org.w3c.dom.Document createDOM(java.io.InputStream)": {
        "isVulRoot": true,
        "vulCaller": [
            "opennlp.tools.util.featuregen.GeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator create(java.io.InputStream,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)",
            "opennlp.tools.util.featuregen.GeneratorFactory:java.util.Map extractArtifactSerializerMappings(java.io.InputStream)",
            "opennlp.tools.util.featuregen.GeneratorFactory:java.util.List getDescriptorElements(java.io.InputStream)"
        ]
    },
    "opennlp.tools.formats.frenchtreebank.ConstitParseSampleStream:void <init>(opennlp.tools.util.ObjectStream)": {
        "isVulRoot": true,
        "vulCaller": [
            "opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.letsmt.LetsmtDocument:opennlp.tools.formats.letsmt.LetsmtDocument parse(java.io.InputStream)": {
        "isVulRoot": true,
        "vulCaller": [
            "opennlp.tools.formats.letsmt.LetsmtDocument:opennlp.tools.formats.letsmt.LetsmtDocument parse(java.io.File)"
        ]
    },
    "opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument:opennlp.tools.formats.irishsentencebank.IrishSentenceBankDocument parse(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.formats.irishsentencebank.IrishSentenceBankSentenceStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.irishsentencebank.IrishSentenceBankTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.util.featuregen.GeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator create(java.io.InputStream,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.namefind.NameFinderME:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator createFeatureGenerator(byte[],java.util.Map)",
            "opennlp.tools.namefind.TokenNameFinderFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator createFeatureGenerators()",
            "opennlp.tools.postag.POSTaggerFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator createFeatureGenerators()"
        ]
    },
    "opennlp.tools.util.featuregen.GeneratorFactory:java.util.Map extractArtifactSerializerMappings(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool:java.util.Map loadResources(java.io.File,java.io.File)"
        ]
    },
    "opennlp.tools.util.featuregen.GeneratorFactory:java.util.List getDescriptorElements(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "opennlp.tools.formats.frenchtreebank.ConstitParseSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.letsmt.LetsmtDocument:opennlp.tools.formats.letsmt.LetsmtDocument parse(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.formats.letsmt.LetsmtSentenceStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.irishsentencebank.IrishSentenceBankSentenceStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.irishsentencebank.IrishSentenceBankTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.namefind.NameFinderME:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator createFeatureGenerator(byte[],java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "opennlp.tools.namefind.TokenNameFinderFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator createFeatureGenerators()": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.namefind.TokenNameFinderFactory:opennlp.tools.namefind.NameContextGenerator createContextGenerator()"
        ]
    },
    "opennlp.tools.postag.POSTaggerFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator createFeatureGenerators()": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.postag.POSTaggerFactory:opennlp.tools.postag.POSContextGenerator getPOSContextGenerator(int)"
        ]
    },
    "opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool:java.util.Map loadResources(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.namefind.TokenNameFinderCrossValidatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.postag.POSTaggerCrossValidatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.postag.POSTaggerTrainerTool:void run(java.lang.String,java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])",
            "opennlp.tools.cmdline.chunker.ChunkerCrossValidatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.chunker.ChunkerEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.chunker.ChunkerTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.doccat.DoccatCrossValidatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.doccat.DoccatEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.doccat.DoccatTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.langdetect.LanguageDetectorCrossValidatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.langdetect.LanguageDetectorEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.langdetect.LanguageDetectorTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.lemmatizer.LemmatizerEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.lemmatizer.LemmatizerTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.namefind.TokenNameFinderCrossValidatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.namefind.TokenNameFinderEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ParserEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ParserTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.postag.POSTaggerCrossValidatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.postag.POSTaggerEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.postag.POSTaggerTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.sentdetect.SentenceDetectorCrossValidatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.sentdetect.SentenceDetectorEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.sentdetect.SentenceDetectorTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.tokenizer.TokenizerCrossValidatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.tokenizer.TokenizerMEEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.tokenizer.TokenizerTrainerTool:void run(java.lang.String,java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.formats.letsmt.LetsmtSentenceStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.AbstractConverterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.AbstractEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.parser.ModelUpdaterTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.formats.ConllXSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ConllXTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.ad.ADTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.NameToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.POSToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToPOSSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToSentenceSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])",
            "opennlp.tools.formats.convert.ParseToTokenSampleStreamFactory:opennlp.tools.util.ObjectStream create(java.lang.String[])"
        ]
    },
    "opennlp.tools.namefind.TokenNameFinderFactory:opennlp.tools.namefind.NameContextGenerator createContextGenerator()": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.namefind.NameFinderME:void <init>(opennlp.tools.namefind.TokenNameFinderModel)",
            "opennlp.tools.namefind.NameFinderME:opennlp.tools.namefind.TokenNameFinderModel train(java.lang.String,java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.namefind.TokenNameFinderFactory)"
        ]
    },
    "opennlp.tools.postag.POSTaggerFactory:opennlp.tools.postag.POSContextGenerator getPOSContextGenerator(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.postag.POSTaggerFactory:opennlp.tools.postag.POSContextGenerator getPOSContextGenerator()",
            "opennlp.tools.postag.POSTaggerME:void <init>(opennlp.tools.postag.POSModel)"
        ]
    },
    "opennlp.tools.cmdline.namefind.TokenNameFinderCrossValidatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.postag.POSTaggerCrossValidatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.postag.POSTaggerTrainerTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.CLI:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "opennlp.tools.cmdline.chunker.ChunkerCrossValidatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.chunker.ChunkerEvaluatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.chunker.ChunkerTrainerTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.doccat.DoccatCrossValidatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.doccat.DoccatEvaluatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.doccat.DoccatTrainerTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.langdetect.LanguageDetectorCrossValidatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.langdetect.LanguageDetectorEvaluatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.langdetect.LanguageDetectorTrainerTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.lemmatizer.LemmatizerEvaluatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.lemmatizer.LemmatizerTrainerTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.namefind.TokenNameFinderEvaluatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.parser.ParserEvaluatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.parser.ParserTrainerTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.postag.POSTaggerEvaluatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.sentdetect.SentenceDetectorCrossValidatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.sentdetect.SentenceDetectorEvaluatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.sentdetect.SentenceDetectorTrainerTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.tokenizer.TokenizerCrossValidatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.tokenizer.TokenizerMEEvaluatorTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.cmdline.tokenizer.TokenizerTrainerTool:void run(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.namefind.NameFinderME:void <init>(opennlp.tools.namefind.TokenNameFinderModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.namefind.TokenNameFinderEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.namefind.TokenNameFinderTool:void run(java.lang.String[])",
            "opennlp.tools.namefind.NameSampleSequenceStream:opennlp.tools.ml.model.Event[] updateContext(opennlp.tools.ml.model.Sequence,opennlp.tools.ml.model.AbstractModel)",
            "opennlp.tools.namefind.TokenNameFinderCrossValidator:void evaluate(opennlp.tools.util.ObjectStream,int)"
        ]
    },
    "opennlp.tools.namefind.NameFinderME:opennlp.tools.namefind.TokenNameFinderModel train(java.lang.String,java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.namefind.TokenNameFinderFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.namefind.TokenNameFinderCrossValidator:void evaluate(opennlp.tools.util.ObjectStream,int)"
        ]
    },
    "opennlp.tools.postag.POSTaggerFactory:opennlp.tools.postag.POSContextGenerator getPOSContextGenerator()": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.postag.POSTaggerME:opennlp.tools.postag.POSModel train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.postag.POSTaggerFactory)"
        ]
    },
    "opennlp.tools.postag.POSTaggerME:void <init>(opennlp.tools.postag.POSModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.postag.POSTaggerEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.cmdline.postag.POSTaggerTool:void run(java.lang.String[])",
            "opennlp.tools.parser.chunking.Parser:void <init>(opennlp.tools.parser.ParserModel,int,double)",
            "opennlp.tools.parser.treeinsert.Parser:void <init>(opennlp.tools.parser.ParserModel,int,double)",
            "opennlp.tools.postag.POSSampleSequenceStream:opennlp.tools.ml.model.Event[] updateContext(opennlp.tools.ml.model.Sequence,opennlp.tools.ml.model.AbstractModel)",
            "opennlp.tools.postag.POSTaggerCrossValidator:void evaluate(opennlp.tools.util.ObjectStream,int)",
            "opennlp.tools.util.featuregen.POSTaggerNameFeatureGenerator:void <init>(opennlp.tools.postag.POSModel)"
        ]
    },
    "opennlp.tools.cmdline.namefind.TokenNameFinderTool:void run(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.namefind.NameSampleSequenceStream:opennlp.tools.ml.model.Event[] updateContext(opennlp.tools.ml.model.Sequence,opennlp.tools.ml.model.AbstractModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:void nextIteration(int)",
            "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:void trainingStats(opennlp.tools.ml.model.MutableContext[])"
        ]
    },
    "opennlp.tools.namefind.TokenNameFinderCrossValidator:void evaluate(opennlp.tools.util.ObjectStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.namefind.TokenNameFinderCrossValidatorTool:void run(java.lang.String,java.lang.String[])"
        ]
    },
    "opennlp.tools.postag.POSTaggerME:opennlp.tools.postag.POSModel train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.postag.POSTaggerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.postag.POSTaggerTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.parser.chunking.Parser:opennlp.tools.parser.ParserModel train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.util.TrainingParameters)",
            "opennlp.tools.parser.treeinsert.Parser:opennlp.tools.parser.ParserModel train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.util.TrainingParameters)",
            "opennlp.tools.postag.POSTaggerCrossValidator:void evaluate(opennlp.tools.util.ObjectStream,int)"
        ]
    },
    "opennlp.tools.cmdline.postag.POSTaggerTool:void run(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.parser.chunking.Parser:void <init>(opennlp.tools.parser.ParserModel,int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.parser.ParserFactory:opennlp.tools.parser.Parser create(opennlp.tools.parser.ParserModel,int,double)",
            "opennlp.tools.parser.chunking.Parser:void <init>(opennlp.tools.parser.ParserModel)"
        ]
    },
    "opennlp.tools.parser.treeinsert.Parser:void <init>(opennlp.tools.parser.ParserModel,int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.parser.ParserFactory:opennlp.tools.parser.Parser create(opennlp.tools.parser.ParserModel,int,double)",
            "opennlp.tools.parser.treeinsert.Parser:void <init>(opennlp.tools.parser.ParserModel)"
        ]
    },
    "opennlp.tools.postag.POSSampleSequenceStream:opennlp.tools.ml.model.Event[] updateContext(opennlp.tools.ml.model.Sequence,opennlp.tools.ml.model.AbstractModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:void nextIteration(int)",
            "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:void trainingStats(opennlp.tools.ml.model.MutableContext[])"
        ]
    },
    "opennlp.tools.postag.POSTaggerCrossValidator:void evaluate(opennlp.tools.util.ObjectStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.postag.POSTaggerCrossValidatorTool:void run(java.lang.String,java.lang.String[])"
        ]
    },
    "opennlp.tools.util.featuregen.POSTaggerNameFeatureGenerator:void <init>(opennlp.tools.postag.POSModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.util.featuregen.GeneratorFactory$POSTaggerNameFeatureGeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"
        ]
    },
    "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:void nextIteration(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:void findParameters(int)"
        ]
    },
    "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:void trainingStats(opennlp.tools.ml.model.MutableContext[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:void findParameters(int)"
        ]
    },
    "opennlp.tools.parser.chunking.Parser:opennlp.tools.parser.ParserModel train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.util.TrainingParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.parser.ParserTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.parser.ParserCrossValidator:void evaluate(opennlp.tools.util.ObjectStream,int)"
        ]
    },
    "opennlp.tools.parser.treeinsert.Parser:opennlp.tools.parser.ParserModel train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,opennlp.tools.util.TrainingParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.parser.ParserTrainerTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.parser.ParserCrossValidator:void evaluate(opennlp.tools.util.ObjectStream,int)",
            "opennlp.tools.parser.treeinsert.Parser:opennlp.tools.parser.ParserModel train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,int,int)"
        ]
    },
    "opennlp.tools.parser.ParserFactory:opennlp.tools.parser.Parser create(opennlp.tools.parser.ParserModel,int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.parser.ParserTool:void run(java.lang.String[])",
            "opennlp.tools.parser.ParserFactory:opennlp.tools.parser.Parser create(opennlp.tools.parser.ParserModel)"
        ]
    },
    "opennlp.tools.parser.chunking.Parser:void <init>(opennlp.tools.parser.ParserModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "opennlp.tools.parser.treeinsert.Parser:void <init>(opennlp.tools.parser.ParserModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "opennlp.tools.util.featuregen.GeneratorFactory$POSTaggerNameFeatureGeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.util.featuregen.GeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator createGenerator(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"
        ]
    },
    "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:void findParameters(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:opennlp.tools.ml.model.AbstractModel trainModel(int,opennlp.tools.ml.model.SequenceStream,int,boolean)"
        ]
    },
    "opennlp.tools.parser.ParserCrossValidator:void evaluate(opennlp.tools.util.ObjectStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "opennlp.tools.parser.treeinsert.Parser:opennlp.tools.parser.ParserModel train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.parser.HeadRules,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "opennlp.tools.cmdline.parser.ParserTool:void run(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.CLI:void main(java.lang.String[])"
        ]
    },
    "opennlp.tools.parser.ParserFactory:opennlp.tools.parser.Parser create(opennlp.tools.parser.ParserModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.parser.ParserEvaluatorTool:void run(java.lang.String,java.lang.String[])",
            "opennlp.tools.parser.ParserCrossValidator:void evaluate(opennlp.tools.util.ObjectStream,int)"
        ]
    },
    "opennlp.tools.util.featuregen.GeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator createGenerator(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.util.featuregen.GeneratorFactory$AggregatedFeatureGeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)",
            "opennlp.tools.util.featuregen.GeneratorFactory$CachedFeatureGeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)",
            "opennlp.tools.util.featuregen.GeneratorFactory$WindowFeatureGeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)",
            "opennlp.tools.util.featuregen.GeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator create(java.io.InputStream,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)",
            "opennlp.tools.util.featuregen.GeneratorFactory:java.util.Map extractArtifactSerializerMappings(java.io.InputStream)"
        ]
    },
    "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:opennlp.tools.ml.model.AbstractModel trainModel(int,opennlp.tools.ml.model.SequenceStream,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:opennlp.tools.ml.model.AbstractModel doTrain(opennlp.tools.ml.model.SequenceStream)"
        ]
    },
    "opennlp.tools.util.featuregen.GeneratorFactory$AggregatedFeatureGeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.util.featuregen.GeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator createGenerator(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"
        ]
    },
    "opennlp.tools.util.featuregen.GeneratorFactory$CachedFeatureGeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.util.featuregen.GeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator createGenerator(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"
        ]
    },
    "opennlp.tools.util.featuregen.GeneratorFactory$WindowFeatureGeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator create(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.util.featuregen.GeneratorFactory:opennlp.tools.util.featuregen.AdaptiveFeatureGenerator createGenerator(org.w3c.dom.Element,opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider)"
        ]
    },
    "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:opennlp.tools.ml.model.AbstractModel doTrain(opennlp.tools.ml.model.SequenceStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:opennlp.tools.ml.model.MaxentModel doTrain(opennlp.tools.ml.model.SequenceStream)"
        ]
    },
    "opennlp.tools.ml.perceptron.SimplePerceptronSequenceTrainer:opennlp.tools.ml.model.MaxentModel doTrain(opennlp.tools.ml.model.SequenceStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.ml.AbstractEventModelSequenceTrainer:opennlp.tools.ml.model.MaxentModel train(opennlp.tools.ml.model.SequenceStream)"
        ]
    },
    "opennlp.tools.ml.AbstractEventModelSequenceTrainer:opennlp.tools.ml.model.MaxentModel train(opennlp.tools.ml.model.SequenceStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.lemmatizer.LemmatizerME:opennlp.tools.lemmatizer.LemmatizerModel train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.lemmatizer.LemmatizerFactory)",
            "opennlp.tools.namefind.NameFinderME:opennlp.tools.namefind.TokenNameFinderModel train(java.lang.String,java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.namefind.TokenNameFinderFactory)",
            "opennlp.tools.postag.POSTaggerME:opennlp.tools.postag.POSModel train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.postag.POSTaggerFactory)"
        ]
    },
    "opennlp.tools.lemmatizer.LemmatizerME:opennlp.tools.lemmatizer.LemmatizerModel train(java.lang.String,opennlp.tools.util.ObjectStream,opennlp.tools.util.TrainingParameters,opennlp.tools.lemmatizer.LemmatizerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "opennlp.tools.cmdline.lemmatizer.LemmatizerTrainerTool:void run(java.lang.String,java.lang.String[])"
        ]
    }
}