{
    "com.github.junrar.Archive:void readHeaders(long)": {
        "isVulRoot": true,
        "vulCaller": [
            "com.github.junrar.Archive:void setChannel(com.github.junrar.io.SeekableReadOnlyByteChannel,long)"
        ]
    },
    "com.github.junrar.Archive:void setChannel(com.github.junrar.io.SeekableReadOnlyByteChannel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Archive:void setVolume(com.github.junrar.volume.Volume)"
        ]
    },
    "com.github.junrar.Archive:void setVolume(com.github.junrar.volume.Volume)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.ComprDataIO:int unpRead(byte[],int,int)",
            "com.github.junrar.Archive:void <init>(com.github.junrar.volume.VolumeManager,com.github.junrar.UnrarCallback,java.lang.String)"
        ]
    },
    "com.github.junrar.unpack.ComprDataIO:int unpRead(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack15:boolean unpReadBuf()",
            "com.github.junrar.unpack.Unpack:void unstoreFile()"
        ]
    },
    "com.github.junrar.Archive:void <init>(com.github.junrar.volume.VolumeManager,com.github.junrar.UnrarCallback,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Archive:void <init>(java.io.File)",
            "com.github.junrar.Archive:void <init>(java.io.File,com.github.junrar.UnrarCallback)",
            "com.github.junrar.Archive:void <init>(java.io.File,java.lang.String)",
            "com.github.junrar.Archive:void <init>(java.io.File,com.github.junrar.UnrarCallback,java.lang.String)",
            "com.github.junrar.Archive:void <init>(java.io.InputStream)",
            "com.github.junrar.Archive:void <init>(java.io.InputStream,com.github.junrar.UnrarCallback)",
            "com.github.junrar.Archive:void <init>(java.io.InputStream,java.lang.String)",
            "com.github.junrar.Archive:void <init>(java.io.InputStream,com.github.junrar.UnrarCallback,java.lang.String)"
        ]
    },
    "com.github.junrar.unpack.Unpack15:boolean unpReadBuf()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack15:void unpack15(boolean)",
            "com.github.junrar.unpack.Unpack:void unpack29(boolean)",
            "com.github.junrar.unpack.Unpack:boolean readTables()",
            "com.github.junrar.unpack.Unpack:boolean readVMCode()",
            "com.github.junrar.unpack.Unpack:int getChar()",
            "com.github.junrar.unpack.Unpack20:void unpack20(boolean)",
            "com.github.junrar.unpack.Unpack20:boolean ReadTables20()"
        ]
    },
    "com.github.junrar.unpack.Unpack:void unstoreFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void doUnpack(int,boolean)"
        ]
    },
    "com.github.junrar.Archive:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.Archive:void <init>(java.io.File,com.github.junrar.UnrarCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.Archive:void <init>(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Junrar:com.github.junrar.Archive createArchiveOrThrowException(java.io.File,java.lang.String)"
        ]
    },
    "com.github.junrar.Archive:void <init>(java.io.File,com.github.junrar.UnrarCallback,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.Archive:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.Archive:void <init>(java.io.InputStream,com.github.junrar.UnrarCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.Archive:void <init>(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Junrar:com.github.junrar.Archive createArchiveOrThrowException(java.io.InputStream,java.lang.String)"
        ]
    },
    "com.github.junrar.Archive:void <init>(java.io.InputStream,com.github.junrar.UnrarCallback,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.unpack.Unpack15:void unpack15(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void doUnpack(int,boolean)"
        ]
    },
    "com.github.junrar.unpack.Unpack:void unpack29(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void doUnpack(int,boolean)"
        ]
    },
    "com.github.junrar.unpack.Unpack:boolean readTables()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void unpack29(boolean)",
            "com.github.junrar.unpack.Unpack:boolean readEndOfBlock()"
        ]
    },
    "com.github.junrar.unpack.Unpack:boolean readVMCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void unpack29(boolean)"
        ]
    },
    "com.github.junrar.unpack.Unpack:int getChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.ppm.ModelPPM:boolean decodeInit(com.github.junrar.unpack.Unpack,int)",
            "com.github.junrar.unpack.ppm.RangeCoder:int getChar()"
        ]
    },
    "com.github.junrar.unpack.Unpack20:void unpack20(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void doUnpack(int,boolean)"
        ]
    },
    "com.github.junrar.unpack.Unpack20:boolean ReadTables20()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack20:void unpack20(boolean)",
            "com.github.junrar.unpack.Unpack20:void ReadLastTables()"
        ]
    },
    "com.github.junrar.unpack.Unpack:void doUnpack(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Archive:void doExtractFile(com.github.junrar.rarfile.FileHeader,java.io.OutputStream)"
        ]
    },
    "com.github.junrar.Junrar:com.github.junrar.Archive createArchiveOrThrowException(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Junrar:java.util.List extract(java.io.File,java.io.File,java.lang.String)",
            "com.github.junrar.Junrar:java.util.List getContentsDescription(java.io.File)"
        ]
    },
    "com.github.junrar.Junrar:com.github.junrar.Archive createArchiveOrThrowException(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Junrar:java.util.List extract(java.io.InputStream,java.io.File,java.lang.String)"
        ]
    },
    "com.github.junrar.unpack.Unpack:boolean readEndOfBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void unpack29(boolean)"
        ]
    },
    "com.github.junrar.unpack.ppm.ModelPPM:boolean decodeInit(com.github.junrar.unpack.Unpack,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:boolean readTables()"
        ]
    },
    "com.github.junrar.unpack.ppm.RangeCoder:int getChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.ppm.RangeCoder:void initDecoder(com.github.junrar.unpack.Unpack)",
            "com.github.junrar.unpack.ppm.RangeCoder:void ariDecNormalize()"
        ]
    },
    "com.github.junrar.unpack.Unpack20:void ReadLastTables()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack20:void unpack20(boolean)"
        ]
    },
    "com.github.junrar.Archive:void doExtractFile(com.github.junrar.rarfile.FileHeader,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Archive:void extractFile(com.github.junrar.rarfile.FileHeader,java.io.OutputStream)"
        ]
    },
    "com.github.junrar.Junrar:java.util.List extract(java.io.File,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Junrar:java.util.List extract(java.lang.String,java.lang.String,java.lang.String)",
            "com.github.junrar.Junrar:java.util.List extract(java.io.File,java.io.File)"
        ]
    },
    "com.github.junrar.Junrar:java.util.List getContentsDescription(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.Junrar:java.util.List extract(java.io.InputStream,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Junrar:java.util.List extract(java.io.InputStream,java.io.File)"
        ]
    },
    "com.github.junrar.unpack.ppm.RangeCoder:void initDecoder(com.github.junrar.unpack.Unpack)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.ppm.ModelPPM:boolean decodeInit(com.github.junrar.unpack.Unpack,int)"
        ]
    },
    "com.github.junrar.unpack.ppm.RangeCoder:void ariDecNormalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.ppm.ModelPPM:int decodeChar()"
        ]
    },
    "com.github.junrar.Archive:void extractFile(com.github.junrar.rarfile.FileHeader,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.LocalFolderExtractor:java.io.File extract(com.github.junrar.Archive,com.github.junrar.rarfile.FileHeader)",
            "com.github.junrar.Archive:void lambda$getInputStream$0(com.github.junrar.rarfile.FileHeader,java.io.PipedOutputStream)"
        ]
    },
    "com.github.junrar.Junrar:java.util.List extract(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Junrar:java.util.List extract(java.lang.String,java.lang.String)"
        ]
    },
    "com.github.junrar.Junrar:java.util.List extract(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.Junrar:java.util.List extract(java.io.InputStream,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.unpack.ppm.ModelPPM:int decodeChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void unpack29(boolean)",
            "com.github.junrar.unpack.Unpack:boolean readVMCodePPM()"
        ]
    },
    "com.github.junrar.LocalFolderExtractor:java.io.File extract(com.github.junrar.Archive,com.github.junrar.rarfile.FileHeader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Junrar:java.io.File tryToExtract(com.github.junrar.LocalFolderExtractor,com.github.junrar.Archive,com.github.junrar.rarfile.FileHeader)"
        ]
    },
    "com.github.junrar.Archive:void lambda$getInputStream$0(com.github.junrar.rarfile.FileHeader,java.io.PipedOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Archive$lambda_getInputStream_0__2:void run()"
        ]
    },
    "com.github.junrar.Junrar:java.util.List extract(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.unpack.Unpack:boolean readVMCodePPM()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void unpack29(boolean)"
        ]
    },
    "com.github.junrar.Junrar:java.io.File tryToExtract(com.github.junrar.LocalFolderExtractor,com.github.junrar.Archive,com.github.junrar.rarfile.FileHeader)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Junrar:java.util.List extractArchiveTo(com.github.junrar.Archive,com.github.junrar.LocalFolderExtractor)"
        ]
    },
    "com.github.junrar.Archive$lambda_getInputStream_0__2:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.Junrar:java.util.List extractArchiveTo(com.github.junrar.Archive,com.github.junrar.LocalFolderExtractor)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Junrar:java.util.List extract(java.io.File,java.io.File,java.lang.String)",
            "com.github.junrar.Junrar:java.util.List extract(java.io.InputStream,java.io.File,java.lang.String)"
        ]
    }
}