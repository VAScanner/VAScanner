{
    "org.bouncycastle.crypto.internal.encodings.OAEPEncoding:byte[] decodeBlock(byte[],int,int)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.bouncycastle.crypto.internal.encodings.OAEPEncoding:byte[] processBlock(byte[],int,int)"
        ]
    },
    "org.bouncycastle.crypto.internal.encodings.OAEPEncoding:byte[] processBlock(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$6:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doExtraction(org.bouncycastle.crypto.internal.AsymmetricBlockCipher,byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doGeneration(org.bouncycastle.crypto.internal.AsymmetricBlockCipher)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyUnwrapper:byte[] unwrap(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyWrapper:byte[] wrap(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:byte[] generateSignature()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:boolean verifySignature(byte[])",
            "org.bouncycastle.crypto.fips.PSSSigner:byte[] generateSignature()",
            "org.bouncycastle.crypto.fips.PSSSigner:boolean verifySignature(byte[])",
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyUnwrapper:byte[] unwrap(byte[],int,int)",
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyWrapper:byte[] wrap(byte[],int,int)",
            "org.bouncycastle.crypto.general.ElGamal$OperatorFactory$1:byte[] decryptBlock(byte[],int,int)",
            "org.bouncycastle.crypto.general.GuardedAsymmetricOperatorFactory$BlockEncryptor:byte[] encryptBlock(byte[],int,int)",
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyUnwrapper:byte[] unwrap(byte[],int,int)",
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyWrapper:byte[] wrap(byte[],int,int)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:byte[] generateSignature()",
            "org.bouncycastle.crypto.general.RSA$NullSigner:boolean verifySignature(byte[])",
            "org.bouncycastle.crypto.general.RSA$OperatorFactory$BlockDecryptor:byte[] decryptBlock(byte[],int,int)",
            "org.bouncycastle.crypto.internal.encodings.OAEPEncoding:byte[] encodeBlock(byte[],int,int)",
            "org.bouncycastle.crypto.internal.encodings.OAEPEncoding:byte[] decodeBlock(byte[],int,int)",
            "org.bouncycastle.crypto.internal.encodings.PKCS1Encoding:byte[] encodeBlock(byte[],int,int)",
            "org.bouncycastle.crypto.internal.encodings.PKCS1Encoding:byte[] decodeBlock(byte[],int,int)",
            "org.bouncycastle.crypto.internal.signers.BaseISO9796d2PSSSigner:void updateWithRecoveredMessage(byte[])",
            "org.bouncycastle.crypto.internal.signers.BaseISO9796d2PSSSigner:byte[] generateSignature()",
            "org.bouncycastle.crypto.internal.signers.BaseISO9796d2Signer:void updateWithRecoveredMessage(byte[])",
            "org.bouncycastle.crypto.internal.signers.BaseISO9796d2Signer:byte[] generateSignature()",
            "org.bouncycastle.crypto.internal.signers.BaseISO9796d2Signer:boolean verifySignature(byte[])",
            "org.bouncycastle.crypto.internal.signers.BaseRsaDigestSigner:byte[] generateSignature()",
            "org.bouncycastle.crypto.internal.signers.BaseRsaDigestSigner:boolean verifySignature(byte[])",
            "org.bouncycastle.crypto.internal.signers.BaseX931Signer:byte[] generateSignature()",
            "org.bouncycastle.crypto.internal.signers.BaseX931Signer:boolean verifySignature(byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$6:void evaluate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:void validate(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.fips.VariantInternalKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doExtraction(org.bouncycastle.crypto.internal.AsymmetricBlockCipher,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation access$2300(org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl,org.bouncycastle.crypto.internal.AsymmetricBlockCipher,byte[],int,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doGeneration(org.bouncycastle.crypto.internal.AsymmetricBlockCipher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$5:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyUnwrapper:byte[] unwrap(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:java.security.Key engineUnwrap(byte[],java.lang.String,int)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:java.security.Key engineUnwrap(byte[],java.lang.String,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyWrapper:byte[] wrap(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] engineWrap(java.security.Key)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:byte[] engineWrap(java.security.Key)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:byte[] generateSignature()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:byte[] getSignature()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:boolean verifySignature(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:boolean verify(byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.PSSSigner:byte[] generateSignature()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:byte[] getSignature()"
        ]
    },
    "org.bouncycastle.crypto.fips.PSSSigner:boolean verifySignature(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:boolean verify(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyUnwrapper:byte[] unwrap(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:java.security.Key engineUnwrap(byte[],java.lang.String,int)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:java.security.Key engineUnwrap(byte[],java.lang.String,int)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyWrapper:byte[] wrap(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] engineWrap(java.security.Key)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:byte[] engineWrap(java.security.Key)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$OperatorFactory$1:byte[] decryptBlock(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] getOutput()"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedAsymmetricOperatorFactory$BlockEncryptor:byte[] encryptBlock(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] getOutput()"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyUnwrapper:byte[] unwrap(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:java.security.Key engineUnwrap(byte[],java.lang.String,int)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:java.security.Key engineUnwrap(byte[],java.lang.String,int)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyWrapper:byte[] wrap(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] engineWrap(java.security.Key)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:byte[] engineWrap(java.security.Key)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$NullSigner:byte[] generateSignature()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:byte[] getSignature()"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$NullSigner:boolean verifySignature(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:boolean verify(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$OperatorFactory$BlockDecryptor:byte[] decryptBlock(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] getOutput()"
        ]
    },
    "org.bouncycastle.crypto.internal.encodings.OAEPEncoding:byte[] encodeBlock(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.internal.encodings.OAEPEncoding:byte[] processBlock(byte[],int,int)"
        ]
    },
    "org.bouncycastle.crypto.internal.encodings.PKCS1Encoding:byte[] encodeBlock(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.internal.encodings.PKCS1Encoding:byte[] processBlock(byte[],int,int)"
        ]
    },
    "org.bouncycastle.crypto.internal.encodings.PKCS1Encoding:byte[] decodeBlock(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.internal.encodings.PKCS1Encoding:byte[] processBlock(byte[],int,int)"
        ]
    },
    "org.bouncycastle.crypto.internal.signers.BaseISO9796d2PSSSigner:void updateWithRecoveredMessage(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$1:void updateWithRecoveredMessage(byte[])",
            "org.bouncycastle.crypto.internal.signers.BaseISO9796d2PSSSigner:boolean verifySignature(byte[])"
        ]
    },
    "org.bouncycastle.crypto.internal.signers.BaseISO9796d2PSSSigner:byte[] generateSignature()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:byte[] getSignature()"
        ]
    },
    "org.bouncycastle.crypto.internal.signers.BaseISO9796d2Signer:void updateWithRecoveredMessage(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$1:void updateWithRecoveredMessage(byte[])"
        ]
    },
    "org.bouncycastle.crypto.internal.signers.BaseISO9796d2Signer:byte[] generateSignature()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:byte[] getSignature()"
        ]
    },
    "org.bouncycastle.crypto.internal.signers.BaseISO9796d2Signer:boolean verifySignature(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:boolean verify(byte[])"
        ]
    },
    "org.bouncycastle.crypto.internal.signers.BaseRsaDigestSigner:byte[] generateSignature()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$4:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:byte[] getSignature()"
        ]
    },
    "org.bouncycastle.crypto.internal.signers.BaseRsaDigestSigner:boolean verifySignature(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$4:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:boolean verify(byte[])"
        ]
    },
    "org.bouncycastle.crypto.internal.signers.BaseX931Signer:byte[] generateSignature()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:byte[] getSignature()"
        ]
    },
    "org.bouncycastle.crypto.internal.signers.BaseX931Signer:boolean verifySignature(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:boolean verify(byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.SelfTestExecutor:void validate(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.fips.VariantInternalKatTest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:void lazyInitDRBG()",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int generate(byte[],byte[],boolean)",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:void reseed(byte[])",
            "org.bouncycastle.crypto.fips.FipsDH:void ffPrimitiveZTest()",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsEC:void ecPrimitiveZTest()",
            "org.bouncycastle.crypto.fips.FipsRSA:void rsaSignTest(org.bouncycastle.crypto.fips.FipsRSA$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsRSA:void rsaKasTest(org.bouncycastle.crypto.fips.FipsRSA$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsRSA:void rsaKeyTransportTest(org.bouncycastle.crypto.fips.FipsRSA$EngineProvider)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation access$2300(org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl,org.bouncycastle.crypto.internal.AsymmetricBlockCipher,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$5:void evaluate()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$5:void evaluate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:void validate(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.fips.VariantInternalKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:java.security.Key engineUnwrap(byte[],java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseWrapCipher:java.security.Key engineUnwrap(byte[],java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] engineWrap(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseWrapCipher:byte[] engineWrap(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:int getSignature(byte[],int)",
            "org.bouncycastle.jcajce.provider.BaseSignature:byte[] engineSign()"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:byte[] getSignature()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:int getSignature(byte[],int)",
            "org.bouncycastle.jcajce.provider.BaseSignature:byte[] engineSign()"
        ]
    },
    "org.bouncycastle.crypto.internal.io.SignerOutputStream:byte[] getSignature()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$1:boolean isVerified(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:boolean engineVerify(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$1:boolean isVerified(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:boolean engineVerify(byte[])"
        ]
    },
    "org.bouncycastle.crypto.internal.io.SignerOutputStream:boolean verify(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] getOutput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] engineDoFinal(byte[],int,int)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:int engineDoFinal(byte[],int,int,byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.internal.encodings.PKCS1Encoding:byte[] processBlock(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$7:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doExtraction(org.bouncycastle.crypto.internal.AsymmetricBlockCipher,byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doGeneration(org.bouncycastle.crypto.internal.AsymmetricBlockCipher)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyUnwrapper:byte[] unwrap(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyWrapper:byte[] wrap(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:byte[] generateSignature()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:boolean verifySignature(byte[])",
            "org.bouncycastle.crypto.fips.PSSSigner:byte[] generateSignature()",
            "org.bouncycastle.crypto.fips.PSSSigner:boolean verifySignature(byte[])",
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyUnwrapper:byte[] unwrap(byte[],int,int)",
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyWrapper:byte[] wrap(byte[],int,int)",
            "org.bouncycastle.crypto.general.ElGamal$OperatorFactory$1:byte[] decryptBlock(byte[],int,int)",
            "org.bouncycastle.crypto.general.GuardedAsymmetricOperatorFactory$BlockEncryptor:byte[] encryptBlock(byte[],int,int)",
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyUnwrapper:byte[] unwrap(byte[],int,int)",
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyWrapper:byte[] wrap(byte[],int,int)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:byte[] generateSignature()",
            "org.bouncycastle.crypto.general.RSA$NullSigner:boolean verifySignature(byte[])",
            "org.bouncycastle.crypto.general.RSA$OperatorFactory$BlockDecryptor:byte[] decryptBlock(byte[],int,int)",
            "org.bouncycastle.crypto.internal.encodings.OAEPEncoding:byte[] encodeBlock(byte[],int,int)",
            "org.bouncycastle.crypto.internal.encodings.OAEPEncoding:byte[] decodeBlock(byte[],int,int)",
            "org.bouncycastle.crypto.internal.encodings.PKCS1Encoding:byte[] encodeBlock(byte[],int,int)",
            "org.bouncycastle.crypto.internal.encodings.PKCS1Encoding:byte[] decodeBlock(byte[],int,int)",
            "org.bouncycastle.crypto.internal.signers.BaseISO9796d2PSSSigner:void updateWithRecoveredMessage(byte[])",
            "org.bouncycastle.crypto.internal.signers.BaseISO9796d2PSSSigner:byte[] generateSignature()",
            "org.bouncycastle.crypto.internal.signers.BaseISO9796d2Signer:void updateWithRecoveredMessage(byte[])",
            "org.bouncycastle.crypto.internal.signers.BaseISO9796d2Signer:byte[] generateSignature()",
            "org.bouncycastle.crypto.internal.signers.BaseISO9796d2Signer:boolean verifySignature(byte[])",
            "org.bouncycastle.crypto.internal.signers.BaseRsaDigestSigner:byte[] generateSignature()",
            "org.bouncycastle.crypto.internal.signers.BaseRsaDigestSigner:boolean verifySignature(byte[])",
            "org.bouncycastle.crypto.internal.signers.BaseX931Signer:byte[] generateSignature()",
            "org.bouncycastle.crypto.internal.signers.BaseX931Signer:boolean verifySignature(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$1:void updateWithRecoveredMessage(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.internal.signers.BaseISO9796d2PSSSigner:boolean verifySignature(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$1:boolean isVerified(byte[])",
            "org.bouncycastle.crypto.internal.io.SignerOutputStream:boolean verify(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner:byte[] getSignature()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner:int getSignature(byte[],int)",
            "org.bouncycastle.jcajce.provider.BaseSignature:byte[] engineSign()"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$1:boolean isVerified(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:boolean engineVerify(byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$4:void evaluate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:void validate(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.fips.VariantInternalKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.DRBGPseudoRandom:void lazyInitDRBG()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int getBlockSize()",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int getSecurityStrength()",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int generate(byte[],byte[],boolean)",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:void reseed(byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int generate(byte[],byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.ContinuousTestingPseudoRNG:int generate(byte[],byte[],boolean)",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int generate(byte[],byte[],boolean)",
            "org.bouncycastle.crypto.fips.FipsSecureRandom$RandomSpi:void engineNextBytes(byte[])",
            "org.bouncycastle.crypto.fips.FipsSecureRandom:void nextBytes(byte[],byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.DRBGPseudoRandom:void reseed(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.ContinuousTestingPseudoRNG:void reseed(byte[])",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int generate(byte[],byte[],boolean)",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:void reseed(byte[])",
            "org.bouncycastle.crypto.fips.FipsSecureRandom$RandomSpi:void engineNextBytes(byte[])",
            "org.bouncycastle.crypto.fips.FipsSecureRandom:void nextBytes(byte[],byte[])",
            "org.bouncycastle.crypto.fips.FipsSecureRandom:void reseed()",
            "org.bouncycastle.crypto.fips.FipsSecureRandom:void reseed(byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH:void ffPrimitiveZTest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDRBG:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:void ecPrimitiveZTest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:void rsaSignTest(org.bouncycastle.crypto.fips.FipsRSA$EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:void rsaKasTest(org.bouncycastle.crypto.fips.FipsRSA$EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:void rsaKeyTransportTest(org.bouncycastle.crypto.fips.FipsRSA$EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:void <clinit>()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:int getSignature(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseSignature:byte[] engineSign()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:int getSignature(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseSignature:boolean engineVerify(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] engineDoFinal(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:int engineDoFinal(byte[],int,int,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsRSA$7:void evaluate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:void validate(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.fips.VariantInternalKatTest)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner:int getSignature(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int getBlockSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.ContinuousTestingPseudoRNG:int getBlockSize()",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int getBlockSize()",
            "org.bouncycastle.crypto.fips.FipsSecureRandom:int getBlockSize()"
        ]
    },
    "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int getSecurityStrength()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.ContinuousTestingPseudoRNG:int getSecurityStrength()",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int getSecurityStrength()",
            "org.bouncycastle.crypto.fips.FipsSecureRandom:int getSecurityStrength()"
        ]
    },
    "org.bouncycastle.crypto.fips.ContinuousTestingPseudoRNG:int generate(byte[],byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.ContinuousTestingPseudoRNG:int generate(byte[],byte[],boolean)",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int generate(byte[],byte[],boolean)",
            "org.bouncycastle.crypto.fips.FipsSecureRandom$RandomSpi:void engineNextBytes(byte[])",
            "org.bouncycastle.crypto.fips.FipsSecureRandom:void nextBytes(byte[],byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSecureRandom$RandomSpi:void engineNextBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsSecureRandom:void nextBytes(byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.ContinuousTestingPseudoRNG:void reseed(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.ContinuousTestingPseudoRNG:void reseed(byte[])",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int generate(byte[],byte[],boolean)",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:void reseed(byte[])",
            "org.bouncycastle.crypto.fips.FipsSecureRandom$RandomSpi:void engineNextBytes(byte[])",
            "org.bouncycastle.crypto.fips.FipsSecureRandom:void nextBytes(byte[],byte[])",
            "org.bouncycastle.crypto.fips.FipsSecureRandom:void reseed()",
            "org.bouncycastle.crypto.fips.FipsSecureRandom:void reseed(byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSecureRandom:void reseed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.CipherKeyGenerator:byte[] generateKey()",
            "org.bouncycastle.crypto.general.CipherKeyGenerator:byte[] generateKey()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSecureRandom:void reseed(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$1:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsDH$2:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsDH$3:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsDH$4:org.bouncycastle.crypto.internal.params.DhPrivateKeyParameters run()",
            "org.bouncycastle.crypto.fips.FipsDH$AgreementParameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsDH$AgreementParameters:void <init>(org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])",
            "org.bouncycastle.crypto.fips.FipsDH$AgreementProvider$1:void evaluate(org.bouncycastle.crypto.fips.DhBasicAgreement)",
            "org.bouncycastle.crypto.fips.FipsDH$AgreementProvider:org.bouncycastle.crypto.fips.DhBasicAgreement createEngine()",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory$1:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(int,int,int,java.math.BigInteger,java.math.BigInteger,byte[],int)",
            "org.bouncycastle.crypto.fips.FipsDH$DomainParametersGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm,org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsDH$KeyGenParameters:void <init>(org.bouncycastle.crypto.asymmetric.DHDomainParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDH$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsDH$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory$1:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder,byte[],int)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParametersBuilder:void <init>()",
            "org.bouncycastle.crypto.fips.FipsDH$MqvProvider$1:void evaluate(org.bouncycastle.crypto.fips.MqvBasicAgreement)",
            "org.bouncycastle.crypto.fips.FipsDH$MqvProvider:org.bouncycastle.crypto.fips.MqvBasicAgreement createEngine()",
            "org.bouncycastle.crypto.fips.FipsDH:void validateKeyPair(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsDH:void ffPrimitiveZTest()",
            "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.fips.FipsAlgorithm access$200()",
            "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.internal.params.DhParameters access$1200(org.bouncycastle.crypto.asymmetric.DHDomainParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void access$1300(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.internal.params.DhPrivateKeyParameters access$1400(org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey)",
            "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair access$1600(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.fips.FipsAlgorithm access$1700()",
            "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair access$1800()",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.jcajce.provider.BaseAgreement:java.security.Key engineDoPhase(java.security.Key,boolean)",
            "org.bouncycastle.jcajce.provider.ProvDH$3:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDH$4:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDRBG:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.asymmetric.KeyUtils:java.math.BigInteger validatedModulus(java.math.BigInteger)",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDRBG:void <clinit>()",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$2:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsEC$3:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsEC$4:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsEC$6:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters run()",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DhProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcDhBasicAgreement)",
            "org.bouncycastle.crypto.fips.FipsEC$DhProvider:org.bouncycastle.crypto.fips.EcDhBasicAgreement createEngine()",
            "org.bouncycastle.crypto.fips.FipsEC$DhcProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcDhcBasicAgreement)",
            "org.bouncycastle.crypto.fips.FipsEC$DhcProvider:org.bouncycastle.crypto.fips.EcDhcBasicAgreement createEngine()",
            "org.bouncycastle.crypto.fips.FipsEC$DsaProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcDsaSigner)",
            "org.bouncycastle.crypto.fips.FipsEC$DsaProvider:org.bouncycastle.crypto.fips.EcDsaSigner createEngine()",
            "org.bouncycastle.crypto.fips.FipsEC$KeyGenParameters:void <init>(org.bouncycastle.crypto.asymmetric.ECDomainParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$KeyGenParameters:void <init>(org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParametersBuilder,org.bouncycastle.crypto.asymmetric.ECDomainParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsEC$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsEC$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder,byte[],int)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParametersBuilder:void <init>()",
            "org.bouncycastle.crypto.fips.FipsEC$MqvProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcMqvBasicAgreement)",
            "org.bouncycastle.crypto.fips.FipsEC$MqvProvider:org.bouncycastle.crypto.fips.EcMqvBasicAgreement createEngine()",
            "org.bouncycastle.crypto.fips.FipsEC:void validateKeyPair(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsEC:void ecPrimitiveZTest()",
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair getTestKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.fips.FipsAlgorithm access$400()",
            "org.bouncycastle.crypto.fips.FipsEC:void access$600(org.bouncycastle.crypto.Algorithm,org.bouncycastle.crypto.asymmetric.ECDomainParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.params.EcDomainParameters access$700(org.bouncycastle.crypto.asymmetric.ECDomainParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void access$800(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters access$900(org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey)",
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.fips.FipsEngineProvider access$1000()",
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.fips.FipsEngineProvider access$1100()",
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.fips.FipsEngineProvider access$1200()",
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.fips.FipsEngineProvider access$1400()",
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair access$1600(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair access$1700()",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.general.EC:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvEC$10:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$11:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$12:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$13:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$14:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$15:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$18:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$26:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$27:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$28:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$29:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$30:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$31:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$32:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$34:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvEC$4:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvEC$5:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvEC$6:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$7:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$8:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$9:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$4:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$5:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$6:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$7:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$EngineProvider:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createEngine()",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doExtraction(org.bouncycastle.crypto.internal.AsymmetricBlockCipher,byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doGeneration(org.bouncycastle.crypto.internal.AsymmetricBlockCipher)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(java.math.BigInteger,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(java.math.BigInteger,int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void validate()",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyUnwrapper:void <init>(org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyWrapper:void <init>(org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters:void <init>(org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters,int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm,org.bouncycastle.crypto.fips.FipsDigestAlgorithm,byte[])",
            "org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15Parameters:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm,org.bouncycastle.crypto.fips.FipsDigestAlgorithm,int,byte[],int)",
            "org.bouncycastle.crypto.fips.FipsRSA$SVEKTSParameters:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$X931SignatureParameters:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$X931SignatureParameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsRSA:void rsaSignTest(org.bouncycastle.crypto.fips.FipsRSA$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsRSA:void rsaKasTest(org.bouncycastle.crypto.fips.FipsRSA$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsRSA:void rsaKeyTransportTest(org.bouncycastle.crypto.fips.FipsRSA$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsRSA:java.math.BigInteger access$100()",
            "org.bouncycastle.crypto.fips.FipsRSA:java.math.BigInteger access$200()",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.fips.FipsAlgorithm access$300()",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.fips.FipsAlgorithm access$400()",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.fips.FipsAlgorithm access$500()",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.fips.FipsAlgorithm access$600()",
            "org.bouncycastle.crypto.fips.FipsRSA:void access$800(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.params.RsaKeyParameters access$900(org.bouncycastle.crypto.asymmetric.AsymmetricRSAPrivateKey)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.Signer access$1100(org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher access$1200(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.fips.FipsAlgorithm access$1300()",
            "org.bouncycastle.crypto.fips.FipsRSA:java.math.BigInteger access$1800()",
            "org.bouncycastle.crypto.fips.FipsRSA:java.math.BigInteger access$1900()",
            "org.bouncycastle.crypto.fips.FipsRSA:byte[] access$2000()",
            "org.bouncycastle.crypto.fips.FipsRSA:byte[] access$2100()",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.params.RsaPrivateCrtKeyParameters access$2200()",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.params.RsaKeyParameters access$2400()",
            "org.bouncycastle.crypto.fips.FipsRSA:void <clinit>()",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineSetParameter(java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.ProvRSA$15$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$16:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvRSA$17:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvRSA$18:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvRSA$19:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvRSA$5$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvRSA$9$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$9:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvRSA:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvRSA:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters createFipsOaepParameters(javax.crypto.spec.OAEPParameterSpec)",
            "org.bouncycastle.jcajce.provider.ProvRSA:org.bouncycastle.crypto.Algorithm getAlgorithmType()"
        ]
    },
    "org.bouncycastle.crypto.fips.ContinuousTestingPseudoRNG:int getBlockSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.ContinuousTestingPseudoRNG:int getBlockSize()",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int getBlockSize()",
            "org.bouncycastle.crypto.fips.FipsSecureRandom:int getBlockSize()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSecureRandom:int getBlockSize()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.ContinuousTestingPseudoRNG:int getSecurityStrength()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.ContinuousTestingPseudoRNG:int getSecurityStrength()",
            "org.bouncycastle.crypto.fips.DRBGPseudoRandom:int getSecurityStrength()",
            "org.bouncycastle.crypto.fips.FipsSecureRandom:int getSecurityStrength()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSecureRandom:int getSecurityStrength()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.Utils:void validateRandom(java.security.SecureRandom,int,org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.String)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:int getDefaultRandomSecurityStrength()"
        ]
    },
    "org.bouncycastle.crypto.fips.CipherKeyGenerator:byte[] generateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$KeyGenerator:org.bouncycastle.crypto.SymmetricSecretKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.CipherKeyGenerator:byte[] generateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ARC4$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.Blowfish$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.CAST5$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.Camellia$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.GOST28147$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.IDEA$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.RC2$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.SEED$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.SHACAL2$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.Serpent$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.SipHash$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.Twofish$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$1:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$1:boolean hasTestPassed(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$2:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$2:boolean hasTestPassed(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$3:void evaluate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:void validate(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.fips.VariantInternalKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$4:org.bouncycastle.crypto.internal.params.DhPrivateKeyParameters run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$4:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$AgreementParameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$AgreementParameters:void <init>()",
            "org.bouncycastle.crypto.fips.FipsDH$AgreementParameters:org.bouncycastle.crypto.fips.FipsDH$AgreementParameters withDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$AgreementParameters:void <init>(org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$AgreementParameters:org.bouncycastle.crypto.fips.FipsDH$AgreementParameters withPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$AgreementProvider$1:void evaluate(org.bouncycastle.crypto.fips.DhBasicAgreement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$AgreementProvider$1:void evaluate(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$AgreementProvider:org.bouncycastle.crypto.fips.DhBasicAgreement createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$AgreementProvider:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory$1:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:byte[] calculateAgreement(org.bouncycastle.crypto.AsymmetricPublicKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(int,int,int,java.math.BigInteger,java.math.BigInteger,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(int,int,int)",
            "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(int,int,int,int)",
            "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(java.math.BigInteger,java.math.BigInteger)",
            "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(java.math.BigInteger,java.math.BigInteger,byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$DomainParametersGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm,org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$DomainParametersGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$KeyGenParameters:void <init>(org.bouncycastle.crypto.asymmetric.DHDomainParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal$KeyPairGenerator:void <init>(org.bouncycastle.crypto.general.ElGamal$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDH$KeyGenParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal$KeyPairGenerator:void <init>(org.bouncycastle.crypto.general.ElGamal$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvGOST3410$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory$1:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:byte[] calculateAgreement(org.bouncycastle.crypto.AsymmetricPublicKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters withDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.fips.FipsDH$1)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters withPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters withKDF(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder,byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParametersBuilder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MqvProvider$1:void evaluate(org.bouncycastle.crypto.fips.MqvBasicAgreement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$MqvProvider$1:void evaluate(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MqvProvider:org.bouncycastle.crypto.fips.MqvBasicAgreement createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$MqvProvider:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH:void validateKeyPair(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH:void access$1300(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.fips.FipsAlgorithm access$200()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder,byte[],int)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParametersBuilder:void <init>()",
            "org.bouncycastle.crypto.fips.FipsDH$MqvProvider:org.bouncycastle.crypto.fips.MqvBasicAgreement createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.internal.params.DhParameters access$1200(org.bouncycastle.crypto.asymmetric.DHDomainParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$4:org.bouncycastle.crypto.internal.params.DhPrivateKeyParameters run()",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory$1:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)",
            "org.bouncycastle.crypto.fips.FipsDH$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDH$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory$1:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH:void access$1300(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.internal.params.DhPrivateKeyParameters access$1400(org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair access$1600(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$1:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsDH$2:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsDH$AgreementProvider$1:void evaluate(org.bouncycastle.crypto.fips.DhBasicAgreement)",
            "org.bouncycastle.crypto.fips.FipsDH$MqvProvider$1:void evaluate(org.bouncycastle.crypto.fips.MqvBasicAgreement)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.fips.FipsAlgorithm access$1700()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$AgreementProvider:org.bouncycastle.crypto.fips.DhBasicAgreement createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair access$1800()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$3:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsDH$AgreementProvider$1:void evaluate(org.bouncycastle.crypto.fips.DhBasicAgreement)",
            "org.bouncycastle.crypto.fips.FipsDH$MqvProvider$1:void evaluate(org.bouncycastle.crypto.fips.MqvBasicAgreement)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseAgreement:java.security.Key engineDoPhase(java.security.Key,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDH$3:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$4:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.PrivateKey getPrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.PublicKey getPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)"
        ]
    },
    "org.bouncycastle.crypto.asymmetric.KeyUtils:java.math.BigInteger validatedModulus(java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPrivateKey:void <init>(org.bouncycastle.crypto.Algorithm,org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.pkcs.RSAPrivateKey)",
            "org.bouncycastle.crypto.asymmetric.KeyUtils:java.math.BigInteger validated(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:java.security.Key rebuildKey(java.lang.String,int,byte[],java.security.Provider)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$1:java.lang.Object run()",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void processConfigString(java.lang.String)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.Provider$Service getService(java.lang.String,java.lang.String)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void addKeyInfoConverter(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.jcajce.provider.AsymmetricKeyInfoConverter)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.util.Map getAttributeMap(java.util.Map)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.PublicKey getPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.PrivateKey getPrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:boolean access$000(java.lang.String)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineLoad(java.io.InputStream,char[])",
            "org.bouncycastle.jcajce.provider.X509CertificateObject:java.security.PublicKey getPublicKey()",
            "org.bouncycastle.jcajce.provider.X509KeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.X509KeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$2:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$2:boolean hasTestPassed(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$3:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$3:boolean hasTestPassed(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$4:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$4:boolean hasTestPassed(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$6:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$6:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DhProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcDhBasicAgreement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DhProvider$1:void evaluate(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DhProvider:org.bouncycastle.crypto.fips.EcDhBasicAgreement createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DhProvider:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DhcProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcDhcBasicAgreement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DhcProvider$1:void evaluate(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DhcProvider:org.bouncycastle.crypto.fips.EcDhcBasicAgreement createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DhcProvider:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DsaProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcDsaSigner)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DsaProvider$1:void evaluate(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DsaProvider:org.bouncycastle.crypto.fips.EcDsaSigner createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DsaProvider:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$KeyGenParameters:void <init>(org.bouncycastle.crypto.asymmetric.ECDomainParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.EC$KeyPairGenerator:void <init>(org.bouncycastle.crypto.general.EC$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$KeyGenParameters:void <init>(org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParametersBuilder,org.bouncycastle.crypto.asymmetric.ECDomainParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsEC$KeyGenParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.EC$KeyPairGenerator:void <init>(org.bouncycastle.crypto.general.EC$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.EC$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvGOST3410$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters withDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.fips.FipsEC$1)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters withPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters withKDF(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder,byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParametersBuilder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MqvProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcMqvBasicAgreement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$MqvProvider$1:void evaluate(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MqvProvider:org.bouncycastle.crypto.fips.EcMqvBasicAgreement createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$MqvProvider:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:void validateKeyPair(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC:void access$800(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair getTestKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair access$1600(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.fips.FipsAlgorithm access$400()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$KeyGenParameters:void <init>(org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParametersBuilder,org.bouncycastle.crypto.asymmetric.ECDomainParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder,byte[],int)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParametersBuilder:void <init>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:void access$600(org.bouncycastle.crypto.Algorithm,org.bouncycastle.crypto.asymmetric.ECDomainParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsEC$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.params.EcDomainParameters access$700(org.bouncycastle.crypto.asymmetric.ECDomainParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$6:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters run()",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsEC$KeyGenParameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:void access$800(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters access$900(org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.fips.FipsEngineProvider access$1000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.fips.FipsEngineProvider access$1100()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.fips.FipsEngineProvider access$1200()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.fips.FipsEngineProvider access$1400()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair access$1600(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$2:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsEC$3:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsEC$4:boolean hasTestPassed(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsEC$DhProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcDhBasicAgreement)",
            "org.bouncycastle.crypto.fips.FipsEC$DhcProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcDhcBasicAgreement)",
            "org.bouncycastle.crypto.fips.FipsEC$MqvProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcMqvBasicAgreement)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair access$1700()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$DhProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcDhBasicAgreement)",
            "org.bouncycastle.crypto.fips.FipsEC$DhcProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcDhcBasicAgreement)",
            "org.bouncycastle.crypto.fips.FipsEC$DsaProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcDsaSigner)",
            "org.bouncycastle.crypto.fips.FipsEC$MqvProvider$1:void evaluate(org.bouncycastle.crypto.fips.EcMqvBasicAgreement)"
        ]
    },
    "org.bouncycastle.crypto.general.EC:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.EC$1:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters run()",
            "org.bouncycastle.crypto.general.EC$DSAOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.EC$DSAParameters)",
            "org.bouncycastle.crypto.general.EC$DSAOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.EC$DSAParameters)",
            "org.bouncycastle.crypto.general.EC$KeyGenParameters:void <init>(org.bouncycastle.crypto.asymmetric.ECDomainParameters)",
            "org.bouncycastle.crypto.general.EC:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters access$200(org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey)",
            "org.bouncycastle.crypto.general.EC:org.bouncycastle.crypto.internal.params.EcDomainParameters access$300(org.bouncycastle.crypto.asymmetric.ECDomainParameters)",
            "org.bouncycastle.crypto.general.EC:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvEC$19:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$20:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$21:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$22:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$23:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$24:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$25:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$33:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$10:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$11:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$12:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$13:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$14:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$15:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$18:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$26:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$27:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$28:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$29:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$30:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$31:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$32:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$34:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$4:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$5:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$6:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$7:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$8:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$9:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$EngineProvider:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$4:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$5:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$6:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$7:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$EngineProvider:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(java.math.BigInteger,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(java.math.BigInteger,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.general.RSA$KeyGenParameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,java.math.BigInteger,int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void access$700(org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.general.RSA$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvGOST3410$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyUnwrapper:void <init>(org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyUnwrapper:org.bouncycastle.crypto.fips.FipsKeyUnwrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapperUsingSecureRandom createKeyUnwrapper(org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyWrapper:void <init>(org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyWrapper:org.bouncycastle.crypto.KeyWrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapperUsingSecureRandom createKeyWrapper(org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$1)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters:void <init>(org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters:void <init>(org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters:org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters withOAEPParameters(org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters:org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters withKeySizeInBits(int)",
            "org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters:org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters withMacKeySizeInBits(int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm,org.bouncycastle.crypto.fips.FipsDigestAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters withDigest(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters withMGFDigest(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters withEncodingParams(byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15Parameters:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters withDigestAlgorithm(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm,org.bouncycastle.crypto.fips.FipsDigestAlgorithm,int,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters withDigestAlgorithm(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters withMGFDigest(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters withSaltLength(int)",
            "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters withTrailer(int)",
            "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters withSalt(byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SVEKTSParameters:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvRSA$12$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$X931SignatureParameters:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$X931SignatureParameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$X931SignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$X931SignatureParameters withDigestAlgorithm(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher access$1200(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:void access$800(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:java.math.BigInteger access$100()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void validate()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:java.math.BigInteger access$200()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void validate()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.fips.FipsAlgorithm access$300()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15Parameters:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.fips.FipsAlgorithm access$400()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm,org.bouncycastle.crypto.fips.FipsDigestAlgorithm,int,byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.fips.FipsAlgorithm access$500()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$X931SignatureParameters:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$X931SignatureParameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.fips.FipsAlgorithm access$600()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters:void <init>(org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters,int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm,org.bouncycastle.crypto.fips.FipsDigestAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:void access$800(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.params.RsaKeyParameters access$900(org.bouncycastle.crypto.asymmetric.AsymmetricRSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doExtraction(org.bouncycastle.crypto.internal.AsymmetricBlockCipher,byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.Signer access$1100(org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher access$1200(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyUnwrapper:void <init>(org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyWrapper:void <init>(org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.fips.FipsAlgorithm access$1300()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$5:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doExtraction(org.bouncycastle.crypto.internal.AsymmetricBlockCipher,byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doGeneration(org.bouncycastle.crypto.internal.AsymmetricBlockCipher)",
            "org.bouncycastle.crypto.fips.FipsRSA$SVEKTSParameters:void <init>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:java.math.BigInteger access$1800()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$4:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$5:void evaluate()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:java.math.BigInteger access$1900()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$4:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$5:void evaluate()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:byte[] access$2000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$4:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$6:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$7:void evaluate()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:byte[] access$2100()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$4:void evaluate()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.params.RsaPrivateCrtKeyParameters access$2200()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$4:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$5:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$6:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$7:void evaluate()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.params.RsaKeyParameters access$2400()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$6:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$7:void evaluate()"
        ]
    },
    "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.internal.SignerWithRecovery getSigner(org.bouncycastle.crypto.general.RSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.internal.SignerWithRecovery getSigner(org.bouncycastle.crypto.general.RSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.internal.SignerWithRecovery getSigner(org.bouncycastle.crypto.general.RSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>(org.bouncycastle.crypto.general.RSA$1)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher access$1300(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.internal.Signer getSigner(org.bouncycastle.crypto.general.RSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseSignature:void engineSetParameter(java.security.spec.AlgorithmParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$15$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$16:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$17:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$18:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$19:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$5$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$9$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$9:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters createFipsOaepParameters(javax.crypto.spec.OAEPParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters access$000(javax.crypto.spec.OAEPParameterSpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA:org.bouncycastle.crypto.Algorithm getAlgorithmType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvRSA:org.bouncycastle.crypto.Algorithm access$500()"
        ]
    },
    "org.bouncycastle.crypto.fips.Utils:void validateRandom(java.security.SecureRandom,int,org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$DomainParametersGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm,org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm,org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.Utils:void validateKeyGenRandom(java.security.SecureRandom,int,org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.Utils:void validateKeyPairGenRandom(java.security.SecureRandom,int,org.bouncycastle.crypto.fips.FipsAlgorithm)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:int getDefaultRandomSecurityStrength()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.Utils:void validateRandom(java.security.SecureRandom,int,org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.String)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$KeyGenerator:org.bouncycastle.crypto.SymmetricSecretKey generateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()",
            "org.bouncycastle.crypto.general.AES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.ARC4$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.RC2$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.SipHash$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$1:boolean hasTestPassed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.ConsistencyTest)",
            "org.bouncycastle.crypto.general.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.Algorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.ConsistencyTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$2:boolean hasTestPassed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.ConsistencyTest)",
            "org.bouncycastle.crypto.general.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.Algorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.ConsistencyTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$4:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.internal.params.DhPrivateKeyParameters getLwKey(org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$AgreementParameters:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$AgreementParameters:org.bouncycastle.crypto.fips.FipsDH$AgreementParameters withDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH$AgreementParameters:org.bouncycastle.crypto.fips.FipsDH$AgreementParameters withPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH$AgreementProvider$1:void evaluate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.fips.VariantKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$AgreementProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseAgreement:byte[] calculateAgreement(org.bouncycastle.crypto.AsymmetricPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:java.security.Key engineDoPhase(java.security.Key,boolean)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(int)",
            "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(int,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(java.math.BigInteger,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(java.math.BigInteger,java.math.BigInteger,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH$DomainParametersGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.DHAlgorithmParameterGeneratorSpi:java.security.AlgorithmParameters engineGenerateParameters()",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyPairGenerator:void <init>(org.bouncycastle.crypto.general.ElGamal$KeyGenParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:void initialize(java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAsymmetricKeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyPairGenerator:java.security.KeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:java.security.KeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyPairGenerator:java.security.KeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvGOST3410$KeyPairGenerator:java.security.KeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters withDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.fips.FipsDH$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParametersBuilder:org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters using(org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParametersBuilder:org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters using(org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParametersBuilder:org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters using(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters withPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters:org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters withKDF(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH$MqvProvider$1:void evaluate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.fips.VariantKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MqvProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseAgreement:void engineInit(java.security.Key,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseKeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyFactorySpi:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyFactorySpi:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyFactorySpi:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvGOST3410$GOST3410KeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.PrivateKey getPrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:java.security.Key rebuildKey(java.lang.String,int,byte[],java.security.Provider)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineLoad(java.io.InputStream,char[])",
            "org.bouncycastle.jcajce.provider.X509KeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseKeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyFactorySpi:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyFactorySpi:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyFactorySpi:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvGOST3410$GOST3410KeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.PublicKey getPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:java.security.Key rebuildKey(java.lang.String,int,byte[],java.security.Provider)",
            "org.bouncycastle.jcajce.provider.X509CertificateObject:java.security.PublicKey getPublicKey()",
            "org.bouncycastle.jcajce.provider.X509KeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPrivateKey:void <init>(org.bouncycastle.crypto.Algorithm,org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.pkcs.RSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPrivateKey:void <init>(org.bouncycastle.crypto.Algorithm,org.bouncycastle.asn1.pkcs.PrivateKeyInfo)"
        ]
    },
    "org.bouncycastle.crypto.asymmetric.KeyUtils:java.math.BigInteger validated(java.math.BigInteger,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPublicKey:void <init>(org.bouncycastle.crypto.Algorithm,java.math.BigInteger,java.math.BigInteger)",
            "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPublicKey:void <init>(org.bouncycastle.crypto.Algorithm,org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.pkcs.RSAPublicKey)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>()"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseWrapCipher:java.security.Key rebuildKey(java.lang.String,int,byte[],java.security.Provider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:java.security.Key engineUnwrap(byte[],java.lang.String,int)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:java.security.Key engineUnwrap(byte[],java.lang.String,int)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:java.security.Key engineUnwrap(byte[],java.lang.String,int)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void processConfigString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.Provider$Service getService(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.util.Set getServices()"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void addKeyInfoConverter(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.jcajce.provider.AsymmetricKeyInfoConverter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.AsymmetricAlgorithmProvider:void registerOid(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String,org.bouncycastle.jcajce.provider.AsymmetricKeyInfoConverter)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.util.Map getAttributeMap(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.Provider$Service getService(java.lang.String,java.lang.String)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:boolean access$000(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$1:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineLoad(java.io.InputStream,char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.X509CertificateObject:java.security.PublicKey getPublicKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.CertPathValidatorUtilities:java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate,java.util.Set,java.lang.String)",
            "org.bouncycastle.jcajce.provider.CertPathValidatorUtilities:java.security.PublicKey getNextWorkingKey(java.util.List,int,java.security.Provider)",
            "org.bouncycastle.jcajce.provider.PKIXCertPathValidatorSpi:java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:java.security.Key engineGetKey(java.lang.String,char[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void removeChainCert(java.security.cert.Certificate)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:java.security.Key engineGetKey(java.lang.String,char[])",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void putChainCert(java.security.cert.Certificate)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineLoad(java.io.InputStream,char[])",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void doStore(java.io.OutputStream,char[],boolean)",
            "org.bouncycastle.jcajce.provider.X509CertificateObject:java.lang.String toString()"
        ]
    },
    "org.bouncycastle.jcajce.provider.X509KeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.X509KeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsEC$2:boolean hasTestPassed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.ConsistencyTest)",
            "org.bouncycastle.crypto.general.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.Algorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.ConsistencyTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$3:boolean hasTestPassed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.ConsistencyTest)",
            "org.bouncycastle.crypto.general.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.Algorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.ConsistencyTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$4:boolean hasTestPassed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.ConsistencyTest)",
            "org.bouncycastle.crypto.general.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.Algorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.ConsistencyTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$6:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters getLwKey(org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitVerify(java.security.PublicKey)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DhProvider$1:void evaluate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.fips.VariantKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DhProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DhcProvider$1:void evaluate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.fips.VariantKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DhcProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DsaProvider$1:void evaluate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.fips.VariantKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$DsaProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.general.EC$KeyPairGenerator:void <init>(org.bouncycastle.crypto.general.EC$KeyGenParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.crypto.general.EC$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAsymmetricKeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters withDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:void <init>(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.fips.FipsEC$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParametersBuilder:org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters using(org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParametersBuilder:org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters using(org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParametersBuilder:org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters using(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters withPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters:org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters withKDF(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsEC$MqvProvider$1:void evaluate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.fips.VariantKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MqvProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.general.EC$1:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.EC$1:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.crypto.general.EC$DSAOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.EC$DSAParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.EC$DSAOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.EC$DSAOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.EC$DSAParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.EC$DSAOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.EC$KeyGenParameters:void <init>(org.bouncycastle.crypto.asymmetric.ECDomainParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.EC:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters access$200(org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.EC$DSAOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.EC$DSAParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.EC:org.bouncycastle.crypto.internal.params.EcDomainParameters access$300(org.bouncycastle.crypto.asymmetric.ECDomainParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.EC$1:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters run()",
            "org.bouncycastle.crypto.general.EC$DSAOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.EC$DSAParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$19:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$20:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$21:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$22:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$23:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$24:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$25:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$33:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$EngineProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(int)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.general.RSA$KeyGenParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,java.math.BigInteger,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(java.math.BigInteger,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(java.math.BigInteger,int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,java.math.BigInteger,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.math.BigInteger,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(org.bouncycastle.crypto.fips.FipsRSA$KTSParameters,java.math.BigInteger,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void access$700(org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAsymmetricKeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyUnwrapper:org.bouncycastle.crypto.fips.FipsKeyUnwrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyUnwrapper:org.bouncycastle.crypto.KeyUnwrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyUnwrapper:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapperUsingSecureRandom createKeyUnwrapper(org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyWrapper:org.bouncycastle.crypto.KeyWrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyWrapper:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapperUsingSecureRandom createKeyWrapper(org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters:void <init>(org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters:org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters withOAEPParameters(org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$15$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters:org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters withKeySizeInBits(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$15$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters:org.bouncycastle.crypto.fips.FipsRSA$OAEPKTSParameters withMacKeySizeInBits(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$15$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters withDigest(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters createFipsOaepParameters(javax.crypto.spec.OAEPParameterSpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters withMGFDigest(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters createFipsOaepParameters(javax.crypto.spec.OAEPParameterSpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters withEncodingParams(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters createFipsOaepParameters(javax.crypto.spec.OAEPParameterSpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters withDigestAlgorithm(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$17:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvRSA:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters withDigestAlgorithm(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineSetParameter(java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.ProvRSA$18:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters withMGFDigest(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineSetParameter(java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters withSaltLength(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineSetParameter(java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters withTrailer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineSetParameter(java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters withSalt(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$12$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom:org.bouncycastle.crypto.OutputSignerUsingSecureRandom withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom:java.lang.Object withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:org.bouncycastle.crypto.OutputSignerUsingSecureRandom withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitVerify(java.security.PublicKey)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$X931SignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$X931SignatureParameters withDigestAlgorithm(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$19:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.internal.SignerWithRecovery getSigner(org.bouncycastle.crypto.general.RSA$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputVerifierWithMessageRecovery doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.RSA$SignatureParameters)",
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.internal.SignerWithRecovery access$1200(org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory,org.bouncycastle.crypto.general.RSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>(org.bouncycastle.crypto.general.RSA$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.internal.Signer getSigner(org.bouncycastle.crypto.general.RSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher access$1300(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyUnwrapper:void <init>(org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyWrapper:void <init>(org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RSA$OperatorFactory:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.internal.Signer getSigner(org.bouncycastle.crypto.general.RSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.internal.Signer getSigner(org.bouncycastle.crypto.general.RSA$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.RSA$SignatureParameters)",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.internal.Signer access$900(org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory,org.bouncycastle.crypto.general.RSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA:org.bouncycastle.crypto.fips.FipsRSA$OAEPParameters access$000(javax.crypto.spec.OAEPParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$15$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$5$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$9$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA:org.bouncycastle.crypto.Algorithm access$500()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$10:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)",
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm,org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$DomainParametersGenerator:org.bouncycastle.crypto.asymmetric.DHDomainParameters generateDomainParameters()",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.Utils:void validateKeyGenRandom(java.security.SecureRandom,int,org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$KeyGenerator:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS$KeyGenerator:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyGenerator:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.Utils:void validateKeyPairGenRandom(java.security.SecureRandom,int,org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDH$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsDSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDSA$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsEC$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsEC$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.AES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.ConsistencyTest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH:void validateKeyPair(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsDSA:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsEC:void validateKeyPair(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsRSA:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.general.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.Algorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.ConsistencyTest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.general.DSTU4145:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.general.ECGOST3410:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.general.GOST3410:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.internal.params.DhPrivateKeyParameters getLwKey(org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH:org.bouncycastle.crypto.internal.params.DhPrivateKeyParameters access$1400(org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.fips.VariantKatTest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES:void ccmStartUpTest(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES:void gcmStartUpTest(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsDH$AgreementProvider:org.bouncycastle.crypto.fips.DhBasicAgreement createEngine()",
            "org.bouncycastle.crypto.fips.FipsDH$MqvProvider:org.bouncycastle.crypto.fips.MqvBasicAgreement createEngine()",
            "org.bouncycastle.crypto.fips.FipsDSA$DsaProvider:org.bouncycastle.crypto.fips.DsaSigner createEngine()",
            "org.bouncycastle.crypto.fips.FipsEC$DhProvider:org.bouncycastle.crypto.fips.EcDhBasicAgreement createEngine()",
            "org.bouncycastle.crypto.fips.FipsEC$DhcProvider:org.bouncycastle.crypto.fips.EcDhcBasicAgreement createEngine()",
            "org.bouncycastle.crypto.fips.FipsEC$DsaProvider:org.bouncycastle.crypto.fips.EcDsaSigner createEngine()",
            "org.bouncycastle.crypto.fips.FipsEC$MqvProvider:org.bouncycastle.crypto.fips.EcMqvBasicAgreement createEngine()",
            "org.bouncycastle.crypto.fips.FipsRSA$EngineProvider:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createStandardCipher(boolean,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsInputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$1:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$2:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$WrapParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(byte[],boolean,byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$BaseTLSKeyGeneratorSpi:javax.crypto.SecretKey calculatePRF(sun.security.internal.spec.TlsPrfParameterSpec,java.lang.String)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.EcDHAgreement:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory$1:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory$1:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDRBG$HashDRBGProvider:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],byte[],int,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersGenerator:org.bouncycastle.crypto.asymmetric.DSADomainParameters generateDomainParameters()",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersValidator:boolean isValidPAndQ(java.math.BigInteger,java.math.BigInteger,byte[],int)",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersValidator:boolean isValidG(java.math.BigInteger,java.math.BigInteger,byte[],int,java.math.BigInteger)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SSHOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SSHParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.KDFCalculator createX963KDFCalculator(boolean,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.KDFCalculator createConcatenationKDFCalculator(boolean,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$4:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doExtraction(org.bouncycastle.crypto.internal.AsymmetricBlockCipher,byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doGeneration(org.bouncycastle.crypto.internal.AsymmetricBlockCipher)",
            "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters withDigestAlgorithm(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.Signer getPSSSigner(org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDRBG$HMacDRBGProvider:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],byte[],int,byte[])",
            "org.bouncycastle.crypto.fips.FipsKDF$IKEv2OperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$IKEv2Parameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] PRF(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters,org.bouncycastle.crypto.fips.FipsKDF$TLSPRF,byte[],java.lang.String,int)",
            "org.bouncycastle.crypto.fips.FipsPBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.fips.FipsPBKD$Parameters)",
            "org.bouncycastle.crypto.fips.FipsSHS$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsSHS$AuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDRBG$HMacDRBGProvider:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],byte[],int,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG$HashDRBGProvider:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],byte[],int,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersGenerator:org.bouncycastle.crypto.asymmetric.DSADomainParameters generateDomainParameters()",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersValidator:boolean isValidPAndQ(java.math.BigInteger,java.math.BigInteger,byte[],int)",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersValidator:boolean isValidG(java.math.BigInteger,java.math.BigInteger,byte[],int,java.math.BigInteger)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$IKEv2OperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$IKEv2Parameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SSHOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SSHParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.fips.FipsEngineProvider createPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] PRF(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters,org.bouncycastle.crypto.fips.FipsKDF$TLSPRF,byte[],java.lang.String,int)",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.KDFCalculator createX963KDFCalculator(boolean,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.KDFCalculator createConcatenationKDFCalculator(boolean,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)",
            "org.bouncycastle.crypto.fips.FipsPBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.fips.FipsPBKD$Parameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$4:void evaluate()",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doExtraction(org.bouncycastle.crypto.internal.AsymmetricBlockCipher,byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation doGeneration(org.bouncycastle.crypto.internal.AsymmetricBlockCipher)",
            "org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters:org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters withDigestAlgorithm(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.Signer getPSSSigner(org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS$1:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$10:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$11:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$12:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$13:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$14:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$15:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$16:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$17:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$18:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$2:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$3:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$4:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$5:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$6:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$7:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$8:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$9:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$AuthParameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsSHS$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsSHS$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.fips.FipsSHS$Parameters)",
            "org.bouncycastle.crypto.fips.FipsSHS$XOFOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputXOFCalculator createOutputXOFCalculator(org.bouncycastle.crypto.fips.FipsSHS$Parameters)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest makeValidatedDigest(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.fips.FipsEngineProvider getMacProvider(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest access$000(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac access$100(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)",
            "org.bouncycastle.crypto.fips.FipsSHS:java.util.Map access$200()",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Xof access$400(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] getDigest(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA1$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA1$2:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA1$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA224$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA224$2:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA224$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA256$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA256$2:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA256$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA384$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA384$2:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA384$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA3_224$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA3_256$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA3_384$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA3_512$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$11:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$12:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$15:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$2:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$6:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$7:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$8:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.util.DumpInfo:byte[] calculateModuleHMAC(java.util.jar.JarFile)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$WrapParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createStandardCipher(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createStandardAEADCipher(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.AuthenticationParametersWithIV)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac createStandardMac(org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.general.GeneralAuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RC2$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.RC2$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$WrapParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA$DomainParametersGenerator:org.bouncycastle.crypto.asymmetric.DSADomainParameters generateDomainParameters()",
            "org.bouncycastle.crypto.general.DSA$OperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.DSA$Parameters)",
            "org.bouncycastle.crypto.general.DSA$OperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.DSA$Parameters)",
            "org.bouncycastle.crypto.general.DSTU4145$LittleEndianSignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.DSTU4145$SignatureParameters)",
            "org.bouncycastle.crypto.general.DSTU4145$LittleEndianSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.DSTU4145$SignatureParameters)",
            "org.bouncycastle.crypto.general.DSTU4145$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.DSTU4145$SignatureParameters)",
            "org.bouncycastle.crypto.general.DSTU4145$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.DSTU4145$SignatureParameters)",
            "org.bouncycastle.crypto.general.DsaParametersGenerator:void <init>()",
            "org.bouncycastle.crypto.general.EC$DSAOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.EC$DSAParameters)",
            "org.bouncycastle.crypto.general.EC$DSAOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.EC$DSAParameters)",
            "org.bouncycastle.crypto.general.ECGOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.ECGOST3410$SignatureParameters)",
            "org.bouncycastle.crypto.general.ECGOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.ECGOST3410$SignatureParameters)",
            "org.bouncycastle.crypto.general.ElGamal:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.ElGamal$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.GOST3410$SignatureParameters)",
            "org.bouncycastle.crypto.general.GOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.GOST3410$SignatureParameters)",
            "org.bouncycastle.crypto.general.PBKD$PBKDF1DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.general.PBKD$Parameters)",
            "org.bouncycastle.crypto.general.PBKD$PKCS12DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.general.PBKD$Parameters)",
            "org.bouncycastle.crypto.general.RC2WrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.RSA$ISO9796d2PSSSignatureParameters:void <init>(org.bouncycastle.crypto.DigestAlgorithm)",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.internal.Signer getSigner(org.bouncycastle.crypto.general.RSA$SignatureParameters)",
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.internal.SignerWithRecovery getSigner(org.bouncycastle.crypto.general.RSA$SignatureParameters)",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$PBKDF2DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.general.PBKD$Parameters)",
            "org.bouncycastle.crypto.general.SCryptImpl:byte[] SingleIterationPBKDF2(byte[],byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsAgreementFactory:org.bouncycastle.crypto.Agreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.DHAlgorithmParameterGeneratorSpi:java.security.AlgorithmParameters engineGenerateParameters()",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$DomainGenParameters:void <init>(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.DHAlgorithmParameterGeneratorSpi:java.security.AlgorithmParameters engineGenerateParameters()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:void initialize(java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:void initialize(java.security.spec.AlgorithmParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.GuardedAsymmetricKeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvGOST3410$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParametersBuilder:org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters using(org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParametersBuilder:org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters using(org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDH$3:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParametersBuilder:org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters using(org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricDHPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDH$3:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseAgreement:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseAgreement:void engineInit(java.security.Key,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyFactorySpi:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvEC$ECKeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyFactorySpi:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvElgamal$KeyFactorySpi:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvGOST3410$GOST3410KeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyFactorySpi:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvEC$ECKeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyFactorySpi:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvElgamal$KeyFactorySpi:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvGOST3410$GOST3410KeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPrivateKey:void <init>(org.bouncycastle.crypto.Algorithm,org.bouncycastle.asn1.pkcs.PrivateKeyInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPrivateKey:void <init>(org.bouncycastle.crypto.Algorithm,byte[])",
            "org.bouncycastle.jcajce.provider.ProvRSA$2:org.bouncycastle.crypto.asymmetric.AsymmetricRSAPrivateKey convertKey(org.bouncycastle.crypto.Algorithm,java.security.PrivateKey)",
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)"
        ]
    },
    "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPublicKey:void <init>(org.bouncycastle.crypto.Algorithm,java.math.BigInteger,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()",
            "org.bouncycastle.crypto.general.RSA$KeyPairGenerator$1:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair run()",
            "org.bouncycastle.jcajce.provider.ProvRSAPublicKey:void <init>(org.bouncycastle.crypto.Algorithm,java.security.interfaces.RSAPublicKey)",
            "org.bouncycastle.jcajce.provider.ProvRSAPublicKey:void <init>(org.bouncycastle.crypto.Algorithm,java.security.spec.RSAPublicKeySpec)"
        ]
    },
    "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPublicKey:void <init>(org.bouncycastle.crypto.Algorithm,org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.pkcs.RSAPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPublicKey:void <init>(org.bouncycastle.crypto.Algorithm,org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseCipher:java.security.Key engineUnwrap(byte[],java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.util.Set getServices()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.AsymmetricAlgorithmProvider:void registerOid(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String,org.bouncycastle.jcajce.provider.AsymmetricKeyInfoConverter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDH:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvDSA:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvDSTU4145:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvEC:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvEC:void addDHAlgorithm(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,java.lang.String,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFPRF,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.jcajce.provider.AsymmetricKeyInfoConverter,org.bouncycastle.jcajce.provider.ParametersCreator)",
            "org.bouncycastle.jcajce.provider.ProvEC:void addCDHAlgorithm(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,java.lang.String,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFPRF,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.jcajce.provider.AsymmetricKeyInfoConverter,org.bouncycastle.jcajce.provider.ParametersCreator)",
            "org.bouncycastle.jcajce.provider.ProvEC:void addMQVAlgorithm(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,java.lang.String,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFPRF,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.jcajce.provider.AsymmetricKeyInfoConverter,org.bouncycastle.jcajce.provider.ParametersCreator)",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvElgamal:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvGOST3410:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvRSA:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)"
        ]
    },
    "org.bouncycastle.jcajce.provider.CertPathValidatorUtilities:java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate,java.util.Set,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.CertPathValidatorUtilities:java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate,java.util.Set)",
            "org.bouncycastle.jcajce.provider.PKIXCertPathBuilderSpi:java.security.cert.CertPathBuilderResult build(java.security.cert.X509Certificate,org.bouncycastle.jcajce.PKIXExtendedBuilderParameters,java.util.List)",
            "org.bouncycastle.jcajce.provider.PKIXCertPathValidatorSpi:java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.CertPathValidatorUtilities:java.security.PublicKey getNextWorkingKey(java.util.List,int,java.security.Provider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.PKIXCertPathValidatorSpi:java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)",
            "org.bouncycastle.jcajce.provider.RFC3280CertPathUtilities:java.util.Set processCRLF(java.security.cert.X509CRL,java.lang.Object,java.security.cert.X509Certificate,java.security.PublicKey,org.bouncycastle.jcajce.PKIXExtendedParameters,java.util.List,java.security.Provider)"
        ]
    },
    "org.bouncycastle.jcajce.provider.PKIXCertPathValidatorSpi:java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.PKIXCertPathBuilderSpi:java.security.cert.CertPathBuilderResult build(java.security.cert.X509Certificate,org.bouncycastle.jcajce.PKIXExtendedBuilderParameters,java.util.List)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:java.security.Key engineGetKey(java.lang.String,char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void removeChainCert(java.security.cert.Certificate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineDeleteEntry(java.lang.String)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:java.util.Set getUsedCertificateSet()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:java.security.Key engineGetKey(java.lang.String,char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void putChainCert(java.security.cert.Certificate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void doStore(java.io.OutputStream,char[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineStore(java.security.KeyStore$LoadStoreParameter)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineStore(java.io.OutputStream,char[])"
        ]
    },
    "org.bouncycastle.jcajce.provider.X509CertificateObject:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.util.ASN1Dump:java.lang.String dumpAsString(java.lang.Object,boolean)",
            "org.bouncycastle.jcajce.provider.CertificateFactory:java.security.cert.CertPath engineGenerateCertPath(java.util.List)",
            "org.bouncycastle.jcajce.provider.ClassUtil:java.lang.String getVIMID()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters getLwKey(org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters access$900(org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitVerify(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(int)",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParametersBuilder:org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters using(org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParametersBuilder:org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters using(org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvEC$34:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParametersBuilder:org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters using(org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey,org.bouncycastle.crypto.asymmetric.AsymmetricECPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvEC$34:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.EC$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.EC:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters getLwKey(org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey)"
        ]
    },
    "org.bouncycastle.crypto.general.EC$DSAOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.EC$DSAOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,java.math.BigInteger,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.math.BigInteger,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyGenParameters:void <init>(org.bouncycastle.crypto.fips.FipsRSA$KTSParameters,java.math.BigInteger,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyUnwrapper:org.bouncycastle.crypto.KeyUnwrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyUnwrapper:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory$KeyWrapper:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom:org.bouncycastle.crypto.OutputSignerUsingSecureRandom withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:org.bouncycastle.crypto.OutputSignerUsingSecureRandom withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputVerifierWithMessageRecovery doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.RSA$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputVerifierWithMessageRecovery doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.internal.SignerWithRecovery access$1200(org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory,org.bouncycastle.crypto.general.RSA$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory,org.bouncycastle.crypto.general.RSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyUnwrapper:void <init>(org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyUnwrapper:org.bouncycastle.crypto.KeyUnwrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapperUsingSecureRandom createKeyUnwrapper(org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$WrapParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyWrapper:void <init>(org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyWrapper:org.bouncycastle.crypto.KeyWrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapperUsingSecureRandom createKeyWrapper(org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$WrapParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$OperatorFactory:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$OperatorFactory$BlockDecryptor:void <init>(org.bouncycastle.crypto.general.RSA$OperatorFactory,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RSA$OperatorFactory:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.RSA$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.internal.Signer access$900(org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory,org.bouncycastle.crypto.general.RSA$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory,org.bouncycastle.crypto.general.RSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$10:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.Key engineTranslateKey(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.PrivateKey getPrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)",
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PrivateKey generatePrivate(byte[])"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.PublicKey getPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$DomainParametersGenerator:org.bouncycastle.crypto.asymmetric.DHDomainParameters generateDomainParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.DHAlgorithmParameterGeneratorSpi:java.security.AlgorithmParameters engineGenerateParameters()",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:java.security.AlgorithmParameters engineGenerateParameters()",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsAES$KeyGenerator:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsAES$KeyGenerator:void <init>(org.bouncycastle.crypto.fips.FipsParameters,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$KeyGenerator:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA1$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA224$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA256$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA384$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$13$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$9$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$KeyGenerator:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyGenerator:void <init>(org.bouncycastle.crypto.fips.FipsParameters,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDSA$KeyGenParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDSA:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA:void access$900(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.general.DSA:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA:void access$300(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.general.DSTU4145:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSTU4145:void access$100(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.general.ECGOST3410:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ECGOST3410:void access$100(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST3410:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST3410:void access$100(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$3:void evaluate(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$4:boolean hasTestPassed(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$5:void evaluate(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$EngineProvider:java.lang.Object createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES:void ccmStartUpTest(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES:void gcmStartUpTest(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DsaProvider:org.bouncycastle.crypto.fips.DsaSigner createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA$DsaProvider:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$2:boolean hasTestPassed(org.bouncycastle.crypto.fips.FipsTripleDES$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$EngineProvider:java.lang.Object createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createStandardCipher(boolean,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsInputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsInputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputAEADEncryptor createOutputAEADEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] decryptData(java.lang.String,org.bouncycastle.asn1.x509.AlgorithmIdentifier,char[],byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsInputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsInputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$1:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$2:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$WrapParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$WrapParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(byte[],boolean,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.asymmetric.KeyUtils:java.math.BigInteger validatedModulus(java.math.BigInteger)",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(byte[],boolean)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.SecureRandom getDefaultSecureRandom()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitVerify(java.security.PublicKey)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:javax.crypto.SecretKey engineGenerateSecret(java.lang.String)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:javax.crypto.SecretKey engineGenerateSecret(java.lang.String)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:javax.crypto.SecretKey engineGenerateSecret(java.lang.String)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:javax.crypto.SecretKey engineGenerateSecret(java.lang.String)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:javax.crypto.SecretKey engineGenerateSecret(java.lang.String)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$BaseTLSKeyGeneratorSpi:javax.crypto.SecretKey calculatePRF(sun.security.internal.spec.TlsPrfParameterSpec,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSKeyMaterialGenerator$2:javax.crypto.SecretKey run()",
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSMasterSecretGenerator$2:javax.crypto.SecretKey run()",
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSPRFKeyGenerator$2:javax.crypto.SecretKey run()"
        ]
    },
    "org.bouncycastle.crypto.fips.EcDHAgreement:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:byte[] calculateAgreement(org.bouncycastle.crypto.AsymmetricPublicKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDRBG$HashDRBGProvider:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],byte[],int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersGenerator:org.bouncycastle.crypto.asymmetric.DSADomainParameters generateDomainParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$DomainParametersGenerator:org.bouncycastle.crypto.asymmetric.DHDomainParameters generateDomainParameters()",
            "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:java.security.AlgorithmParameters engineGenerateParameters()",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersValidator:boolean isValidPAndQ(java.math.BigInteger,java.math.BigInteger,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersValidator:boolean isValidG(java.math.BigInteger,java.math.BigInteger,byte[],int,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF$SSHOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SSHParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$SSHOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.KDFCalculator createX963KDFCalculator(boolean,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.KDFCalculator access$2900(boolean,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.KDFCalculator createConcatenationKDFCalculator(boolean,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.KDFCalculator access$3000(boolean,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.Signer getPSSSigner(org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.Signer access$1100(org.bouncycastle.crypto.fips.FipsRSA$PSSSignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDRBG$HMacDRBGProvider:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],byte[],int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$IKEv2OperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$IKEv2Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$IKEv2OperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:byte[] PRF(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters,org.bouncycastle.crypto.fips.FipsKDF$TLSPRF,byte[],java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] access$2000(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters,org.bouncycastle.crypto.fips.FipsKDF$TLSPRF,byte[],java.lang.String,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsPBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.fips.FipsPBKD$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsPBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] generateKey(org.bouncycastle.asn1.pkcs.KeyDerivationFunc,java.lang.String,char[])",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2$BasePBKDF2:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsSHS$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.fips.FipsEngineProvider createPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.fips.FipsEngineProvider access$200(org.bouncycastle.crypto.fips.FipsKDF$PRF)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$1:org.bouncycastle.crypto.internal.Digest createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$1:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$10:org.bouncycastle.crypto.internal.Digest createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$10:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$11:org.bouncycastle.crypto.internal.Digest createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$11:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$12:org.bouncycastle.crypto.internal.Mac createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$12:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$13:org.bouncycastle.crypto.internal.Mac createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$13:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$14:org.bouncycastle.crypto.internal.Mac createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$14:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$15:org.bouncycastle.crypto.internal.Mac createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$15:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$16:org.bouncycastle.crypto.internal.Mac createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$16:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$17:org.bouncycastle.crypto.internal.Mac createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$17:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$18:org.bouncycastle.crypto.internal.Mac createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$18:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$2:org.bouncycastle.crypto.internal.Digest createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$2:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$3:org.bouncycastle.crypto.internal.Digest createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$3:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$4:org.bouncycastle.crypto.internal.Digest createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$4:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$5:org.bouncycastle.crypto.internal.Digest createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$5:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$6:org.bouncycastle.crypto.internal.Digest createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$6:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$7:org.bouncycastle.crypto.internal.Digest createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$7:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$8:org.bouncycastle.crypto.internal.Digest createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$8:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$9:org.bouncycastle.crypto.internal.Digest createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$9:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$AuthParameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.fips.FipsSHS$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.FipsSHS$OperatorFactory:org.bouncycastle.crypto.OutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] getDigest(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$XOFOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputXOFCalculator createOutputXOFCalculator(org.bouncycastle.crypto.fips.FipsSHS$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$XOFOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputXOFCalculator createOutputXOFCalculator(org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.FipsSHS$XOFOperatorFactory:org.bouncycastle.crypto.OutputXOFCalculator createOutputXOFCalculator(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest makeValidatedDigest(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest access$000(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.fips.FipsEngineProvider getMacProvider(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.fips.FipsEngineProvider createPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest access$000(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$1:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$10:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$11:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$2:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$3:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$4:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$5:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$6:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$7:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$8:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$9:org.bouncycastle.crypto.internal.Digest createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac access$100(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$12:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$13:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$14:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$15:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$16:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$17:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS$18:org.bouncycastle.crypto.internal.Mac createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS:java.util.Map access$200()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$AuthParameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Xof access$400(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$XOFOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputXOFCalculator createOutputXOFCalculator(org.bouncycastle.crypto.fips.FipsSHS$Parameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] getDigest(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:org.bouncycastle.asn1.x509.SubjectKeyIdentifier createSubjectKeyId(java.security.PublicKey)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA1$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA1$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA1$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA224$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA224$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA224$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA256$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA256$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA256$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA384$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA384$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA384$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA3_224$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA3_256$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA3_384$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA3_512$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$11:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$12:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$15:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$6:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$7:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$8:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.util.DumpInfo:byte[] calculateModuleHMAC(java.util.jar.JarFile)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.util.DumpInfo:void main(java.lang.String[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$1:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$WrapParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$WrapParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createStandardCipher(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createStandardCipher(boolean,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GOST28147$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GOST28147$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RC2$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.RC2$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createStandardAEADCipher(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.AuthenticationParametersWithIV)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createStandardAEADCipher(boolean,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.AuthenticationParametersWithIV)",
            "org.bouncycastle.crypto.general.GOST28147$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GOST28147$AuthParameters)",
            "org.bouncycastle.crypto.general.RC2$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.RC2$AuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac createStandardMac(org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.general.GeneralAuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac createStandardMac(org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.general.GeneralAuthParameters)",
            "org.bouncycastle.crypto.general.GOST28147$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GOST28147$AuthParameters)",
            "org.bouncycastle.crypto.general.RC2$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.RC2$AuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.TripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SEED$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Serpent$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Twofish$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$WrapParameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.RC2$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RC2$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.DSA$DomainParametersGenerator:org.bouncycastle.crypto.asymmetric.DSADomainParameters generateDomainParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:java.security.AlgorithmParameters engineGenerateParameters()",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.DSA$OperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.DSA$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA$OperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSA$OperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.DSA$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA$OperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSTU4145$LittleEndianSignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.DSTU4145$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSTU4145$LittleEndianSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSTU4145$LittleEndianSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.DSTU4145$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSTU4145$LittleEndianSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSTU4145$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.DSTU4145$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSTU4145$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSTU4145$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.DSTU4145$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSTU4145$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DsaParametersGenerator:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA$DomainParametersGenerator:org.bouncycastle.crypto.asymmetric.DSADomainParameters generateDomainParameters()"
        ]
    },
    "org.bouncycastle.crypto.general.ECGOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.ECGOST3410$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ECGOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ECGOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.ECGOST3410$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ECGOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.ElGamal$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal:org.bouncycastle.crypto.internal.AsymmetricBlockCipher access$300(boolean,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.ElGamal$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.GOST3410$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.GOST3410$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.PBKD$PBKDF1DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.general.PBKD$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$PBKDF1DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.PBKD$PKCS12DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.general.PBKD$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$PKCS12DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2WrapEngine:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$ISO9796d2PSSSignatureParameters:void <init>(org.bouncycastle.crypto.DigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$ISO9796d2PSSSignatureParameters:org.bouncycastle.crypto.general.RSA$ISO9796d2PSSSignatureParameters withDigestAlgorithm(org.bouncycastle.crypto.DigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.PBKD$PBKDF2DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.general.PBKD$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$PBKDF2DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SCryptImpl:byte[] SingleIterationPBKDF2(byte[],byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SCryptImpl:byte[] MFcrypt(byte[],byte[],int,int,int,int)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:void initialize(java.security.spec.AlgorithmParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPrivateKey:void <init>(org.bouncycastle.crypto.Algorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSAPrivateCrtKey:void readObject(java.io.ObjectInputStream)",
            "org.bouncycastle.jcajce.provider.ProvRSAPrivateKey:void readObject(java.io.ObjectInputStream)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$2:org.bouncycastle.crypto.asymmetric.AsymmetricRSAPrivateKey convertKey(org.bouncycastle.crypto.Algorithm,java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$2:org.bouncycastle.crypto.AsymmetricPrivateKey convertKey(org.bouncycastle.crypto.Algorithm,java.security.PrivateKey)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyPairGenerator$1:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$KeyPairGenerator$1:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSAPublicKey:void <init>(org.bouncycastle.crypto.Algorithm,java.security.interfaces.RSAPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$1:org.bouncycastle.crypto.asymmetric.AsymmetricRSAPublicKey convertKey(org.bouncycastle.crypto.Algorithm,java.security.PublicKey)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSAPublicKey:void <init>(org.bouncycastle.crypto.Algorithm,java.security.spec.RSAPublicKeySpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPublicKey:void <init>(org.bouncycastle.crypto.Algorithm,org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPublicKey:void <init>(org.bouncycastle.crypto.Algorithm,byte[])",
            "org.bouncycastle.jcajce.provider.ProvRSA$1:org.bouncycastle.crypto.asymmetric.AsymmetricRSAPublicKey convertKey(org.bouncycastle.crypto.Algorithm,java.security.PublicKey)",
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSTU4145:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC:void addDHAlgorithm(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,java.lang.String,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFPRF,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.jcajce.provider.AsymmetricKeyInfoConverter,org.bouncycastle.jcajce.provider.ParametersCreator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvEC:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC:void addCDHAlgorithm(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,java.lang.String,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFPRF,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.jcajce.provider.AsymmetricKeyInfoConverter,org.bouncycastle.jcajce.provider.ParametersCreator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvEC:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC:void addMQVAlgorithm(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,java.lang.String,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFPRF,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.jcajce.provider.AsymmetricKeyInfoConverter,org.bouncycastle.jcajce.provider.ParametersCreator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvEC:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvECGOST3410:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvElgamal:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvGOST3410:void configure(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:void <init>(java.lang.String,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.CertPathValidatorUtilities:java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.PKIXCertPathBuilderSpi:java.security.cert.CertPathBuilderResult build(java.security.cert.X509Certificate,org.bouncycastle.jcajce.PKIXExtendedBuilderParameters,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.PKIXCertPathBuilderSpi:java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters)",
            "org.bouncycastle.jcajce.provider.PKIXCertPathBuilderSpi:java.security.cert.CertPathBuilderResult build(java.security.cert.X509Certificate,org.bouncycastle.jcajce.PKIXExtendedBuilderParameters,java.util.List)"
        ]
    },
    "org.bouncycastle.jcajce.provider.RFC3280CertPathUtilities:java.util.Set processCRLF(java.security.cert.X509CRL,java.lang.Object,java.security.cert.X509Certificate,java.security.PublicKey,org.bouncycastle.jcajce.PKIXExtendedParameters,java.util.List,java.security.Provider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.RFC3280CertPathUtilities:void checkCRL(org.bouncycastle.asn1.x509.DistributionPoint,org.bouncycastle.jcajce.PKIXExtendedParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,org.bouncycastle.jcajce.provider.CertStatus,org.bouncycastle.jcajce.provider.ReasonsMask,java.util.List,java.security.Provider)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineDeleteEntry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:java.util.Set getUsedCertificateSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void doStore(java.io.OutputStream,char[],boolean)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineStore(java.security.KeyStore$LoadStoreParameter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineStore(java.io.OutputStream,char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.util.ASN1Dump:java.lang.String dumpAsString(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.util.ASN1Dump:java.lang.String dumpAsString(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.CertificateFactory:java.security.cert.CertPath engineGenerateCertPath(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.PKIXCertPathBuilderSpi:java.security.cert.CertPathBuilderResult build(java.security.cert.X509Certificate,org.bouncycastle.jcajce.PKIXExtendedBuilderParameters,java.util.List)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ClassUtil:java.lang.String getVIMID()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:byte[] generatePersonalizationString()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitVerify(java.security.PublicKey)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitVerify(java.security.PublicKey)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.EC:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters getLwKey(org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.EC:org.bouncycastle.crypto.internal.params.EcPrivateKeyParameters access$200(org.bouncycastle.crypto.asymmetric.AsymmetricECPrivateKey)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitVerify(java.security.PublicKey)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputVerifierWithMessageRecovery doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputVerifierWithMessageRecovery createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory,org.bouncycastle.crypto.general.RSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner:org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputSignerWithMessageRecovery doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.RSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyUnwrapper:org.bouncycastle.crypto.KeyUnwrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyUnwrapper:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapperUsingSecureRandom createKeyUnwrapper(org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$WrapParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyWrapper:org.bouncycastle.crypto.KeyWrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyWrapper:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapperUsingSecureRandom createKeyWrapper(org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$WrapParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$OperatorFactory$BlockDecryptor:void <init>(org.bouncycastle.crypto.general.RSA$OperatorFactory,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$OperatorFactory$BlockDecryptor:org.bouncycastle.crypto.SingleBlockDecryptorUsingSecureRandom withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RSA$OperatorFactory:org.bouncycastle.crypto.SingleBlockDecryptor createBlockDecryptor(org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.RSA$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$OperatorFactory:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAsymmetricOperatorFactory$BlockEncryptor:org.bouncycastle.crypto.internal.AsymmetricBlockCipher getEngine()"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory,org.bouncycastle.crypto.general.RSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:org.bouncycastle.crypto.OutputSignerUsingSecureRandom withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.RSA$SignatureParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PrivateKey generatePrivate(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:void engineInit(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:java.security.AlgorithmParameters engineGenerateParameters()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsAES$KeyGenerator:void <init>(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvAES$39$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvAES$40$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvAES$41$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvAES$42$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$KeyGenerator:void <init>(org.bouncycastle.crypto.fips.FipsParameters,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA1$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA224$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA256$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA384$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$13$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$9$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$KeyGenerator:void <init>(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.TripleDES$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDESede$11$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$KeyGenerator:void <init>(org.bouncycastle.crypto.fips.FipsParameters,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDESede$12$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA:void access$900(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.DSA:void access$300(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.DSTU4145:void access$100(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSTU4145$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.ECGOST3410:void access$100(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ECGOST3410$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.GOST3410:void access$100(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST3410$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$3:void evaluate(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$3:void evaluate(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$4:boolean hasTestPassed(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$4:boolean hasTestPassed(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$5:void evaluate(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$5:void evaluate(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$EngineProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputAEADEncryptor createOutputAEADEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsInputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$AuthParameters:org.bouncycastle.crypto.fips.FipsAES$AuthParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsAES$AuthParameters:org.bouncycastle.crypto.fips.FipsAES$AuthParameters withIV(java.security.SecureRandom,int)",
            "org.bouncycastle.crypto.fips.FipsAES$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsInputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsAES:void ccmStartUpTest(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES:void cmacStartUpTest(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES:void gcmStartUpTest(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsAES:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsKDF$PRF:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPPRF:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.fips.FipsEngineProvider createPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF)",
            "org.bouncycastle.crypto.general.AES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$AuthParameters)",
            "org.bouncycastle.crypto.general.AES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.AES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.AES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.AES:void <clinit>()",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.jcajce.provider.ProvAES$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.jcajce.provider.ProvAES$10:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$11:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$12:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$13:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$14:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$15:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$16:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$17:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$18:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$19:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$20:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$21:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$22:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$24:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$25:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$26:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$27:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$28:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$29:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$30:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$31:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$32:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$33:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$34:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$35:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$36:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$37:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$38:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$43:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$44:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$45:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$46:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$47:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$48:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$49:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$56:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$57:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$58:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$59:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$60:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$61:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$9:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineStore(java.io.OutputStream,char[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] decryptData(java.lang.String,org.bouncycastle.asn1.x509.AlgorithmIdentifier,char[],byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DsaProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$2:boolean hasTestPassed(org.bouncycastle.crypto.fips.FipsTripleDES$EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$2:boolean hasTestPassed(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$EngineProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsKDF$PRF:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.fips.FipsEngineProvider createPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsInputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:void cmacStartUpTest(org.bouncycastle.crypto.fips.FipsTripleDES$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:void <clinit>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.TripleDES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.TripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.TripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.TripleDES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.TripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.TripleDES:void <clinit>()",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.jcajce.provider.ProvDESede$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.jcajce.provider.ProvDESede$10:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$12$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDESede$13:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$3:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$4:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$9:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$KeyFactory:void <init>()",
            "org.bouncycastle.jcajce.provider.ProvDESede$KeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory$OutEncryptor:org.bouncycastle.crypto.OutputEncryptor withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsInputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsInputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory$OutEncryptor:org.bouncycastle.crypto.OutputEncryptor withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsInputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsInputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputAEADEncryptor createOutputAEADEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputAEADEncryptor createOutputAEADEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.OutputAEADEncryptor createOutputAEADEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineStore(java.io.OutputStream,char[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] decryptData(java.lang.String,org.bouncycastle.asn1.x509.AlgorithmIdentifier,char[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:java.security.Key engineGetKey(java.lang.String,char[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineLoad(java.io.InputStream,char[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsInputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsAES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsMACOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.SecureRandom getDefaultSecureRandom()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAlgorithmParameterGenerator:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,int)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:int getDefaultRandomSecurityStrength()",
            "org.bouncycastle.jcajce.provider.DHAlgorithmParameterGeneratorSpi:java.security.AlgorithmParameters engineGenerateParameters()",
            "org.bouncycastle.jcajce.provider.KtsCipherSpi:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvAES$AlgParamGenGCM:java.security.AlgorithmParameters engineGenerateParameters()",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:java.security.SecureRandom getDefaultSecureRandom()",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:void initialize(int)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:void initialize(java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:java.security.AlgorithmParameters engineGenerateParameters()",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:void initialize(int)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyPairGenerator:void initialize(int)",
            "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(int)",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyPairGenerator:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyPairGenerator:void initialize(int)",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:void initialize(int)",
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:void initialize(java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.ProvGOST3410$KeyPairGenerator:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvGOST3410$KeyPairGenerator:void initialize(int)",
            "org.bouncycastle.jcajce.provider.ProvGOST3410$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,java.security.Provider,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.jcajce.provider.ProvRC2$AlgParamGen:java.security.AlgorithmParameters engineGenerateParameters()",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(int)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvRandom$1:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseAgreement:javax.crypto.SecretKey engineGenerateSecret(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSKeyMaterialGenerator$2:javax.crypto.SecretKey run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSKeyMaterialGenerator$2:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSMasterSecretGenerator$2:javax.crypto.SecretKey run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSMasterSecretGenerator$2:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSPRFKeyGenerator$2:javax.crypto.SecretKey run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSPRFKeyGenerator$2:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$SSHOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:javax.crypto.SecretKey engineGenerateSecret(java.lang.String)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.KDFCalculator access$2900(boolean,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$AgreementOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.KDFCalculator access$3000(boolean,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$AgreementOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$IKEv2OperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:javax.crypto.SecretKey engineGenerateSecret(java.lang.String)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:byte[] access$2000(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters,org.bouncycastle.crypto.fips.FipsKDF$TLSPRF,byte[],java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory$2:void generateBytes(byte[],int,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsPBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.general.PBKD$Parameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] generateKey(org.bouncycastle.asn1.pkcs.KeyDerivationFunc,java.lang.String,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] calculateMac(byte[],org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.pkcs.KeyDerivationFunc,char[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineStore(java.io.OutputStream,char[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] decryptData(java.lang.String,org.bouncycastle.asn1.x509.AlgorithmIdentifier,char[],byte[])"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2$BasePBKDF2:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSecretKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsMACOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.fips.FipsEngineProvider access$200(org.bouncycastle.crypto.fips.FipsKDF$PRF)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$1:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$10:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$11:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$12:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$13:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$14:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$15:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$16:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$17:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$18:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$2:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$3:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$4:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$5:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$6:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$7:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$8:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$9:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsAES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$2:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDH$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsDH:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])",
            "org.bouncycastle.crypto.fips.FipsDRBG:void drbgStartupTest()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DHAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$AgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$DSAOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsEC$DSAParameters)",
            "org.bouncycastle.crypto.fips.FipsEC$MQVAgreementFactory:org.bouncycastle.crypto.fips.FipsAgreement createAgreement(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsEC$MQVAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsEC:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA$ExtractorImpl:org.bouncycastle.crypto.SecretWithEncapsulation extractSecret(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsRSA$GeneratorImpl:org.bouncycastle.crypto.SecretWithEncapsulation generate()",
            "org.bouncycastle.crypto.fips.FipsRSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory$RSASigner:void <init>(org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters,org.bouncycastle.crypto.internal.CipherParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsRSA$SignatureOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$SignatureParameters)",
            "org.bouncycastle.crypto.fips.FipsRSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.fips.FipsRSA$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$1:org.bouncycastle.crypto.internal.Mac createEngine()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.fips.FipsParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDigestOperatorFactory:org.bouncycastle.crypto.OutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.BaseMessageDigest:void <init>(org.bouncycastle.crypto.fips.FipsSHS$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$OperatorFactory:org.bouncycastle.crypto.OutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSecureHash:org.bouncycastle.jcajce.provider.BaseMessageDigest getDigestImplementation(org.bouncycastle.crypto.general.SecureHash$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$XOFOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputXOFCalculator createOutputXOFCalculator(org.bouncycastle.crypto.fips.FipsParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsXOFOperatorFactory:org.bouncycastle.crypto.OutputXOFCalculator createOutputXOFCalculator(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$XOFOperatorFactory:org.bouncycastle.crypto.OutputXOFCalculator createOutputXOFCalculator(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:org.bouncycastle.asn1.x509.SubjectKeyIdentifier createSubjectKeyId(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineLoad(java.io.InputStream,char[])",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void doStore(java.io.OutputStream,char[],boolean)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:org.bouncycastle.asn1.x509.SubjectKeyIdentifier access$100(org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi,java.security.PublicKey)"
        ]
    },
    "org.bouncycastle.util.DumpInfo:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsMACOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createStandardCipher(boolean,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Blowfish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.CAST5$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Camellia$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.IDEA$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SEED$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SHACAL2$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Serpent$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.TripleDES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Twofish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GOST28147$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST28147$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.RC2$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RC2$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createStandardAEADCipher(boolean,org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.AuthenticationParametersWithIV)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$AuthParameters)",
            "org.bouncycastle.crypto.general.Blowfish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$AuthParameters)",
            "org.bouncycastle.crypto.general.CAST5$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$AuthParameters)",
            "org.bouncycastle.crypto.general.Camellia$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$AuthParameters)",
            "org.bouncycastle.crypto.general.DES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$AuthParameters)",
            "org.bouncycastle.crypto.general.IDEA$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$AuthParameters)",
            "org.bouncycastle.crypto.general.SEED$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$AuthParameters)",
            "org.bouncycastle.crypto.general.SHACAL2$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$AuthParameters)",
            "org.bouncycastle.crypto.general.Serpent$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$AuthParameters)",
            "org.bouncycastle.crypto.general.TripleDES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.Twofish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$AuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GOST28147$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST28147$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.RC2$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RC2$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac createStandardMac(org.bouncycastle.crypto.internal.ValidatedSymmetricKey,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.general.GeneralAuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$AuthParameters)",
            "org.bouncycastle.crypto.general.CAST5$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$AuthParameters)",
            "org.bouncycastle.crypto.general.Camellia$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$AuthParameters)",
            "org.bouncycastle.crypto.general.DES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$AuthParameters)",
            "org.bouncycastle.crypto.general.IDEA$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$AuthParameters)",
            "org.bouncycastle.crypto.general.SEED$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$AuthParameters)",
            "org.bouncycastle.crypto.general.SHACAL2$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$AuthParameters)",
            "org.bouncycastle.crypto.general.Serpent$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$AuthParameters)",
            "org.bouncycastle.crypto.general.TripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.Twofish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$AuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GOST28147$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST28147$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.RC2$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RC2$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.AES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.TripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory$GuardedWrapper:void setUp()",
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSA$OperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorUsingSecureRandomFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSA$OperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorUsingSecureRandomFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSTU4145$LittleEndianSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSTU4145$LittleEndianSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSTU4145$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSTU4145$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ECGOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ECGOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal:org.bouncycastle.crypto.internal.AsymmetricBlockCipher access$300(boolean,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.ElGamal$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyUnwrapper:void <init>(org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricDHKey,org.bouncycastle.crypto.general.ElGamal$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyWrapper:void <init>(org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricDHKey,org.bouncycastle.crypto.general.ElGamal$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.ElGamal$OperatorFactory:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.ElGamal$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST3410$SignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.PBKD$PBKDF1DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.general.PBKD$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.PBKD$PKCS12DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.general.PBKD$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$ISO9796d2PSSSignatureParameters:org.bouncycastle.crypto.general.RSA$ISO9796d2PSSSignatureParameters withDigestAlgorithm(org.bouncycastle.crypto.DigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$22:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.PBKD$PBKDF2DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.general.PBKD$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SCryptImpl:byte[] MFcrypt(byte[],byte[],int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SCryptImpl:byte[] generate(byte[],byte[],int,int,int,int)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSAPrivateCrtKey:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvRSAPrivateKey:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$2:org.bouncycastle.crypto.AsymmetricPrivateKey convertKey(org.bouncycastle.crypto.Algorithm,java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDH$3:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvEC$34:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyFactory:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvGOST3410$GOST3410KeyFactory:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.Key engineTranslateKey(java.security.Key)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyPairGenerator$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$1:org.bouncycastle.crypto.asymmetric.AsymmetricRSAPublicKey convertKey(org.bouncycastle.crypto.Algorithm,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$1:org.bouncycastle.crypto.AsymmetricPublicKey convertKey(org.bouncycastle.crypto.Algorithm,java.security.PublicKey)"
        ]
    },
    "org.bouncycastle.crypto.asymmetric.AsymmetricRSAPublicKey:void <init>(org.bouncycastle.crypto.Algorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSAPublicKey:void readObject(java.io.ObjectInputStream)"
        ]
    },
    "org.bouncycastle.jcajce.provider.PKIXCertPathBuilderSpi:java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.RFC3280CertPathUtilities:void checkCRL(org.bouncycastle.asn1.x509.DistributionPoint,org.bouncycastle.jcajce.PKIXExtendedParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,org.bouncycastle.jcajce.provider.CertStatus,org.bouncycastle.jcajce.provider.ReasonsMask,java.util.List,java.security.Provider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.RFC3280CertPathUtilities:void checkCRLs(org.bouncycastle.jcajce.PKIXExtendedParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,java.util.List,java.security.Provider)"
        ]
    },
    "org.bouncycastle.asn1.util.ASN1Dump:java.lang.String dumpAsString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.util.Dump:void main(java.lang.String[])",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineLoad(java.io.InputStream,char[])",
            "org.bouncycastle.jcajce.provider.X509CRLEntryObject:java.lang.String toString()",
            "org.bouncycastle.jcajce.provider.X509CRLObject:java.lang.String toString()",
            "org.bouncycastle.jcajce.provider.X509CertificateObject:java.lang.String toString()"
        ]
    },
    "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:byte[] generatePersonalizationString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.SecureRandom getDefaultSecureRandom()"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputVerifierWithMessageRecovery createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner:org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputSignerWithMessageRecovery doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.RSA$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputSignerWithMessageRecovery doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyUnwrapper:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory$KeyWrapper:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$OperatorFactory$BlockDecryptor:org.bouncycastle.crypto.SingleBlockDecryptorUsingSecureRandom withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$OperatorFactory$BlockDecryptor:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$OperatorFactory:org.bouncycastle.crypto.SingleBlockDecryptor createBlockDecryptor(org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.RSA$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$OperatorFactory:org.bouncycastle.crypto.SingleBlockDecryptor createBlockDecryptor(org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedAsymmetricOperatorFactory$BlockEncryptor:org.bouncycastle.crypto.internal.AsymmetricBlockCipher getEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAsymmetricOperatorFactory$BlockEncryptor:byte[] encryptBlock(byte[],int,int)",
            "org.bouncycastle.crypto.general.GuardedAsymmetricOperatorFactory$BlockEncryptor:int getInputSize()",
            "org.bouncycastle.crypto.general.GuardedAsymmetricOperatorFactory$BlockEncryptor:int getOutputSize()"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:org.bouncycastle.crypto.OutputSignerUsingSecureRandom withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.RSA$SignatureParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.AES$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvAES$39$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$40$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$41$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$42$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.TripleDES$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$11$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$12$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvGOST3410$KeyPairGenerator:java.security.KeyPair generateKeyPair()",
            "org.bouncycastle.jcajce.provider.ProvRSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.DSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAsymmetricKeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.DSTU4145$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAsymmetricKeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.ECGOST3410$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAsymmetricKeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.GOST3410$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAsymmetricKeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$3:void evaluate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.fips.VariantKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$4:boolean hasTestPassed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.BasicKatTest)",
            "org.bouncycastle.crypto.general.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.Algorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.BasicKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$5:void evaluate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.fips.VariantKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AuthParameters:org.bouncycastle.crypto.fips.FipsAES$AuthParameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$AuthParameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineStore(java.io.OutputStream,char[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AuthParameters:org.bouncycastle.crypto.fips.FipsAES$AuthParameters withIV(java.security.SecureRandom,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$AuthParameters:org.bouncycastle.crypto.AuthenticationParametersWithIV withIV(java.security.SecureRandom,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.OutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES:void cmacStartUpTest(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputAEADEncryptor createOutputAEADEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsInputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsInputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAES$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$PRF:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeParametersBuilder:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParametersBuilder:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParametersBuilder:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsKDF$PRF:org.bouncycastle.crypto.fips.FipsKDF$PRF[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$PRF:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.fips.FipsEngineProvider createPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$SRTPPRF:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPPRF:org.bouncycastle.crypto.fips.FipsKDF$SRTPPRF[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPPRF:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsKDF:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.AES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.AES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.AES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$000(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.AES:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$AuthParameters)",
            "org.bouncycastle.crypto.general.AES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.AES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.AES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$000(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.AES:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvAES$23:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$9:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.fips.FipsParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvAES$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$10:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$11:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$12:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$13:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$14:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$15:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$16:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$17:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$18:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$19:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$20:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$21:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$22:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$24:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$25:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$26:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$27:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$28:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$29:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$30:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$31:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$32:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$33:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$34:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$35:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$36:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$37:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$38:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$43:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$44:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$45:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$46:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$47:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$48:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$49:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$56:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$57:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$58:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$59:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$60:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$61:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$9:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineStore(java.io.OutputStream,char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDSA:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA$1:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters run()",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(int,int,int,java.math.BigInteger,java.math.BigInteger,byte[],int)",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm,org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsDSA$DsaProvider:org.bouncycastle.crypto.fips.DsaSigner createEngine()",
            "org.bouncycastle.crypto.fips.FipsDSA$KeyGenParameters:void <init>(org.bouncycastle.crypto.asymmetric.DSADomainParameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDSA$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsDSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair generateKeyPair()",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$Parameters:void <init>()",
            "org.bouncycastle.crypto.fips.FipsDSA$Parameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsDSA:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsDSA:org.bouncycastle.crypto.internal.params.DsaParameters access$100(org.bouncycastle.crypto.asymmetric.DSADomainParameters)",
            "org.bouncycastle.crypto.fips.FipsDSA:void access$900(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.fips.FipsDSA:org.bouncycastle.crypto.internal.EngineProvider access$1000()",
            "org.bouncycastle.crypto.fips.FipsDSA:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters access$1200(org.bouncycastle.crypto.asymmetric.AsymmetricDSAPrivateKey)",
            "org.bouncycastle.crypto.fips.FipsDSA:void <clinit>()",
            "org.bouncycastle.crypto.general.DSA:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvDSA$10:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$11:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$12:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$13:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$14:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$7:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$8:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$9:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$2:boolean hasTestPassed(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.BasicKatTest)",
            "org.bouncycastle.crypto.general.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.Algorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.BasicKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.OutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,boolean)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES:void cmacStartUpTest(org.bouncycastle.crypto.fips.FipsTripleDES$EngineProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyWrapper createKeyWrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.fips.FipsKeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$WrapParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsInputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsTripleDES$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.TripleDES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.TripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.TripleDES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.TripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$000(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.TripleDES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.TripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.TripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.TripleDES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.TripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.TripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$000(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.TripleDES:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvDESede$17:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$18:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$19$1:org.bouncycastle.crypto.AuthenticationParameters getBaseParameters()",
            "org.bouncycastle.jcajce.provider.ProvDESede$19$1:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDESede$19:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$20$1:org.bouncycastle.crypto.AuthenticationParameters getBaseParameters()",
            "org.bouncycastle.jcajce.provider.ProvDESede$20$1:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDESede$20:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$3:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$6:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$7:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$8:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.fips.FipsParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDESede$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$10:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$13:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$3:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$4:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$9:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$KeyFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDESede$16:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$KeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory$OutEncryptor:org.bouncycastle.crypto.OutputEncryptor withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory$OutEncryptor:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsInputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory$OutEncryptor:org.bouncycastle.crypto.OutputEncryptor withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory$OutEncryptor:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsInputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputAEADEncryptor createOutputAEADEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADEncryptor createOutputAEADEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AEADOperatorFactory:org.bouncycastle.crypto.OutputAEADEncryptor createOutputAEADEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineLoad(java.io.InputStream,char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsMACOperatorFactory:org.bouncycastle.crypto.fips.FipsOutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)",
            "org.bouncycastle.util.DumpInfo:byte[] calculateModuleHMAC(java.util.jar.JarFile)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseAlgorithmParameterGenerator:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IVAlgorithmParameterGenerator:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,java.lang.String,int)",
            "org.bouncycastle.jcajce.provider.ProvAES$AlgParamGenGCM:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,java.lang.String,int)",
            "org.bouncycastle.jcajce.provider.ProvCAST5$AlgParamGen:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$AlgParamGen:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvRC2$AlgParamGen:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)"
        ]
    },
    "org.bouncycastle.jcajce.provider.KtsCipherSpi:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.KtsCipherSpi:void engineInit(int,java.security.Key,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.KtsCipherSpi:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$AlgParamGenGCM:java.security.AlgorithmParameters engineGenerateParameters()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:java.security.SecureRandom getDefaultSecureRandom()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineStore(java.io.OutputStream,char[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:org.bouncycastle.asn1.pkcs.KeyDerivationFunc generatePkbdAlgorithmIdentifier(int)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDH$5:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$KeyPairGeneratorSpi:void initialize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$5:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:void initialize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyPairGenerator:void initialize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyPairGenerator:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$4:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyPairGenerator:void initialize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvElgamal$KeyPairGeneratorSpi:void initialize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvGOST3410$KeyPairGenerator:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvGOST3410$3:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvGOST3410$KeyPairGenerator:void initialize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvGOST3410$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,java.security.Provider,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1ObjectIdentifier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$BCPKCS12KeyStore3DES:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$BCPKCS12KeyStore3DES40BitRC2:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$DefPKCS12KeyStore3DES:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$DefPKCS12KeyStore3DES40BitRC2:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRC2$AlgParamGen:java.security.AlgorithmParameters engineGenerateParameters()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvRandom$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSKeyMaterialGenerator$2:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSKeyMaterialGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSMasterSecretGenerator$2:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSMasterSecretGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSPRFKeyGenerator$2:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSPRFKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$AgreementOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$AgreementOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:byte[] makeKeyBytes(org.bouncycastle.crypto.fips.FipsRSA$KTSParameters,org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],int,byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory$2:void generateBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$MonitoringKDFCalculator:void generateBytes(byte[],int,int)"
        ]
    },
    "org.bouncycastle.crypto.general.PBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.general.PBKD$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.ProvOpenSSLPBKDF$PBKDF:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1$FixedPBKDF1:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2$BasePBKDF2:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] getDerivedMacKey(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[],int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:javax.crypto.SecretKey getSecretKey(org.bouncycastle.crypto.DigestAlgorithm,java.lang.String,javax.crypto.spec.PBEKeySpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] calculateMac(byte[],org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.pkcs.KeyDerivationFunc,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void verifyMac(byte[],org.bouncycastle.asn1.bc.PbkdMacIntegrityCheck,char[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineStore(java.io.OutputStream,char[])"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseSecretKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDES$KeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvDESede$KeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDigestOperatorFactory:org.bouncycastle.crypto.OutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseMessageDigest:void <init>(org.bouncycastle.crypto.fips.FipsSHS$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA1$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA224$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA256$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA384$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA3_224$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA3_256$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA3_384$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA3_512$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$6:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHS$SHA512$7:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSecureHash:org.bouncycastle.jcajce.provider.BaseMessageDigest getDigestImplementation(org.bouncycastle.crypto.general.SecureHash$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSecureHash:org.bouncycastle.jcajce.provider.BaseMessageDigest access$000(org.bouncycastle.crypto.general.SecureHash$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsXOFOperatorFactory:org.bouncycastle.crypto.OutputXOFCalculator createOutputXOFCalculator(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:org.bouncycastle.asn1.x509.SubjectKeyIdentifier access$100(org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi$CertId:void <init>(org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi,java.security.PublicKey)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.DES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.AES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory$GuardedWrapper:void setUp()",
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory$GuardedWrapper:void setUp()",
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory$GuardedWrapper:void setUp()",
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory$GuardedWrapper:void setUp()",
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory$GuardedWrapper:void setUp()",
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory$GuardedWrapper:void setUp()",
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory$GuardedWrapper:void setUp()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory$GuardedWrapper:byte[] wrap(byte[],int,int)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSignatureOperatorUsingSecureRandomFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorUsingSecureRandomFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSignatureOperatorUsingSecureRandomFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitVerify(java.security.PublicKey)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyUnwrapper:void <init>(org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricDHKey,org.bouncycastle.crypto.general.ElGamal$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyUnwrapper:org.bouncycastle.crypto.KeyUnwrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapperUsingSecureRandom createKeyUnwrapper(org.bouncycastle.crypto.asymmetric.AsymmetricDHKey,org.bouncycastle.crypto.general.ElGamal$WrapParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyWrapper:void <init>(org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory,org.bouncycastle.crypto.asymmetric.AsymmetricDHKey,org.bouncycastle.crypto.general.ElGamal$WrapParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyWrapper:org.bouncycastle.crypto.KeyWrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapperUsingSecureRandom createKeyWrapper(org.bouncycastle.crypto.asymmetric.AsymmetricDHKey,org.bouncycastle.crypto.general.ElGamal$WrapParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$OperatorFactory:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.ElGamal$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal$OperatorFactory:org.bouncycastle.crypto.SingleBlockDecryptor createBlockDecryptor(org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.ElGamal$Parameters)",
            "org.bouncycastle.crypto.general.ElGamal$OperatorFactory:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$22:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.SCryptImpl:byte[] generate(byte[],byte[],int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.KDF$SCryptFactory$1:void generateBytes(byte[])",
            "org.bouncycastle.crypto.general.KDF$SCryptFactory$1:void generateBytes(byte[],int,int)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvEC$ECKeyFactory:java.security.Key engineTranslateKey(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvElgamal$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvGOST3410$GOST3410KeyFactory:java.security.Key engineTranslateKey(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$1:org.bouncycastle.crypto.AsymmetricPublicKey convertKey(org.bouncycastle.crypto.Algorithm,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:java.security.Key engineDoPhase(java.security.Key,boolean)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitVerify(java.security.PublicKey)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDH$3:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDH$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvDSTU4145$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvEC$34:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvEC$ECKeyFactory:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvECGOST3410$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvElgamal$KeyFactorySpi:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvGOST3410$GOST3410KeyFactory:java.security.Key engineTranslateKey(java.security.Key)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvRSA$RSAKeyFactory:java.security.Key engineTranslateKey(java.security.Key)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSAPublicKey:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.RFC3280CertPathUtilities:void checkCRLs(org.bouncycastle.jcajce.PKIXExtendedParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,java.util.List,java.security.Provider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.RFC3280CertPathUtilities:void processCertA(java.security.cert.CertPath,org.bouncycastle.jcajce.PKIXExtendedParameters,int,java.security.PublicKey,boolean,javax.security.auth.x500.X500Principal,java.security.cert.X509Certificate,java.security.Provider)"
        ]
    },
    "org.bouncycastle.asn1.util.Dump:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.X509CRLEntryObject:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.util.ASN1Dump:java.lang.String dumpAsString(java.lang.Object,boolean)",
            "org.bouncycastle.jcajce.provider.CertificateFactory:java.security.cert.CertPath engineGenerateCertPath(java.util.List)",
            "org.bouncycastle.jcajce.provider.ClassUtil:java.lang.String getVIMID()"
        ]
    },
    "org.bouncycastle.jcajce.provider.X509CRLObject:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.util.ASN1Dump:java.lang.String dumpAsString(java.lang.Object,boolean)",
            "org.bouncycastle.jcajce.provider.CertificateFactory:java.security.cert.CertPath engineGenerateCertPath(java.util.List)",
            "org.bouncycastle.jcajce.provider.ClassUtil:java.lang.String getVIMID()"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitVerify(java.security.PublicKey)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory$RSASigner:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputSignerWithMessageRecovery doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputSignerWithMessageRecovery createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$OperatorFactory$BlockDecryptor:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$OperatorFactory:org.bouncycastle.crypto.SingleBlockDecryptor createBlockDecryptor(org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedAsymmetricOperatorFactory$BlockEncryptor:int getInputSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void checkBufferSize()"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedAsymmetricOperatorFactory$BlockEncryptor:int getOutputSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:int engineGetOutputSize(int)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory$RSASigner:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$SignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.fips.FipsAlgorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.BasicKatTest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES:void cmacStartUpTest(org.bouncycastle.crypto.fips.FipsAES$EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsKDF$3:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest makeValidatedDigest(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Xof makeValidatedXof(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac makeValidatedHMac(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:void cmacStartUpTest(org.bouncycastle.crypto.fips.FipsTripleDES$EngineProvider)"
        ]
    },
    "org.bouncycastle.crypto.general.SelfTestExecutor:java.lang.Object validate(org.bouncycastle.crypto.Algorithm,java.lang.Object,org.bouncycastle.crypto.internal.test.BasicKatTest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$1:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.SecureHash$2:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.SecureHash$3:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.SecureHash$4:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.SecureHash$5:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.SecureHash$6:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.SecureHash$7:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.SecureHash$8:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.general.GeneralAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AuthParameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.AuthParametersCreator:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$AuthParameters:org.bouncycastle.crypto.AuthenticationParametersWithIV withIV(java.security.SecureRandom,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSymmetricOperatorFactory:org.bouncycastle.crypto.OutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory:org.bouncycastle.crypto.OutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$CounterModeParametersBuilder:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParametersBuilder:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParametersBuilder:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$PRF:org.bouncycastle.crypto.fips.FipsKDF$PRF[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF$SRTPPRF:org.bouncycastle.crypto.fips.FipsKDF$SRTPPRF[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.EcDHAgreement:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)",
            "org.bouncycastle.crypto.fips.FipsDH$DHAgreementFactory$1:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)",
            "org.bouncycastle.crypto.fips.FipsDH$MQVAgreementFactory$1:byte[] calculate(org.bouncycastle.crypto.AsymmetricPublicKey)",
            "org.bouncycastle.crypto.fips.FipsKDF$3:org.bouncycastle.crypto.internal.Digest createEngine()",
            "org.bouncycastle.crypto.fips.FipsKDF$AgreementOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeParametersBuilder:org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters using(byte[],boolean,byte[],byte[],int)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParametersBuilder:org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters using(byte[],byte[],byte[],int)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParametersBuilder:org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters using(byte[],byte[],byte[],byte[],int)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory$1:void generateBytes(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory$2:void generateBytes(byte[],int,int)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] buildFixedInput(byte[],byte[],int)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] PRF(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters,org.bouncycastle.crypto.fips.FipsKDF$TLSPRF,byte[],java.lang.String,int)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] PRF_legacy(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters,byte[],java.lang.String,int,org.bouncycastle.crypto.internal.Mac,org.bouncycastle.crypto.internal.Mac)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] access$100(byte[],byte[],int)",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.fips.FipsEngineProvider access$200(org.bouncycastle.crypto.fips.FipsKDF$PRF)",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.internal.EngineProvider access$1600()",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] access$1900(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters,byte[],java.lang.String,int,org.bouncycastle.crypto.internal.Mac,org.bouncycastle.crypto.internal.Mac)",
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] access$2000(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters,org.bouncycastle.crypto.fips.FipsKDF$TLSPRF,byte[],java.lang.String,int)",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.KDFCalculator access$2900(boolean,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.KDFCalculator access$3000(boolean,org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvDH$12:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDH$13:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDH$14:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDH$15:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$36:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$37:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$38:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$39:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvEC$40:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:byte[] makeKeyBytes(org.bouncycastle.crypto.fips.FipsRSA$KTSParameters,org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],int,byte[])",
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$BaseTLSKeyGeneratorSpi:javax.crypto.SecretKey calculatePRF(sun.security.internal.spec.TlsPrfParameterSpec,java.lang.String)",
            "org.bouncycastle.jcajce.spec.KTSKeySpec:void <clinit>()",
            "org.bouncycastle.jcajce.spec.KTSParameterSpec:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.AES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.AES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.AES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$000(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$AuthParameters)",
            "org.bouncycastle.crypto.general.AES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.AES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.AES$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$23:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$1:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA$1:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(int,int,int,java.math.BigInteger,java.math.BigInteger,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$DomainParametersGenerator:org.bouncycastle.crypto.asymmetric.DHDomainParameters generateDomainParameters()",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(int,int,int)",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(int,int,int,int)",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(java.math.BigInteger,java.math.BigInteger)",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(java.math.BigInteger,java.math.BigInteger,byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$KeyGenParameters:void <init>(org.bouncycastle.crypto.asymmetric.DSADomainParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$Parameters:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$Parameters:void <init>(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA$Parameters:org.bouncycastle.crypto.fips.FipsDSA$Parameters withDigestAlgorithm(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA:org.bouncycastle.crypto.internal.params.DsaParameters access$100(org.bouncycastle.crypto.asymmetric.DSADomainParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA$1:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters run()",
            "org.bouncycastle.crypto.fips.FipsDSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.fips.FipsDSA$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA:org.bouncycastle.crypto.internal.EngineProvider access$1000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters access$1200(org.bouncycastle.crypto.asymmetric.AsymmetricDSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSA:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA$2:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters run()",
            "org.bouncycastle.crypto.general.DSA$DomainGenParameters:void <init>(int,int)",
            "org.bouncycastle.crypto.general.DSA$KeyGenParameters:void <init>(org.bouncycastle.crypto.asymmetric.DSADomainParameters)",
            "org.bouncycastle.crypto.general.DSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.general.DSA$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DSA$KeyPairGenerator:org.bouncycastle.crypto.asymmetric.AsymmetricKeyPair doGenerateKeyPair()",
            "org.bouncycastle.crypto.general.DSA$OperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.DSA$Parameters)",
            "org.bouncycastle.crypto.general.DSA$OperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.DSA$Parameters)",
            "org.bouncycastle.crypto.general.DSA:void validateKeyPair(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.general.DSA:org.bouncycastle.crypto.internal.params.DsaParameters access$200(org.bouncycastle.crypto.asymmetric.DSADomainParameters)",
            "org.bouncycastle.crypto.general.DSA:void access$300(org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)",
            "org.bouncycastle.crypto.general.DSA:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters access$500(org.bouncycastle.crypto.asymmetric.AsymmetricDSAPrivateKey)",
            "org.bouncycastle.crypto.general.DSA:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvDSA$15:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$16:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$17:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$18:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$19:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$20:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$21:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$22:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$10:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$11:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$12:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$13:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$14:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$7:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$8:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$9:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyFactory:java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.PrivateKey getPrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$KeyFactorySpi:java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyFactory:java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider:java.security.PublicKey getPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSymmetricOperatorFactory:org.bouncycastle.crypto.OutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory:org.bouncycastle.crypto.OutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$000(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.TripleDES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.TripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.TripleDES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$AuthParameters)",
            "org.bouncycastle.crypto.general.TripleDES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.TripleDES$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$17:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$18:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$19$1:org.bouncycastle.crypto.AuthenticationParameters getBaseParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:int engineGetMacLength()",
            "org.bouncycastle.jcajce.provider.BaseMac:int engineGetMacLength()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$19$1:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.BaseMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$19:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$20$1:org.bouncycastle.crypto.AuthenticationParameters getBaseParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:int engineGetMacLength()",
            "org.bouncycastle.jcajce.provider.BaseMac:int engineGetMacLength()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$20$1:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.BaseMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$20:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$6:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$7:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$8:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$16:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$OperatorFactory$OutEncryptor:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$OperatorFactory$OutEncryptor:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADEncryptor createOutputAEADEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.BaseMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.IVAlgorithmParameterGenerator:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvAES$6:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvBlowfish$8:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$3:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDES$14:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDESede$15:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvIDEA$2:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSEED$3:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$8:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$AlgParamGenGCM:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvAES$7:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvAES$8:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCAST5$AlgParamGen:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvCAST5$3:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvGOST28147$AlgParamGen:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvGOST28147$6:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRC2$AlgParamGen:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRC2$2:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.KtsCipherSpi:void engineInit(int,java.security.Key,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.KtsCipherSpi:void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:org.bouncycastle.asn1.pkcs.KeyDerivationFunc generatePkbdAlgorithmIdentifier(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineStore(java.io.OutputStream,char[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineLoad(java.io.InputStream,char[])"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvECGOST3410$4:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvGOST3410$3:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$BCPKCS12KeyStore3DES:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$1:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$BCPKCS12KeyStore3DES40BitRC2:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$3:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$DefPKCS12KeyStore3DES:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$2:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$DefPKCS12KeyStore3DES40BitRC2:void <init>(org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$4:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSKeyMaterialGenerator:javax.crypto.SecretKey engineGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSMasterSecretGenerator:javax.crypto.SecretKey engineGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$TLSPRFKeyGenerator:javax.crypto.SecretKey engineGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF$AgreementOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.jcajce.provider.BaseAgreement:javax.crypto.SecretKey engineGenerateSecret(java.lang.String)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:byte[] makeKeyBytes(org.bouncycastle.crypto.fips.FipsRSA$KTSParameters,org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$MonitoringKDFCalculator:void generateBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$MonitoringKDFCalculator:void generateBytes(byte[])",
            "org.bouncycastle.jcajce.provider.BaseAgreement:javax.crypto.SecretKey engineGenerateSecret(java.lang.String)"
        ]
    },
    "org.bouncycastle.crypto.general.PBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$DeriverFactory:org.bouncycastle.crypto.PasswordBasedDeriver createDeriver(org.bouncycastle.crypto.general.PBKD$Parameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvOpenSSLPBKDF$PBKDF:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1$FixedPBKDF1:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] getDerivedMacKey(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] calculatePbeMacWrongZero(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],int,byte[])",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] calculatePbeMac(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],int,char[],byte[])"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12:javax.crypto.SecretKey getSecretKey(org.bouncycastle.crypto.DigestAlgorithm,java.lang.String,javax.crypto.spec.PBEKeySpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$GeneralKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$KeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void verifyMac(byte[],org.bouncycastle.asn1.bc.PbkdMacIntegrityCheck,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineLoad(java.io.InputStream,char[])"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$KeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvSecureHash:org.bouncycastle.jcajce.provider.BaseMessageDigest access$000(org.bouncycastle.crypto.general.SecureHash$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSecureHash$GOST3411$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSecureHash$MD5$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSecureHash$RIPEMD128$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSecureHash$RIPEMD160$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSecureHash$RIPEMD256$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSecureHash$RIPEMD320$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSecureHash$Tiger$1:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSecureHash$Whirlpool$1:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi$CertId:void <init>(org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void removeChainCert(java.security.cert.Certificate)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void putChainCert(java.security.cert.Certificate)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineLoad(java.io.InputStream,char[])"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:org.bouncycastle.crypto.OutputEncryptor withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.Blowfish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedAEADOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADEncryptor createOutputAEADEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.InputAEADDecryptor createInputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADDecryptor createOutputAEADDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.BaseMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedKeyWrapOperatorFactory$GuardedWrapper:byte[] wrap(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] engineWrap(java.security.Key)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:byte[] engineWrap(java.security.Key)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSignatureOperatorUsingSecureRandomFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyUnwrapper:org.bouncycastle.crypto.KeyUnwrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyUnwrapper:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapperUsingSecureRandom createKeyUnwrapper(org.bouncycastle.crypto.asymmetric.AsymmetricDHKey,org.bouncycastle.crypto.general.ElGamal$WrapParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyWrapper:org.bouncycastle.crypto.KeyWrapperUsingSecureRandom withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyWrapper:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapperUsingSecureRandom createKeyWrapper(org.bouncycastle.crypto.asymmetric.AsymmetricDHKey,org.bouncycastle.crypto.general.ElGamal$WrapParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$OperatorFactory:org.bouncycastle.crypto.SingleBlockDecryptor createBlockDecryptor(org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.general.ElGamal$Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ElGamal$OperatorFactory:org.bouncycastle.crypto.SingleBlockDecryptor createBlockDecryptor(org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$OperatorFactory:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedAsymmetricOperatorFactory$BlockEncryptor:org.bouncycastle.crypto.internal.AsymmetricBlockCipher getEngine()"
        ]
    },
    "org.bouncycastle.crypto.general.KDF$SCryptFactory$1:void generateBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:byte[] makeKeyBytes(org.bouncycastle.crypto.fips.FipsRSA$KTSParameters,org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],int,byte[])",
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$BaseTLSKeyGeneratorSpi:javax.crypto.SecretKey calculatePRF(sun.security.internal.spec.TlsPrfParameterSpec,java.lang.String)"
        ]
    },
    "org.bouncycastle.crypto.general.KDF$SCryptFactory$1:void generateBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:javax.crypto.SecretKey engineGenerateSecret(java.lang.String)"
        ]
    },
    "org.bouncycastle.jcajce.provider.RFC3280CertPathUtilities:void processCertA(java.security.cert.CertPath,org.bouncycastle.jcajce.PKIXExtendedParameters,int,java.security.PublicKey,boolean,javax.security.auth.x500.X500Principal,java.security.cert.X509Certificate,java.security.Provider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.PKIXCertPathValidatorSpi:java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputSignerWithMessageRecovery createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void checkBufferSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] engineUpdate(byte[],int,int)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:int engineUpdate(byte[],int,int,byte[],int)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] engineDoFinal(byte[],int,int)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:int engineDoFinal(byte[],int,int,byte[],int)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:int engineGetOutputSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:int engineDoFinal(byte[],int,int,byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$3:org.bouncycastle.crypto.internal.Digest createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$3:java.lang.Object createEngine()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Xof makeValidatedXof(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Xof access$400(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac makeValidatedHMac(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac access$100(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$1:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.internal.Digest,org.bouncycastle.crypto.general.SecureHash$DigestCloner)",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.general.GeneralDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$2:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.internal.Digest,org.bouncycastle.crypto.general.SecureHash$DigestCloner)",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.general.GeneralDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$3:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.internal.Digest,org.bouncycastle.crypto.general.SecureHash$DigestCloner)",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.general.GeneralDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$4:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.internal.Digest,org.bouncycastle.crypto.general.SecureHash$DigestCloner)",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.general.GeneralDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$5:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.internal.Digest,org.bouncycastle.crypto.general.SecureHash$DigestCloner)",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.general.GeneralDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$6:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.internal.Digest,org.bouncycastle.crypto.general.SecureHash$DigestCloner)",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.general.GeneralDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$7:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.internal.Digest,org.bouncycastle.crypto.general.SecureHash$DigestCloner)",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.general.GeneralDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$8:org.bouncycastle.crypto.internal.Digest makeDigest(org.bouncycastle.crypto.internal.Digest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.internal.Digest,org.bouncycastle.crypto.general.SecureHash$DigestCloner)",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.general.GeneralDigestAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.general.GeneralDigestAlgorithm)",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Mac access$300(org.bouncycastle.crypto.general.GeneralAlgorithm)"
        ]
    },
    "org.bouncycastle.jcajce.provider.AuthParametersCreator:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.AuthParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseHMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.BaseMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSymmetricOperatorFactory:org.bouncycastle.crypto.OutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF$CounterModeParametersBuilder:org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters using(byte[],boolean,byte[],byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParametersBuilder:org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters using(byte[],byte[],byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParametersBuilder:org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters using(byte[],byte[],byte[],byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory$1:void generateBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$MonitoringKDFCalculator:void generateBytes(byte[],int,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:byte[] buildFixedInput(byte[],byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] access$100(byte[],byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:byte[] PRF_legacy(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters,byte[],java.lang.String,int,org.bouncycastle.crypto.internal.Mac,org.bouncycastle.crypto.internal.Mac)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] access$1900(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters,byte[],java.lang.String,int,org.bouncycastle.crypto.internal.Mac,org.bouncycastle.crypto.internal.Mac)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:byte[] access$100(byte[],byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$CounterModeParametersBuilder:org.bouncycastle.crypto.fips.FipsKDF$CounterModeParameters using(byte[],boolean,byte[],byte[],int)",
            "org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParametersBuilder:org.bouncycastle.crypto.fips.FipsKDF$DoublePipelineModeParameters using(byte[],byte[],byte[],int)",
            "org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParametersBuilder:org.bouncycastle.crypto.fips.FipsKDF$FeedbackModeParameters using(byte[],byte[],byte[],byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.internal.EngineProvider access$1600()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF:byte[] access$1900(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters,byte[],java.lang.String,int,org.bouncycastle.crypto.internal.Mac,org.bouncycastle.crypto.internal.Mac)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory$1:void generateBytes(byte[],int,int)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$12:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$13:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$14:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDH$15:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$36:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$37:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$38:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$39:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvEC$40:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.spec.KTSKeySpec:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.spec.KTSExtractKeySpec$Builder:void <init>(java.security.PrivateKey,byte[],java.lang.String,int,byte[])",
            "org.bouncycastle.jcajce.spec.KTSExtractKeySpec$Builder:org.bouncycastle.jcajce.spec.KTSExtractKeySpec$Builder withKdfAlgorithm(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder)",
            "org.bouncycastle.jcajce.spec.KTSGenerateKeySpec$Builder:void <init>(java.security.PublicKey,java.lang.String,int,byte[])",
            "org.bouncycastle.jcajce.spec.KTSGenerateKeySpec$Builder:org.bouncycastle.jcajce.spec.KTSGenerateKeySpec$Builder withKdfAlgorithm(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder)",
            "org.bouncycastle.jcajce.spec.KTSKeySpec:org.bouncycastle.asn1.x509.AlgorithmIdentifier createAlgId(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder)",
            "org.bouncycastle.jcajce.spec.KTSKeySpec:void <clinit>()",
            "org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder:void <init>(java.lang.String,int,byte[])",
            "org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder:org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder withKdfAlgorithm(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder)"
        ]
    },
    "org.bouncycastle.jcajce.spec.KTSParameterSpec:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder:void <init>(java.lang.String,int,byte[])",
            "org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder:org.bouncycastle.jcajce.spec.KTSParameterSpec build()",
            "org.bouncycastle.jcajce.spec.KTSParameterSpec:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters getLwKey(org.bouncycastle.crypto.asymmetric.AsymmetricDSAPrivateKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(int)",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(int,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(java.math.BigInteger,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(java.math.BigInteger,java.math.BigInteger,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$Parameters:org.bouncycastle.crypto.fips.FipsDSA$Parameters withDigestAlgorithm(org.bouncycastle.crypto.fips.FipsDigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$10:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$11:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$12:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$13:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$14:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$8:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDSA$9:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.DSA$2:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA$2:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.crypto.general.DSA$DomainGenParameters:void <init>(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA$DomainGenParameters:void <init>(int)"
        ]
    },
    "org.bouncycastle.crypto.general.DSA$KeyGenParameters:void <init>(org.bouncycastle.crypto.asymmetric.DSADomainParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.DSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.general.DSA$KeyGenParameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.DSA:org.bouncycastle.crypto.internal.params.DsaParameters access$200(org.bouncycastle.crypto.asymmetric.DSADomainParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA$2:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters run()",
            "org.bouncycastle.crypto.general.DSA$KeyPairGenerator:void <init>(org.bouncycastle.crypto.general.DSA$KeyGenParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DSA$OperatorFactory:org.bouncycastle.crypto.OutputVerifier doCreateVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.general.DSA$Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.DSA:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters access$500(org.bouncycastle.crypto.asymmetric.AsymmetricDSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA$OperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom doCreateSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.general.DSA$Parameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$15:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$16:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$17:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$18:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$19:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$20:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$21:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDSA$22:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseHMac:int engineGetMacLength()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseMac:int engineGetMacLength()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseHMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvAES$6:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvBlowfish$8:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$3:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$14:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDESede$15:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvIDEA$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSEED$3:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$8:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$7:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvAES$8:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCAST5$3:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvGOST28147$6:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRC2$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$3:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$4:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$MonitoringKDFCalculator:void generateBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:byte[] processZBytes(byte[],org.bouncycastle.crypto.fips.FipsAgreementParameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:byte[] makeKeyBytes(org.bouncycastle.crypto.fips.FipsRSA$KTSParameters,org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],int,byte[])",
            "org.bouncycastle.jcajce.provider.ProvSunTLSKDF$BaseTLSKeyGeneratorSpi:javax.crypto.SecretKey calculatePRF(sun.security.internal.spec.TlsPrfParameterSpec,java.lang.String)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] calculatePbeMacWrongZero(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineLoad(java.io.InputStream,char[])"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] calculatePbeMac(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],int,char[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineLoad(java.io.InputStream,char[])",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void doStore(java.io.OutputStream,char[],boolean)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$GeneralKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvPKCS12$KeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.ProvSecureHash$GOST3411$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSecureHash$MD5$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSecureHash$RIPEMD128$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSecureHash$RIPEMD160$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSecureHash$RIPEMD256$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSecureHash$RIPEMD320$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSecureHash$Tiger$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSecureHash$Whirlpool$1:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:org.bouncycastle.crypto.OutputEncryptor withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory:org.bouncycastle.crypto.OutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedAEADOperatorFactory:org.bouncycastle.crypto.OutputAEADEncryptor createOutputAEADEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyUnwrapper:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyUnwrapper createKeyUnwrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory$KeyWrapper:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$KeyWrapOperatorFactory:org.bouncycastle.crypto.KeyWrapper createKeyWrapper(org.bouncycastle.crypto.Key,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.ElGamal$OperatorFactory:org.bouncycastle.crypto.SingleBlockDecryptor createBlockDecryptor(org.bouncycastle.crypto.AsymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSignatureWithMessageRecoveryOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey)",
            "org.bouncycastle.jcajce.provider.BaseSignature:void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.jcajce.provider.ProvRSA$AdaptiveSignatureOperatorFactory:org.bouncycastle.crypto.OutputSigner createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsRSA$PKCS1v15SignatureParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:byte[] engineUpdate(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:int engineUpdate(byte[],int,int,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF$3:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.internal.Digest,org.bouncycastle.crypto.general.SecureHash$DigestCloner)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.general.SecureHash$DigestCloner)",
            "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:org.bouncycastle.crypto.OutputDigestCalculator clone()"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.general.GeneralDigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.general.GeneralDigestAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Mac access$300(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.general.SecureHash$AuthParameters)",
            "org.bouncycastle.crypto.general.SecureHash$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SecureHash$AuthParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.AuthParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.jcajce.spec.KTSExtractKeySpec$Builder:void <init>(java.security.PrivateKey,byte[],java.lang.String,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.KtsCipherSpi:java.security.Key engineUnwrap(byte[],java.lang.String,int)",
            "org.bouncycastle.jcajce.spec.KTSExtractKeySpec$Builder:void <init>(java.security.PrivateKey,byte[],java.lang.String,int)"
        ]
    },
    "org.bouncycastle.jcajce.spec.KTSExtractKeySpec$Builder:org.bouncycastle.jcajce.spec.KTSExtractKeySpec$Builder withKdfAlgorithm(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.spec.KTSGenerateKeySpec$Builder:void <init>(java.security.PublicKey,java.lang.String,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.KtsCipherSpi:byte[] engineWrap(java.security.Key)",
            "org.bouncycastle.jcajce.spec.KTSGenerateKeySpec$Builder:void <init>(java.security.PublicKey,java.lang.String,int)"
        ]
    },
    "org.bouncycastle.jcajce.spec.KTSGenerateKeySpec$Builder:org.bouncycastle.jcajce.spec.KTSGenerateKeySpec$Builder withKdfAlgorithm(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.spec.KTSKeySpec:org.bouncycastle.asn1.x509.AlgorithmIdentifier createAlgId(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.spec.KTSExtractKeySpec$Builder:void <init>(java.security.PrivateKey,byte[],java.lang.String,int,byte[])",
            "org.bouncycastle.jcajce.spec.KTSExtractKeySpec$Builder:org.bouncycastle.jcajce.spec.KTSExtractKeySpec$Builder withKdfAlgorithm(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder)",
            "org.bouncycastle.jcajce.spec.KTSGenerateKeySpec$Builder:void <init>(java.security.PublicKey,java.lang.String,int,byte[])",
            "org.bouncycastle.jcajce.spec.KTSGenerateKeySpec$Builder:org.bouncycastle.jcajce.spec.KTSGenerateKeySpec$Builder withKdfAlgorithm(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder)",
            "org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder:void <init>(java.lang.String,int,byte[])",
            "org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder:org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder withKdfAlgorithm(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder)"
        ]
    },
    "org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder:void <init>(java.lang.String,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder:void <init>(java.lang.String,int)"
        ]
    },
    "org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder:org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder withKdfAlgorithm(org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFParametersBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder:org.bouncycastle.jcajce.spec.KTSParameterSpec build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.KtsCipherSpi:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KtsAlgParams:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters getLwKey(org.bouncycastle.crypto.asymmetric.AsymmetricDSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDSA:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters access$1200(org.bouncycastle.crypto.asymmetric.AsymmetricDSAPrivateKey)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:java.security.AlgorithmParameters engineGenerateParameters()",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainGenParameters:void <init>(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.DSA$2:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters getLwKey(org.bouncycastle.crypto.asymmetric.AsymmetricDSAPrivateKey)"
        ]
    },
    "org.bouncycastle.crypto.general.DSA$DomainGenParameters:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDSA$DSAAlgorithmParameterGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDSA$KeyPairGenerator:java.security.KeyPair generateKeyPair()"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricOperatorFactory$OutEncryptor:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.general.SecureHash$DigestCloner)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.general.SecureHash$DigestCloner,org.bouncycastle.crypto.general.SecureHash$1)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:org.bouncycastle.crypto.OutputDigestCalculator clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:java.lang.Object clone()",
            "org.bouncycastle.jcajce.provider.BaseMessageDigest:java.lang.Object clone()"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.general.SecureHash$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SecureHash$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.KtsCipherSpi:java.security.Key engineUnwrap(byte[],java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.spec.KTSExtractKeySpec$Builder:void <init>(java.security.PrivateKey,byte[],java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.KtsCipherSpi:byte[] engineWrap(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.spec.KTSGenerateKeySpec$Builder:void <init>(java.security.PublicKey,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.KtsCipherSpi:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KtsAlgParams:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRSA$KtsAlgParams:java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAlgorithmParameters:java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class)"
        ]
    },
    "org.bouncycastle.crypto.general.DSA:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters getLwKey(org.bouncycastle.crypto.asymmetric.AsymmetricDSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DSA:org.bouncycastle.crypto.internal.params.DsaPrivateKeyParameters access$500(org.bouncycastle.crypto.asymmetric.AsymmetricDSAPrivateKey)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,org.bouncycastle.crypto.general.SecureHash$DigestCloner,org.bouncycastle.crypto.general.SecureHash$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$OperatorFactory:org.bouncycastle.crypto.OutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.general.GeneralParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$LocalOutputDigestCalculator:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.cms.TimeStampTokenEvidence:void <init>(org.bouncycastle.asn1.cms.TimeStampAndCRL[])",
            "org.bouncycastle.asn1.cms.TimeStampTokenEvidence:org.bouncycastle.asn1.cms.TimeStampAndCRL[] toTimeStampAndCRLArray()",
            "org.bouncycastle.asn1.dvcs.PathProcInput:void <init>(org.bouncycastle.asn1.x509.PolicyInformation[])",
            "org.bouncycastle.asn1.dvcs.PathProcInput:void <init>(org.bouncycastle.asn1.x509.PolicyInformation[],boolean,boolean,boolean)",
            "org.bouncycastle.asn1.dvcs.PathProcInput:org.bouncycastle.asn1.x509.PolicyInformation[] getAcceptablePolicySet()",
            "org.bouncycastle.asn1.icao.LDSSecurityObject:void <init>(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.icao.DataGroupHash[])",
            "org.bouncycastle.asn1.icao.LDSSecurityObject:void <init>(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.icao.DataGroupHash[],org.bouncycastle.asn1.icao.LDSVersionInfo)",
            "org.bouncycastle.asn1.pkcs.AuthenticatedSafe:void <init>(org.bouncycastle.asn1.pkcs.ContentInfo[])",
            "org.bouncycastle.asn1.pkcs.AuthenticatedSafe:org.bouncycastle.asn1.pkcs.ContentInfo[] getContentInfo()",
            "org.bouncycastle.asn1.ua.DSTU4145NamedCurves:org.bouncycastle.asn1.ASN1ObjectIdentifier[] getOIDs()",
            "org.bouncycastle.asn1.x500.X500Name:void <init>(org.bouncycastle.asn1.x500.X500NameStyle,org.bouncycastle.asn1.x500.RDN[])",
            "org.bouncycastle.asn1.x509.AuthorityInformationAccess:org.bouncycastle.asn1.x509.AccessDescription[] getAccessDescriptions()",
            "org.bouncycastle.asn1.x509.CertificatePolicies:void <init>(org.bouncycastle.asn1.x509.PolicyInformation[])",
            "org.bouncycastle.asn1.x509.GeneralNames:void <init>(org.bouncycastle.asn1.x509.GeneralName[])",
            "org.bouncycastle.crypto.CryptoServicesRegistrar:java.lang.Object[] getSizedProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property)",
            "org.bouncycastle.crypto.CryptoServicesRegistrar:void setThreadProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property,java.lang.Object[])",
            "org.bouncycastle.crypto.CryptoServicesRegistrar:void setGlobalProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property,java.lang.Object[])",
            "org.bouncycastle.crypto.PasswordBasedDeriver$KeyType:org.bouncycastle.crypto.PasswordBasedDeriver$KeyType[] values()",
            "org.bouncycastle.crypto.PasswordConverter:org.bouncycastle.crypto.PasswordConverter[] values()",
            "org.bouncycastle.crypto.SymmetricSecretKey:void <init>(org.bouncycastle.crypto.Algorithm,byte[])",
            "org.bouncycastle.crypto.SymmetricSecretKey:void <init>(org.bouncycastle.crypto.Parameters,byte[])",
            "org.bouncycastle.crypto.SymmetricSecretKey:byte[] getKeyBytes()",
            "org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey$Usage:org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey$Usage[] values()",
            "org.bouncycastle.crypto.fips.FipsDH$Variations:org.bouncycastle.crypto.fips.FipsDH$Variations[] values()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Variations:org.bouncycastle.crypto.fips.FipsDRBG$Variations[] values()",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersValidator$Version:org.bouncycastle.crypto.fips.FipsDSA$DomainParametersValidator$Version[] values()",
            "org.bouncycastle.crypto.fips.FipsEC$DomainParameterID:org.bouncycastle.crypto.fips.FipsEC$DomainParameterID[] values()",
            "org.bouncycastle.crypto.fips.FipsEC$Variations:org.bouncycastle.crypto.fips.FipsEC$Variations[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFPRF:org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFPRF[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterLocation:org.bouncycastle.crypto.fips.FipsKDF$CounterLocation[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$IKEv2PRF:org.bouncycastle.crypto.fips.FipsKDF$IKEv2PRF[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$PRF:org.bouncycastle.crypto.fips.FipsKDF$PRF[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPPRF:org.bouncycastle.crypto.fips.FipsKDF$SRTPPRF[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$SSHPRF:org.bouncycastle.crypto.fips.FipsKDF$SSHPRF[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSPRF:org.bouncycastle.crypto.fips.FipsKDF$TLSPRF[] values()",
            "org.bouncycastle.crypto.fips.FipsRSA$Variations:org.bouncycastle.crypto.fips.FipsRSA$Variations[] values()",
            "org.bouncycastle.crypto.fips.FipsSHS$Variations:org.bouncycastle.crypto.fips.FipsSHS$Variations[] values()",
            "org.bouncycastle.crypto.fips.Mode:org.bouncycastle.crypto.fips.Mode[] values()",
            "org.bouncycastle.crypto.fips.Padding:org.bouncycastle.crypto.fips.Padding[] values()",
            "org.bouncycastle.crypto.general.DSA$Variations:org.bouncycastle.crypto.general.DSA$Variations[] values()",
            "org.bouncycastle.crypto.general.DSTU4145$Variations:org.bouncycastle.crypto.general.DSTU4145$Variations[] values()",
            "org.bouncycastle.crypto.general.EC$Variations:org.bouncycastle.crypto.general.EC$Variations[] values()",
            "org.bouncycastle.crypto.general.ECGOST3410$Variations:org.bouncycastle.crypto.general.ECGOST3410$Variations[] values()",
            "org.bouncycastle.crypto.general.ElGamal$Variations:org.bouncycastle.crypto.general.ElGamal$Variations[] values()",
            "org.bouncycastle.crypto.general.GOST28147$AuthParameters:byte[] getSBox()",
            "org.bouncycastle.crypto.general.GOST28147$Parameters:byte[] getSBox()",
            "org.bouncycastle.crypto.general.GOST3410$Variations:org.bouncycastle.crypto.general.GOST3410$Variations[] values()",
            "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.IDEA$Parameters withIV(byte[])",
            "org.bouncycastle.crypto.general.Mode:org.bouncycastle.crypto.general.Mode[] values()",
            "org.bouncycastle.crypto.general.Padding:org.bouncycastle.crypto.general.Padding[] values()",
            "org.bouncycastle.crypto.general.RSA$Variations:org.bouncycastle.crypto.general.RSA$Variations[] values()",
            "org.bouncycastle.crypto.general.SecureHash$Variations:org.bouncycastle.crypto.general.SecureHash$Variations[] values()",
            "org.bouncycastle.crypto.general.X931PRNG$Variations:org.bouncycastle.crypto.general.X931PRNG$Variations[] values()",
            "org.bouncycastle.crypto.internal.BlockCipherMode:org.bouncycastle.crypto.internal.BlockCipherMode[] values()",
            "org.bouncycastle.crypto.internal.BlockCipherPadding:org.bouncycastle.crypto.internal.BlockCipherPadding[] values()",
            "org.bouncycastle.crypto.util.ByteMacData$Type:org.bouncycastle.crypto.util.ByteMacData$Type[] values()",
            "org.bouncycastle.crypto.util.DERMacData$Type:org.bouncycastle.crypto.util.DERMacData$Type[] values()",
            "org.bouncycastle.jcajce.PBKDF2Key:void <init>(char[],org.bouncycastle.crypto.CharToByteConverter)",
            "org.bouncycastle.jcajce.provider.PBEScheme:org.bouncycastle.jcajce.provider.PBEScheme[] values()"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseMessageDigest:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.cms.TimeStampTokenEvidence:void <init>(org.bouncycastle.asn1.cms.TimeStampAndCRL[])",
            "org.bouncycastle.asn1.cms.TimeStampTokenEvidence:org.bouncycastle.asn1.cms.TimeStampAndCRL[] toTimeStampAndCRLArray()",
            "org.bouncycastle.asn1.dvcs.PathProcInput:void <init>(org.bouncycastle.asn1.x509.PolicyInformation[])",
            "org.bouncycastle.asn1.dvcs.PathProcInput:void <init>(org.bouncycastle.asn1.x509.PolicyInformation[],boolean,boolean,boolean)",
            "org.bouncycastle.asn1.dvcs.PathProcInput:org.bouncycastle.asn1.x509.PolicyInformation[] getAcceptablePolicySet()",
            "org.bouncycastle.asn1.icao.LDSSecurityObject:void <init>(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.icao.DataGroupHash[])",
            "org.bouncycastle.asn1.icao.LDSSecurityObject:void <init>(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.icao.DataGroupHash[],org.bouncycastle.asn1.icao.LDSVersionInfo)",
            "org.bouncycastle.asn1.pkcs.AuthenticatedSafe:void <init>(org.bouncycastle.asn1.pkcs.ContentInfo[])",
            "org.bouncycastle.asn1.pkcs.AuthenticatedSafe:org.bouncycastle.asn1.pkcs.ContentInfo[] getContentInfo()",
            "org.bouncycastle.asn1.ua.DSTU4145NamedCurves:org.bouncycastle.asn1.ASN1ObjectIdentifier[] getOIDs()",
            "org.bouncycastle.asn1.x500.X500Name:void <init>(org.bouncycastle.asn1.x500.X500NameStyle,org.bouncycastle.asn1.x500.RDN[])",
            "org.bouncycastle.asn1.x509.AuthorityInformationAccess:org.bouncycastle.asn1.x509.AccessDescription[] getAccessDescriptions()",
            "org.bouncycastle.asn1.x509.CertificatePolicies:void <init>(org.bouncycastle.asn1.x509.PolicyInformation[])",
            "org.bouncycastle.asn1.x509.GeneralNames:void <init>(org.bouncycastle.asn1.x509.GeneralName[])",
            "org.bouncycastle.crypto.CryptoServicesRegistrar:java.lang.Object[] getSizedProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property)",
            "org.bouncycastle.crypto.CryptoServicesRegistrar:void setThreadProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property,java.lang.Object[])",
            "org.bouncycastle.crypto.CryptoServicesRegistrar:void setGlobalProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property,java.lang.Object[])",
            "org.bouncycastle.crypto.PasswordBasedDeriver$KeyType:org.bouncycastle.crypto.PasswordBasedDeriver$KeyType[] values()",
            "org.bouncycastle.crypto.PasswordConverter:org.bouncycastle.crypto.PasswordConverter[] values()",
            "org.bouncycastle.crypto.SymmetricSecretKey:void <init>(org.bouncycastle.crypto.Algorithm,byte[])",
            "org.bouncycastle.crypto.SymmetricSecretKey:void <init>(org.bouncycastle.crypto.Parameters,byte[])",
            "org.bouncycastle.crypto.SymmetricSecretKey:byte[] getKeyBytes()",
            "org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey$Usage:org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey$Usage[] values()",
            "org.bouncycastle.crypto.fips.FipsDH$Variations:org.bouncycastle.crypto.fips.FipsDH$Variations[] values()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Variations:org.bouncycastle.crypto.fips.FipsDRBG$Variations[] values()",
            "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersValidator$Version:org.bouncycastle.crypto.fips.FipsDSA$DomainParametersValidator$Version[] values()",
            "org.bouncycastle.crypto.fips.FipsEC$DomainParameterID:org.bouncycastle.crypto.fips.FipsEC$DomainParameterID[] values()",
            "org.bouncycastle.crypto.fips.FipsEC$Variations:org.bouncycastle.crypto.fips.FipsEC$Variations[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFPRF:org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFPRF[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$CounterLocation:org.bouncycastle.crypto.fips.FipsKDF$CounterLocation[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$IKEv2PRF:org.bouncycastle.crypto.fips.FipsKDF$IKEv2PRF[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$PRF:org.bouncycastle.crypto.fips.FipsKDF$PRF[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPPRF:org.bouncycastle.crypto.fips.FipsKDF$SRTPPRF[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$SSHPRF:org.bouncycastle.crypto.fips.FipsKDF$SSHPRF[] values()",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSPRF:org.bouncycastle.crypto.fips.FipsKDF$TLSPRF[] values()",
            "org.bouncycastle.crypto.fips.FipsRSA$Variations:org.bouncycastle.crypto.fips.FipsRSA$Variations[] values()",
            "org.bouncycastle.crypto.fips.FipsSHS$Variations:org.bouncycastle.crypto.fips.FipsSHS$Variations[] values()",
            "org.bouncycastle.crypto.fips.Mode:org.bouncycastle.crypto.fips.Mode[] values()",
            "org.bouncycastle.crypto.fips.Padding:org.bouncycastle.crypto.fips.Padding[] values()",
            "org.bouncycastle.crypto.general.DSA$Variations:org.bouncycastle.crypto.general.DSA$Variations[] values()",
            "org.bouncycastle.crypto.general.DSTU4145$Variations:org.bouncycastle.crypto.general.DSTU4145$Variations[] values()",
            "org.bouncycastle.crypto.general.EC$Variations:org.bouncycastle.crypto.general.EC$Variations[] values()",
            "org.bouncycastle.crypto.general.ECGOST3410$Variations:org.bouncycastle.crypto.general.ECGOST3410$Variations[] values()",
            "org.bouncycastle.crypto.general.ElGamal$Variations:org.bouncycastle.crypto.general.ElGamal$Variations[] values()",
            "org.bouncycastle.crypto.general.GOST28147$AuthParameters:byte[] getSBox()",
            "org.bouncycastle.crypto.general.GOST28147$Parameters:byte[] getSBox()",
            "org.bouncycastle.crypto.general.GOST3410$Variations:org.bouncycastle.crypto.general.GOST3410$Variations[] values()",
            "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.IDEA$Parameters withIV(byte[])",
            "org.bouncycastle.crypto.general.Mode:org.bouncycastle.crypto.general.Mode[] values()",
            "org.bouncycastle.crypto.general.Padding:org.bouncycastle.crypto.general.Padding[] values()",
            "org.bouncycastle.crypto.general.RSA$Variations:org.bouncycastle.crypto.general.RSA$Variations[] values()",
            "org.bouncycastle.crypto.general.SecureHash$Variations:org.bouncycastle.crypto.general.SecureHash$Variations[] values()",
            "org.bouncycastle.crypto.general.X931PRNG$Variations:org.bouncycastle.crypto.general.X931PRNG$Variations[] values()",
            "org.bouncycastle.crypto.internal.BlockCipherMode:org.bouncycastle.crypto.internal.BlockCipherMode[] values()",
            "org.bouncycastle.crypto.internal.BlockCipherPadding:org.bouncycastle.crypto.internal.BlockCipherPadding[] values()",
            "org.bouncycastle.crypto.util.ByteMacData$Type:org.bouncycastle.crypto.util.ByteMacData$Type[] values()",
            "org.bouncycastle.crypto.util.DERMacData$Type:org.bouncycastle.crypto.util.DERMacData$Type[] values()",
            "org.bouncycastle.jcajce.PBKDF2Key:void <init>(char[],org.bouncycastle.crypto.CharToByteConverter)",
            "org.bouncycastle.jcajce.provider.PBEScheme:org.bouncycastle.jcajce.provider.PBEScheme[] values()"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$MACOperatorFactory:int calculateMACSize(org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.SecureHash$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseAlgorithmParameters:java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.SecureHash$OperatorFactory:org.bouncycastle.crypto.OutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.general.GeneralParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$OperatorFactory:org.bouncycastle.crypto.OutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.asn1.cms.TimeStampTokenEvidence:void <init>(org.bouncycastle.asn1.cms.TimeStampAndCRL[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.cms.TimeStampTokenEvidence:org.bouncycastle.asn1.cms.TimeStampAndCRL[] toTimeStampAndCRLArray()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.dvcs.PathProcInput:void <init>(org.bouncycastle.asn1.x509.PolicyInformation[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.dvcs.PathProcInput:org.bouncycastle.asn1.dvcs.PathProcInput getInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.asn1.dvcs.PathProcInput:void <init>(org.bouncycastle.asn1.x509.PolicyInformation[],boolean,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.dvcs.PathProcInput:org.bouncycastle.asn1.x509.PolicyInformation[] getAcceptablePolicySet()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.icao.LDSSecurityObject:void <init>(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.icao.DataGroupHash[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.icao.LDSSecurityObject:void <init>(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.icao.DataGroupHash[],org.bouncycastle.asn1.icao.LDSVersionInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.pkcs.AuthenticatedSafe:void <init>(org.bouncycastle.asn1.pkcs.ContentInfo[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void doStore(java.io.OutputStream,char[],boolean)"
        ]
    },
    "org.bouncycastle.asn1.pkcs.AuthenticatedSafe:org.bouncycastle.asn1.pkcs.ContentInfo[] getContentInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:void engineLoad(java.io.InputStream,char[])"
        ]
    },
    "org.bouncycastle.asn1.ua.DSTU4145NamedCurves:org.bouncycastle.asn1.ASN1ObjectIdentifier[] getOIDs()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.x500.X500Name:void <init>(org.bouncycastle.asn1.x500.X500NameStyle,org.bouncycastle.asn1.x500.RDN[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.x500.X500Name:void <init>(org.bouncycastle.asn1.x500.RDN[])",
            "org.bouncycastle.asn1.x500.X500NameBuilder:org.bouncycastle.asn1.x500.X500Name build()"
        ]
    },
    "org.bouncycastle.asn1.x509.AuthorityInformationAccess:org.bouncycastle.asn1.x509.AccessDescription[] getAccessDescriptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.x509.CertificatePolicies:void <init>(org.bouncycastle.asn1.x509.PolicyInformation[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.x509.GeneralNames:void <init>(org.bouncycastle.asn1.x509.GeneralName[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.x509.GeneralNamesBuilder:org.bouncycastle.asn1.x509.GeneralNames build()"
        ]
    },
    "org.bouncycastle.crypto.CryptoServicesRegistrar:java.lang.Object[] getSizedProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.CryptoServicesRegistrar:void setThreadProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.CryptoServicesRegistrar:void setGlobalProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.PasswordBasedDeriver$KeyType:org.bouncycastle.crypto.PasswordBasedDeriver$KeyType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator$1:void <clinit>()",
            "org.bouncycastle.crypto.general.PKCS12ParametersGenerator$1:void <clinit>()",
            "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator$1:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.PasswordConverter:org.bouncycastle.crypto.PasswordConverter[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.SymmetricSecretKey:void <init>(org.bouncycastle.crypto.Algorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$KeyGenerator:org.bouncycastle.crypto.SymmetricSecretKey generateKey()",
            "org.bouncycastle.crypto.fips.FipsSHS$KeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()",
            "org.bouncycastle.crypto.general.AES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.ARC4$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.Blowfish$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.CAST5$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.Camellia$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.DES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.GOST28147$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.IDEA$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.RC2$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.SEED$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.SHACAL2$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.SecureHash$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.Serpent$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.SipHash$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.TripleDES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.Twofish$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvSecretKeySpec:org.bouncycastle.crypto.SymmetricKey getBaseKey()",
            "org.bouncycastle.jcajce.provider.Utils:org.bouncycastle.crypto.SymmetricKey convertKey(org.bouncycastle.crypto.Algorithm,java.security.Key)",
            "org.bouncycastle.util.DumpInfo:byte[] calculateModuleHMAC(java.util.jar.JarFile)"
        ]
    },
    "org.bouncycastle.crypto.SymmetricSecretKey:void <init>(org.bouncycastle.crypto.Parameters,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:void engineStore(java.io.OutputStream,char[])",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] decryptData(java.lang.String,org.bouncycastle.asn1.x509.AlgorithmIdentifier,char[],byte[])"
        ]
    },
    "org.bouncycastle.crypto.SymmetricSecretKey:byte[] getKeyBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.PrivilegedUtils$1:byte[] run()",
            "org.bouncycastle.crypto.general.AES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.crypto.general.PrivilegedUtils$1:byte[] run()",
            "org.bouncycastle.crypto.general.TripleDES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator$1:javax.crypto.SecretKey run()",
            "org.bouncycastle.jcajce.provider.Utils$1:byte[] run()"
        ]
    },
    "org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey$Usage:org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey$Usage[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsDH$Variations:org.bouncycastle.crypto.fips.FipsDH$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$5:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDRBG$Variations:org.bouncycastle.crypto.fips.FipsDRBG$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDRBG$1:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDSA$DomainParametersValidator$Version:org.bouncycastle.crypto.fips.FipsDSA$DomainParametersValidator$Version[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsEC$DomainParameterID:org.bouncycastle.crypto.fips.FipsEC$DomainParameterID[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsEC$Variations:org.bouncycastle.crypto.fips.FipsEC$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$7:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFPRF:org.bouncycastle.crypto.fips.FipsKDF$AgreementKDFPRF[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF$CounterLocation:org.bouncycastle.crypto.fips.FipsKDF$CounterLocation[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF$IKEv2PRF:org.bouncycastle.crypto.fips.FipsKDF$IKEv2PRF[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF$SSHPRF:org.bouncycastle.crypto.fips.FipsKDF$SSHPRF[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsKDF$TLSPRF:org.bouncycastle.crypto.fips.FipsKDF$TLSPRF[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsRSA$Variations:org.bouncycastle.crypto.fips.FipsRSA$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.FipsSHS$Variations:org.bouncycastle.crypto.fips.FipsSHS$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDRBG$1:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsSHS$30:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.Mode:org.bouncycastle.crypto.fips.Mode[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils$1:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsAES$6:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$3:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.Padding:org.bouncycastle.crypto.fips.Padding[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils$1:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.DSA$Variations:org.bouncycastle.crypto.general.DSA$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.DSTU4145$Variations:org.bouncycastle.crypto.general.DSTU4145$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.EC$Variations:org.bouncycastle.crypto.general.EC$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.ECGOST3410$Variations:org.bouncycastle.crypto.general.ECGOST3410$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.ElGamal$Variations:org.bouncycastle.crypto.general.ElGamal$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.GOST28147$AuthParameters:byte[] getSBox()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.GOST28147$Parameters:byte[] getSBox()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST28147$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GOST28147$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST3410$Variations:org.bouncycastle.crypto.general.GOST3410$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.IDEA$Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])",
            "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.Parameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Mode:org.bouncycastle.crypto.general.Mode[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils$1:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.Padding:org.bouncycastle.crypto.general.Padding[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils$1:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.RSA$Variations:org.bouncycastle.crypto.general.RSA$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.SecureHash$Variations:org.bouncycastle.crypto.general.SecureHash$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$9:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.X931PRNG$Variations:org.bouncycastle.crypto.general.X931PRNG$Variations[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.X931PRNG$1:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.internal.BlockCipherMode:org.bouncycastle.crypto.internal.BlockCipherMode[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.Mode$1:void <clinit>()",
            "org.bouncycastle.crypto.general.Mode$1:void <clinit>()",
            "org.bouncycastle.crypto.internal.BlockCipherMode$1:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.internal.BlockCipherPadding:org.bouncycastle.crypto.internal.BlockCipherPadding[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.util.ByteMacData$Type:org.bouncycastle.crypto.util.ByteMacData$Type[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.util.ByteMacData$1:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.util.DERMacData$Type:org.bouncycastle.crypto.util.DERMacData$Type[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.util.DERMacData$1:void <clinit>()"
        ]
    },
    "org.bouncycastle.jcajce.PBKDF2Key:void <init>(char[],org.bouncycastle.crypto.CharToByteConverter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.PBKDF2KeyWithParameters:void <init>(char[],org.bouncycastle.crypto.CharToByteConverter,byte[],int)"
        ]
    },
    "org.bouncycastle.jcajce.provider.PBEScheme:org.bouncycastle.jcajce.provider.PBEScheme[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.SecureHash$OperatorFactory:org.bouncycastle.crypto.OutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSecureHash:org.bouncycastle.jcajce.provider.BaseMessageDigest getDigestImplementation(org.bouncycastle.crypto.general.SecureHash$Parameters)"
        ]
    },
    "org.bouncycastle.asn1.dvcs.PathProcInput:org.bouncycastle.asn1.dvcs.PathProcInput getInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.dvcs.PathProcInput:org.bouncycastle.asn1.dvcs.PathProcInput getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)"
        ]
    },
    "org.bouncycastle.asn1.x500.X500Name:void <init>(org.bouncycastle.asn1.x500.RDN[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.x500.X500Name:void <init>(org.bouncycastle.asn1.x500.X500NameStyle,java.lang.String)"
        ]
    },
    "org.bouncycastle.asn1.x500.X500NameBuilder:org.bouncycastle.asn1.x500.X500Name build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.x500.style.IETFUtils:org.bouncycastle.asn1.x500.RDN[] rDNsFromString(java.lang.String,org.bouncycastle.asn1.x500.X500NameStyle)"
        ]
    },
    "org.bouncycastle.asn1.x509.GeneralNamesBuilder:org.bouncycastle.asn1.x509.GeneralNames build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator$1:void <clinit>()",
            "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator:byte[] deriveKey(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator:byte[][] deriveKeyAndIV(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)"
        ]
    },
    "org.bouncycastle.crypto.general.PKCS12ParametersGenerator$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PKCS12ParametersGenerator$1:void <clinit>()",
            "org.bouncycastle.crypto.general.PKCS12ParametersGenerator:byte[] deriveKey(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.crypto.general.PKCS12ParametersGenerator:byte[][] deriveKeyAndIV(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)"
        ]
    },
    "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator$1:void <clinit>()",
            "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator:byte[] deriveKey(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator:byte[][] deriveKeyAndIV(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$KeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.TripleDES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.DES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$KeyGenerator:org.bouncycastle.crypto.SymmetricKey doGenerateKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricKeyGenerator:org.bouncycastle.crypto.SymmetricKey generateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSecretKeySpec:org.bouncycastle.crypto.SymmetricKey getBaseKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSecretKeySpec:org.bouncycastle.crypto.Key getBaseKey()",
            "org.bouncycastle.jcajce.provider.Utils:org.bouncycastle.crypto.SymmetricKey convertKey(org.bouncycastle.crypto.Algorithm,java.security.Key)"
        ]
    },
    "org.bouncycastle.jcajce.provider.Utils:org.bouncycastle.crypto.SymmetricKey convertKey(org.bouncycastle.crypto.Algorithm,java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseHMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.BaseMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.crypto.fips.PrivilegedUtils$1:byte[] run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.PrivilegedUtils$1:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.crypto.general.PrivilegedUtils$1:byte[] run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PrivilegedUtils$1:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseKeyGenerator$1:javax.crypto.SecretKey run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator$1:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.jcajce.provider.Utils$1:byte[] run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils$1:java.lang.Object run()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDH$5:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDH$5:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDH:void validateKeyPair(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsDRBG$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsDRBG$1:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsDRBG$Builder:org.bouncycastle.crypto.fips.FipsSecureRandom build(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[],boolean,byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsEC$7:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsEC$7:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsEC:void validateKeyPair(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.AsymmetricCipherKeyPair)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS$30:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$30:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.fips.FipsSHS$DigestCloner createCloner(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Mac makeValidatedHMac(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.BlockCipherUtils$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils$1:void <clinit>()",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$6:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$6:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsAES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.fips.FipsEngineProvider getMacProvider(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsAES$AuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$3:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$3:void <clinit>()",
            "org.bouncycastle.crypto.fips.FipsTripleDES$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(org.bouncycastle.crypto.fips.FipsAlgorithm,boolean)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.fips.FipsEngineProvider getMacProvider(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.Mac makeMAC(org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.Parameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.CipherUtils$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CipherUtils$1:void <clinit>()",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash$9:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$9:void <clinit>()",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.general.SecureHash$DigestCloner createCloner(org.bouncycastle.crypto.general.GeneralAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.X931PRNG$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.X931PRNG$1:void <clinit>()",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)"
        ]
    },
    "org.bouncycastle.crypto.fips.Mode$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.Mode$1:void <clinit>()",
            "org.bouncycastle.crypto.fips.Mode:int checkIv(byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.general.Mode$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Mode$1:void <clinit>()",
            "org.bouncycastle.crypto.general.Mode:byte[] checkIv(byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.internal.BlockCipherMode$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.internal.BlockCipherMode$1:void <clinit>()",
            "org.bouncycastle.crypto.internal.BlockCipherMode:byte[] createDefaultIV(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.util.ByteMacData$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.util.ByteMacData$1:void <clinit>()",
            "org.bouncycastle.crypto.util.ByteMacData$Builder:org.bouncycastle.crypto.util.ByteMacData build()"
        ]
    },
    "org.bouncycastle.crypto.util.DERMacData$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.util.DERMacData$1:void <clinit>()",
            "org.bouncycastle.crypto.util.DERMacData$Builder:org.bouncycastle.crypto.util.DERMacData build()"
        ]
    },
    "org.bouncycastle.jcajce.PBKDF2KeyWithParameters:void <init>(char[],org.bouncycastle.crypto.CharToByteConverter,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.dvcs.PathProcInput:org.bouncycastle.asn1.dvcs.PathProcInput getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.dvcs.TargetEtcChain:void extractPathProcInput(org.bouncycastle.asn1.ASN1Encodable)"
        ]
    },
    "org.bouncycastle.asn1.x500.X500Name:void <init>(org.bouncycastle.asn1.x500.X500NameStyle,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.x500.X500Name:void <init>(java.lang.String)"
        ]
    },
    "org.bouncycastle.asn1.x500.style.IETFUtils:org.bouncycastle.asn1.x500.RDN[] rDNsFromString(java.lang.String,org.bouncycastle.asn1.x500.X500NameStyle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.x500.style.BCStyle:org.bouncycastle.asn1.x500.RDN[] fromString(java.lang.String)",
            "org.bouncycastle.asn1.x500.style.RFC4519Style:org.bouncycastle.asn1.x500.RDN[] fromString(java.lang.String)"
        ]
    },
    "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator:byte[] deriveKey(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsPBKD$DeriverFactory$1:byte[] deriveKey(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator:org.bouncycastle.crypto.internal.CipherParameters generateDerivedParameters(int)",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] generateKey(org.bouncycastle.asn1.pkcs.KeyDerivationFunc,java.lang.String,char[])",
            "org.bouncycastle.jcajce.provider.ProvOpenSSLPBKDF$PBKDF:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1$FixedPBKDF1:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2$BasePBKDF2:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] getDerivedMacKey(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[],int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:javax.crypto.SecretKey getSecretKey(org.bouncycastle.crypto.DigestAlgorithm,java.lang.String,javax.crypto.spec.PBEKeySpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator:byte[][] deriveKeyAndIV(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsPBKD$DeriverFactory$1:byte[][] deriveKeyAndIV(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)",
            "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator:org.bouncycastle.crypto.internal.CipherParameters generateDerivedParameters(int,int)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)"
        ]
    },
    "org.bouncycastle.crypto.general.PKCS12ParametersGenerator:byte[] deriveKey(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$PKCS12DeriverFactory$1:byte[] deriveKey(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] generateKey(org.bouncycastle.asn1.pkcs.KeyDerivationFunc,java.lang.String,char[])",
            "org.bouncycastle.jcajce.provider.ProvOpenSSLPBKDF$PBKDF:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1$FixedPBKDF1:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2$BasePBKDF2:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] getDerivedMacKey(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[],int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:javax.crypto.SecretKey getSecretKey(org.bouncycastle.crypto.DigestAlgorithm,java.lang.String,javax.crypto.spec.PBEKeySpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)"
        ]
    },
    "org.bouncycastle.crypto.general.PKCS12ParametersGenerator:byte[][] deriveKeyAndIV(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$PKCS12DeriverFactory$1:byte[][] deriveKeyAndIV(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)"
        ]
    },
    "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator:byte[] deriveKey(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$PBKDF2DeriverFactory$1:byte[] deriveKey(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator:org.bouncycastle.crypto.internal.CipherParameters generateDerivedParameters(int)",
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] generateKey(org.bouncycastle.asn1.pkcs.KeyDerivationFunc,java.lang.String,char[])",
            "org.bouncycastle.jcajce.provider.ProvOpenSSLPBKDF$PBKDF:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1$FixedPBKDF1:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2$BasePBKDF2:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] getDerivedMacKey(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[],int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:javax.crypto.SecretKey getSecretKey(org.bouncycastle.crypto.DigestAlgorithm,java.lang.String,javax.crypto.spec.PBEKeySpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)"
        ]
    },
    "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator:byte[][] deriveKeyAndIV(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PBKD$PBKDF2DeriverFactory$1:byte[][] deriveKeyAndIV(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)",
            "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator:org.bouncycastle.crypto.internal.CipherParameters generateDerivedParameters(int,int)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSecretKeySpec:org.bouncycastle.crypto.Key getBaseKey()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.PrivilegedUtils$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.PrivilegedUtils:byte[] getKeyBytes(org.bouncycastle.crypto.SymmetricKey)"
        ]
    },
    "org.bouncycastle.crypto.general.PrivilegedUtils$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PrivilegedUtils:byte[] getKeyBytes(org.bouncycastle.crypto.SymmetricKey)"
        ]
    },
    "org.bouncycastle.jcajce.provider.BaseKeyGenerator$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.Utils$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:boolean keyNotLength(org.bouncycastle.crypto.SymmetricKey,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.fips.FipsSHS$DigestCloner createCloner(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsSHS$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.fips.FipsSHS$Parameters)",
            "org.bouncycastle.crypto.fips.FipsSHS:org.bouncycastle.crypto.internal.Digest makeValidatedDigest(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.test.BasicKatTest)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.fips.FipsEngineProvider getMacProvider(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.fips.FipsEngineProvider createPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.fips.FipsEngineProvider getMacProvider(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsKDF:org.bouncycastle.crypto.fips.FipsEngineProvider createPRF(org.bouncycastle.crypto.fips.FipsKDF$PRF)"
        ]
    },
    "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.AuthParametersCreator:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.general.SecureHash$DigestCloner createCloner(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.general.GeneralDigestAlgorithm)",
            "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.general.SecureHash$DigestCloner access$100(org.bouncycastle.crypto.general.GeneralAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.Mode:int checkIv(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$Parameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[])",
            "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Mode:byte[] checkIv(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])",
            "org.bouncycastle.crypto.general.AES$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])",
            "org.bouncycastle.crypto.general.Camellia$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[],boolean)",
            "org.bouncycastle.crypto.general.DES$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])",
            "org.bouncycastle.crypto.general.GOST28147$Parameters:void <init>(org.bouncycastle.crypto.general.GOST28147$Parameters,boolean,byte[])",
            "org.bouncycastle.crypto.general.GeneralAlgorithm:byte[] checkIv(byte[],int)",
            "org.bouncycastle.crypto.general.IDEA$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])",
            "org.bouncycastle.crypto.general.SEED$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[],boolean)",
            "org.bouncycastle.crypto.general.Serpent$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[],boolean)",
            "org.bouncycastle.crypto.general.Twofish$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[],boolean)"
        ]
    },
    "org.bouncycastle.crypto.internal.BlockCipherMode:byte[] createDefaultIV(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.Mode:byte[] createDefaultIvIfNecessary(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Mode:byte[] createDefaultIvIfNecessary(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.util.ByteMacData$Builder:org.bouncycastle.crypto.util.ByteMacData build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.util.DERMacData$Builder:org.bouncycastle.crypto.util.DERMacData build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.dvcs.TargetEtcChain:void extractPathProcInput(org.bouncycastle.asn1.ASN1Encodable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.dvcs.TargetEtcChain:void <init>(org.bouncycastle.asn1.ASN1Sequence)"
        ]
    },
    "org.bouncycastle.asn1.x500.X500Name:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.x509.GeneralName:void <init>(int,java.lang.String)"
        ]
    },
    "org.bouncycastle.asn1.x500.style.BCStyle:org.bouncycastle.asn1.x500.RDN[] fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.x500.X500Name:void <init>(org.bouncycastle.asn1.x500.X500NameStyle,java.lang.String)"
        ]
    },
    "org.bouncycastle.asn1.x500.style.RFC4519Style:org.bouncycastle.asn1.x500.RDN[] fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.x500.X500Name:void <init>(org.bouncycastle.asn1.x500.X500NameStyle,java.lang.String)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsPBKD$DeriverFactory$1:byte[] deriveKey(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] generateKey(org.bouncycastle.asn1.pkcs.KeyDerivationFunc,java.lang.String,char[])",
            "org.bouncycastle.jcajce.provider.ProvOpenSSLPBKDF$PBKDF:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1$FixedPBKDF1:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2$BasePBKDF2:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] getDerivedMacKey(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[],int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:javax.crypto.SecretKey getSecretKey(org.bouncycastle.crypto.DigestAlgorithm,java.lang.String,javax.crypto.spec.PBEKeySpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator:org.bouncycastle.crypto.internal.CipherParameters generateDerivedParameters(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator:org.bouncycastle.crypto.internal.CipherParameters generateDerivedMacParameters(int)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsPBKD$DeriverFactory$1:byte[][] deriveKeyAndIV(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)"
        ]
    },
    "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator:org.bouncycastle.crypto.internal.CipherParameters generateDerivedParameters(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.PBKD$PKCS12DeriverFactory$1:byte[] deriveKey(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] generateKey(org.bouncycastle.asn1.pkcs.KeyDerivationFunc,java.lang.String,char[])",
            "org.bouncycastle.jcajce.provider.ProvOpenSSLPBKDF$PBKDF:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1$FixedPBKDF1:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2$BasePBKDF2:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] getDerivedMacKey(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[],int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:javax.crypto.SecretKey getSecretKey(org.bouncycastle.crypto.DigestAlgorithm,java.lang.String,javax.crypto.spec.PBEKeySpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)"
        ]
    },
    "org.bouncycastle.crypto.general.PBKD$PKCS12DeriverFactory$1:byte[][] deriveKeyAndIV(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)"
        ]
    },
    "org.bouncycastle.crypto.general.PBKD$PBKDF2DeriverFactory$1:byte[] deriveKey(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvBCFKS$BCFIPSKeyStoreSpi:byte[] generateKey(org.bouncycastle.asn1.pkcs.KeyDerivationFunc,java.lang.String,char[])",
            "org.bouncycastle.jcajce.provider.ProvOpenSSLPBKDF$PBKDF:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1$FixedPBKDF1:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2$BasePBKDF2:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)",
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF2:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12$PKCS12KeyStoreSpi:byte[] getDerivedMacKey(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[],int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:javax.crypto.SecretKey getSecretKey(org.bouncycastle.crypto.DigestAlgorithm,java.lang.String,javax.crypto.spec.PBEKeySpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[] getSecretKey(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int)"
        ]
    },
    "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator:org.bouncycastle.crypto.internal.CipherParameters generateDerivedParameters(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator:org.bouncycastle.crypto.internal.CipherParameters generateDerivedMacParameters(int)"
        ]
    },
    "org.bouncycastle.crypto.general.PBKD$PBKDF2DeriverFactory$1:byte[][] deriveKeyAndIV(org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvPBEPBKDF1:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.DigestAlgorithm,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)",
            "org.bouncycastle.jcajce.provider.ProvPKCS12:byte[][] getSecretKeyAndIV(javax.crypto.SecretKey,org.bouncycastle.crypto.DigestAlgorithm,javax.crypto.spec.PBEParameterSpec,org.bouncycastle.crypto.PasswordBasedDeriver$KeyType,int,int)"
        ]
    },
    "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator:org.bouncycastle.crypto.internal.CipherParameters generateDerivedParameters(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.fips.PrivilegedUtils:byte[] getKeyBytes(org.bouncycastle.crypto.SymmetricKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.PrivilegedUtils:org.bouncycastle.crypto.internal.ValidatedSymmetricKey getValidatedKey(org.bouncycastle.crypto.SymmetricKey)"
        ]
    },
    "org.bouncycastle.crypto.general.PrivilegedUtils:byte[] getKeyBytes(org.bouncycastle.crypto.SymmetricKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.PrivilegedUtils:org.bouncycastle.crypto.internal.ValidatedSymmetricKey getValidatedKey(org.bouncycastle.crypto.SymmetricKey)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)"
        ]
    },
    "org.bouncycastle.jcajce.provider.Utils:boolean keyNotLength(org.bouncycastle.crypto.SymmetricKey,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SecureHash:org.bouncycastle.crypto.general.SecureHash$DigestCloner access$100(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SecureHash$OperatorFactory:org.bouncycastle.crypto.OutputDigestCalculator createOutputDigestCalculator(org.bouncycastle.crypto.general.GeneralParameters)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$Parameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$Parameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsAES$Parameters:org.bouncycastle.crypto.fips.FipsAES$Parameters withIV(byte[])",
            "org.bouncycastle.crypto.fips.FipsAES$Parameters:org.bouncycastle.crypto.fips.FipsAES$Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:org.bouncycastle.crypto.fips.FipsTripleDES$Parameters withIV(byte[])",
            "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:org.bouncycastle.crypto.fips.FipsTripleDES$Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.AES$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.AES$Parameters:org.bouncycastle.crypto.general.AES$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.AES$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.AES$WrapParameters:org.bouncycastle.crypto.general.AES$WrapParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.Camellia$WrapParameters:org.bouncycastle.crypto.general.Camellia$WrapParameters withUsingInverseFunction(boolean)",
            "org.bouncycastle.crypto.general.Camellia$WrapParameters:org.bouncycastle.crypto.general.Camellia$WrapParameters withIV(byte[])",
            "org.bouncycastle.crypto.general.Camellia$WrapParameters:org.bouncycastle.crypto.general.Camellia$WrapParameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.DES$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DES$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.DES$Parameters:org.bouncycastle.crypto.general.DES$Parameters withIV(byte[])",
            "org.bouncycastle.crypto.general.DES$Parameters:org.bouncycastle.crypto.general.DES$Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$Parameters:void <init>(org.bouncycastle.crypto.general.GOST28147$Parameters,boolean,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST28147$Parameters:org.bouncycastle.crypto.general.GOST28147$Parameters withIV(byte[])",
            "org.bouncycastle.crypto.general.GOST28147$Parameters:org.bouncycastle.crypto.general.GOST28147$Parameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GOST28147$Parameters:org.bouncycastle.crypto.general.GOST28147$Parameters withSBox(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.GeneralAlgorithm:byte[] checkIv(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])",
            "org.bouncycastle.crypto.general.CAST5$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])",
            "org.bouncycastle.crypto.general.Camellia$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])",
            "org.bouncycastle.crypto.general.SEED$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])",
            "org.bouncycastle.crypto.general.SHACAL2$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])",
            "org.bouncycastle.crypto.general.Serpent$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])",
            "org.bouncycastle.crypto.general.TripleDES$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])",
            "org.bouncycastle.crypto.general.Twofish$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.IDEA$Parameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.IDEA$Parameters withIV(byte[])",
            "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.IDEA$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.SEED$WrapParameters:org.bouncycastle.crypto.general.SEED$WrapParameters withUsingInverseFunction(boolean)",
            "org.bouncycastle.crypto.general.SEED$WrapParameters:org.bouncycastle.crypto.general.SEED$WrapParameters withIV(byte[])",
            "org.bouncycastle.crypto.general.SEED$WrapParameters:org.bouncycastle.crypto.general.SEED$WrapParameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.Serpent$WrapParameters:org.bouncycastle.crypto.general.Serpent$WrapParameters withUsingInverseFunction(boolean)",
            "org.bouncycastle.crypto.general.Serpent$WrapParameters:org.bouncycastle.crypto.general.Serpent$WrapParameters withIV(byte[])",
            "org.bouncycastle.crypto.general.Serpent$WrapParameters:org.bouncycastle.crypto.general.Serpent$WrapParameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.Twofish$WrapParameters:org.bouncycastle.crypto.general.Twofish$WrapParameters withUsingInverseFunction(boolean)",
            "org.bouncycastle.crypto.general.Twofish$WrapParameters:org.bouncycastle.crypto.general.Twofish$WrapParameters withIV(byte[])",
            "org.bouncycastle.crypto.general.Twofish$WrapParameters:org.bouncycastle.crypto.general.Twofish$WrapParameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.Mode:byte[] createDefaultIvIfNecessary(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAlgorithm:byte[] createDefaultIvIfNecessary(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:org.bouncycastle.crypto.fips.FipsTripleDES$Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Mode:byte[] createDefaultIvIfNecessary(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralAlgorithm:byte[] createDefaultIvIfNecessary(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.asn1.dvcs.TargetEtcChain:void <init>(org.bouncycastle.asn1.ASN1Sequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.dvcs.TargetEtcChain:org.bouncycastle.asn1.dvcs.TargetEtcChain getInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.asn1.x509.GeneralName:void <init>(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.x509.RoleSyntax:void <init>(java.lang.String)",
            "org.bouncycastle.jcajce.provider.RFC3280CertPathUtilities:void processCertBC(java.security.cert.CertPath,int,org.bouncycastle.asn1.x509.PKIXNameConstraintValidator)"
        ]
    },
    "org.bouncycastle.crypto.fips.PKCS5S2ParametersGenerator:org.bouncycastle.crypto.internal.CipherParameters generateDerivedMacParameters(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.PKCS5S2ParametersGenerator:org.bouncycastle.crypto.internal.CipherParameters generateDerivedMacParameters(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SCryptImpl:byte[] SingleIterationPBKDF2(byte[],byte[],int)"
        ]
    },
    "org.bouncycastle.crypto.fips.PrivilegedUtils:org.bouncycastle.crypto.internal.ValidatedSymmetricKey getValidatedKey(org.bouncycastle.crypto.SymmetricKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsAlgorithm)",
            "org.bouncycastle.crypto.fips.FipsSHS$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.fips.FipsSHS$AuthParameters)",
            "org.bouncycastle.crypto.fips.FipsTripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,boolean)"
        ]
    },
    "org.bouncycastle.crypto.general.PrivilegedUtils:org.bouncycastle.crypto.internal.ValidatedSymmetricKey getValidatedKey(org.bouncycastle.crypto.SymmetricKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.ARC4:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Blowfish:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.CAST5:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Camellia:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.DES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.GOST28147:org.bouncycastle.crypto.general.GOST28147Parameters validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm,byte[])",
            "org.bouncycastle.crypto.general.IDEA:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RC2:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.SEED:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.SHACAL2:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.SecureHash$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SecureHash$AuthParameters)",
            "org.bouncycastle.crypto.general.Serpent:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.SipHash:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.TripleDES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Twofish:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$Parameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$Parameters:org.bouncycastle.crypto.fips.FipsAES$Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$Parameters:org.bouncycastle.crypto.Parameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$Parameters:org.bouncycastle.crypto.fips.FipsAES$Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$Parameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:void <init>(org.bouncycastle.crypto.fips.FipsAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:org.bouncycastle.crypto.fips.FipsTripleDES$Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:org.bouncycastle.crypto.Parameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:org.bouncycastle.crypto.fips.FipsTripleDES$Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.AES$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.AES$Parameters:org.bouncycastle.crypto.general.AES$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.AES$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.AES$WrapParameters:org.bouncycastle.crypto.general.AES$WrapParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.AES$WrapParameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$WrapParameters:org.bouncycastle.crypto.general.Camellia$WrapParameters withUsingInverseFunction(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvCamellia$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$WrapParameters:org.bouncycastle.crypto.general.Camellia$WrapParameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$WrapParameters:org.bouncycastle.crypto.Parameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$WrapParameters:org.bouncycastle.crypto.general.Camellia$WrapParameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$WrapParameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.DES$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.DES$Parameters:org.bouncycastle.crypto.general.DES$Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DES$Parameters:org.bouncycastle.crypto.Parameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.DES$Parameters:org.bouncycastle.crypto.general.DES$Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DES$Parameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$Parameters:org.bouncycastle.crypto.general.GOST28147$Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST28147$Parameters:org.bouncycastle.crypto.Parameters withIV(byte[])",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$Parameters:org.bouncycastle.crypto.general.GOST28147$Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST28147$Parameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$Parameters:org.bouncycastle.crypto.general.GOST28147$Parameters withSBox(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.Blowfish$Parameters:org.bouncycastle.crypto.general.Blowfish$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.CAST5$Parameters:org.bouncycastle.crypto.general.CAST5$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.Camellia$Parameters:org.bouncycastle.crypto.general.Camellia$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.SEED$Parameters:org.bouncycastle.crypto.general.SEED$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.SHACAL2$Parameters:org.bouncycastle.crypto.general.SHACAL2$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.Serpent$Parameters:org.bouncycastle.crypto.general.Serpent$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.TripleDES$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.TripleDES$Parameters:org.bouncycastle.crypto.general.TripleDES$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.Twofish$Parameters:org.bouncycastle.crypto.general.Twofish$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.IDEA$Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.IDEA$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$WrapParameters:org.bouncycastle.crypto.general.SEED$WrapParameters withUsingInverseFunction(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSEED$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$WrapParameters:org.bouncycastle.crypto.general.SEED$WrapParameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$WrapParameters:org.bouncycastle.crypto.Parameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$WrapParameters:org.bouncycastle.crypto.general.SEED$WrapParameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$WrapParameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$WrapParameters:org.bouncycastle.crypto.general.Serpent$WrapParameters withUsingInverseFunction(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSerpent$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$WrapParameters:org.bouncycastle.crypto.general.Serpent$WrapParameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$WrapParameters:org.bouncycastle.crypto.Parameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$WrapParameters:org.bouncycastle.crypto.general.Serpent$WrapParameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$WrapParameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$WrapParameters:org.bouncycastle.crypto.general.Twofish$WrapParameters withUsingInverseFunction(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvTwofish$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$WrapParameters:org.bouncycastle.crypto.general.Twofish$WrapParameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$WrapParameters:org.bouncycastle.crypto.Parameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$WrapParameters:org.bouncycastle.crypto.general.Twofish$WrapParameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$WrapParameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAlgorithm:byte[] createDefaultIvIfNecessary(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsAES$AuthParameters:org.bouncycastle.crypto.fips.FipsAES$AuthParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsAES$Parameters:org.bouncycastle.crypto.fips.FipsAES$Parameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters:org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GeneralAlgorithm:byte[] createDefaultIvIfNecessary(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$WrapParameters:org.bouncycastle.crypto.general.Camellia$WrapParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DES$Parameters:org.bouncycastle.crypto.general.DES$Parameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GOST28147$Parameters:org.bouncycastle.crypto.general.GOST28147$Parameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.IDEA$Parameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RC2$Parameters:org.bouncycastle.crypto.general.RC2$Parameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SEED$WrapParameters:org.bouncycastle.crypto.general.SEED$WrapParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Serpent$WrapParameters:org.bouncycastle.crypto.general.Serpent$WrapParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Twofish$WrapParameters:org.bouncycastle.crypto.general.Twofish$WrapParameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.asn1.dvcs.TargetEtcChain:org.bouncycastle.asn1.dvcs.TargetEtcChain getInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.dvcs.Data:org.bouncycastle.asn1.dvcs.TargetEtcChain[] getCerts()",
            "org.bouncycastle.asn1.dvcs.TargetEtcChain:org.bouncycastle.asn1.dvcs.TargetEtcChain getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)",
            "org.bouncycastle.asn1.dvcs.TargetEtcChain:org.bouncycastle.asn1.dvcs.TargetEtcChain[] arrayFromSequence(org.bouncycastle.asn1.ASN1Sequence)"
        ]
    },
    "org.bouncycastle.asn1.x509.RoleSyntax:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jcajce.provider.RFC3280CertPathUtilities:void processCertBC(java.security.cert.CertPath,int,org.bouncycastle.asn1.x509.PKIXNameConstraintValidator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.PKIXCertPathValidatorSpi:java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.ARC4:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ARC4:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$300(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.DES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GeneralAlgorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147:org.bouncycastle.crypto.general.GOST28147Parameters validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST28147:org.bouncycastle.crypto.internal.params.KeyParameter createGOST28147Parameters(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RC2:org.bouncycastle.crypto.internal.params.KeyParameter createRC2Parameters(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm,int)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.general.SipHash:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SipHash:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$Parameters:org.bouncycastle.crypto.Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsAES$Parameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:org.bouncycastle.crypto.Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$Parameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.AES$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.AES$WrapParameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$AuthParameters)",
            "org.bouncycastle.crypto.general.Camellia$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()",
            "org.bouncycastle.crypto.general.Camellia$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Camellia$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Camellia$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Camellia$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$AuthParameters)",
            "org.bouncycastle.crypto.general.Camellia$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Camellia$WrapParameters:int getIvLength()",
            "org.bouncycastle.crypto.general.Camellia:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Camellia:boolean access$100(int)",
            "org.bouncycastle.crypto.general.Camellia:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Camellia:org.bouncycastle.crypto.general.Camellia$EngineProvider access$300()",
            "org.bouncycastle.crypto.general.Camellia:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvCamellia$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$10:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$11:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$12:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$13:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$18:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$19:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$20:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$4:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$6:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$7:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$8:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$9:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$WrapParameters:org.bouncycastle.crypto.Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$WrapParameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.DES:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$AuthParameters)",
            "org.bouncycastle.crypto.general.DES$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()",
            "org.bouncycastle.crypto.general.DES$KeyGenerator:void <init>(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$AuthParameters)",
            "org.bouncycastle.crypto.general.DES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.DES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GeneralAlgorithm)",
            "org.bouncycastle.crypto.general.DES:org.bouncycastle.crypto.general.DES$EngineProvider access$200()",
            "org.bouncycastle.crypto.general.DES:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvDES$10$1:org.bouncycastle.crypto.AuthenticationParameters getBaseParameters()",
            "org.bouncycastle.jcajce.provider.ProvDES$10$1:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDES$10:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDES$11$1:org.bouncycastle.crypto.AuthenticationParameters getBaseParameters()",
            "org.bouncycastle.jcajce.provider.ProvDES$11$1:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDES$11:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDES$12$1:org.bouncycastle.crypto.AuthenticationParameters getBaseParameters()",
            "org.bouncycastle.jcajce.provider.ProvDES$12$1:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDES$12:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDES$15:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDES$16:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDES$2:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDES$3:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDES$6:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDES$7:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDES$8:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDES$9$1:org.bouncycastle.crypto.AuthenticationParameters getBaseParameters()",
            "org.bouncycastle.jcajce.provider.ProvDES$9$1:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvDES$9:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvDES$KeyFactory:void <init>()",
            "org.bouncycastle.jcajce.provider.ProvDES$KeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.general.DES$Parameters:org.bouncycastle.crypto.Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.DES$Parameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$Parameters:org.bouncycastle.crypto.Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147$Parameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$Parameters:org.bouncycastle.crypto.general.Blowfish$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$Parameters:org.bouncycastle.crypto.general.CAST5$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$Parameters:org.bouncycastle.crypto.general.Camellia$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$Parameters:org.bouncycastle.crypto.general.SEED$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$Parameters:org.bouncycastle.crypto.general.SHACAL2$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$Parameters:org.bouncycastle.crypto.general.Serpent$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.TripleDES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$Parameters:org.bouncycastle.crypto.general.TripleDES$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.TripleDES$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$Parameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$Parameters:org.bouncycastle.crypto.general.Twofish$Parameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$AuthParameters)",
            "org.bouncycastle.crypto.general.IDEA$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()",
            "org.bouncycastle.crypto.general.IDEA$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.IDEA$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.IDEA$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$AuthParameters)",
            "org.bouncycastle.crypto.general.IDEA$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.IDEA:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.IDEA:boolean access$100(int)",
            "org.bouncycastle.crypto.general.IDEA:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.IDEA:org.bouncycastle.crypto.general.IDEA$EngineProvider access$300()",
            "org.bouncycastle.crypto.general.IDEA:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvIDEA$10:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvIDEA$4:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvIDEA$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvIDEA$7:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvIDEA$8:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvIDEA$9:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.SEED:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$AuthParameters)",
            "org.bouncycastle.crypto.general.SEED$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()",
            "org.bouncycastle.crypto.general.SEED$KeyGenerator:void <init>(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SEED$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SEED$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$AuthParameters)",
            "org.bouncycastle.crypto.general.SEED$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SEED$WrapParameters:int getIvLength()",
            "org.bouncycastle.crypto.general.SEED:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.SEED:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.SEED:org.bouncycastle.crypto.general.SEED$EngineProvider access$200()",
            "org.bouncycastle.crypto.general.SEED:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvSEED$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.ProvSEED$10:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSEED$11:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSEED$12:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSEED$4:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSEED$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSEED$6:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSEED$7:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSEED$9:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSEED$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$WrapParameters:org.bouncycastle.crypto.Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$WrapParameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$AuthParameters)",
            "org.bouncycastle.crypto.general.Serpent$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()",
            "org.bouncycastle.crypto.general.Serpent$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Serpent$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Serpent$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Serpent$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$AuthParameters)",
            "org.bouncycastle.crypto.general.Serpent$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Serpent$WrapParameters:int getIvLength()",
            "org.bouncycastle.crypto.general.Serpent:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Serpent:boolean access$100(int)",
            "org.bouncycastle.crypto.general.Serpent:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Serpent:org.bouncycastle.crypto.general.Serpent$EngineProvider access$300()",
            "org.bouncycastle.crypto.general.Serpent:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvSerpent$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$10:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$11:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$12:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$13:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$14:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$15:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$16:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$17:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$18:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$19:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$2:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$20:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$21:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$22:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$23:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$24:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$25:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$26:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$9:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$WrapParameters:org.bouncycastle.crypto.Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$WrapParameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$AuthParameters)",
            "org.bouncycastle.crypto.general.Twofish$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()",
            "org.bouncycastle.crypto.general.Twofish$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Twofish$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Twofish$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Twofish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$AuthParameters)",
            "org.bouncycastle.crypto.general.Twofish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Twofish$WrapParameters:int getIvLength()",
            "org.bouncycastle.crypto.general.Twofish:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Twofish:boolean access$100(int)",
            "org.bouncycastle.crypto.general.Twofish:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Twofish:org.bouncycastle.crypto.general.Twofish$EngineProvider access$300()",
            "org.bouncycastle.crypto.general.Twofish:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvTwofish$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.jcajce.provider.ProvTwofish$10:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvTwofish$11:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvTwofish$2:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvTwofish$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvTwofish$6:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvTwofish$7:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvTwofish$8:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvTwofish$9:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvTwofish$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$WrapParameters:org.bouncycastle.crypto.Parameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$WrapParameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters:org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRC2$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2$Parameters:org.bouncycastle.crypto.general.RC2$Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RC2$Parameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRC2$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.asn1.dvcs.Data:org.bouncycastle.asn1.dvcs.TargetEtcChain[] getCerts()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.dvcs.TargetEtcChain:org.bouncycastle.asn1.dvcs.TargetEtcChain getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.asn1.dvcs.TargetEtcChain:org.bouncycastle.asn1.dvcs.TargetEtcChain[] arrayFromSequence(org.bouncycastle.asn1.ASN1Sequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.asn1.dvcs.DVCSCertInfo:org.bouncycastle.asn1.dvcs.TargetEtcChain[] getCerts()"
        ]
    },
    "org.bouncycastle.crypto.general.ARC4:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$300(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ARC4$OperatorFactory:org.bouncycastle.crypto.internal.StreamCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.ARC4$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$AuthParameters)",
            "org.bouncycastle.crypto.general.Blowfish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$AuthParameters)",
            "org.bouncycastle.crypto.general.Blowfish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$AuthParameters)",
            "org.bouncycastle.crypto.general.CAST5$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$AuthParameters)",
            "org.bouncycastle.crypto.general.CAST5$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$AuthParameters)",
            "org.bouncycastle.crypto.general.Camellia$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Camellia$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$AuthParameters)",
            "org.bouncycastle.crypto.general.Camellia$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.DES:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GeneralAlgorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$AuthParameters)",
            "org.bouncycastle.crypto.general.DES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$AuthParameters)",
            "org.bouncycastle.crypto.general.DES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147:org.bouncycastle.crypto.internal.params.KeyParameter createGOST28147Parameters(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST28147:org.bouncycastle.crypto.internal.params.KeyParameter access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm,byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$AuthParameters)",
            "org.bouncycastle.crypto.general.IDEA$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$AuthParameters)",
            "org.bouncycastle.crypto.general.IDEA$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2:org.bouncycastle.crypto.internal.params.KeyParameter createRC2Parameters(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RC2:org.bouncycastle.crypto.internal.params.KeyParameter access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm,int)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$AuthParameters)",
            "org.bouncycastle.crypto.general.SEED$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SEED$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$AuthParameters)",
            "org.bouncycastle.crypto.general.SEED$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$AuthParameters)",
            "org.bouncycastle.crypto.general.SHACAL2$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$AuthParameters)",
            "org.bouncycastle.crypto.general.SHACAL2$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$AuthParameters)",
            "org.bouncycastle.crypto.general.Serpent$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Serpent$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$AuthParameters)",
            "org.bouncycastle.crypto.general.Serpent$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SipHash:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SipHash$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SipHash$AuthParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$AuthParameters)",
            "org.bouncycastle.crypto.general.Twofish$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Twofish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$AuthParameters)",
            "org.bouncycastle.crypto.general.Twofish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.Parameters withIV(byte[])",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRC2$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$EngineProvider:java.lang.Object createEngine()",
            "org.bouncycastle.crypto.general.Camellia:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$KeyGenerator:void <init>(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvCamellia$14$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$15$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$16$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvCamellia$17$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Camellia$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$WrapParameters:int getIvLength()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[],boolean)",
            "org.bouncycastle.crypto.general.Camellia$WrapParameters:org.bouncycastle.crypto.general.Camellia$WrapParameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia:boolean access$100(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia:org.bouncycastle.crypto.general.Camellia$EngineProvider access$300()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Camellia$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$AuthParameters)",
            "org.bouncycastle.crypto.general.Camellia$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Camellia$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$AuthParameters)",
            "org.bouncycastle.crypto.general.Camellia$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Camellia$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$10:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$11:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$12:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$13:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$18:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$19:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$20:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$4:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$6:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$7:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$8:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$9:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.DES$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DES$EngineProvider:java.lang.Object createEngine()",
            "org.bouncycastle.crypto.general.DES:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.DES$KeyGenerator:void <init>(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDES$4$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.DES:org.bouncycastle.crypto.general.DES$EngineProvider access$200()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.DES$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$AuthParameters)",
            "org.bouncycastle.crypto.general.DES$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$AuthParameters)",
            "org.bouncycastle.crypto.general.DES$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.DES$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$10$1:org.bouncycastle.crypto.AuthenticationParameters getBaseParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:int engineGetMacLength()",
            "org.bouncycastle.jcajce.provider.BaseMac:int engineGetMacLength()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$10$1:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.BaseMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$10:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$11$1:org.bouncycastle.crypto.AuthenticationParameters getBaseParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:int engineGetMacLength()",
            "org.bouncycastle.jcajce.provider.BaseMac:int engineGetMacLength()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$11$1:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.BaseMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$11:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$12$1:org.bouncycastle.crypto.AuthenticationParameters getBaseParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:int engineGetMacLength()",
            "org.bouncycastle.jcajce.provider.BaseMac:int engineGetMacLength()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$12$1:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.BaseMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$12:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$15:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$16:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$3:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$6:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$7:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$8:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$9$1:org.bouncycastle.crypto.AuthenticationParameters getBaseParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:int engineGetMacLength()",
            "org.bouncycastle.jcajce.provider.BaseMac:int engineGetMacLength()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$9$1:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseHMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "org.bouncycastle.jcajce.provider.BaseMac:void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$9:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$KeyFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvDES$5:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$AuthParameters)",
            "org.bouncycastle.crypto.general.Blowfish$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()",
            "org.bouncycastle.crypto.general.Blowfish$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Blowfish$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Blowfish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$AuthParameters)",
            "org.bouncycastle.crypto.general.Blowfish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Blowfish:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Blowfish:boolean access$100(int)",
            "org.bouncycastle.crypto.general.Blowfish:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Blowfish:org.bouncycastle.crypto.general.Blowfish$EngineProvider access$300()",
            "org.bouncycastle.crypto.general.Blowfish:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvBlowfish$2:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvBlowfish$3:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvBlowfish$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvBlowfish$6:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$AuthParameters)",
            "org.bouncycastle.crypto.general.CAST5$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()",
            "org.bouncycastle.crypto.general.CAST5$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.CAST5$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.CAST5$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$AuthParameters)",
            "org.bouncycastle.crypto.general.CAST5$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.CAST5:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.CAST5:boolean access$100(int)",
            "org.bouncycastle.crypto.general.CAST5:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.CAST5:org.bouncycastle.crypto.general.CAST5$EngineProvider access$300()",
            "org.bouncycastle.crypto.general.CAST5:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvCAST5$4:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCAST5$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCAST5$6:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvCAST5$8:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$AuthParameters)",
            "org.bouncycastle.crypto.general.SHACAL2$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()",
            "org.bouncycastle.crypto.general.SHACAL2$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SHACAL2$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SHACAL2$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$AuthParameters)",
            "org.bouncycastle.crypto.general.SHACAL2$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SHACAL2:org.bouncycastle.crypto.internal.ValidatedSymmetricKey validateKey(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.SHACAL2:boolean access$100(int)",
            "org.bouncycastle.crypto.general.SHACAL2:org.bouncycastle.crypto.internal.ValidatedSymmetricKey access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.SHACAL2:org.bouncycastle.crypto.general.SHACAL2$EngineProvider access$300()",
            "org.bouncycastle.crypto.general.SHACAL2:void <clinit>()",
            "org.bouncycastle.jcajce.provider.ProvSHACAL2$2:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHACAL2$5:java.lang.Object createInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.ProvSHACAL2$6:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.TripleDES$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$Parameters:org.bouncycastle.crypto.general.GeneralParameters create(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.general.GeneralParameters withIV(byte[])"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$EngineProvider:java.lang.Object createEngine()",
            "org.bouncycastle.crypto.general.IDEA:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$KeyGenerator:void <init>(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvIDEA$6$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.IDEA$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA:boolean access$100(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA:org.bouncycastle.crypto.general.IDEA$EngineProvider access$300()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.IDEA$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$AuthParameters)",
            "org.bouncycastle.crypto.general.IDEA$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$AuthParameters)",
            "org.bouncycastle.crypto.general.IDEA$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.IDEA$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvIDEA$10:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvIDEA$4:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvIDEA$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvIDEA$7:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvIDEA$8:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvIDEA$9:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.GeneralParametersWithIV:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.AuthParametersCreator:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$EngineProvider:java.lang.Object createEngine()",
            "org.bouncycastle.crypto.general.SEED:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$KeyGenerator:void <init>(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSEED$8$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED$WrapParameters:int getIvLength()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[],boolean)",
            "org.bouncycastle.crypto.general.SEED$WrapParameters:org.bouncycastle.crypto.general.SEED$WrapParameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SEED:org.bouncycastle.crypto.general.SEED$EngineProvider access$200()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SEED$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$AuthParameters)",
            "org.bouncycastle.crypto.general.SEED$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SEED$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$AuthParameters)",
            "org.bouncycastle.crypto.general.SEED$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SEED$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSEED$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSEED$10:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSEED$11:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSEED$12:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSEED$4:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSEED$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSEED$6:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSEED$7:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSEED$9:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$EngineProvider:java.lang.Object createEngine()",
            "org.bouncycastle.crypto.general.Serpent:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$KeyGenerator:void <init>(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSerpent$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$4$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$5$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvSerpent$6$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Serpent$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$WrapParameters:int getIvLength()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[],boolean)",
            "org.bouncycastle.crypto.general.Serpent$WrapParameters:org.bouncycastle.crypto.general.Serpent$WrapParameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent:boolean access$100(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent:org.bouncycastle.crypto.general.Serpent$EngineProvider access$300()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Serpent$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$AuthParameters)",
            "org.bouncycastle.crypto.general.Serpent$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Serpent$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$AuthParameters)",
            "org.bouncycastle.crypto.general.Serpent$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Serpent$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$10:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$11:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$12:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$13:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$14:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$15:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$16:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$17:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$18:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$19:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$20:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$21:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$22:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$23:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$24:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$25:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$26:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$9:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$EngineProvider:java.lang.Object createEngine()",
            "org.bouncycastle.crypto.general.Twofish:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$KeyGenerator:void <init>(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvTwofish$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Twofish$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$WrapParameters:int getIvLength()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$WrapParameters:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,byte[],boolean)",
            "org.bouncycastle.crypto.general.Twofish$WrapParameters:org.bouncycastle.crypto.general.Twofish$WrapParameters withIV(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish:boolean access$100(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish:org.bouncycastle.crypto.general.Twofish$EngineProvider access$300()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Twofish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$AuthParameters)",
            "org.bouncycastle.crypto.general.Twofish$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$WrapParameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Twofish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$AuthParameters)",
            "org.bouncycastle.crypto.general.Twofish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Twofish$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvTwofish$1:org.bouncycastle.jcajce.provider.ParametersCreator get(org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvTwofish$10:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvTwofish$11:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvTwofish$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvTwofish$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvTwofish$6:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvTwofish$7:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvTwofish$8:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvTwofish$9:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.fips.FipsTripleDES$AuthParameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.AuthParametersCreator:org.bouncycastle.crypto.AuthenticationParameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvRC2$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseAgreement:void initFromKey(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseSingleBlockCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseWrapCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvRSA$KTSSKeyFactory:javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2$Parameters:org.bouncycastle.crypto.Parameters withIV(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.IvParametersCreator:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.ProvGOST28147$1$1:org.bouncycastle.crypto.Parameters createParameters(boolean,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.asn1.dvcs.DVCSCertInfo:org.bouncycastle.asn1.dvcs.TargetEtcChain[] getCerts()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.ARC4$OperatorFactory:org.bouncycastle.crypto.internal.StreamCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.ARC4$Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.ARC4$OperatorFactory:org.bouncycastle.crypto.internal.StreamCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GOST28147:org.bouncycastle.crypto.internal.params.KeyParameter access$100(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GOST28147$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GOST28147$AuthParameters)",
            "org.bouncycastle.crypto.general.GOST28147$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GOST28147$AuthParameters)",
            "org.bouncycastle.crypto.general.GOST28147$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.GOST28147$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.RC2:org.bouncycastle.crypto.internal.params.KeyParameter access$200(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Algorithm,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.RC2$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.RC2$AuthParameters)",
            "org.bouncycastle.crypto.general.RC2$KeyWrapOperatorFactory:org.bouncycastle.crypto.internal.Wrapper createWrapper(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.RC2$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.RC2$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.RC2$AuthParameters)",
            "org.bouncycastle.crypto.general.RC2$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.RC2$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SipHash$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SipHash$AuthParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SipHash$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$EngineProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$14$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$15$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$16$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCamellia$17$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.Camellia$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.DES$EngineProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$4$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvDES$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$EngineProvider:java.lang.Object createEngine()",
            "org.bouncycastle.crypto.general.Blowfish:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$KeyGenerator:void <init>(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvBlowfish$4$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Blowfish$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish:boolean access$100(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish:org.bouncycastle.crypto.general.Blowfish$EngineProvider access$300()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.Blowfish$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$AuthParameters)",
            "org.bouncycastle.crypto.general.Blowfish$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$AuthParameters)",
            "org.bouncycastle.crypto.general.Blowfish$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.Blowfish$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvBlowfish$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvBlowfish$3:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvBlowfish$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvBlowfish$6:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5$EngineProvider:java.lang.Object createEngine()",
            "org.bouncycastle.crypto.general.CAST5:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$KeyGenerator:void <init>(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvCAST5$7$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.CAST5$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5:boolean access$100(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5:org.bouncycastle.crypto.general.CAST5$EngineProvider access$300()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.CAST5$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$AuthParameters)",
            "org.bouncycastle.crypto.general.CAST5$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$AuthParameters)",
            "org.bouncycastle.crypto.general.CAST5$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.CAST5$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCAST5$4:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCAST5$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCAST5$6:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCAST5$8:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$EngineProvider:org.bouncycastle.crypto.internal.BlockCipher createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2$EngineProvider:java.lang.Object createEngine()",
            "org.bouncycastle.crypto.general.SHACAL2:void <clinit>()"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$KeyGenerator:void <init>(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.ProvSHACAL2$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2$KeyGenerator:void <init>(int,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.SHACAL2$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2:boolean access$100(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralAlgorithm,int,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2:org.bouncycastle.crypto.general.SHACAL2$EngineProvider access$300()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.SHACAL2$AEADOperatorFactory:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$AuthParameters)",
            "org.bouncycastle.crypto.general.SHACAL2$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$AuthParameters)",
            "org.bouncycastle.crypto.general.SHACAL2$OperatorFactory:org.bouncycastle.crypto.internal.BufferedBlockCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.general.SHACAL2$Parameters,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHACAL2$2:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHACAL2$5:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHACAL2$6:java.lang.Object createInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider$BcService:java.lang.Object newInstance(java.lang.Object)",
            "org.bouncycastle.jcajce.provider.GuardedEngineCreator:java.lang.Object createInstance(java.lang.Object)"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$EngineProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvIDEA$6$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.IDEA$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.SEED$EngineProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSEED$8$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$EngineProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$4$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$5$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSerpent$6$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.Serpent$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.Twofish$EngineProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvTwofish$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.Twofish$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.ARC4$OperatorFactory:org.bouncycastle.crypto.internal.StreamCipher createCipher(boolean,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.SipHash$MACOperatorFactory:org.bouncycastle.crypto.internal.Mac createMAC(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedMACOperatorFactory:org.bouncycastle.crypto.OutputMACCalculator createOutputMACCalculator(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.AuthenticationParameters)"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$EngineProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvBlowfish$4$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.Blowfish$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.CAST5$EngineProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvCAST5$7$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.CAST5$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.SHACAL2$EngineProvider:java.lang.Object createEngine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.fips.FipsParameters)",
            "org.bouncycastle.crypto.fips.BlockCipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.fips.FipsAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputSignerUsingSecureRandom createSigner(org.bouncycastle.crypto.AsymmetricPrivateKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsDSA$OperatorFactory:org.bouncycastle.crypto.fips.FipsOutputVerifier createVerifier(org.bouncycastle.crypto.AsymmetricPublicKey,org.bouncycastle.crypto.fips.FipsDSA$Parameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$SRTPOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$SRTPParameters)",
            "org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory:org.bouncycastle.crypto.KDFCalculator createKDFCalculator(org.bouncycastle.crypto.fips.FipsKDF$TLSParameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.BufferedBlockCipher createBlockCipher(org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.Parameters)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.modes.AEADBlockCipher createAEADCipher(org.bouncycastle.crypto.general.GeneralAlgorithm,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Mac getMac(org.bouncycastle.crypto.AuthenticationParameters,org.bouncycastle.crypto.internal.EngineProvider)",
            "org.bouncycastle.crypto.general.CipherUtils:org.bouncycastle.crypto.internal.Wrapper createStandardWrapper(boolean,org.bouncycastle.crypto.internal.params.KeyParameter,org.bouncycastle.crypto.internal.EngineProvider,org.bouncycastle.crypto.ParametersWithIV,boolean,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void <init>()",
            "org.bouncycastle.crypto.general.DesEdeWrapEngine:void init(boolean,org.bouncycastle.crypto.internal.CipherParameters)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,int)",
            "org.bouncycastle.crypto.general.ISO9796d2PSSSigner:void <init>(org.bouncycastle.crypto.internal.Digest,byte[])",
            "org.bouncycastle.crypto.general.ISO9796d2Signer:void <init>(org.bouncycastle.crypto.internal.Digest)",
            "org.bouncycastle.crypto.general.RSA$NullSigner:void <init>()",
            "org.bouncycastle.crypto.general.RSA:org.bouncycastle.crypto.internal.AsymmetricBlockCipher createCipher(boolean,org.bouncycastle.crypto.asymmetric.AsymmetricRSAKey,org.bouncycastle.crypto.general.RSA$Parameters,java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Digest createDigest(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.Register:org.bouncycastle.crypto.internal.Mac createHMac(org.bouncycastle.crypto.Algorithm)",
            "org.bouncycastle.crypto.general.RsaDigestSigner:void <init>(org.bouncycastle.crypto.internal.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier)",
            "org.bouncycastle.crypto.general.X931PRNG$Builder:org.bouncycastle.crypto.general.GeneralSecureRandom build(org.bouncycastle.crypto.SymmetricKey,boolean)",
            "org.bouncycastle.crypto.general.X931Signer:void <init>(org.bouncycastle.crypto.internal.Digest)"
        ]
    },
    "org.bouncycastle.jcajce.provider.ProvSHACAL2$3$1:org.bouncycastle.crypto.SymmetricKeyGenerator createInstance(int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:void engineInit(int,java.security.SecureRandom)",
            "org.bouncycastle.jcajce.provider.BaseKeyGenerator:javax.crypto.SecretKey engineGenerateKey()"
        ]
    },
    "org.bouncycastle.crypto.general.SHACAL2$KeyGenerator:void <init>(org.bouncycastle.crypto.general.GeneralParameters,int,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory$OutEncryptor:void <init>(org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory,org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory$OutEncryptor:org.bouncycastle.crypto.OutputEncryptor withSecureRandom(java.security.SecureRandom)",
            "org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory:org.bouncycastle.crypto.OutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory:org.bouncycastle.crypto.OutputDecryptor createOutputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory:org.bouncycastle.crypto.InputDecryptor createInputDecryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory$OutEncryptor:org.bouncycastle.crypto.OutputEncryptor withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory$OutEncryptor:java.lang.Object withSecureRandom(java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory:org.bouncycastle.crypto.OutputEncryptor createOutputEncryptor(org.bouncycastle.crypto.SymmetricKey,org.bouncycastle.crypto.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.BaseCipher:void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)"
        ]
    },
    "org.bouncycastle.crypto.general.GuardedSymmetricStreamOperatorFactory$OutEncryptor:java.lang.Object withSecureRandom(java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jcajce.provider.Utils:java.lang.Object addRandomIfNeeded(java.lang.Object,java.security.SecureRandom)"
        ]
    }
}