{
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void onControlCommand(org.apache.activemq.command.ControlCommand)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processControlCommand(org.apache.activemq.command.ControlCommand)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void ensureConnectionInfoSent()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.ActiveMQTempDestination createTempDestination(boolean)",
            "org.apache.activemq.ActiveMQConnection:void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)",
            "org.apache.activemq.ActiveMQConnection:void destroyDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.ActiveMQConnection:void unsubscribe(java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:void send(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.command.MessageId,int,int,long,boolean)",
            "org.apache.activemq.ActiveMQConnectionConsumer:void <init>(org.apache.activemq.ActiveMQConnection,javax.jms.ServerSessionPool,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.ActiveMQInputStream:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean,java.lang.String,int)",
            "org.apache.activemq.ActiveMQInputStream:void close()",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage)",
            "org.apache.activemq.ActiveMQSession:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.AdvisoryConsumer:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.TransactionContext:void commit()",
            "org.apache.activemq.TransactionContext:int prepare(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.TransactionContext:void forget(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:javax.transaction.xa.Xid[] recover(int)",
            "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processControlCommand(org.apache.activemq.command.ControlCommand)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ControlCommand:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void ensureConnectionInfoSent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.Session createSession(boolean,int)",
            "org.apache.activemq.ActiveMQConnection:void setClientID(java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:void start()",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:java.lang.String getInitializedClientID()",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:void destroyDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream doCreateInputStream(javax.jms.Destination,java.lang.String,boolean,java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination,java.util.Map,int,int,long)",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.Session createSession(boolean,int)",
            "org.apache.activemq.TransactionContext:void begin()",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.TransactionContext:javax.transaction.xa.Xid[] recover(int)",
            "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.ActiveMQTempDestination createTempDestination(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryQueue createTemporaryQueue()",
            "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryTopic createTemporaryTopic()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQTempDestination:void delete()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void destroyDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void unsubscribe(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void send(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.command.MessageId,int,int,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionConsumer:void <init>(org.apache.activemq.ActiveMQConnection,javax.jms.ServerSessionPool,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQInputStream:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream doCreateInputStream(javax.jms.Destination,java.lang.String,boolean,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.blob.DefaultBlobUploadStrategy:java.net.URL uploadStream(org.apache.activemq.command.ActiveMQBlobMessage,java.io.InputStream)",
            "org.apache.activemq.broker.PropertiesBrokerFactory:java.util.Map loadProperties(java.net.URI)",
            "org.apache.activemq.command.ActiveMQTextMessage:java.lang.String getText()",
            "org.apache.activemq.store.jdbc.adapter.BlobJDBCAdapter:byte[] doGetMessage(org.apache.activemq.store.jdbc.TransactionContext,long)",
            "org.apache.activemq.store.jdbc.adapter.StreamJDBCAdapter:byte[] getBinaryData(java.sql.ResultSet,int)",
            "org.apache.activemq.transport.tcp.TcpBufferedInputStream:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.AdvisoryConsumer:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void ensureConnectionInfoSent()"
        ]
    },
    "org.apache.activemq.TransactionContext:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void commit()"
        ]
    },
    "org.apache.activemq.TransactionContext:int prepare(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void forget(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:javax.transaction.xa.Xid[] recover(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void start(javax.transaction.xa.Xid,int)",
            "org.apache.activemq.TransactionContext:void end(javax.transaction.xa.Xid,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.udp.ResponseRedirectInterceptor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()",
            "org.apache.activemq.transport.tcp.SslTransport:void doConsume(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.tcp.TcpTransport:void doRun()",
            "org.apache.activemq.transport.udp.UdpTransport:void run()"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.stomp.ResponseHandler)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.vm.VMTransport:void stop()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.command.ControlCommand:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.Session createSession(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.TopicSession createTopicSession(boolean,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.QueueSession createQueueSession(boolean,int)",
            "org.apache.activemq.advisory.ConsumerEventSource:void start()",
            "org.apache.activemq.advisory.ProducerEventSource:void start()",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.util.CommandAgent:void start()",
            "org.apache.activemq.pool.PooledConnection:org.apache.activemq.ActiveMQSession createSession(org.apache.activemq.pool.SessionKey)",
            "org.apache.activemq.pool.SessionPool:org.apache.activemq.ActiveMQSession createSession()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void setClientID(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnection:void setClientID(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:javax.jms.Connection getConnection()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeForeignQueueConnection()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeLocalQueueConnection()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeForeignTopicConnection()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeLocalTopicConnection()",
            "org.apache.activemq.pool.ConnectionPool:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.lang.String getInitializedClientID()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream doCreateInputStream(javax.jms.Destination,java.lang.String,boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination,java.util.Map,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createNonPersistentOutputStream(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.Session createSession(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.TopicSession createTopicSession(boolean,int)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.QueueSession createQueueSession(boolean,int)",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.XASession createXASession()",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.XATopicSession createXATopicSession()",
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.XAQueueSession createXAQueueSession()",
            "org.apache.activemq.advisory.ConsumerEventSource:void start()",
            "org.apache.activemq.advisory.ProducerEventSource:void start()",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.util.CommandAgent:void start()",
            "org.apache.activemq.pool.PooledConnection:org.apache.activemq.ActiveMQSession createSession(org.apache.activemq.pool.SessionKey)",
            "org.apache.activemq.pool.SessionPool:org.apache.activemq.ActiveMQSession createSession()"
        ]
    },
    "org.apache.activemq.TransactionContext:void begin()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void doStartTransaction()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryQueue createTemporaryQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.TemporaryQueue createTemporaryQueue()",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.pool.PooledSession:javax.jms.TemporaryQueue createTemporaryQueue()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TemporaryTopic createTemporaryTopic()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TemporaryTopic createTemporaryTopic()",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.pool.PooledSession:javax.jms.TemporaryTopic createTemporaryTopic()"
        ]
    },
    "org.apache.activemq.command.ActiveMQTempDestination:void delete()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void unsubscribe(java.lang.String)",
            "org.apache.activemq.pool.PooledSession:void unsubscribe(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void close()",
            "org.apache.activemq.ActiveMQOutputStream:void flushBuffer()"
        ]
    },
    "org.apache.activemq.blob.DefaultBlobUploadStrategy:java.net.URL uploadStream(org.apache.activemq.command.ActiveMQBlobMessage,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.blob.BlobUploader:java.net.URL upload(org.apache.activemq.command.ActiveMQBlobMessage)",
            "org.apache.activemq.blob.DefaultBlobUploadStrategy:java.net.URL uploadFile(org.apache.activemq.command.ActiveMQBlobMessage,java.io.File)"
        ]
    },
    "org.apache.activemq.broker.PropertiesBrokerFactory:java.util.Map loadProperties(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.PropertiesBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)"
        ]
    },
    "org.apache.activemq.command.ActiveMQTextMessage:java.lang.String getText()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$TextMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)",
            "org.apache.activemq.broker.util.CommandMessageListener:java.lang.String processCommandText(java.lang.String)",
            "org.apache.activemq.filter.XalanXPathEvaluator:boolean evaluate(org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.transport.stomp.StompFrame convertMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.BlobJDBCAdapter:byte[] doGetMessage(org.apache.activemq.store.jdbc.TransactionContext,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.StreamJDBCAdapter:byte[] getBinaryData(java.sql.ResultSet,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:byte[] doGetMessage(org.apache.activemq.store.jdbc.TransactionContext,long)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:byte[] doGetNextDurableSubscriberMessageStatement(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpBufferedInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.blob.DefaultBlobUploadStrategy:java.net.URL uploadStream(org.apache.activemq.command.ActiveMQBlobMessage,java.io.InputStream)",
            "org.apache.activemq.broker.PropertiesBrokerFactory:java.util.Map loadProperties(java.net.URI)",
            "org.apache.activemq.command.ActiveMQTextMessage:java.lang.String getText()",
            "org.apache.activemq.store.jdbc.adapter.BlobJDBCAdapter:byte[] doGetMessage(org.apache.activemq.store.jdbc.TransactionContext,long)",
            "org.apache.activemq.store.jdbc.adapter.StreamJDBCAdapter:byte[] getBinaryData(java.sql.ResultSet,int)",
            "org.apache.activemq.transport.tcp.TcpBufferedInputStream:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message)",
            "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message,int,int,long)",
            "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Destination,javax.jms.Message)",
            "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message,int,int,long)",
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message,int,int,long)",
            "org.apache.activemq.pool.PooledProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser$1:void <init>(org.apache.activemq.ActiveMQQueueBrowser,org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQQueueReceiver:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,int,int,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQTopicSubscriber:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void commit()",
            "org.apache.activemq.ActiveMQTopicSession:void commit()",
            "org.apache.activemq.pool.PooledSession:void commit()"
        ]
    },
    "org.apache.activemq.TransactionContext:void start(javax.transaction.xa.Xid,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void end(javax.transaction.xa.Xid,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnectionFactory:org.apache.activemq.ActiveMQConnection createConnection(org.apache.activemq.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeForeignQueueConnection()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeLocalQueueConnection()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeForeignTopicConnection()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeLocalTopicConnection()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection()",
            "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection()"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.udp.ResponseRedirectInterceptor:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOTransport:void access$000(org.apache.activemq.transport.nio.NIOTransport)"
        ]
    },
    "org.apache.activemq.transport.tcp.SslTransport:void doConsume(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void doRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void run()"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransport:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.network.NetworkConnector:void start()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToActiveMQ(org.apache.activemq.command.Command,org.apache.activemq.transport.stomp.ResponseHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompBegin(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommit(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAbort(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompConnect(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompDisconnect(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempQueue(java.lang.String)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempTopic(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommad(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.ActiveMQConnection:void cleanup()",
            "org.apache.activemq.ActiveMQConnection:void send(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.command.MessageId,int,int,long,boolean)",
            "org.apache.activemq.ActiveMQConnectionConsumer:void close()",
            "org.apache.activemq.ActiveMQInputStream:void close()",
            "org.apache.activemq.ActiveMQInputStream:org.apache.activemq.command.ActiveMQMessage receive()",
            "org.apache.activemq.ActiveMQOutputStream:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination,java.util.Map,int,int,long)",
            "org.apache.activemq.ActiveMQOutputStream:void close()",
            "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean,boolean)",
            "org.apache.activemq.ActiveMQSession:void close()",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage)",
            "org.apache.activemq.ActiveMQSession:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.AdvisoryConsumer:void dispose()",
            "org.apache.activemq.AdvisoryConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.TransactionContext:void begin()",
            "org.apache.activemq.TransactionContext:void rollback()",
            "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void stop()",
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void doStop()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.ft.MasterBroker:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.ft.MasterBroker:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.ft.MasterBroker:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.ft.MasterBroker:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.ft.MasterBroker:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendToSlave(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendToSlave(org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void startBridge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.FTConnectorView:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterConnector$2:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void transportInterupted()",
            "org.apache.activemq.transport.TransportFilter:void transportInterupted()",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void transportInterupted()",
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.FutureResponse:void set(org.apache.activemq.command.Response)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportResumed()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$3:void run()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.jmx.NetworkBridgeView:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void setupStaticDestinations()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean addConsumerInfo(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.DurableConduitBridge:void setupStaticDestinations()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.FutureResponse:void set(org.apache.activemq.command.Response)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void startBridge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$3:void run()"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor$3:void run()",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void start()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void start()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransportServer$1:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startAllConnectors()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void masterFailed()",
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnector$1$1:void run()",
            "org.apache.activemq.broker.jmx.ConnectionView:void start()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.ft.MasterConnector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.jmx.NetworkBridgeView:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStart()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.proxy.ProxyConnector$1:void onAccept(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.WireFormatNegotiator:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.reliable.ReliableTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner$1:void run()"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner:void runTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.PooledTaskRunner$1:void run()"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.TopicSession createTopicSession(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeInboundTopicBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeOutboundTopicBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageProducer createProducer()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.QueueSession createQueueSession(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeInboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeOutboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageConsumer createConsumer()",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageProducer createProducer()"
        ]
    },
    "org.apache.activemq.advisory.ConsumerEventSource:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.advisory.ProducerEventSource:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.util.CommandAgent:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.util.CommandAgent:void afterPropertiesSet()"
        ]
    },
    "org.apache.activemq.pool.PooledConnection:org.apache.activemq.ActiveMQSession createSession(org.apache.activemq.pool.SessionKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.pool.SessionPool:org.apache.activemq.ActiveMQSession createSession()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.SessionPool:java.lang.Object makeObject()"
        ]
    },
    "org.apache.activemq.pool.PooledConnection:void setClientID(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.CommandAgent:javax.jms.Connection getConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:void start()"
        ]
    },
    "org.apache.activemq.network.jms.JmsQueueConnector:void initializeForeignQueueConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:boolean init()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void restartProducerConnection()"
        ]
    },
    "org.apache.activemq.network.jms.JmsQueueConnector:void initializeLocalQueueConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:boolean init()"
        ]
    },
    "org.apache.activemq.network.jms.JmsTopicConnector:void initializeForeignTopicConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsTopicConnector:boolean init()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void restartProducerConnection()"
        ]
    },
    "org.apache.activemq.network.jms.JmsTopicConnector:void initializeLocalTopicConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsTopicConnector:boolean init()"
        ]
    },
    "org.apache.activemq.pool.ConnectionPool:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnection:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createNonPersistentOutputStream(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.XASession createXASession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.XATopicSession createXATopicSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnection:javax.jms.XAQueueSession createXAQueueSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession:void doStartTransaction()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)",
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge()",
            "org.apache.activemq.ActiveMQSession:void run()",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.TemporaryQueue createTemporaryQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.TemporaryQueue createTemporaryQueue()",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)"
        ]
    },
    "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:javax.jms.Destination processReplyToDestination(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.TemporaryQueue createTemporaryQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.TemporaryQueue createTemporaryQueue()",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TemporaryTopic createTemporaryTopic()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TemporaryTopic createTemporaryTopic()",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)"
        ]
    },
    "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:javax.jms.Destination processReplyToDestination(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.TemporaryTopic createTemporaryTopic()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TemporaryTopic createTemporaryTopic()",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void unsubscribe(java.lang.String)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:void unsubscribe(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void unsubscribe(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.blob.DefaultBlobUploadStrategy:java.net.URL uploadStream(org.apache.activemq.command.ActiveMQBlobMessage,java.io.InputStream)",
            "org.apache.activemq.store.jdbc.adapter.BlobJDBCAdapter:void doAddMessage(java.sql.Connection,long,java.lang.String,java.lang.String,byte[])"
        ]
    },
    "org.apache.activemq.ActiveMQOutputStream:void flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void close()",
            "org.apache.activemq.ActiveMQOutputStream:void write(int)",
            "org.apache.activemq.ActiveMQOutputStream:void write(byte[],int,int)",
            "org.apache.activemq.ActiveMQOutputStream:void flush()"
        ]
    },
    "org.apache.activemq.blob.BlobUploader:java.net.URL upload(org.apache.activemq.command.ActiveMQBlobMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQBlobMessage:void onSend()"
        ]
    },
    "org.apache.activemq.blob.DefaultBlobUploadStrategy:java.net.URL uploadFile(org.apache.activemq.command.ActiveMQBlobMessage,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.blob.BlobUploader:java.net.URL upload(org.apache.activemq.command.ActiveMQBlobMessage)"
        ]
    },
    "org.apache.activemq.broker.PropertiesBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI,boolean)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.ActiveMQMessage createActiveMQMessage(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage)",
            "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy:void dispatchInitialMessage(javax.jms.Message,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.SubscriptionRecovery)"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$TextMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:javax.management.openmbean.CompositeData convert(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.util.CommandMessageListener:java.lang.String processCommandText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.XalanXPathEvaluator:boolean evaluate(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.XPathExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.transport.stomp.StompFrame convertMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.transport.stomp.StompFrame convertMessage(org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.IndirectMessageReference:int incrementReferenceCount()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:byte[] doGetMessage(org.apache.activemq.store.jdbc.TransactionContext,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:byte[] doGetNextDurableSubscriberMessageStatement(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.camel.CamelTopicPublisher:void publish(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message,int,int,long)",
            "org.apache.activemq.camel.CamelTopicPublisher:void publish(javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducerSupport:void send(javax.jms.Destination,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message)",
            "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)",
            "org.apache.activemq.broker.util.CommandMessageListener:void onMessage(javax.jms.Message)",
            "org.apache.activemq.camel.CamelQueueSender:void send(javax.jms.Queue,javax.jms.Message)",
            "org.apache.activemq.camel.CamelTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledQueueSender:void send(javax.jms.Queue,javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledTopicPublisher:void publish(javax.jms.Message,int,int,long)",
            "org.apache.activemq.pool.PooledTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.pool.PooledProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledProducer:void send(javax.jms.Destination,javax.jms.Message)",
            "org.apache.activemq.pool.PooledProducer:void send(javax.jms.Message)",
            "org.apache.activemq.pool.PooledProducer:void send(javax.jms.Message,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser$1:void <init>(org.apache.activemq.ActiveMQQueueBrowser,org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:org.apache.activemq.ActiveMQMessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueReceiver:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSubscriber:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void commit()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void commit()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void commit()",
            "org.apache.activemq.ActiveMQTopicSession:void commit()"
        ]
    },
    "org.apache.activemq.pool.PooledConnectionFactory:org.apache.activemq.ActiveMQConnection createConnection(org.apache.activemq.pool.ConnectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection()",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.util.CommandAgent:javax.jms.Connection createConnection()",
            "org.apache.activemq.pool.PooledConnectionFactory:org.apache.activemq.ActiveMQConnection createConnection(org.apache.activemq.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.QueueConnection createQueueConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeForeignQueueConnection()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeLocalQueueConnection()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:javax.jms.TopicConnection createTopicConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeForeignTopicConnection()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeLocalTopicConnection()"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAConnection createXAConnection()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XAQueueConnection createXAQueueConnection()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:javax.jms.XATopicConnection createXATopicConnection()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.udp.UdpTransportServer$2:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport:void access$000(org.apache.activemq.transport.nio.NIOTransport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.network.NetworkConnector:void start()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void startProcessing()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void updateConsumerPrefetch(int)",
            "org.apache.activemq.broker.region.Queue$3:void run()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void updateConsumerPrefetch(int)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchSync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:boolean iterate()",
            "org.apache.activemq.broker.TransportConnection:void start()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.network.NetworkConnector:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)",
            "org.apache.activemq.broker.jmx.NetworkConnectorView:void start()",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStart()"
        ]
    },
    "org.apache.activemq.state.Tracked:void onResponses()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner:void wakeup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSessionExecutor:void wakeup()",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue$1:void run()",
            "org.apache.activemq.broker.region.Queue:void dropEvent(boolean)",
            "org.apache.activemq.broker.region.Topic$1:void run()",
            "org.apache.activemq.memory.CacheEvictionUsageListener:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)",
            "org.apache.activemq.store.amq.AMQMessageStore:void addMessage(org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.amq.AMQMessageStore:void removeMessage(org.apache.activemq.command.MessageAck,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.amq.AMQMessageStore:void flush()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void checkpoint(boolean)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.kaha.impl.async.Location,java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void checkpoint(boolean,boolean)",
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void reconnect()",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void reconnect()",
            "org.apache.activemq.transport.vm.VMTransport:void wakeup()"
        ]
    },
    "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.usage.Usage$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.usage.Usage:void fireEvent(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.Usage:void setPercentUsage(int)"
        ]
    },
    "org.apache.activemq.usage.Usage:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void stop()",
            "org.apache.activemq.broker.region.Topic:void stop()",
            "org.apache.activemq.usage.SystemUsage:void stop()",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$2:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommad(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompBegin(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommit(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAbort(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompConnect(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompDisconnect(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempQueue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQDestination convertDestination(org.apache.activemq.transport.stomp.ProtocolConverter,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempTopic(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQDestination convertDestination(org.apache.activemq.transport.stomp.ProtocolConverter,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommad(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompTransportFilter:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.util.CommandAgent:void stop()",
            "org.apache.activemq.network.jms.DestinationBridge:void restartProducer()",
            "org.apache.activemq.pool.ConnectionPool:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void cleanup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void transportFailed(java.io.IOException)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionConsumer:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQInputStream:org.apache.activemq.command.ActiveMQMessage receive()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQInputStream:void fillBuffer()"
        ]
    },
    "org.apache.activemq.ActiveMQOutputStream:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination,java.util.Map,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination,java.util.Map,int,int,long)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.Session createSession(boolean,int)",
            "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void close()",
            "org.apache.activemq.ActiveMQTopicSession:void close()",
            "org.apache.activemq.advisory.ConsumerEventSource:void stop()",
            "org.apache.activemq.advisory.ProducerEventSource:void stop()",
            "org.apache.activemq.broker.util.CommandAgent:void stop()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeInboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeOutboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeInboundTopicBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeOutboundTopicBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.network.jms.QueueBridge:void stop()",
            "org.apache.activemq.network.jms.TopicBridge:void stop()",
            "org.apache.activemq.pool.PooledSession:void close()",
            "org.apache.activemq.pool.SessionPool:void destroyObject(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void asyncSendPacket(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$2:void run()",
            "org.apache.activemq.ActiveMQMessageConsumer:void close()",
            "org.apache.activemq.ActiveMQMessageConsumer:void sendPullCommand(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)",
            "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)",
            "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge()",
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()",
            "org.apache.activemq.ActiveMQMessageProducer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.ActiveMQMessageProducer:void close()",
            "org.apache.activemq.ActiveMQSession$2:void afterRollback()",
            "org.apache.activemq.ActiveMQSession:void run()"
        ]
    },
    "org.apache.activemq.AdvisoryConsumer:void dispose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.ActiveMQConnection:void cleanup()"
        ]
    },
    "org.apache.activemq.AdvisoryConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession$2$1:void run()"
        ]
    },
    "org.apache.activemq.TransactionContext:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void rollback()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$3:void run()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection(org.apache.activemq.broker.TransportConnection)",
            "org.apache.activemq.broker.jmx.ConnectionView:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:void doStop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void stop()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBeginTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.MutableBrokerFilter:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void sendToSlave(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void sendToSlave(org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.jmx.FTConnectorView:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.TransportConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.region.RegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.proxy.ProxyConnection:void stop()",
            "org.apache.activemq.proxy.ProxyConnector:void stop()",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void stop()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnector$1$1:void run()",
            "org.apache.activemq.broker.TransportConnector$1:void onAccept(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceLocalException(java.lang.Throwable)",
            "org.apache.activemq.broker.ft.MasterConnector:void shutDown()",
            "org.apache.activemq.network.CompositeDemandForwardingBridge:void serviceRemoteBrokerInfo(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridge:void serviceRemoteBrokerInfo(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridge:void serviceLocalBrokerInfo(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$6:void run()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.network.ForwardingBridge:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void remove(java.net.URI[])",
            "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(org.apache.activemq.transport.vm.VMTransportServer)",
            "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(java.lang.String)",
            "org.apache.activemq.transport.vm.VMTransportFactory:boolean validateBroker(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void transportInterupted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void transportInterupted()",
            "org.apache.activemq.transport.TransportFilter:void transportInterupted()",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void transportInterupted()",
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void transportInterupted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void transportInterupted()",
            "org.apache.activemq.transport.TransportFilter:void transportInterupted()",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void transportInterupted()",
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$2:void transportInterupted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void transportInterupted()",
            "org.apache.activemq.transport.TransportFilter:void transportInterupted()",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void transportInterupted()",
            "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void handleTransportFailure(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.FutureResponse:void set(org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportResumed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void transportResumed()",
            "org.apache.activemq.transport.TransportFilter:void transportResumed()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void transportResumed()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void triggerLocalStartBridge()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void triggerRemoteStartBridge()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.jmx.NetworkBridgeView:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void duplexStart(org.apache.activemq.command.BrokerInfo,org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void setupStaticDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DurableConduitBridge:void setupStaticDestinations()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean addConsumerInfo(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)"
        ]
    },
    "org.apache.activemq.network.DurableConduitBridge:void setupStaticDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()"
        ]
    },
    "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.network.ForwardingBridge:void triggerStartBridge()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.InactivityMonitor:void writeCheck()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.reliable.DefaultReplayStrategy:boolean onDroppedPackets(org.apache.activemq.transport.reliable.ReliableTransport,int,int,int)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onMissingResponse(org.apache.activemq.command.Command,org.apache.activemq.transport.FutureResponse)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendSyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command,int)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.MutexTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportLogger:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.mock.MockTransport:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendSyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command,int)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean access$800(org.apache.activemq.transport.fanout.FanoutTransport)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommad(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter$2$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void disposeTransport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void doStop()"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.proxy.ProxyConnector$2:void stop()",
            "org.apache.activemq.transport.CommandJoiner:void stop()",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.WireFormatNegotiator:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportServer$1:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void masterFailed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterConnector:void shutDown()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI,boolean)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.jmx.BrokerView:void start()",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.xbean.BrokerFactoryBean:void afterPropertiesSet()",
            "org.apache.activemq.xbean.XBeanBrokerService:void afterPropertiesSet()"
        ]
    },
    "org.apache.activemq.broker.TransportConnector$1$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnector$1:void onAccept(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectionView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.TransportStatusDetector:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnector:void start()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.jmx.FTConnectorView:void start()"
        ]
    },
    "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint$1:void start()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.Location storeItem(org.apache.activemq.util.ByteSequence,byte,boolean)"
        ]
    },
    "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.TaskRunnerFactory:org.apache.activemq.thread.TaskRunner createTaskRunner(org.apache.activemq.thread.Task,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.transport.TransportThreadSupport:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void doStart()",
            "org.apache.activemq.transport.udp.UdpTransport:void doStart()"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStart()",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()"
        ]
    },
    "org.apache.activemq.broker.jmx.NetworkBridgeView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$3:void run()",
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void addService(javax.jmdns.JmDNS,java.lang.String,java.lang.String)",
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent$1:void run()",
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void start()"
        ]
    },
    "org.apache.activemq.network.NetworkConnector$1:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector$1:void onAccept(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void run()",
            "org.apache.activemq.transport.udp.UdpTransportServer:org.apache.activemq.transport.Transport configureTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.vm.VMTransportServer:org.apache.activemq.transport.vm.VMTransport connect()"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.network.NetworkConnector:void start()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.proxy.ProxyConnector:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.TransportServerFilter:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.thread.DedicatedTaskRunner$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.thread.PooledTaskRunner$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.network.jms.JmsTopicConnector:void initializeInboundTopicBridges()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsTopicConnector:boolean init()"
        ]
    },
    "org.apache.activemq.network.jms.JmsTopicConnector:void initializeOutboundTopicBridges()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsTopicConnector:boolean init()"
        ]
    },
    "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void start()"
        ]
    },
    "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageProducer createProducer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void start()",
            "org.apache.activemq.network.jms.DestinationBridge:void restartProducer()",
            "org.apache.activemq.network.jms.TopicBridge:void sendMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.network.jms.JmsQueueConnector:void initializeInboundQueueBridges()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:boolean init()"
        ]
    },
    "org.apache.activemq.network.jms.JmsQueueConnector:void initializeOutboundQueueBridges()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:boolean init()"
        ]
    },
    "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageConsumer createConsumer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void start()"
        ]
    },
    "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageProducer createProducer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void start()",
            "org.apache.activemq.network.jms.DestinationBridge:void restartProducer()",
            "org.apache.activemq.network.jms.QueueBridge:void sendMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.CommandAgent:void afterPropertiesSet()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.pool.SessionPool:java.lang.Object makeObject()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.JmsQueueConnector:boolean init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsConnector:void start()"
        ]
    },
    "org.apache.activemq.network.jms.JmsQueueConnector:void restartProducerConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void restartProducer()"
        ]
    },
    "org.apache.activemq.network.jms.JmsTopicConnector:boolean init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsConnector:void start()"
        ]
    },
    "org.apache.activemq.network.jms.JmsTopicConnector:void restartProducerConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void restartProducer()"
        ]
    },
    "org.apache.activemq.pool.PooledConnection:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeForeignQueueConnection()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeLocalQueueConnection()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeForeignTopicConnection()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeLocalTopicConnection()"
        ]
    },
    "org.apache.activemq.pool.PooledConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.pool.PooledConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Topic,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.pool.PooledConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Queue,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.pool.PooledConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createDurableInputStream(javax.jms.Topic,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void beforeMessageIsConsumed(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void acknowledge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$3:void beforeEnd()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispose()",
            "org.apache.activemq.ActiveMQSession:void acknowledge()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void start()",
            "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQQueueSession:void run()",
            "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean,boolean)",
            "org.apache.activemq.ActiveMQTopicSession:void run()",
            "org.apache.activemq.pool.PooledSession:void run()"
        ]
    },
    "org.apache.activemq.network.jms.DestinationBridge:javax.jms.Destination processReplyToDestination(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.BlobJDBCAdapter:void doAddMessage(java.sql.Connection,long,java.lang.String,java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQBytesMessage$1:void write(int)"
        ]
    },
    "org.apache.activemq.ActiveMQOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.blob.DefaultBlobUploadStrategy:java.net.URL uploadStream(org.apache.activemq.command.ActiveMQBlobMessage,java.io.InputStream)",
            "org.apache.activemq.command.ActiveMQBytesMessage$1:void write(byte[],int,int)",
            "org.apache.activemq.transport.tcp.TcpBufferedOutputStream:void write(byte[],int,int)",
            "org.apache.activemq.transport.tcp.TcpBufferedOutputStream:void flush()"
        ]
    },
    "org.apache.activemq.ActiveMQOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.blob.DefaultBlobUploadStrategy:java.net.URL uploadStream(org.apache.activemq.command.ActiveMQBlobMessage,java.io.InputStream)"
        ]
    },
    "org.apache.activemq.command.ActiveMQBlobMessage:void onSend()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void send(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.command.MessageId,int,int,long,boolean)",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage)",
            "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy:void configure(org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)",
            "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI)",
            "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.ActiveMQMessage createActiveMQMessage(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy:void dispatchInitialMessage(javax.jms.Message,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy$1:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport:javax.management.openmbean.CompositeData convert(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.QueueView:javax.management.openmbean.CompositeData getMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.filter.XPathExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.XPathExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.transport.stomp.StompFrame convertMessage(org.apache.activemq.command.ActiveMQMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.broker.region.IndirectMessageReference:int incrementReferenceCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.QueueSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.QueueSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.filter.MessageEvaluationContext:org.apache.activemq.command.Message getMessage()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessageReference(java.lang.String)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessageReference(java.lang.String)",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessageReference(java.lang.String)",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessageReference(java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:boolean recoverReference(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.store.kahadaptor.ReferenceRecord)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.IndirectMessageReference:int incrementReferenceCount()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.IndirectMessageReference:int incrementReferenceCount()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessageReference(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessageReference(java.lang.String)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessageReference(java.lang.String)",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessageReference(java.lang.String)",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessageReference(java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:boolean recoverReference(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.store.kahadaptor.ReferenceRecord)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.IndirectMessageReference:int incrementReferenceCount()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.camel.CamelTopicPublisher:void publish(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.camel.CamelTopicPublisher:void publish(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSender:void send(javax.jms.Queue,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.QueueBridge:void sendMessage(javax.jms.Message)",
            "org.apache.activemq.pool.PooledQueueSender:void send(javax.jms.Queue,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.TopicBridge:void sendMessage(javax.jms.Message)",
            "org.apache.activemq.pool.PooledTopicPublisher:void publish(javax.jms.Message)",
            "org.apache.activemq.pool.PooledTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.broker.util.CommandMessageListener:void onMessage(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()",
            "org.apache.activemq.ActiveMQSession:void run()",
            "org.apache.activemq.camel.CamelMessageConsumer$1:void process(org.apache.camel.Exchange)",
            "org.apache.activemq.camel.converter.ActiveMQMessageConverter$1:void process(org.apache.camel.Exchange)"
        ]
    },
    "org.apache.activemq.camel.CamelQueueSender:void send(javax.jms.Queue,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.QueueBridge:void sendMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.camel.CamelTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.TopicBridge:void sendMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.pool.PooledQueueSender:void send(javax.jms.Queue,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.pool.PooledTopicPublisher:void publish(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.pool.PooledTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.pool.PooledProducer:void send(javax.jms.Destination,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandMessageListener:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.pool.PooledProducer:void send(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)"
        ]
    },
    "org.apache.activemq.pool.PooledProducer:void send(javax.jms.Message,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:org.apache.activemq.ActiveMQMessageConsumer createConsumer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQQueueBrowser:java.util.Enumeration getEnumeration()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageConsumer createConsumer()",
            "org.apache.activemq.pool.PooledSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)",
            "org.apache.activemq.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()",
            "org.apache.activemq.pool.PooledSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()",
            "org.apache.activemq.pool.PooledSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.pool.PooledConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnectionFactory:javax.jms.Connection createConnection()",
            "org.apache.activemq.pool.PooledConnectionFactory:org.apache.activemq.ActiveMQConnection createConnection(org.apache.activemq.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.CommandAgent:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:javax.jms.Connection getConnection()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport$1:void onSelect(org.apache.activemq.transport.nio.SelectorSelection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$2:void run()",
            "org.apache.activemq.broker.TransportConnection$3:void run()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.command.ConnectionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void startProcessing()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.QueueSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void updateConsumerPrefetch(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.Topic$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void updateConsumerPrefetch(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void dispatchSync(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.NetworkConnectorView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:void handleStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStart()"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void wakeup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void start()",
            "org.apache.activemq.ActiveMQSessionExecutor:void setDispatchedBySessionPool(boolean)",
            "org.apache.activemq.ActiveMQSessionExecutor:void execute(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSessionExecutor:void executeFirst(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSessionExecutor:void start()"
        ]
    },
    "org.apache.activemq.broker.region.Queue$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void dropEvent(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void dropEvent()",
            "org.apache.activemq.broker.region.Queue:void purge()"
        ]
    },
    "org.apache.activemq.broker.region.Topic$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.memory.CacheEvictionUsageListener:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.Usage$1:void run()"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:void addMessage(org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore$2:void afterCommit()",
            "org.apache.activemq.store.amq.AMQMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:void removeMessage(org.apache.activemq.command.MessageAck,org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore$3:void afterCommit()",
            "org.apache.activemq.store.amq.AMQMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.amq.AMQMessageStore:void stop()",
            "org.apache.activemq.store.amq.AMQMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.amq.AMQMessageStore:int getMessageCount()",
            "org.apache.activemq.store.amq.AMQMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void checkpoint(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter$2:void run()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.kaha.impl.async.Location,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQTopicMessageStore$1:void afterCommit()",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void checkpoint(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()",
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$2:void run()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void overflowNotification(org.apache.activeio.journal.RecordLocation)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void checkpoint(boolean)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport:void add(java.net.URI[])",
            "org.apache.activemq.transport.failover.FailoverTransport:void remove(java.net.URI[])",
            "org.apache.activemq.transport.failover.FailoverTransport:void add(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport:void add(java.net.URI[])"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void wakeup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:void setTransportListener(org.apache.activemq.transport.TransportListener)"
        ]
    },
    "org.apache.activemq.usage.Usage:void setPercentUsage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.MemoryUsage:void increaseUsage(long)",
            "org.apache.activemq.usage.MemoryUsage:void decreaseUsage(long)",
            "org.apache.activemq.usage.Usage:void onLimitChange()",
            "org.apache.activemq.usage.Usage:void setPercentUsageMinDelta(int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void stop()",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.DestinationFilter:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void stop()",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.DestinationFilter:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.usage.SystemUsage:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.StompTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQDestination convertDestination(org.apache.activemq.transport.stomp.ProtocolConverter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromFrameToMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.FrameTranslator)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.broker.util.CommandAgent:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:void destroy()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.network.jms.DestinationBridge:void restartProducer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.pool.ConnectionPool:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.ConnectionPool:boolean expiredCheck()",
            "org.apache.activemq.pool.PooledConnectionFactory:void stop()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void transportFailed(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQInputStream:void fillBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQInputStream:int read()",
            "org.apache.activemq.ActiveMQInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQXASession:void <init>(org.apache.activemq.ActiveMQXAConnection,org.apache.activemq.command.SessionId,int,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void close()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeInboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeOutboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.network.jms.QueueBridge:void stop()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void close()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeInboundTopicBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeOutboundTopicBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.network.jms.TopicBridge:void stop()"
        ]
    },
    "org.apache.activemq.advisory.ConsumerEventSource:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.advisory.ProducerEventSource:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.network.jms.QueueBridge:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)",
            "org.apache.activemq.network.jms.JmsConnector$1:boolean removeEldestEntry(java.util.Map$Entry)",
            "org.apache.activemq.network.jms.JmsConnector:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.network.jms.TopicBridge:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)",
            "org.apache.activemq.network.jms.JmsConnector$1:boolean removeEldestEntry(java.util.Map$Entry)",
            "org.apache.activemq.network.jms.JmsConnector:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void close()",
            "org.apache.activemq.ActiveMQTopicSession:void close()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeInboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeOutboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeInboundTopicBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeOutboundTopicBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.network.jms.QueueBridge:void stop()",
            "org.apache.activemq.network.jms.TopicBridge:void stop()",
            "org.apache.activemq.pool.ConnectionPool$Synchronization:void afterCompletion(int)"
        ]
    },
    "org.apache.activemq.pool.SessionPool:void destroyObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()",
            "org.apache.activemq.ActiveMQSession:void close(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.util.CommandAgent:void stop()",
            "org.apache.activemq.pool.PooledSession:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void sendPullCommand(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void afterMessageIsConsumed(org.apache.activemq.command.MessageDispatch,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$3:void afterRollback()",
            "org.apache.activemq.ActiveMQSession:void recover()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSender:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQTopicPublisher:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageProducer:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQSession$2:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()",
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.MessageDispatch:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.ActiveMQSession$2$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void rollback()",
            "org.apache.activemq.ActiveMQSession:void dispose()",
            "org.apache.activemq.ActiveMQTopicSession:void rollback()",
            "org.apache.activemq.pool.PooledSession:void close()",
            "org.apache.activemq.pool.PooledSession:void rollback()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processShutdown(org.apache.activemq.command.ShutdownInfo)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.TransportStatusDetector:void doCollection(org.apache.activemq.broker.TransportConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection()"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectionView:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.SimpleAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.security.JaasAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.security.SimpleAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.command.RemoveInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.SessionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.command.RemoveInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ProducerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)",
            "org.apache.activemq.command.RemoveInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ConsumerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.RemoveSubscriptionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()",
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBeginTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBeginTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBeginTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBeginTransaction(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.MutableBrokerFilter:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.MutableBrokerFilter:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.ft.MasterBroker:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.MutableBrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void masterFailed()",
            "org.apache.activemq.broker.BrokerService:void containerShutdown()",
            "org.apache.activemq.broker.jmx.BrokerView:void stop()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void stopBroker()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)",
            "org.apache.activemq.xbean.BrokerFactoryBean:void destroy()",
            "org.apache.activemq.xbean.XBeanBrokerService:void destroy()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:boolean removeConnector(java.lang.String)",
            "org.apache.activemq.broker.jmx.ConnectorView:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.region.RegionBroker:void stop()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection:void onFailure(java.io.IOException)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ProxyConnectorView:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnection$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onException(java.io.IOException)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void serviceTransportException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection$1:void onException(java.io.IOException)",
            "org.apache.activemq.broker.TransportConnection:void serviceException(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector$1:void onAccept(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void run()",
            "org.apache.activemq.transport.udp.UdpTransportServer:org.apache.activemq.transport.Transport configureTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.vm.VMTransportServer:org.apache.activemq.transport.vm.VMTransport connect()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void serviceLocalException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterConnector$1:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void shutDown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteException(java.io.IOException)",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.CompositeDemandForwardingBridge:void serviceRemoteBrokerInfo(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridge:void serviceRemoteBrokerInfo(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridge:void serviceLocalBrokerInfo(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteException(java.lang.Throwable)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$6:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(java.lang.Throwable)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$2:void run()",
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void removeService(javax.jmdns.JmDNS,java.lang.String,java.lang.String)",
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void serviceRemoteCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$2:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void remove(java.net.URI[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(org.apache.activemq.transport.vm.VMTransportServer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportServer:void stop()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:void stopped(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:boolean validateBroker(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void replayCommands(org.apache.activemq.command.ReplayCommand)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void transportResumed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void transportResumed()",
            "org.apache.activemq.transport.TransportFilter:void transportResumed()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void transportResumed()"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void transportResumed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void transportResumed()",
            "org.apache.activemq.transport.TransportFilter:void transportResumed()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void transportResumed()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport$2:void transportResumed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void transportResumed()",
            "org.apache.activemq.transport.TransportFilter:void transportResumed()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void transportResumed()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void triggerLocalStartBridge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.CompositeDemandForwardingBridge:void serviceRemoteBrokerInfo(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void triggerRemoteStartBridge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()"
        ]
    },
    "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void stop()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.BrokerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void triggerStartBridge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.ft.MasterConnector$3:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void start()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void start()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void writeCheck()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor$2:void run()"
        ]
    },
    "org.apache.activemq.transport.reliable.DefaultReplayStrategy:boolean onDroppedPackets(org.apache.activemq.transport.reliable.ReliableTransport,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void onMissingResponse(org.apache.activemq.command.Command,org.apache.activemq.transport.FutureResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.reliable.ReliableTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void sendSyncToSlave(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterBroker:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendToSlave(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendToSlave(org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendSyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendSyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendSyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()"
        ]
    },
    "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command,int)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command,int)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command,int)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:boolean access$800(org.apache.activemq.transport.fanout.FanoutTransport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransport$1:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter$2$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onActiveMQCommad(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector$2:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.CommandJoiner:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.util.ServiceSupport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.NetworkConnector:void stop()",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.TransportServerFilter:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.tcp.TcpTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransport:void run()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.xbean.BrokerFactoryBean:void afterPropertiesSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.xbean.PooledBrokerFactoryBean:void afterPropertiesSet()"
        ]
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void afterPropertiesSet()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnector:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addConnector(java.lang.String)",
            "org.apache.activemq.broker.jmx.ConnectorView:void start()",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.jmx.FTConnectorView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.camel.component.JournalEndpoint$1:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.Location storeItem(org.apache.activemq.util.ByteSequence,byte,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void storeState(boolean)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location write(org.apache.activemq.util.ByteSequence,boolean)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location write(org.apache.activemq.util.ByteSequence,byte,boolean)"
        ]
    },
    "org.apache.activemq.thread.TaskRunnerFactory:org.apache.activemq.thread.TaskRunner createTaskRunner(org.apache.activemq.thread.Task,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSessionExecutor:void wakeup()",
            "org.apache.activemq.broker.TransportConnection:void start()",
            "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.usage.SystemUsage,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.kaha.Store)",
            "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.memory.CacheEvictionUsageListener:void <init>(org.apache.activemq.usage.Usage,int,int,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.store.amq.AMQMessageStore:void <init>(org.apache.activemq.store.amq.AMQPersistenceAdapter,org.apache.activemq.store.ReferenceStore,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void <init>(org.apache.activeio.journal.Journal,org.apache.activemq.store.PersistenceAdapter,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.transport.failover.FailoverTransport:void <init>()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void <init>()",
            "org.apache.activemq.transport.vm.VMTransport:void wakeup()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransport:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStart()"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void fireServiceAddEvent(org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$RemoteBrokerData)",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void addService(javax.jmdns.JmDNS,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void serviceAdded(javax.jmdns.ServiceEvent)"
        ]
    },
    "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStart()",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportServer:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.network.NetworkConnector:void start()",
            "org.apache.activemq.proxy.ProxyConnector:void start()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerFilter:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:org.apache.activemq.transport.Transport configureTransport(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportServer:void processInboundConnection(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportServer:org.apache.activemq.transport.vm.VMTransport connect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.jmx.ProxyConnectorView:void start()"
        ]
    },
    "org.apache.activemq.transport.TransportServerFilter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.proxy.ProxyConnector:void start()",
            "org.apache.activemq.transport.TransportServerFilter:void start()"
        ]
    },
    "org.apache.activemq.network.jms.DestinationBridge:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.network.jms.JmsConnector:void start()",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)"
        ]
    },
    "org.apache.activemq.network.jms.TopicBridge:void sendMessage(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.network.jms.QueueBridge:void sendMessage(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.network.jms.JmsConnector:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.jmx.JmsConnectorView:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:java.io.InputStream createInputStream(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void beforeMessageIsConsumed(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQQueueBrowser$1:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession$2$1:void run()",
            "org.apache.activemq.ActiveMQSessionExecutor:void dispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$3:void beforeEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void beforeEnd()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void dispose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void close()",
            "org.apache.activemq.ActiveMQSession:void dispose()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void acknowledge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$1:void execute()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.advisory.ConsumerEventSource:void start()",
            "org.apache.activemq.advisory.ProducerEventSource:void start()",
            "org.apache.activemq.broker.util.CommandAgent:void start()",
            "org.apache.activemq.network.jms.DestinationBridge:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void run()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void run()",
            "org.apache.activemq.ActiveMQTopicSession:void run()"
        ]
    },
    "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()",
            "org.apache.activemq.ActiveMQSession:void run()",
            "org.apache.activemq.camel.CamelMessageConsumer$1:void process(org.apache.camel.Exchange)",
            "org.apache.activemq.camel.converter.ActiveMQMessageConverter$1:void process(org.apache.camel.Exchange)"
        ]
    },
    "org.apache.activemq.command.ActiveMQBytesMessage$1:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQBytesMessage$1:void write(int)"
        ]
    },
    "org.apache.activemq.command.ActiveMQBytesMessage$1:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.blob.DefaultBlobUploadStrategy:java.net.URL uploadStream(org.apache.activemq.command.ActiveMQBlobMessage,java.io.InputStream)",
            "org.apache.activemq.command.ActiveMQBytesMessage$1:void write(byte[],int,int)",
            "org.apache.activemq.transport.tcp.TcpBufferedOutputStream:void write(byte[],int,int)",
            "org.apache.activemq.transport.tcp.TcpBufferedOutputStream:void flush()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpBufferedOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.blob.DefaultBlobUploadStrategy:java.net.URL uploadStream(org.apache.activemq.command.ActiveMQBlobMessage,java.io.InputStream)",
            "org.apache.activemq.command.ActiveMQBytesMessage$1:void write(byte[],int,int)",
            "org.apache.activemq.transport.tcp.TcpBufferedOutputStream:void write(byte[],int,int)",
            "org.apache.activemq.transport.tcp.TcpBufferedOutputStream:void flush()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpBufferedOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.blob.DefaultBlobUploadStrategy:java.net.URL uploadStream(org.apache.activemq.command.ActiveMQBlobMessage,java.io.InputStream)",
            "org.apache.activemq.transport.tcp.TcpBufferedOutputStream:void write(int)",
            "org.apache.activemq.transport.tcp.TcpBufferedOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy:void configure(org.apache.activemq.command.ActiveMQMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy:void dispatchInitialMessage(javax.jms.Message,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.SubscriptionRecovery)"
        ]
    },
    "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.lang.String)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI,java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI,java.util.concurrent.Executor)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.Transport createRemoteTransport()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI)",
            "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI)",
            "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doConnect(java.net.URI)",
            "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSessionExecutor:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy$1:void onMessage(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()",
            "org.apache.activemq.ActiveMQSession:void run()",
            "org.apache.activemq.camel.CamelMessageConsumer$1:void process(org.apache.camel.Exchange)",
            "org.apache.activemq.camel.converter.ActiveMQMessageConverter$1:void process(org.apache.camel.Exchange)"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.TabularData browseAsTable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()",
            "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:javax.management.openmbean.CompositeData getMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$BooleanUnaryExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$BooleanUnaryExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$BooleanUnaryExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.XPathExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.AbstractSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.broker.region.Queue$6:boolean evaluate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.virtual.FilteredDestination:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.DestinationFilter:org.apache.activemq.command.Message[] browse()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:javax.management.openmbean.CompositeData getMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean copyMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.broker.region.QueueSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.region.QueueSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void sendMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void sendMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.filter.MessageEvaluationContext:org.apache.activemq.command.Message getMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.NetworkBridgeFilter:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.DestinationFilter:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MessageEvaluationContext:boolean isDropped()",
            "org.apache.activemq.filter.NoLocalExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.PropertyExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.XPathExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessageReference(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessageReference(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessageReference(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessageReference(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:boolean recoverReference(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.store.kahadaptor.ReferenceRecord)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.DestinationFilter:org.apache.activemq.command.Message[] browse()"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void safeFillBatch()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void fillBatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean hasNext()"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.pool.PooledQueueSender:void send(javax.jms.Queue,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.QueueBridge:void sendMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.pool.PooledTopicPublisher:void publish(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.pool.PooledTopicPublisher:void publish(javax.jms.Topic,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.TopicBridge:void sendMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.camel.CamelMessageConsumer$1:void process(org.apache.camel.Exchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint:void dispatchToConsumer()"
        ]
    },
    "org.apache.activemq.camel.converter.ActiveMQMessageConverter$1:void process(org.apache.camel.Exchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint:void dispatchToConsumer()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:java.util.Enumeration getEnumeration()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageConsumer createConsumer()",
            "org.apache.activemq.pool.PooledSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()",
            "org.apache.activemq.pool.PooledSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()",
            "org.apache.activemq.pool.PooledSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.pool.PooledConnectionFactory:javax.jms.Connection createConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:javax.jms.Connection createConnection()",
            "org.apache.activemq.pool.PooledConnectionFactory:org.apache.activemq.ActiveMQConnection createConnection(org.apache.activemq.pool.ConnectionKey)",
            "org.apache.activemq.pool.PooledConnectionFactory:void start()"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorSelection:void onSelect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorWorker$1:void run()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void serviceExceptionAsync(java.io.IOException)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription$1:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ConnectionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.command.ConnectionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void browseDone()",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer$4:void run()",
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()",
            "org.apache.activemq.ActiveMQSession:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void setDispatchedBySessionPool(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void execute(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void dispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void executeFirst(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void redispatch(org.apache.activemq.ActiveMQDispatcher,org.apache.activemq.MessageDispatchChannel)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void start()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void dropEvent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.IndirectMessageReference)",
            "org.apache.activemq.broker.region.QueueSubscription$1:void afterCommit()",
            "org.apache.activemq.broker.region.QueueSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void purge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:void purge()"
        ]
    },
    "org.apache.activemq.usage.Usage$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore$2:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore$3:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.kaha.impl.async.Location,java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void stop()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void stop()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()",
            "org.apache.activemq.store.journal.JournalMessageStore:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.Topic:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:int getMessageCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:int size()",
            "org.apache.activemq.store.ProxyMessageStore:int getMessageCount()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount()",
            "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int getStoreSize()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.Usage$1:void run()"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore$1:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.Topic:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:int size()",
            "org.apache.activemq.store.ProxyMessageStore:int getMessageCount()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount()",
            "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void overflowNotification(org.apache.activeio.journal.RecordLocation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void checkpoint(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.Usage$1:void run()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int getStoreSize()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void add(java.net.URI[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.Transport createRemoteTransport()",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void remove(java.net.URI[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void add(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor$3:void run()",
            "org.apache.activemq.transport.InactivityMonitor$4:void run()",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)",
            "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()",
            "org.apache.activemq.transport.tcp.TcpTransport:void run()",
            "org.apache.activemq.transport.udp.UdpTransport:void run()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void add(java.net.URI[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.Transport createRemoteTransport()",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransport:void setTransportListener(org.apache.activemq.transport.TransportListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)",
            "org.apache.activemq.broker.TransportConnection:void <init>(org.apache.activemq.broker.TransportConnector,org.apache.activemq.transport.Transport,org.apache.activemq.broker.Broker,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.ft.MasterBroker:void <init>(org.apache.activemq.broker.MutableBrokerFilter,org.apache.activemq.transport.Transport)",
            "org.apache.activemq.broker.ft.MasterConnector:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void setTransportListener(org.apache.activemq.transport.TransportListener)",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.mock.MockTransport:void setTransportListener(org.apache.activemq.transport.TransportListener)",
            "org.apache.activemq.transport.mock.MockTransport:void install(org.apache.activemq.transport.TransportFilter)",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.usage.MemoryUsage:void increaseUsage(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage)",
            "org.apache.activemq.command.Message:int incrementReferenceCount()",
            "org.apache.activemq.memory.UsageManagerCacheFilter:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.usage.MemoryUsage:void enqueueUsage(long)",
            "org.apache.activemq.usage.MemoryUsage:void increaseUsage(long)"
        ]
    },
    "org.apache.activemq.usage.MemoryUsage:void decreaseUsage(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void onProducerAck(org.apache.activemq.command.ProducerAck)",
            "org.apache.activemq.command.Message:int decrementReferenceCount()",
            "org.apache.activemq.memory.UsageManagerCacheFilter:java.lang.Object remove(java.lang.Object)",
            "org.apache.activemq.memory.UsageManagerCacheFilter:void close()",
            "org.apache.activemq.usage.MemoryUsage:void decreaseUsage(long)"
        ]
    },
    "org.apache.activemq.usage.Usage:void onLimitChange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.StoreUsage:void setStore(org.apache.activemq.store.PersistenceAdapter)",
            "org.apache.activemq.usage.TempUsage:void setStore(org.apache.activemq.kaha.Store)",
            "org.apache.activemq.usage.Usage:void setLimit(long)",
            "org.apache.activemq.usage.Usage:void onLimitChange()",
            "org.apache.activemq.usage.Usage:void setUsagePortion(float)"
        ]
    },
    "org.apache.activemq.usage.Usage:void setPercentUsageMinDelta(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractRegion:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.TempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.TempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void stop()",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.DestinationFilter:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFilter:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromFrameToMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.FrameTranslator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.broker.util.CommandAgent:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.pool.ConnectionPool:boolean expiredCheck()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.ConnectionPool:void decrementReferenceCount()",
            "org.apache.activemq.pool.PooledConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.pool.PooledConnectionFactory:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.ActiveMQInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.BlobJDBCAdapter:byte[] doGetMessage(org.apache.activemq.store.jdbc.TransactionContext,long)",
            "org.apache.activemq.store.jdbc.adapter.StreamJDBCAdapter:byte[] getBinaryData(java.sql.ResultSet,int)"
        ]
    },
    "org.apache.activemq.ActiveMQInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpBufferedInputStream:void fill()",
            "org.apache.activemq.transport.tcp.TcpBufferedInputStream:int readStream(byte[],int,int)"
        ]
    },
    "org.apache.activemq.ActiveMQXASession:void <init>(org.apache.activemq.ActiveMQXAConnection,org.apache.activemq.command.SessionId,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnection:javax.jms.Session createSession(boolean,int)"
        ]
    },
    "org.apache.activemq.network.jms.JmsConnector$1:boolean removeEldestEntry(java.util.Map$Entry)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.JmsConnector:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.JmsConnectorView:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.pool.ConnectionPool$Synchronization:void afterCompletion(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void destroyConsumer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueBrowser:boolean hasMoreElements()",
            "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()",
            "org.apache.activemq.ActiveMQQueueBrowser:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void close(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onConsumerControl(org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.MessageDispatch dequeue(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$3:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()",
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void recover()",
            "org.apache.activemq.ActiveMQTopicSession:void recover()",
            "org.apache.activemq.pool.PooledSession:void recover()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSender:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueSender createSender(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.util.CommandMessageListener:javax.jms.MessageProducer getProducer()",
            "org.apache.activemq.pool.PooledSession:org.apache.activemq.ActiveMQMessageProducer getMessageProducer()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicPublisher:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.TransactionContext:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void rollback()",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)"
        ]
    },
    "org.apache.activemq.transaction.Transaction:void fireAfterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.LocalTransaction:void rollback()",
            "org.apache.activemq.transaction.XATransaction:void doPostRollback()"
        ]
    },
    "org.apache.activemq.command.MessageDispatch:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void rollback()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void dispose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.ActiveMQConnection:void cleanup()",
            "org.apache.activemq.ActiveMQSession:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void rollback()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void rollback()",
            "org.apache.activemq.ActiveMQTopicSession:void rollback()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processShutdown(org.apache.activemq.command.ShutdownInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ShutdownInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.TransportStatusDetector:void doCollection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportStatusDetector:void run()"
        ]
    },
    "org.apache.activemq.security.JaasAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.SimpleAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.security.JaasAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.security.SimpleAuthenticationBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.command.RemoveInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)"
        ]
    },
    "org.apache.activemq.command.SessionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.command.ProducerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.command.ConsumerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.command.RemoveSubscriptionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void destroyDurableSubscriber(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBeginTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.MutableBrokerFilter:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.UserIDBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.ft.MasterBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.TimeStampingBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.RegionBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.MutableBrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.MutableBrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.MutableBrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.ft.MasterBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.util.LoggingBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.MutableBrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.MessageAck:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.MutableBrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void containerShutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService$3:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void stopBroker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void databaseLockKeepAlive()"
        ]
    },
    "org.apache.activemq.xbean.BrokerFactoryBean:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.xbean.PooledBrokerFactoryBean:void destroy()"
        ]
    },
    "org.apache.activemq.xbean.XBeanBrokerService:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:boolean removeConnector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ConnectorView:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()",
            "org.apache.activemq.broker.MutableBrokerFilter:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection:void onFailure(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onException(java.io.IOException)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.broker.jmx.ProxyConnectorView:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.ft.MasterConnector$2:void onException(java.io.IOException)",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onException(java.io.IOException)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$4:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onException(java.io.IOException)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$3:void run()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void fireServiceRemovedEvent(org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$RemoteBrokerData)",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void removeService(javax.jmdns.JmDNS,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void serviceRemoved(javax.jmdns.ServiceEvent)"
        ]
    },
    "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DiscoveryNetworkConnector$1:void bridgeFailed()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge$2:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceRemove(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$2:void run()",
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void removeService(javax.jmdns.JmDNS,java.lang.String,java.lang.String)",
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.transport.vm.VMTransportServer:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportServerFilter:void stop()",
            "org.apache.activemq.transport.vm.VMTransportServer$1:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.reliable.ReliableTransport:void replayCommands(org.apache.activemq.command.ReplayCommand)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.BrokerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.MutableBrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendSyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.TransportLogger:java.lang.Object request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.Response syncSendPacket(org.apache.activemq.command.Command,int)",
            "org.apache.activemq.transport.MutexTransport:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object request(java.lang.Object,int)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object request(java.lang.Object,int)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport$1:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.network.NetworkConnector:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:boolean removeNetworkConnector(java.lang.String)",
            "org.apache.activemq.broker.jmx.NetworkConnectorView:void stop()",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.TransportServerFilter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportServerFilter:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void disposeTransport()",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.NetworkConnector:void stop()",
            "org.apache.activemq.transport.InactivityMonitor:void stop()",
            "org.apache.activemq.transport.TransportFilter:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport:void stop()",
            "org.apache.activemq.transport.mock.MockTransport:void stop()",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.xbean.PooledBrokerFactoryBean:void afterPropertiesSet()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addConnector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ConnectorView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void storeState(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void start()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void close()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void setMark(org.apache.activemq.kaha.impl.async.Location,boolean)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location write(org.apache.activemq.util.ByteSequence,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint$3:void process(org.apache.camel.Exchange)",
            "org.apache.activemq.kaha.impl.async.JournalFacade:org.apache.activeio.journal.RecordLocation write(org.apache.activeio.packet.Packet,boolean)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.kaha.impl.async.Location writeCommand(org.apache.activemq.command.DataStructure,boolean)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location write(org.apache.activemq.util.ByteSequence,byte,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:org.apache.activemq.kaha.StoreLocation storeDataItem(org.apache.activemq.kaha.Marshaller,java.lang.Object)",
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:void force()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.usage.SystemUsage,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.kaha.Store)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl$1:void <init>(org.apache.activemq.broker.region.DestinationFactoryImpl,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.usage.SystemUsage,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.kaha.Store,org.apache.activemq.command.ActiveMQTempDestination)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.broker.region.TempQueueRegion$1:void <init>(org.apache.activemq.broker.region.TempQueueRegion,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.usage.SystemUsage,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.kaha.Store,org.apache.activemq.command.ActiveMQTempDestination)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl$2:void <init>(org.apache.activemq.broker.region.DestinationFactoryImpl,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.command.ActiveMQTempDestination)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.memory.CacheEvictionUsageListener:void <init>(org.apache.activemq.usage.Usage,int,int,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.amq.AMQMessageStore:void <init>(org.apache.activemq.store.amq.AMQPersistenceAdapter,org.apache.activemq.store.ReferenceStore,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void <init>(org.apache.activemq.store.amq.AMQPersistenceAdapter,org.apache.activemq.store.TopicReferenceStore,org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void <init>(org.apache.activeio.journal.Journal,org.apache.activemq.store.PersistenceAdapter,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapterFactory:org.apache.activemq.store.PersistenceAdapter createPersistenceAdapter()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.failover.FailoverTransport createTransport(java.util.Map)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.fanout.FanoutTransport createTransport(java.util.Map)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void fireServiceAddEvent(org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$RemoteBrokerData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processAlive(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void serviceAdded(javax.jmdns.ServiceEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:void processInboundConnection(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportServer$1:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.jmx.ProxyConnectorView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.jmx.JmsConnectorView:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser$1:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession$2$1:void run()",
            "org.apache.activemq.ActiveMQSessionExecutor:void dispatch(org.apache.activemq.command.MessageDispatch)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSessionExecutor:void execute(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSessionExecutor:boolean iterate()"
        ]
    },
    "org.apache.activemq.TransactionContext:void beforeEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void commit()",
            "org.apache.activemq.TransactionContext:void end(javax.transaction.xa.Xid,int)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$1:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void acknowledge()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.util.ServiceStopper:void run(org.apache.activemq.util.Callback)",
            "org.apache.activemq.util.TransactionTemplate:void run(org.apache.activemq.util.Callback)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpBufferedOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQBytesMessage$1:void write(int)"
        ]
    },
    "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI,java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.Transport createRemoteTransport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.Transport access$000(org.apache.activemq.proxy.ProxyConnector)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)",
            "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI,java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI,java.util.concurrent.Executor)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.ft.MasterConnector:void start()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()",
            "org.apache.activemq.network.NetworkConnector:org.apache.activemq.transport.Transport createLocalTransport()"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory$1:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI)",
            "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.jaas.PropertiesLoginModule:boolean commit()",
            "org.apache.activemq.jaas.TextFileCertificateLoginModule:java.lang.String getUserNameForCertificates(java.security.cert.X509Certificate[])",
            "org.apache.activemq.jaas.TextFileCertificateLoginModule:java.util.Set getUserGroups(java.lang.String)",
            "org.apache.activemq.jndi.JNDIReferenceFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.activemq.jndi.JNDIReferenceFactory:javax.naming.Reference createReference(java.lang.String,org.apache.activemq.jndi.JNDIStorableInterface)"
        ]
    },
    "org.apache.activemq.ActiveMQSessionExecutor:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSessionExecutor:void wakeup()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.InactiveDurableSubscriptionView:javax.management.openmbean.CompositeData[] browse()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.ComparisonExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.AbstractSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.broker.region.Queue$6:boolean evaluate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.virtual.FilteredDestination:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.ComparisonExpression$LikeExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.AbstractSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.broker.region.Queue$6:boolean evaluate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.virtual.FilteredDestination:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.LogicExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.AbstractSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.broker.region.Queue$6:boolean evaluate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.virtual.FilteredDestination:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression$BooleanUnaryExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.AbstractSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.broker.region.Queue$6:boolean evaluate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.virtual.FilteredDestination:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$6:boolean evaluate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.FilteredDestination:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl$1:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TempQueueRegion$1:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:boolean recoverMessage(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void doDispatch(java.util.List)",
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void doDispatch(java.util.List)",
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void doDispatch(java.util.List)",
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:org.apache.activemq.command.Message[] browse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.DestinationFilter:org.apache.activemq.command.Message[] browse()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean copyMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean copyMessageTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean moveMessageTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean moveMessageTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String,int)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$2:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:boolean recoverMessage(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void sendMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$4:void afterCommit()",
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void sendMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void sendMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.command.NetworkBridgeFilter:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.AbstractSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.broker.region.Queue$6:boolean evaluate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.virtual.FilteredDestination:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.command.NetworkBridgeFilter:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.DestinationFilter:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.AbstractSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.broker.region.Queue$6:boolean evaluate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.virtual.FilteredDestination:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.DestinationFilter:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.MessageEvaluationContext:boolean isDropped()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationFilter:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.NoLocalExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.PropertyExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.XPathExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.NoLocalExpression:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.AbstractSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.broker.region.Queue$6:boolean evaluate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.virtual.FilteredDestination:boolean matches(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.NoLocalExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.PropertyExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.amq.AMQMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.amq.AMQMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void safeFillBatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void start()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int size()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:org.apache.activemq.broker.region.MessageReference next()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.Usage$1:void run()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()"
        ]
    },
    "org.apache.activemq.camel.component.JournalEndpoint:void dispatchToConsumer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint$2:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue)",
            "org.apache.activemq.pool.PooledSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue)",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.advisory.ConsumerEventSource:void start()",
            "org.apache.activemq.advisory.ProducerEventSource:void start()",
            "org.apache.activemq.broker.util.CommandAgent:void start()",
            "org.apache.activemq.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()"
        ]
    },
    "org.apache.activemq.pool.PooledConnectionFactory:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorWorker$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.nio.SelectorWorker:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void serviceExceptionAsync(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchSync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:boolean iterate()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void browseDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.Usage$1:void run()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription$3:void run()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.QueueSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void start()",
            "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean,boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void setMessageListener(javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQTopicSession:void setMessageListener(javax.jms.MessageListener)",
            "org.apache.activemq.pool.PooledSession:void close()",
            "org.apache.activemq.pool.PooledSession:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQConnectionConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession$2$1:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void redispatch(org.apache.activemq.ActiveMQDispatcher,org.apache.activemq.MessageDispatchChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.IndirectMessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.broker.region.QueueSubscription$1:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.QueueSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:void purge()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.TransactionContext:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void commit()",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)"
        ]
    },
    "org.apache.activemq.transaction.Transaction:void fireAfterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.LocalTransaction:void commit(boolean)",
            "org.apache.activemq.transaction.XATransaction:void doPostCommit()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue$3:void run()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void acknowledge()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.util.ServiceStopper:void run(org.apache.activemq.util.Callback)",
            "org.apache.activemq.util.TransactionTemplate:void run(org.apache.activemq.util.Callback)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:void commit()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.IndirectMessageReference)",
            "org.apache.activemq.broker.region.QueueSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:void commit()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void stop()",
            "org.apache.activemq.store.journal.JournalMessageStore:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void stop()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void stop()",
            "org.apache.activemq.store.journal.JournalMessageStore:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.ProxyMessageStore:void stop()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void stop()",
            "org.apache.activemq.store.journal.JournalMessageStore:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.DestinationFilter:void dispose(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.DestinationFilter:void dispose(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.Topic:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:int getPendingQueueSize()",
            "org.apache.activemq.broker.region.Queue:java.lang.String toString()",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:int matched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:int size()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:int getMessageCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:int size()",
            "org.apache.activemq.store.ProxyMessageStore:int getMessageCount()",
            "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:int size()",
            "org.apache.activemq.store.ProxyMessageStore:int getMessageCount()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount()",
            "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int getStoreSize()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int getStoreSize()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.QueueSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void acknowledge()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.util.ServiceStopper:void run(org.apache.activemq.util.Callback)",
            "org.apache.activemq.util.TransactionTemplate:void run(org.apache.activemq.util.Callback)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransport:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$3:void run()",
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void addService(javax.jmdns.JmDNS,java.lang.String,java.lang.String)",
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent$1:void run()",
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgent:void start()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)",
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.InactivityMonitor:void readCheck()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.transport.WireFormatNegotiator:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport$1:void onError(org.apache.activemq.transport.nio.SelectorSelection,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)",
            "org.apache.activemq.ActiveMQXAConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)",
            "org.apache.activemq.camel.CamelConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void <init>(org.apache.activemq.broker.TransportConnector,org.apache.activemq.transport.Transport,org.apache.activemq.broker.Broker,org.apache.activemq.thread.TaskRunnerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:org.apache.activemq.broker.Connection createConnection(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.broker.jmx.ManagedTransportConnection:void <init>(org.apache.activemq.broker.TransportConnector,org.apache.activemq.transport.Transport,org.apache.activemq.broker.Broker,org.apache.activemq.thread.TaskRunnerFactory,javax.management.MBeanServer,javax.management.ObjectName)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void <init>(org.apache.activemq.broker.MutableBrokerFilter,org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:void setTransportListener(org.apache.activemq.transport.TransportListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)",
            "org.apache.activemq.broker.TransportConnection:void <init>(org.apache.activemq.broker.TransportConnector,org.apache.activemq.transport.Transport,org.apache.activemq.broker.Broker,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.ft.MasterBroker:void <init>(org.apache.activemq.broker.MutableBrokerFilter,org.apache.activemq.transport.Transport)",
            "org.apache.activemq.broker.ft.MasterConnector:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void setTransportListener(org.apache.activemq.transport.TransportListener)",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.mock.MockTransport:void setTransportListener(org.apache.activemq.transport.TransportListener)",
            "org.apache.activemq.transport.mock.MockTransport:void install(org.apache.activemq.transport.TransportFilter)",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void setTransportListener(org.apache.activemq.transport.TransportListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)",
            "org.apache.activemq.broker.TransportConnection:void <init>(org.apache.activemq.broker.TransportConnector,org.apache.activemq.transport.Transport,org.apache.activemq.broker.Broker,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.ft.MasterBroker:void <init>(org.apache.activemq.broker.MutableBrokerFilter,org.apache.activemq.transport.Transport)",
            "org.apache.activemq.broker.ft.MasterConnector:void start()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void start()",
            "org.apache.activemq.network.ForwardingBridge:void start()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.proxy.ProxyConnection:void start()",
            "org.apache.activemq.transport.TransportFilter:void setTransportListener(org.apache.activemq.transport.TransportListener)",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.mock.MockTransport:void setTransportListener(org.apache.activemq.transport.TransportListener)",
            "org.apache.activemq.transport.mock.MockTransport:void install(org.apache.activemq.transport.TransportFilter)",
            "org.apache.activemq.transport.udp.UdpTransportServer:void doStart()"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:void install(org.apache.activemq.transport.TransportFilter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.Message:int incrementReferenceCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.IndirectMessageReference:void <init>(org.apache.activemq.broker.region.Queue,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.IndirectMessageReference:int incrementReferenceCount()",
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.QueueSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.QueueSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:java.util.LinkedList pageInList(int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.filter.MessageEvaluationContext:org.apache.activemq.command.Message getMessage()",
            "org.apache.activemq.store.journal.JournalMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.memory.UsageManagerCacheFilter:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.usage.MemoryUsage:void enqueueUsage(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQMessageProducer:void onProducerAck(org.apache.activemq.command.ProducerAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processProducerAck(org.apache.activemq.command.ProducerAck)"
        ]
    },
    "org.apache.activemq.command.Message:int decrementReferenceCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.IndirectMessageReference:int decrementReferenceCount()",
            "org.apache.activemq.broker.region.IndirectMessageReference:void drop()",
            "org.apache.activemq.broker.region.Queue$4:void afterCommit()",
            "org.apache.activemq.broker.region.Queue$4:void afterRollback()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.QueueSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.QueueSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.QueueSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription$2:void run()",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void flushToDisk()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void gc()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void dispatched(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void gc()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.filter.MessageEvaluationContext:org.apache.activemq.command.Message getMessage()",
            "org.apache.activemq.filter.MessageEvaluationContext:void clearMessageCache()",
            "org.apache.activemq.store.journal.JournalMessageStore$1:void afterRollback()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeMessage(org.apache.activemq.command.MessageAck,org.apache.activeio.journal.RecordLocation)"
        ]
    },
    "org.apache.activemq.memory.UsageManagerCacheFilter:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "org.apache.activemq.memory.UsageManagerCacheFilter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:void close()"
        ]
    },
    "org.apache.activemq.usage.StoreUsage:void setStore(org.apache.activemq.store.PersistenceAdapter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.SystemUsage:void setStoreUsage(org.apache.activemq.usage.StoreUsage)"
        ]
    },
    "org.apache.activemq.usage.TempUsage:void setStore(org.apache.activemq.kaha.Store)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.SystemUsage:void setTempUsage(org.apache.activemq.usage.TempUsage)"
        ]
    },
    "org.apache.activemq.usage.Usage:void setLimit(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getSystemUsage()",
            "org.apache.activemq.broker.jmx.BrokerView:void setMemoryLimit(long)",
            "org.apache.activemq.broker.jmx.DestinationView:void setMemoryLimit(long)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.region.Queue,org.apache.activemq.kaha.Store)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.region.Topic)"
        ]
    },
    "org.apache.activemq.usage.Usage:void setUsagePortion(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getConsumerSystemUsage()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getProducerSystemUsage()",
            "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.usage.SystemUsage,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.kaha.Store)",
            "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQMessage convertMessage(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.pool.ConnectionPool:void decrementReferenceCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.ConnectionPool$Synchronization:void afterCompletion(int)",
            "org.apache.activemq.pool.PooledConnection:void close()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpBufferedInputStream:void fill()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpBufferedInputStream:int read()",
            "org.apache.activemq.transport.tcp.TcpBufferedInputStream:int readStream(byte[],int,int)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpBufferedInputStream:int readStream(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpBufferedInputStream:int read(byte[],int,int)"
        ]
    },
    "org.apache.activemq.broker.jmx.JmsConnectorView:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:boolean hasMoreElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.jaas.PropertiesLoginModule:boolean commit()",
            "org.apache.activemq.jaas.TextFileCertificateLoginModule:java.lang.String getUserNameForCertificates(java.security.cert.X509Certificate[])",
            "org.apache.activemq.jaas.TextFileCertificateLoginModule:java.util.Set getUserGroups(java.lang.String)",
            "org.apache.activemq.jndi.JNDIReferenceFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.activemq.jndi.JNDIReferenceFactory:javax.naming.Reference createReference(java.lang.String,org.apache.activemq.jndi.JNDIStorableInterface)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueBrowser:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledSession:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void onConsumerControl(org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processConsumerControl(org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void recover()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void recover()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void recover()",
            "org.apache.activemq.ActiveMQTopicSession:void recover()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueSender createSender(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueSender createSender(javax.jms.Queue)",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageProducer createProducer()",
            "org.apache.activemq.pool.PooledSession:org.apache.activemq.ActiveMQQueueSender getQueueSender()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.broker.util.CommandMessageListener:javax.jms.MessageProducer getProducer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandMessageListener:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:org.apache.activemq.ActiveMQMessageProducer getMessageProducer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageProducer createProducer()",
            "org.apache.activemq.pool.PooledSession:org.apache.activemq.ActiveMQTopicPublisher getTopicPublisher()"
        ]
    },
    "org.apache.activemq.transaction.LocalTransaction:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.transaction.LocalTransaction:void commit(boolean)"
        ]
    },
    "org.apache.activemq.transaction.XATransaction:void doPostRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:void rollback()"
        ]
    },
    "org.apache.activemq.command.ShutdownInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.TransportStatusDetector:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.UserIDBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.util.TimeStampingBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQMessage)",
            "org.apache.activemq.broker.BrokerBroadcaster:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.BrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.MutableBrokerFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.util.BrokerSupport:void resend(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.MutableBrokerFilter:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.util.LoggingBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.MutableBrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.BrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.MutableBrokerFilter:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.command.MessageAck:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.BrokerService$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void databaseLockKeepAlive()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter$3:void run()"
        ]
    },
    "org.apache.activemq.xbean.PooledBrokerFactoryBean:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()",
            "org.apache.activemq.broker.MutableBrokerFilter:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()",
            "org.apache.activemq.broker.MutableBrokerFilter:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()",
            "org.apache.activemq.broker.BrokerService$2:void stop()",
            "org.apache.activemq.broker.MutableBrokerFilter:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.broker.ft.MasterBroker:void stop()",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()",
            "org.apache.activemq.broker.MutableBrokerFilter:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnection$2:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector$2:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void fireServiceRemovedEvent(org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent$RemoteBrokerData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processDead(java.lang.String)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void serviceRemoved(javax.jmdns.ServiceEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector$1:void bridgeFailed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void fireBridgeFailed()",
            "org.apache.activemq.network.ForwardingBridge:void fireBridgeFailed()"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.MutableBrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.MutableBrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.MutableBrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.ft.MasterBroker:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:boolean removeNetworkConnector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.NetworkConnectorView:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.NetworkConnector$1:void doStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint:void incrementReference()",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.impl.DataManager getDataManager(java.lang.String)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint:void decrementReference()",
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:void close()",
            "org.apache.activemq.kaha.impl.async.JournalFacade:void close()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void setMark(org.apache.activemq.kaha.impl.async.Location,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint:void dispatchToConsumer()",
            "org.apache.activemq.kaha.impl.async.JournalFacade:void setMark(org.apache.activeio.journal.RecordLocation,boolean)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.camel.component.JournalEndpoint$3:void process(org.apache.camel.Exchange)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.async.JournalFacade:org.apache.activeio.journal.RecordLocation write(org.apache.activeio.packet.Packet,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activeio.journal.RecordLocation writeCommand(org.apache.activemq.command.DataStructure,boolean)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.kaha.impl.async.Location writeCommand(org.apache.activemq.command.DataStructure,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.amq.AMQMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.kaha.impl.async.Location writeTraceMessage(java.lang.String,boolean)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void prepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void rollback(org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataManagerFacade:org.apache.activemq.kaha.StoreLocation storeDataItem(org.apache.activemq.kaha.Marshaller,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:org.apache.activemq.kaha.impl.index.IndexItem addRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem writeLast(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem writeFirst(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem insert(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem write(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataManagerFacade:void force()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void force()"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl$1:void <init>(org.apache.activemq.broker.region.DestinationFactoryImpl,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.usage.SystemUsage,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.kaha.Store,org.apache.activemq.command.ActiveMQTempDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueueRegion$1:void <init>(org.apache.activemq.broker.region.TempQueueRegion,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.usage.SystemUsage,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.kaha.Store,org.apache.activemq.command.ActiveMQTempDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl$2:void <init>(org.apache.activemq.broker.region.DestinationFactoryImpl,org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.command.ActiveMQTempDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.MessageStore createMessageStore(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:void <init>(org.apache.activemq.store.amq.AMQPersistenceAdapter,org.apache.activemq.store.TopicReferenceStore,org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapterFactory:org.apache.activemq.store.PersistenceAdapter createPersistenceAdapter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.store.PersistenceAdapter createPersistenceAdapter()",
            "org.apache.activemq.store.PersistenceAdapterFactoryBean:java.lang.Object getObject()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.failover.FailoverTransport createTransport(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)",
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.fanout.FanoutTransport createTransport(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport createTransport(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processAlive(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processData(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer$1:void onCommand(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportSupport:void doConsume(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void transportListenerOnCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.mock.MockTransport:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToActiveMQ(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:void start()",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:void acknowledge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.util.ServiceStopper:void run(org.apache.activemq.util.Callback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.util.TransactionTemplate:void run(org.apache.activemq.util.Callback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.kaha.impl.async.Location doAsyncWrite()",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activeio.journal.RecordLocation checkpoint(org.apache.activemq.util.Callback)"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.Transport access$000(org.apache.activemq.proxy.ProxyConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector$1:void onAccept(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI,java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.transport.Transport createTransport()"
        ]
    },
    "org.apache.activemq.network.NetworkConnector:org.apache.activemq.transport.Transport createLocalTransport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()"
        ]
    },
    "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.MessageTransformerSupport:void copyProperties(javax.jms.Message,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.jaas.PropertiesLoginModule:boolean commit()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jaas.TextFileCertificateLoginModule:java.lang.String getUserNameForCertificates(java.security.cert.X509Certificate[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jaas.CertificateLoginModule:boolean login()"
        ]
    },
    "org.apache.activemq.jaas.TextFileCertificateLoginModule:java.util.Set getUserGroups(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jaas.CertificateLoginModule:boolean login()"
        ]
    },
    "org.apache.activemq.jndi.JNDIReferenceFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jndi.JNDIReferenceFactory:javax.naming.Reference createReference(java.lang.String,org.apache.activemq.jndi.JNDIStorableInterface)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.JNDIBaseStorable:javax.naming.Reference getReference()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.FixedCountSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.QueryBasedSubscriptionRecoveryPolicy:void dispatchInitialMessage(javax.jms.Message,org.apache.activemq.broker.region.Destination,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:boolean matches(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:boolean recoverMessage(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean removeMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String,int)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl$1:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueueRegion$1:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:boolean recoverMessage(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessage(long,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessage(long,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessage(long,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessage(long,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecover(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverSubscription(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:void doRecoverNextMessages(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,long,int,org.apache.activemq.store.jdbc.JDBCMessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:boolean recoverMessage(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DestinationFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void doDispatch(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean copyMessageTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean moveMessageTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$4:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void doAddRecoveredMessage(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.command.NetworkBridgeFilter:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.DestinationFilter:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.filter.NoLocalExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ArithmeticExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.ComparisonExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.LogicExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$3:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl$2:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.Queue:void start()",
            "org.apache.activemq.broker.region.TopicSubscription:void init()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:boolean isEmpty(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean isEmpty(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean hasNext()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:int getPendingQueueSize()",
            "org.apache.activemq.broker.region.Queue:java.lang.String toString()",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:int matched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:int size()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:org.apache.activemq.broker.region.MessageReference next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.MessageReference next()"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:java.util.List doPageIn(boolean)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean hasNext()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()"
        ]
    },
    "org.apache.activemq.camel.component.JournalEndpoint$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue)",
            "org.apache.activemq.pool.PooledSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorWorker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.nio.SelectorWorker:void incrementUseCounter()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.QueueSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription$3:void run()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:void setMessageListener(javax.jms.MessageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:void setMessageListener(javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQTopicSession:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession$2$1:void run()"
        ]
    },
    "org.apache.activemq.transaction.LocalTransaction:void commit(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.transaction.XATransaction:void doPostCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:void commit(boolean)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.LocalTransaction:void commit(boolean)",
            "org.apache.activemq.transaction.XATransaction:void commit(boolean)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFilter:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.QueueSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$1:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$2:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void dispose(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.DestinationFilter:void dispose(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:int getPendingQueueSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.SubscriptionView:int getPendingQueueSize()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:int getPendingQueueSize()",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:java.lang.String toString()",
            "org.apache.activemq.broker.region.QueueSubscription:java.lang.String toString()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:int matched()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:int getPendingQueueSize()",
            "org.apache.activemq.broker.region.TopicSubscription:java.lang.String toString()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:int getPendingQueueSize()",
            "org.apache.activemq.broker.region.Queue:java.lang.String toString()",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:int matched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:int size()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.Queue:void start()",
            "org.apache.activemq.broker.region.TopicSubscription:void init()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor:void readCheck()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor$1:void run()"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorSelection:void onError(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorWorker$1:void run()",
            "org.apache.activemq.transport.nio.SelectorWorker:void run()"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)"
        ]
    },
    "org.apache.activemq.camel.CamelConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.CamelConnectionFactory:org.apache.activemq.camel.CamelConnection createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:org.apache.activemq.broker.Connection createConnection(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector$1$1:void run()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnection:void <init>(org.apache.activemq.broker.TransportConnector,org.apache.activemq.transport.Transport,org.apache.activemq.broker.Broker,org.apache.activemq.thread.TaskRunnerFactory,javax.management.MBeanServer,javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTransportConnector:org.apache.activemq.broker.Connection createConnection(org.apache.activemq.transport.Transport)"
        ]
    },
    "org.apache.activemq.broker.region.IndirectMessageReference:void <init>(org.apache.activemq.broker.region.Queue,org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.MessageReference createMessageReference(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:java.util.LinkedList pageInList(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:org.apache.activemq.broker.region.MessageReference next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.MessageReference next()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:boolean recoverMessage(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.memory.CacheFilter:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.memory.UsageManagerCacheFilter:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processProducerAck(org.apache.activemq.command.ProducerAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ProducerAck:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.region.IndirectMessageReference:int decrementReferenceCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.MessageReference createMessageReference(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.QueueSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.QueueSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.QueueSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription$2:void run()",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void flushToDisk()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.filter.MessageEvaluationContext:org.apache.activemq.command.Message getMessage()",
            "org.apache.activemq.filter.MessageEvaluationContext:void clearMessageCache()"
        ]
    },
    "org.apache.activemq.broker.region.IndirectMessageReference:void drop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.IndirectMessageReference)",
            "org.apache.activemq.broker.region.QueueSubscription$1:void afterCommit()",
            "org.apache.activemq.broker.region.QueueSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.Queue$4:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()",
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()"
        ]
    },
    "org.apache.activemq.broker.region.Topic$4:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void destroy()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void remove()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void remove(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void flushToDisk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void release()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:org.apache.activemq.broker.region.MessageReference next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.MessageReference next()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void gc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void gc()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void gc()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void addMessageLast(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void sendMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addRecoveredMessage(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void dispatched(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void dispatched(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void gc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void gc()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void gc()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void stop()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void clear()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void remove()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void remove(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.filter.MessageEvaluationContext:void clearMessageCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.MessageEvaluationContext:void setMessageReference(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.filter.MessageEvaluationContext:void clear()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore$1:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()",
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void removeMessage(org.apache.activemq.command.MessageAck,org.apache.activeio.journal.RecordLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore$2:void afterCommit()",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.memory.CacheFilter:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:java.lang.Object remove(java.lang.Object)",
            "org.apache.activemq.memory.UsageManagerCacheFilter:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "org.apache.activemq.memory.CacheFilter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:void close()"
        ]
    },
    "org.apache.activemq.usage.SystemUsage:void setStoreUsage(org.apache.activemq.usage.StoreUsage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.usage.SystemUsage:void setTempUsage(org.apache.activemq.usage.TempUsage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getSystemUsage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getConsumerSystemUsage()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getProducerSystemUsage()",
            "org.apache.activemq.broker.jmx.BrokerView:int getMemoryPercentageUsed()",
            "org.apache.activemq.broker.jmx.BrokerView:long getMemoryLimit()",
            "org.apache.activemq.broker.jmx.BrokerView:void setMemoryLimit(long)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void setMemoryLimit(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:void setMemoryLimit(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.region.Queue,org.apache.activemq.kaha.Store)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:void configureQueue(org.apache.activemq.broker.region.Queue,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.region.Topic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:void configureTopic(org.apache.activemq.broker.region.Topic,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.TopicRegion:void configureTopic(org.apache.activemq.broker.region.Topic,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getConsumerSystemUsage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getProducerSystemUsage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQMessage convertMessage(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.pool.PooledConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpBufferedInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.adapter.BlobJDBCAdapter:byte[] doGetMessage(org.apache.activemq.store.jdbc.TransactionContext,long)",
            "org.apache.activemq.store.jdbc.adapter.StreamJDBCAdapter:byte[] getBinaryData(java.sql.ResultSet,int)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpBufferedInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpBufferedInputStream:void fill()",
            "org.apache.activemq.transport.tcp.TcpBufferedInputStream:int readStream(byte[],int,int)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processConsumerControl(org.apache.activemq.command.ConsumerControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ConsumerControl:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueSender createSender(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueSender createSender(javax.jms.Queue)",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageProducer createProducer()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:org.apache.activemq.ActiveMQQueueSender getQueueSender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledSession:javax.jms.QueueSender createSender(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageProducer createProducer()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:org.apache.activemq.ActiveMQTopicPublisher getTopicPublisher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.transaction.XATransaction:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.transaction.XATransaction:void doPrePrepare()"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void start()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void start()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void start()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.MutableBrokerFilter:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.MutableBrokerFilter:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.QueueSubscription:void sendToDLQ(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.MutableBrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$3:void run()",
            "org.apache.activemq.broker.region.Queue$4:void afterCommit()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.BrokerService$2:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()",
            "org.apache.activemq.broker.MutableBrokerFilter:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.ft.MasterBroker:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()",
            "org.apache.activemq.broker.MutableBrokerFilter:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void stop()",
            "org.apache.activemq.broker.BrokerFilter:void stop()",
            "org.apache.activemq.broker.MutableBrokerFilter:void stop()",
            "org.apache.activemq.broker.TransactionBroker:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processDead(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processData(java.lang.String)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doExpireOldServices()"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DiscoveryNetworkConnector$1:void bridgeFailed()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:void fireBridgeFailed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteException(java.lang.Throwable)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalException(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void fireBridgeFailed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalException(java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.MutableBrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.camel.component.JournalEndpoint:void incrementReference()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint$3:void process(org.apache.camel.Exchange)",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.impl.DataManager getDataManager(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()"
        ]
    },
    "org.apache.activemq.camel.component.JournalEndpoint:void decrementReference()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint$3:void process(org.apache.camel.Exchange)",
            "org.apache.activemq.camel.component.JournalEndpoint:void deactivateConsumer(org.apache.camel.impl.DefaultConsumer)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataManagerFacade:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void close()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.JournalFacade:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.JournalFacade:void setMark(org.apache.activeio.journal.RecordLocation,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:boolean doCheckpoint()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter$1:boolean iterate()"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activeio.journal.RecordLocation writeCommand(org.apache.activemq.command.DataStructure,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activeio.journal.RecordLocation writeTraceMessage(java.lang.String,boolean)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void prepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void rollback(org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void deleteAllMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void deleteAllMessages()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.kaha.impl.async.Location writeTraceMessage(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:void prepare(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:int prepare()"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.LocalTransaction:void commit(boolean)",
            "org.apache.activemq.transaction.XATransaction:void commit(boolean)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:void rollback(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.LocalTransaction:void rollback()",
            "org.apache.activemq.transaction.XATransaction:void rollback()"
        ]
    },
    "org.apache.activemq.kaha.impl.IndexRootContainer:org.apache.activemq.kaha.impl.index.IndexItem addRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem writeLast(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry internalAddLast(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem writeFirst(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry internalAddFirst(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem insert(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:void add(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem internalAdd(int,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem write(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry place(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void force()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void commitTransaction(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void checkpoint(boolean)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.MessageStore createMessageStore(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()",
            "org.apache.activemq.store.amq.AMQTxOperation:boolean replay(org.apache.activemq.store.amq.AMQPersistenceAdapter,org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.MessageStore createMessageStore(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.MessageStore createMessageStore(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker getBroker()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.store.PersistenceAdapter createPersistenceAdapter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.store.PersistenceAdapter getPersistenceAdapter()"
        ]
    },
    "org.apache.activemq.store.PersistenceAdapterFactoryBean:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.discovery.DiscoveryTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)",
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport createTransport(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)",
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processData(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void run()"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.kaha.impl.async.Location doAsyncWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore:void asyncWrite()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activeio.journal.RecordLocation checkpoint(org.apache.activemq.util.Callback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activeio.journal.RecordLocation checkpoint()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activeio.journal.RecordLocation checkpoint()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.transport.Transport createTransport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQSslConnectionFactory:org.apache.activemq.transport.Transport createTransport()"
        ]
    },
    "org.apache.activemq.MessageTransformerSupport:void copyProperties(javax.jms.Message,javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jaas.CertificateLoginModule:boolean login()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jndi.JNDIBaseStorable:javax.naming.Reference getReference()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.policy.FixedCountSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:boolean removeMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean removeMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String,int)",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessagePull(org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.store.ProxyMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DestinationFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Queue:void sendMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:void pageInMessages()"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl$2:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DestinationFilter:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DestinationFilter:void start()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.Queue:void start()",
            "org.apache.activemq.broker.region.TopicSubscription:void init()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:boolean isEmpty(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:boolean isEmpty(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean isEmpty(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean hasNext()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:boolean hasNext()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.MessageReference next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.MessageReference next()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.MessageReference next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.MessageReference next()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:java.util.List doPageIn(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void start()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:void pageInMessages(boolean)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorWorker:void incrementUseCounter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorSelection:void <init>(org.apache.activemq.transport.nio.SelectorWorker,java.nio.channels.SocketChannel,org.apache.activemq.transport.nio.SelectorManager$Listener)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.BrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.MutableBrokerFilter:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.transaction.XATransaction:void commit(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.LocalTransaction:void commit(boolean)",
            "org.apache.activemq.transaction.XATransaction:void commit(boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.SubscriptionView:int getPendingQueueSize()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:int getPendingQueueSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.SubscriptionView:int getPendingQueueSize()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:java.lang.String toString()"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.QueueSubscription:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)"
        ]
    },
    "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.ContainerId:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int indexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int lastIndexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean removeValue(java.lang.Object)",
            "org.apache.activemq.pool.ConnectionKey:boolean isEqual(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:java.lang.String toString()",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:int hashCode()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.String toString()",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void addExpressionListner(org.apache.activemq.filter.Expression,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.String toString()",
            "org.apache.activemq.filter.UnaryExpression:java.lang.String toString()",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.ContainerId:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int indexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int lastIndexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean removeValue(java.lang.Object)",
            "org.apache.activemq.pool.ConnectionKey:boolean isEqual(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.ContainerId:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int indexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int lastIndexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean removeValue(java.lang.Object)",
            "org.apache.activemq.pool.ConnectionKey:boolean isEqual(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:javax.naming.Context getInitialContext(java.util.Hashtable)"
        ]
    },
    "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:javax.naming.Context getInitialContext(java.util.Hashtable)"
        ]
    },
    "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSEndpointStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)",
            "org.apache.activemq.management.JMSSessionStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)"
        ]
    },
    "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperty(java.lang.Object,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.TypeConversionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:int getPendingQueueSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.SubscriptionView:int getPendingQueueSize()"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.InactivityMonitor$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.camel.CamelConnectionFactory:org.apache.activemq.camel.CamelConnection createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.CamelConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnector:org.apache.activemq.broker.Connection createConnection(org.apache.activemq.transport.Transport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector$1$1:void run()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.MessageReference createMessageReference(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.command.ProducerAck:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void remove()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void remove()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void remove(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void remove(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void remove(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void remove(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void release()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void release()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void onUsageChanged(org.apache.activemq.usage.Usage,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.Usage$1:void run()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.Queue:void stop()",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void gc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void gc()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void gc()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.Queue:void stop()",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void gc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void gc()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void gc()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void dispatched(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void dispatched(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.Queue:void stop()",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void clear()"
        ]
    },
    "org.apache.activemq.filter.MessageEvaluationContext:void setMessageReference(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue$6:boolean evaluate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void doDispatch(java.util.List)",
            "org.apache.activemq.broker.region.Topic$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.filter.MessageEvaluationContext:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:boolean addRecoveredMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.Queue:void doDispatch(java.util.List)",
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore$2:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:int getMemoryPercentageUsed()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:long getMemoryLimit()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl:void configureQueue(org.apache.activemq.broker.region.Queue,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl:void configureTopic(org.apache.activemq.broker.region.Topic,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:void configureTopic(org.apache.activemq.broker.region.Topic,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.DestinationInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.command.ConsumerControl:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.QueueSender createSender(javax.jms.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.QueueSender createSender(javax.jms.Queue)",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageProducer createProducer()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageProducer createProducer()"
        ]
    },
    "org.apache.activemq.transaction.XATransaction:void doPrePrepare()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:void commit(boolean)",
            "org.apache.activemq.transaction.XATransaction:int prepare()"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.MutableBrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$3:void run()",
            "org.apache.activemq.broker.region.Queue$4:void afterCommit()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.MutableBrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.region.RegionBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.MutableBrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$3:void run()",
            "org.apache.activemq.broker.region.Queue$4:void afterCommit()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.BrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.MutableBrokerFilter:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue$2:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue$3:void run()",
            "org.apache.activemq.broker.region.Queue$4:void afterCommit()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.Topic$3:void run()",
            "org.apache.activemq.broker.region.Topic$4:void afterCommit()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doExpireOldServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doTimeKeepingServices()"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge:void serviceLocalException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.ForwardingBridge$1:void onException(java.io.IOException)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.kaha.MapContainer getMapReferenceContainer(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:org.apache.activemq.kaha.ListContainer getDiskList()",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean doesMapContainerExist(java.lang.Object,java.lang.String)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getMapContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean doesListContainerExist(java.lang.Object,java.lang.String)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getListContainerIds()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()"
        ]
    },
    "org.apache.activemq.camel.component.JournalEndpoint:void deactivateConsumer(org.apache.camel.impl.DefaultConsumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint$1:void stop()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void stop()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void stop()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:boolean doCheckpoint()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$1:boolean iterate()"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter$1:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activeio.journal.RecordLocation writeTraceMessage(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore:void prepare(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:int prepare()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.LocalTransaction:void commit(boolean)",
            "org.apache.activemq.transaction.XATransaction:void commit(boolean)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore:void rollback(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.LocalTransaction:void rollback()",
            "org.apache.activemq.transaction.XATransaction:void rollback()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void deleteAllMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.transaction.XATransaction:int prepare()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry internalAddLast(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:void addLast(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry placeLast(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry internalAddFirst(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:void addFirst(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry placeFirst(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:void add(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object set(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void addTreeEntry(int,org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem internalAdd(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerListIterator:void add(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem internalSet(int,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerRegistry:void bind(java.lang.String,org.apache.activemq.broker.BrokerService)",
            "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState registerConnectionState(org.apache.activemq.command.ConnectionId,org.apache.activemq.broker.TransportConnectionState)",
            "org.apache.activemq.broker.TransactionBroker:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.ProducerBrokerExchange getProducerBrokerExchange(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.ConsumerBrokerExchange getConsumerBrokerExchange(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerDestination(javax.management.ObjectName,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.jmx.DestinationView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addInactiveSubscription(org.apache.activemq.util.SubscriptionKey,org.apache.activemq.command.SubscriptionInfo)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$ByteMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$MapMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$MessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$TextMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:void <clinit>()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:void put(java.lang.String,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map,org.apache.activemq.command.ProducerId,java.util.Set)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printSubscribers(java.io.PrintWriter,java.util.Map,java.util.Map,java.lang.String,javax.management.ObjectName[])",
            "org.apache.activemq.command.ActiveMQMapMessage:void put(java.lang.String,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage:void <clinit>()",
            "org.apache.activemq.command.Message:void setProperty(java.lang.String,java.lang.Object)",
            "org.apache.activemq.command.WireFormatInfo:void setProperty(java.lang.String,java.lang.Object)",
            "org.apache.activemq.filter.DestinationMapNode:org.apache.activemq.filter.DestinationMapNode getChildOrCreate(java.lang.String)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void addExpressionListner(org.apache.activemq.filter.Expression,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression addToCache(org.apache.activemq.filter.Expression)",
            "org.apache.activemq.filter.PropertyExpression:void <clinit>()",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ReadOnlyContext:java.util.Map internalBind(java.lang.String,java.lang.Object)",
            "org.apache.activemq.kaha.impl.IndexRootContainer:void <init>(org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.impl.DataManager)",
            "org.apache.activemq.kaha.impl.IndexRootContainer:org.apache.activemq.kaha.impl.index.IndexItem addRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.impl.DataManager getDataManager(java.lang.String)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.impl.index.IndexManager getIndexManager(org.apache.activemq.kaha.impl.DataManager,java.lang.String)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void start()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.DataFile allocateLocation(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:org.apache.activemq.kaha.impl.async.DataFileAccessor openDataFileAccessor(org.apache.activemq.kaha.impl.async.DataFile)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.Location storeItem(org.apache.activemq.util.ByteSequence,byte,boolean)",
            "org.apache.activemq.kaha.impl.container.ContainerMapEntry:java.lang.Object setValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void putAll(java.util.Map)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void <init>(java.io.File,java.lang.String,java.util.concurrent.atomic.AtomicLong)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:org.apache.activemq.kaha.impl.data.DataFile createAndAddDataFile(int)",
            "org.apache.activemq.kaha.impl.index.VMIndex:void store(java.lang.Object,org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.management.StatsImpl:void addStatistic(java.lang.String,org.apache.activemq.management.StatisticImpl)",
            "org.apache.activemq.memory.MapCache:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Short addToMarshallCache(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.pool.ConnectionPool:javax.jms.Session createSession(boolean,int)",
            "org.apache.activemq.pool.PooledConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.security.SimpleAuthenticationPlugin:void setUsers(java.util.List)",
            "org.apache.activemq.state.SessionState:void addProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.state.SessionState:void addConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.store.amq.AMQMessageStore:void addMessage(org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void addInProgressDataFile(org.apache.activemq.store.amq.AMQMessageStore,int)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void prepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void replayPrepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.store.amq.AMQTx getTx(org.apache.activemq.command.TransactionId,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:void addMessage(org.apache.activemq.command.Message,org.apache.activeio.journal.RecordLocation)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void prepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void replayPrepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activemq.store.journal.JournalTransactionStore$Tx getTx(java.lang.Object,org.apache.activeio.journal.RecordLocation)",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void stop()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void addInterestInRecordFile(int)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void savePreparedState(java.util.Map)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.kaha.MapContainer addSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.kaha.MapContainer addSubscriberMessageContainer(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void prepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:org.apache.activemq.store.kahadaptor.KahaTransaction getOrCreateTx(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void addMessage(org.apache.activemq.command.MessageId,org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processAlive(java.lang.String,java.lang.String)",
            "org.apache.activemq.transport.discovery.rendezvous.JmDNSFactory:javax.jmdns.JmDNS create(java.net.InetAddress)",
            "org.apache.activemq.transport.reliable.DefaultReplayBuffer:void addBuffer(int,java.lang.Object)",
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromMessageToFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.transport.stomp.FrameTranslator)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompBegin(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.StompSubscription:void onMessageDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.transport.udp.DatagramHeaderMarshaller:org.apache.activemq.command.Endpoint getEndpoint(java.net.SocketAddress)",
            "org.apache.activemq.transport.udp.UdpTransportServer:void processInboundConnection(org.apache.activemq.command.Command)",
            "org.apache.activemq.util.ClassLoading:void <clinit>()",
            "org.apache.activemq.util.IntrospectionSupport:boolean getProperties(java.lang.Object,java.util.Map,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry place(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.kaha.StoreEntry add(org.apache.activemq.store.kahadaptor.ConsumerMessageRef)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void commitTransaction(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void commitTransaction(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.util.TransactionTemplate:void run(org.apache.activemq.util.Callback)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void checkpoint(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void checkpoint(boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTxOperation:boolean replay(org.apache.activemq.store.amq.AMQPersistenceAdapter,org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.MessageStore createMessageStore(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.MessageStore createMessageStore(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker getBroker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector addConnector(java.net.URI)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector addConnector(org.apache.activemq.transport.TransportServer)",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.jmx.BrokerView getAdminView()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext getAdminConnectionContext()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext createAdminConnectionContext()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.jmx.BrokerView:void gc()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.store.PersistenceAdapter getPersistenceAdapter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getSystemUsage()",
            "org.apache.activemq.broker.BrokerService:void deleteAllMessages()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker addInterceptors(org.apache.activemq.broker.Broker)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStart()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:void asyncWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore$1:boolean iterate()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activeio.journal.RecordLocation checkpoint()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:org.apache.activeio.journal.RecordLocation call()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activeio.journal.RecordLocation checkpoint()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:org.apache.activeio.journal.RecordLocation call()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$5:org.apache.activeio.journal.RecordLocation call()"
        ]
    },
    "org.apache.activemq.ActiveMQSslConnectionFactory:org.apache.activemq.transport.Transport createTransport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void recoverRetroactiveMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:boolean removeMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessagePull(org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessagePull(org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessagePull(org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.MessagePull:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void pageInMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)",
            "org.apache.activemq.command.RemoveInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.region.RegionBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFilter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DestinationFilter:void start()"
        ]
    },
    "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.MutableBrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorSelection:void <init>(org.apache.activemq.transport.nio.SelectorWorker,java.nio.channels.SocketChannel,org.apache.activemq.transport.nio.SelectorManager$Listener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.SelectorManager:org.apache.activemq.transport.nio.SelectorSelection register(java.nio.channels.SocketChannel,org.apache.activemq.transport.nio.SelectorManager$Listener)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.ContainerId:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int indexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int lastIndexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean removeValue(java.lang.Object)",
            "org.apache.activemq.pool.ConnectionKey:boolean isEqual(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.kaha.ContainerId:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.kaha.ContainerId:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int indexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int lastIndexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean removeValue(java.lang.Object)",
            "org.apache.activemq.pool.ConnectionKey:boolean isEqual(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.kaha.ContainerId:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int indexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int lastIndexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean removeValue(java.lang.Object)",
            "org.apache.activemq.pool.ConnectionKey:boolean isEqual(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.openwire.tool.CSourcesGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void removeListener(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.BrokerService:boolean removeConnector(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.broker.BrokerService:boolean removeNetworkConnector(org.apache.activemq.network.NetworkConnector)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.jms.JmsConnector removeJmsConnector(org.apache.activemq.network.jms.JmsConnector)",
            "org.apache.activemq.broker.BrokerService:void removeService(org.apache.activemq.Service)",
            "org.apache.activemq.broker.BrokerService:void unregisterConnectorMBean(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.broker.BrokerService:void unregisterNetworkConnectorMBean(org.apache.activemq.network.NetworkConnector)",
            "org.apache.activemq.broker.region.PrefetchSubscription$2:void afterCommit()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.filter.DestinationMapNode:void remove(java.lang.String[],int,java.lang.Object)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:boolean removeEventListner(java.lang.String,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.management.JMSStatsImpl:void removeConnection(org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.management.PollCountStatisticImpl:void removeChild(org.apache.activemq.management.PollCountStatisticImpl)",
            "org.apache.activemq.memory.CacheEvictionUsageListener:void remove(org.apache.activemq.memory.CacheEvictor)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void removeSubscriberState(org.apache.activemq.command.SubscriptionInfo)",
            "org.apache.activemq.usage.SystemUsage:void removeChild(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.usage.Usage:void removeUsageListener(org.apache.activemq.usage.UsageListener)",
            "org.apache.activemq.usage.Usage:void removeChild(org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:int indexOf(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:int lastIndexOf(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean contains(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean removeValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean remove(java.lang.Object)"
        ]
    },
    "org.apache.activemq.pool.ConnectionKey:boolean isEqual(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.ConnectionKey:boolean equals(org.apache.activemq.pool.ConnectionKey)"
        ]
    },
    "org.apache.activemq.filter.BinaryExpression:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:java.lang.String toString()",
            "org.apache.activemq.filter.BinaryExpression:int hashCode()",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.String toString()",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void addExpressionListner(org.apache.activemq.filter.Expression,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.String toString()",
            "org.apache.activemq.filter.UnaryExpression:java.lang.String toString()",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.ConstantExpression:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:void <init>(org.apache.activemq.filter.MultiExpressionEvaluator,org.apache.activemq.filter.Expression)",
            "org.apache.activemq.kaha.ContainerId:int hashCode()",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:int hash(java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:java.lang.String toString()",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.String toString()",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void addExpressionListner(org.apache.activemq.filter.Expression,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.String toString()",
            "org.apache.activemq.filter.UnaryExpression:java.lang.String toString()",
            "org.apache.activemq.filter.UnaryExpression:int hashCode()",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.MultiExpressionEvaluator:void addExpressionListner(org.apache.activemq.filter.Expression,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.UnaryExpression$4:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:java.lang.String toString()",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.String toString()",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void addExpressionListner(org.apache.activemq.filter.Expression,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.String toString()",
            "org.apache.activemq.filter.UnaryExpression:java.lang.String toString()",
            "org.apache.activemq.filter.UnaryExpression:int hashCode()",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:java.lang.String toString()",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.String toString()",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void addExpressionListner(org.apache.activemq.filter.Expression,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.String toString()",
            "org.apache.activemq.filter.UnaryExpression:java.lang.String toString()",
            "org.apache.activemq.filter.UnaryExpression:int hashCode()",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.jndi.ActiveMQInitialContextFactory:javax.naming.Context getInitialContext(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ActiveMQWASInitialContextFactory:javax.naming.Context getInitialContext(java.util.Hashtable)"
        ]
    },
    "org.apache.activemq.management.JMSEndpointStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSConsumerStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)",
            "org.apache.activemq.management.JMSProducerStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)"
        ]
    },
    "org.apache.activemq.management.JMSSessionStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSConnectionStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)"
        ]
    },
    "org.apache.activemq.util.IntrospectionSupport:boolean setProperty(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.activemq.util.TypeConversionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage$1:void set(org.apache.activemq.command.Message,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage$10:void set(org.apache.activemq.command.Message,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage$2:void set(org.apache.activemq.command.Message,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage$3:void set(org.apache.activemq.command.Message,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage$4:void set(org.apache.activemq.command.Message,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage$5:void set(org.apache.activemq.command.Message,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage$6:void set(org.apache.activemq.command.Message,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage$7:void set(org.apache.activemq.command.Message,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage$8:void set(org.apache.activemq.command.Message,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage$9:void set(org.apache.activemq.command.Message,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage:boolean getBooleanProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:byte getByteProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:short getShortProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:int getIntProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:long getLongProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:float getFloatProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:double getDoubleProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:java.lang.String getStringProperty(java.lang.String)"
        ]
    },
    "org.apache.activemq.camel.CamelConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(org.apache.activemq.transport.Transport,org.apache.activemq.management.JMSStatsImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:org.apache.activemq.ActiveMQConnection createActiveMQConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void release()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void release()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void destroy()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.Queue:void stop()",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.Queue:void stop()",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.Queue:void stop()",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void clear()"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.command.DestinationInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination getMirrorDestination(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.DestinationInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.MutableBrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.region.RegionBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.MutableBrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.region.RegionBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.MutableBrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.region.RegionBroker:void start()",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void start()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.MutableBrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()",
            "org.apache.activemq.broker.region.RegionBroker:void start()"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doTimeKeepingServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void run()"
        ]
    },
    "org.apache.activemq.network.ForwardingBridge$1:void onException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void onException(java.io.IOException)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.TransportFilter:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportLogger:void onException(java.io.IOException)",
            "org.apache.activemq.transport.TransportSupport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.failover.FailoverTransport$2:void onException(java.io.IOException)",
            "org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler:void onException(java.io.IOException)",
            "org.apache.activemq.transport.mock.MockTransport:void onException(java.io.IOException)",
            "org.apache.activemq.transport.reliable.ReliableTransport:void requestReplay(int,int)",
            "org.apache.activemq.transport.vm.VMTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.vm.VMTransport:boolean iterate()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TransactionStore createTransactionStore()",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.MapContainer getSubsMapContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.kaha.MapContainer addSubscriberMessageContainer(java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.kaha.MapContainer getMapReferenceContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.ReferenceStore createQueueReferenceStore(org.apache.activemq.command.ActiveMQQueue)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.TopicReferenceStore createTopicReferenceStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:org.apache.activemq.kaha.ListContainer getDiskList()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:java.util.LinkedList pageInList(int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:int size()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void clear()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void flushToDisk()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.TopicReferenceStore createTopicReferenceStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:boolean doesMapContainerExist(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:boolean doesMapContainerExist(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(org.apache.activemq.kaha.ContainerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getMapContainerIds()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:boolean doesListContainerExist(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:boolean doesListContainerExist(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(org.apache.activemq.kaha.ContainerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getListContainerIds()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.camel.component.JournalEndpoint$1:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$1:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:void addLast(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void flushToDisk()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean add(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry placeLast(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:void addFirst(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry placeFirst(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object set(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void swap(int,org.apache.activemq.memory.buffer.MessageQueue,int,org.apache.activemq.memory.buffer.MessageQueue)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashPageInfo:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void addTreeEntry(int,org.apache.activemq.kaha.impl.index.tree.TreeEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void insertTreeEntry(int,org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerListIterator:void add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(int,java.util.Collection)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem internalSet(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerListIterator:void set(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.BrokerRegistry:void bind(java.lang.String,org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState registerConnectionState(org.apache.activemq.command.ConnectionId,org.apache.activemq.broker.TransportConnectionState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState registerConnectionState(org.apache.activemq.command.ConnectionId,org.apache.activemq.broker.TransportConnectionState)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.BrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.MutableBrokerFilter:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker$1:void recover(org.apache.activemq.command.XATransactionId,org.apache.activemq.command.Message[],org.apache.activemq.command.MessageAck[])",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBeginTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.ProducerBrokerExchange getProducerBrokerExchange(org.apache.activemq.command.ProducerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.ConsumerBrokerExchange getConsumerBrokerExchange(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerDestination(javax.management.ObjectName,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.jmx.DestinationView)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void register(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName registerSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void addInactiveSubscription(org.apache.activemq.util.SubscriptionKey,org.apache.activemq.command.SubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$ByteMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:javax.management.openmbean.CompositeData convert(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$MapMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:javax.management.openmbean.CompositeData convert(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$MessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$ByteMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$MapMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$ObjectMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$StreamMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$TextMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:javax.management.openmbean.CompositeData convert(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:org.apache.activemq.broker.jmx.OpenTypeSupport$OpenTypeFactory getFactory(java.lang.Class)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:javax.management.openmbean.CompositeData convert(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:void <clinit>()",
            "org.apache.activemq.broker.jmx.QueueView:javax.management.openmbean.CompositeData getMessage(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:void put(java.lang.String,org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueSubscription:void assignGroupToMe(org.apache.activemq.broker.region.group.MessageGroupMap,org.apache.activemq.broker.region.MessageReference,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map,org.apache.activemq.command.ProducerId,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printSubscribers(java.io.PrintWriter,java.util.Map,java.util.Map,java.lang.String,javax.management.ObjectName[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void put(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMapMessage:void setBoolean(java.lang.String,boolean)",
            "org.apache.activemq.command.ActiveMQMapMessage:void setByte(java.lang.String,byte)",
            "org.apache.activemq.command.ActiveMQMapMessage:void setShort(java.lang.String,short)",
            "org.apache.activemq.command.ActiveMQMapMessage:void setChar(java.lang.String,char)",
            "org.apache.activemq.command.ActiveMQMapMessage:void setInt(java.lang.String,int)",
            "org.apache.activemq.command.ActiveMQMapMessage:void setLong(java.lang.String,long)",
            "org.apache.activemq.command.ActiveMQMapMessage:void setFloat(java.lang.String,float)",
            "org.apache.activemq.command.ActiveMQMapMessage:void setDouble(java.lang.String,double)",
            "org.apache.activemq.command.ActiveMQMapMessage:void setString(java.lang.String,java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:void setBytes(java.lang.String,byte[])",
            "org.apache.activemq.command.ActiveMQMapMessage:void setBytes(java.lang.String,byte[],int,int)",
            "org.apache.activemq.command.ActiveMQMapMessage:void setObject(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQOutputStream:void close()",
            "org.apache.activemq.ActiveMQSession:javax.jms.Message createMessage()",
            "org.apache.activemq.ActiveMQSession:javax.jms.ObjectMessage createObjectMessage()",
            "org.apache.activemq.ActiveMQSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.NullMessageReference:void <init>()",
            "org.apache.activemq.camel.converter.ActiveMQMessageConverter:org.apache.activemq.command.ActiveMQMessage createActiveMQMessage(org.apache.camel.Exchange)",
            "org.apache.activemq.command.ActiveMQMessage:org.apache.activemq.command.Message copy()",
            "org.apache.activemq.command.ActiveMQMessage:byte[] getJMSCorrelationIDAsBytes()",
            "org.apache.activemq.command.ActiveMQMessage:void setJMSCorrelationIDAsBytes(byte[])",
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)",
            "org.apache.activemq.command.ActiveMQMessage:void <clinit>()",
            "org.apache.activemq.command.ActiveMQObjectMessage:org.apache.activemq.command.Message copy()",
            "org.apache.activemq.command.ActiveMQObjectMessage:void <clinit>()",
            "org.apache.activemq.openwire.v1.ActiveMQMessageMarshaller:org.apache.activemq.command.DataStructure createObject()",
            "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:org.apache.activemq.command.DataStructure createObject()",
            "org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller:org.apache.activemq.command.DataStructure createObject()",
            "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:org.apache.activemq.command.DataStructure createObject()",
            "org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller:org.apache.activemq.command.DataStructure createObject()",
            "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:org.apache.activemq.command.DataStructure createObject()"
        ]
    },
    "org.apache.activemq.command.Message:void setProperty(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:void setProperty(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.WireFormatInfo:void setCacheEnabled(boolean)",
            "org.apache.activemq.command.WireFormatInfo:void setStackTraceEnabled(boolean)",
            "org.apache.activemq.command.WireFormatInfo:void setTcpNoDelayEnabled(boolean)",
            "org.apache.activemq.command.WireFormatInfo:void setSizePrefixDisabled(boolean)",
            "org.apache.activemq.command.WireFormatInfo:void setTightEncodingEnabled(boolean)",
            "org.apache.activemq.command.WireFormatInfo:void seMaxInactivityDuration(long)",
            "org.apache.activemq.command.WireFormatInfo:void setCacheSize(int)"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:org.apache.activemq.filter.DestinationMapNode getChildOrCreate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMapNode:void add(java.lang.String[],int,java.lang.Object)",
            "org.apache.activemq.filter.DestinationMapNode:void remove(java.lang.String[],int,java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.MultiExpressionEvaluator:org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression addToCache(org.apache.activemq.filter.Expression)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.MultiExpressionEvaluator:void addExpressionListner(org.apache.activemq.filter.Expression,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression addToCache(org.apache.activemq.filter.Expression)"
        ]
    },
    "org.apache.activemq.filter.PropertyExpression:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:java.lang.Object getObjectProperty(java.lang.String)",
            "org.apache.activemq.filter.PropertyExpression:void <init>(java.lang.String)",
            "org.apache.activemq.filter.PropertyExpression:void <clinit>()",
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.PropertyExpression variable()"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext:java.util.Map internalBind(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.LazyCreateContext:java.lang.Object lookup(java.lang.String)",
            "org.apache.activemq.jndi.ReadOnlyContext:java.util.Map internalBind(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.IndexRootContainer:void <init>(org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.impl.DataManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.impl.index.IndexManager getIndexManager(org.apache.activemq.kaha.impl.DataManager,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore$1:void onRedoItem(org.apache.activemq.kaha.StoreLocation,java.lang.Object)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.DataFile allocateLocation(org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.Location storeItem(org.apache.activemq.util.ByteSequence,byte,boolean)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:org.apache.activemq.kaha.impl.async.DataFileAccessor openDataFileAccessor(org.apache.activemq.kaha.impl.async.DataFile)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location recoveryCheck(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location getNextLocation(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location getNextLocation(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.Location,boolean)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.util.ByteSequence read(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void update(org.apache.activemq.kaha.impl.async.Location,org.apache.activemq.util.ByteSequence,boolean)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerMapEntry:java.lang.Object setValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.MapTransportConnectionStateRegister:void intialize(org.apache.activemq.broker.TransportConnectionStateRegister)",
            "org.apache.activemq.broker.region.RegionBroker:java.util.Map getDestinationMap()",
            "org.apache.activemq.store.amq.AMQTransactionStore:void setPreparedTransactions(java.util.Map)"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:void <init>(java.io.File,java.lang.String,java.util.concurrent.atomic.AtomicLong)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.impl.DataManager getDataManager(java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:org.apache.activemq.kaha.impl.data.DataFile createAndAddDataFile(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:org.apache.activemq.kaha.impl.data.DataFile findSpaceForData(org.apache.activemq.kaha.impl.data.DataItem)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void addInterestInFile(int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.VMIndex:void store(java.lang.Object,org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void load()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry place(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.management.StatsImpl:void addStatistic(java.lang.String,org.apache.activemq.management.StatisticImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.ConnectionStatistics:void <init>()",
            "org.apache.activemq.broker.region.ConnectorStatistics:void <init>()",
            "org.apache.activemq.broker.region.DestinationStatistics:void <init>()",
            "org.apache.activemq.management.JCAConnectionPoolStatsImpl:void <init>(java.lang.String,java.lang.String,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.BoundedRangeStatisticImpl,org.apache.activemq.management.BoundedRangeStatisticImpl,org.apache.activemq.management.RangeStatisticImpl)",
            "org.apache.activemq.management.JCAConnectionStatsImpl:void <init>(java.lang.String,java.lang.String,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.TimeStatisticImpl)",
            "org.apache.activemq.management.JMSEndpointStatsImpl:void <init>(org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.TimeStatisticImpl)",
            "org.apache.activemq.management.JMSSessionStatsImpl:void <init>(java.util.List,java.util.List)"
        ]
    },
    "org.apache.activemq.memory.MapCache:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:java.lang.Object put(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.memory.list.DestinationBasedMessageList:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:boolean add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:java.lang.Short addToMarshallCache(org.apache.activemq.command.DataStructure)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:int tightMarshalCachedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void looseMarshalCachedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:int tightMarshalCachedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void looseMarshalCachedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:int tightMarshalCachedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void looseMarshalCachedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.pool.ConnectionPool:javax.jms.Session createSession(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnection:javax.jms.Session createSession(boolean,int)"
        ]
    },
    "org.apache.activemq.security.SimpleAuthenticationPlugin:void setUsers(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.SimpleAuthenticationPlugin:void <init>(java.util.List)"
        ]
    },
    "org.apache.activemq.state.SessionState:void addProducer(org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)"
        ]
    },
    "org.apache.activemq.state.SessionState:void addConsumer(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void addInProgressDataFile(org.apache.activemq.store.amq.AMQMessageStore,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore:void addMessage(org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:void replayPrepare(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.store.amq.AMQTx getTx(org.apache.activemq.command.TransactionId,org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQTransactionStore:void addMessage(org.apache.activemq.store.amq.AMQMessageStore,org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void removeMessage(org.apache.activemq.store.amq.AMQMessageStore,org.apache.activemq.command.MessageAck,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void acknowledge(org.apache.activemq.store.amq.AMQTopicMessageStore,org.apache.activemq.command.JournalTopicAck,org.apache.activemq.kaha.impl.async.Location)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void addMessage(org.apache.activemq.command.Message,org.apache.activeio.journal.RecordLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore$1:void afterCommit()",
            "org.apache.activemq.store.journal.JournalMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore:void replayPrepare(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activemq.store.journal.JournalTransactionStore$Tx getTx(java.lang.Object,org.apache.activeio.journal.RecordLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTransactionStore:void addMessage(org.apache.activemq.store.journal.JournalMessageStore,org.apache.activemq.command.Message,org.apache.activeio.journal.RecordLocation)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void removeMessage(org.apache.activemq.store.journal.JournalMessageStore,org.apache.activemq.command.MessageAck,org.apache.activeio.journal.RecordLocation)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void acknowledge(org.apache.activemq.store.journal.JournalTopicMessageStore,org.apache.activemq.command.JournalTopicAck,org.apache.activeio.journal.RecordLocation)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.amq.AMQMessageStore:boolean replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void addInterestInRecordFile(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void addInterest(org.apache.activemq.store.kahadaptor.ReferenceRecord)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void savePreparedState(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.kaha.MapContainer addSubscriberMessageContainer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.kaha.MapContainer addSubscriberMessageContainer(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverState()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void prepare(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:int prepare()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore:org.apache.activemq.store.kahadaptor.KahaTransaction getOrCreateTx(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicSub:void addMessage(org.apache.activemq.command.MessageId,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.JmDNSFactory:javax.jmdns.JmDNS create(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:javax.jmdns.JmDNS createJmDNS()"
        ]
    },
    "org.apache.activemq.transport.reliable.DefaultReplayBuffer:void addBuffer(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.CommandDatagramChannel:void sendWriteBuffer(int,java.net.SocketAddress,java.nio.ByteBuffer,boolean)",
            "org.apache.activemq.transport.udp.CommandDatagramSocket:void sendWriteBuffer(int,java.net.SocketAddress,byte[],boolean)"
        ]
    },
    "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromMessageToFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.transport.stomp.FrameTranslator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.transport.stomp.StompFrame convertMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.transport.udp.DatagramHeaderMarshaller:org.apache.activemq.command.Endpoint getEndpoint(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.DatagramHeaderMarshaller:org.apache.activemq.command.Endpoint createEndpoint(java.nio.ByteBuffer,java.net.SocketAddress)",
            "org.apache.activemq.transport.udp.DatagramHeaderMarshaller:org.apache.activemq.command.Endpoint createEndpoint(java.net.DatagramPacket,java.io.DataInputStream)"
        ]
    },
    "org.apache.activemq.util.ClassLoading:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void setVersion(int)",
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:java.lang.Throwable createThrowable(java.lang.String,java.lang.String)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:java.lang.Throwable createThrowable(java.lang.String,java.lang.String)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:java.lang.Throwable createThrowable(java.lang.String,java.lang.String)",
            "org.apache.activemq.util.ClassLoading:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)",
            "org.apache.activemq.util.ClassLoading:java.lang.String getClassName(java.lang.Class)",
            "org.apache.activemq.util.ClassLoading:java.lang.Class getPrimitiveType(java.lang.String)",
            "org.apache.activemq.util.ClassLoading:java.lang.Class getVMPrimitiveType(java.lang.String)",
            "org.apache.activemq.util.ClassLoading:void <clinit>()",
            "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class load(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.activemq.util.IntrospectionSupport:boolean getProperties(java.lang.Object,java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:void populateProperties(java.util.Properties)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.amq.AMQMessageStore:boolean replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.kaha.StoreEntry add(org.apache.activemq.store.kahadaptor.ConsumerMessageRef)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void acknowledge()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.util.ServiceStopper:void run(org.apache.activemq.util.Callback)",
            "org.apache.activemq.util.TransactionTemplate:void run(org.apache.activemq.util.Callback)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:void commitTransaction(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void commitTransaction(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.util.TransactionTemplate:void run(org.apache.activemq.util.Callback)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector addConnector(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector addConnector(java.lang.String)",
            "org.apache.activemq.broker.DefaultBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector addConnector(org.apache.activemq.transport.TransportServer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.jmx.BrokerView getAdminView()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext getAdminConnectionContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext createAdminConnectionContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.ConnectionContext getAdminConnectionContext()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void gc()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.Broker getRoot()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.broker.region.RegionBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.RegionBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker addInterceptors(org.apache.activemq.broker.Broker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore$1:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:org.apache.activeio.journal.RecordLocation call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:java.lang.Object call()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$5:org.apache.activeio.journal.RecordLocation call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter$5:java.lang.Object call()"
        ]
    },
    "org.apache.activemq.broker.jmx.QueueView:int removeMatchingMessages(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessagePull(org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)"
        ]
    },
    "org.apache.activemq.command.MessagePull:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.RegionBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.RegionBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.MutableBrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.MutableBrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.MessageDispatchNotification:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.transport.nio.SelectorManager:org.apache.activemq.transport.nio.SelectorSelection register(java.nio.channels.SocketChannel,org.apache.activemq.transport.nio.SelectorManager$Listener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOTransport:void initializeStreams()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean containsAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean retainAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.openwire.tool.CSourcesGenerator:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.SingleSourceGenerator:java.lang.Object run()"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void removeListener(org.apache.activemq.broker.Broker)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:boolean removeConnector(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:boolean removeConnector(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:boolean removeNetworkConnector(org.apache.activemq.network.NetworkConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:boolean removeNetworkConnector(java.lang.String)",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.jms.JmsConnector removeJmsConnector(org.apache.activemq.network.jms.JmsConnector)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void removeService(org.apache.activemq.Service)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void setSystemUsage(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.broker.BrokerService:void setConsumerSystemUsage(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.broker.BrokerService:void setProducerSystemUsage(org.apache.activemq.usage.SystemUsage)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void unregisterConnectorMBean(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:boolean removeConnector(org.apache.activemq.broker.TransportConnector)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void unregisterNetworkConnectorMBean(org.apache.activemq.network.NetworkConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:boolean removeNetworkConnector(org.apache.activemq.network.NetworkConnector)",
            "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription$2:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:void remove(java.lang.String[],int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMap:void remove(org.apache.activemq.command.ActiveMQDestination,java.lang.Object)",
            "org.apache.activemq.filter.DestinationMapNode:void remove(java.lang.String[],int,java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.MultiExpressionEvaluator:boolean removeEventListner(java.lang.String,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean removeAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void removeAllTreeEntries(java.util.List)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void removeAllTreeEntries(java.util.List)"
        ]
    },
    "org.apache.activemq.management.JMSStatsImpl:void removeConnection(org.apache.activemq.ActiveMQConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()"
        ]
    },
    "org.apache.activemq.management.PollCountStatisticImpl:void removeChild(org.apache.activemq.management.PollCountStatisticImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.PollCountStatisticImpl:void setParent(org.apache.activemq.management.PollCountStatisticImpl)"
        ]
    },
    "org.apache.activemq.memory.CacheEvictionUsageListener:void remove(org.apache.activemq.memory.CacheEvictor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void removeSubscriberState(org.apache.activemq.command.SubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.usage.SystemUsage:void removeChild(org.apache.activemq.usage.SystemUsage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.SystemUsage:void stop()"
        ]
    },
    "org.apache.activemq.usage.Usage:void removeUsageListener(org.apache.activemq.usage.UsageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void stop()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()",
            "org.apache.activemq.store.journal.JournalMessageStore:void stop()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void stop()"
        ]
    },
    "org.apache.activemq.usage.Usage:void removeChild(org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean retainAll(java.util.Collection)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean retainAll(java.util.Collection)"
        ]
    },
    "org.apache.activemq.pool.ConnectionKey:boolean equals(org.apache.activemq.pool.ConnectionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.ConnectionKey:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.BinaryExpression:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:void <init>(org.apache.activemq.filter.MultiExpressionEvaluator,org.apache.activemq.filter.Expression)",
            "org.apache.activemq.kaha.ContainerId:int hashCode()",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:int hash(java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:void <init>(org.apache.activemq.filter.MultiExpressionEvaluator,org.apache.activemq.filter.Expression)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.MultiExpressionEvaluator:org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression addToCache(org.apache.activemq.filter.Expression)"
        ]
    },
    "org.apache.activemq.kaha.ContainerId:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.ContainerId:int hashCode()",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:int hash(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:int hash(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.impl.index.hash.HashBin getBin(java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:void <init>(org.apache.activemq.filter.MultiExpressionEvaluator,org.apache.activemq.filter.Expression)",
            "org.apache.activemq.kaha.ContainerId:int hashCode()",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:int hash(java.lang.Object)"
        ]
    },
    "org.apache.activemq.jndi.ActiveMQWASInitialContextFactory:javax.naming.Context getInitialContext(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.management.JMSConsumerStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSSessionStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)"
        ]
    },
    "org.apache.activemq.management.JMSProducerStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSSessionStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)"
        ]
    },
    "org.apache.activemq.management.JMSConnectionStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)"
        ]
    },
    "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnectionFactory:boolean buildFromMap(java.util.Map)",
            "org.apache.activemq.ActiveMQInputStream:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean,java.lang.String,int)",
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQMessageProducer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.wireformat.WireFormatFactory createWireFormatFactory(java.util.Map)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompConnect(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:boolean buildFromMap(java.util.Map)",
            "org.apache.activemq.broker.DefaultBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)",
            "org.apache.activemq.broker.PropertiesBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)",
            "org.apache.activemq.command.ActiveMQDestination:void buildFromProperties(java.util.Properties)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.discovery.DiscoveryTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgentFactory:org.apache.activemq.transport.discovery.DiscoveryAgent doCreateDiscoveryAgent(java.net.URI)",
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgentFactory:org.apache.activemq.transport.discovery.DiscoveryAgent doCreateDiscoveryAgent(java.net.URI)",
            "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgentFactory:org.apache.activemq.transport.discovery.DiscoveryAgent doCreateDiscoveryAgent(java.net.URI)",
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.failover.FailoverTransport createTransport(java.util.Map)",
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.fanout.FanoutTransport createTransport(java.util.Map)",
            "org.apache.activemq.transport.mock.MockTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)",
            "org.apache.activemq.transport.peer.PeerTransportFactory$2:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)",
            "org.apache.activemq.transport.stomp.StompSslTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.stomp.StompTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.lang.String,java.net.URI)",
            "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.tcp.TcpTransport:void initialiseSocket(java.net.Socket)",
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.lang.String,java.net.URI)",
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.udp.UdpTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.udp.UdpTransportFactory:org.apache.activemq.transport.Transport configure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map,boolean)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage$1:void set(org.apache.activemq.command.Message,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage$10:void set(org.apache.activemq.command.Message,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage$2:void set(org.apache.activemq.command.Message,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage$3:void set(org.apache.activemq.command.Message,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage$4:void set(org.apache.activemq.command.Message,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage$5:void set(org.apache.activemq.command.Message,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage$6:void set(org.apache.activemq.command.Message,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage$7:void set(org.apache.activemq.command.Message,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage$8:void set(org.apache.activemq.command.Message,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage$9:void set(org.apache.activemq.command.Message,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:boolean getBooleanProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:byte getByteProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:short getShortProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:int getIntProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:long getLongProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:float getFloatProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:double getDoubleProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:java.lang.String getStringProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerBroadcaster:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.Destination getDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.BrokerService:void startDestinations()",
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination getMirrorDestination(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.BrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.MutableBrokerFilter:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.MutableBrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.region.RegionBroker:void start()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void start()",
            "org.apache.activemq.broker.BrokerFilter:void start()",
            "org.apache.activemq.broker.BrokerService:void start()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.MutableBrokerFilter:void start()",
            "org.apache.activemq.broker.TransactionBroker:void start()",
            "org.apache.activemq.broker.region.RegionBroker:void start()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.kaha.MapContainer addSubscriberMessageContainer(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TransactionStore createTransactionStore()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker addInterceptors(org.apache.activemq.broker.Broker)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.MapContainer getSubsMapContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.TopicReferenceStore createTopicReferenceStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.ReferenceStore createQueueReferenceStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void buildReferenceFileIdsInUse()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.TopicReferenceStore createTopicReferenceStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void buildReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverState()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void resetForGC()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:int getPendingQueueSize()",
            "org.apache.activemq.broker.region.Queue:java.lang.String toString()",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:int matched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:int size()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void clear()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.KahaStore:boolean delete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.StoreFactory:boolean delete(java.lang.String)",
            "org.apache.activemq.kaha.StoreFactory:boolean delete(java.io.File)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void deleteAllMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void deleteAllMessages()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void clearMessages()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void deleteAllMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void deleteAllMessages()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:boolean doesMapContainerExist(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(java.lang.Object)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:java.util.Set getDestinations()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void buildReferenceFileIdsInUse()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:boolean doesListContainerExist(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void addSynchronization(org.apache.activemq.transaction.Synchronization)",
            "org.apache.activemq.TransactionContext:void setXid(javax.transaction.xa.Xid)",
            "org.apache.activemq.broker.BrokerBroadcaster:void addListener(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector addConnector(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(org.apache.activemq.network.NetworkConnector)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(org.apache.activemq.proxy.ProxyConnector)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.jms.JmsConnector addJmsConnector(org.apache.activemq.network.jms.JmsConnector)",
            "org.apache.activemq.broker.BrokerService:void setServices(org.apache.activemq.Service[])",
            "org.apache.activemq.broker.BrokerService:void addService(org.apache.activemq.Service)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector registerConnectorMBean(org.apache.activemq.broker.TransportConnector)",
            "org.apache.activemq.broker.BrokerService:void registerNetworkConnectorMBean(org.apache.activemq.network.NetworkConnector)",
            "org.apache.activemq.broker.BrokerService:void registerProxyConnectorMBean(org.apache.activemq.proxy.ProxyConnector)",
            "org.apache.activemq.broker.BrokerService:void registerFTConnectorMBean(org.apache.activemq.broker.ft.MasterConnector)",
            "org.apache.activemq.broker.BrokerService:void registerJmsConnectorMBean(org.apache.activemq.network.jms.JmsConnector)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createBroker()",
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker$1:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:void addItem(java.lang.String,java.lang.String,javax.management.openmbean.OpenType)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:boolean add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.filter.DestinationMapNode:void add(java.lang.String[],int,java.lang.Object)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void addExpressionListner(org.apache.activemq.filter.Expression,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:void closeDataFileReader(org.apache.activemq.kaha.impl.async.DataFileAccessor)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashPageInfo addHashPageInfo(long,int)",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)",
            "org.apache.activemq.management.JMSStatsImpl:void addConnection(org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.management.PollCountStatisticImpl:void addChild(org.apache.activemq.management.PollCountStatisticImpl)",
            "org.apache.activemq.memory.CacheEvictionUsageListener:void add(org.apache.activemq.memory.CacheEvictor)",
            "org.apache.activemq.memory.buffer.MessageQueue:void appendMessages(java.util.List)",
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:org.apache.activemq.memory.buffer.MessageQueue createMessageQueue()",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStart()",
            "org.apache.activemq.network.NetworkConnector:void addExcludedDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.NetworkConnector:void addStaticallyIncludedDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.NetworkConnector:void addDynamicallyIncludedDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.jms.JmsConnector:void addInboundBridge(org.apache.activemq.network.jms.DestinationBridge)",
            "org.apache.activemq.network.jms.JmsConnector:void addOutboundBridge(org.apache.activemq.network.jms.DestinationBridge)",
            "org.apache.activemq.network.jms.JmsConnector:void removeInboundBridge(org.apache.activemq.network.jms.DestinationBridge)",
            "org.apache.activemq.network.jms.JmsConnector:void removeOutboundBridge(org.apache.activemq.network.jms.DestinationBridge)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void processClass(org.codehaus.jam.JClass)",
            "org.apache.activemq.state.ConnectionState:void addTempDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.state.TransactionState:void addCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.store.amq.AMQMessageStore:void removeMessage(org.apache.activemq.command.MessageAck,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.amq.AMQTx:void add(org.apache.activemq.store.amq.AMQMessageStore,org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.amq.AMQTx:void add(org.apache.activemq.store.amq.AMQMessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.amq.AMQTx:void add(org.apache.activemq.store.amq.AMQTopicMessageStore,org.apache.activemq.command.JournalTopicAck)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeMessage(org.apache.activemq.command.MessageAck,org.apache.activeio.journal.RecordLocation)",
            "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:org.apache.activemq.store.amq.AMQTx readPayload(java.io.DataInput)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void addSubscriberState(org.apache.activemq.command.SubscriptionInfo)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void add(org.apache.activemq.store.kahadaptor.KahaMessageStore,org.apache.activemq.command.BaseCommand)",
            "org.apache.activemq.transport.udp.DefaultBufferPool:void returnBuffer(java.nio.ByteBuffer)",
            "org.apache.activemq.usage.SystemUsage:void addChild(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void addUsageListener(org.apache.activemq.usage.UsageListener)",
            "org.apache.activemq.usage.Usage:void addChild(org.apache.activemq.usage.Usage)",
            "org.apache.activemq.usage.Usage:boolean notifyCallbackWhenNotFull(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void swap(int,org.apache.activemq.memory.buffer.MessageQueue,int,org.apache.activemq.memory.buffer.MessageQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void bubbleUp(org.apache.activemq.memory.buffer.MessageQueue,int)",
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void bubbleDown(org.apache.activemq.memory.buffer.MessageQueue,int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPageInfo:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void insertTreeEntry(int,org.apache.activemq.kaha.impl.index.tree.TreeEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry put(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doInsert(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:int doInsertEntry(org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(int,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ContainerListIterator:void set(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState registerConnectionState(org.apache.activemq.command.ConnectionId,org.apache.activemq.broker.TransportConnectionState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void register(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$ObjectMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:javax.management.openmbean.CompositeData convert(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$StreamMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:javax.management.openmbean.CompositeData convert(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport:org.apache.activemq.broker.jmx.OpenTypeSupport$OpenTypeFactory getFactory(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:javax.management.openmbean.CompositeData convert(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.QueueSubscription:void assignGroupToMe(org.apache.activemq.broker.region.group.MessageGroupMap,org.apache.activemq.broker.region.MessageReference,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueSubscription:boolean canDispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.DotFileInterceptorSupport:void generateFile()"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void setBoolean(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void setByte(java.lang.String,byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void setShort(java.lang.String,short)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void setChar(java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void setInt(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void setLong(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void setFloat(java.lang.String,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void setDouble(java.lang.String,double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void setString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void setBytes(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void setBytes(java.lang.String,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void setObject(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.Message createMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.Message createMessage()",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.Message createMessage()",
            "org.apache.activemq.pool.PooledSession:javax.jms.Message createMessage()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.ObjectMessage createObjectMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.ObjectMessage createObjectMessage()",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.ObjectMessage createObjectMessage()",
            "org.apache.activemq.pool.PooledSession:javax.jms.ObjectMessage createObjectMessage()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)",
            "org.apache.activemq.pool.PooledSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)"
        ]
    },
    "org.apache.activemq.broker.region.NullMessageReference:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueMessageReference:void <clinit>()"
        ]
    },
    "org.apache.activemq.camel.converter.ActiveMQMessageConverter:org.apache.activemq.command.ActiveMQMessage createActiveMQMessage(org.apache.camel.Exchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.converter.ActiveMQMessageConverter:org.apache.activemq.command.ActiveMQMessage toMessage(org.apache.camel.Exchange)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:org.apache.activemq.command.Message copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.ActiveMQMessage createActiveMQMessage(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:org.apache.activemq.command.Message configureMessage(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.transport.stomp.StompFrame convertMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:byte[] getJMSCorrelationIDAsBytes()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:void setJMSCorrelationIDAsBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage:void setBooleanProperty(java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.activemq.command.ActiveMQObjectMessage:org.apache.activemq.command.Message copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.ActiveMQMessage createActiveMQMessage(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:org.apache.activemq.command.Message configureMessage(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.transport.stomp.StompFrame convertMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.command.ActiveMQObjectMessage:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQSession:javax.jms.ObjectMessage createObjectMessage()",
            "org.apache.activemq.ActiveMQSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)",
            "org.apache.activemq.camel.converter.ActiveMQMessageConverter:org.apache.activemq.command.ActiveMQMessage createActiveMQMessage(org.apache.camel.Exchange)",
            "org.apache.activemq.command.ActiveMQObjectMessage:org.apache.activemq.command.Message copy()",
            "org.apache.activemq.command.ActiveMQObjectMessage:void <clinit>()",
            "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:org.apache.activemq.command.DataStructure createObject()",
            "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:org.apache.activemq.command.DataStructure createObject()",
            "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:org.apache.activemq.command.DataStructure createObject()"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQMessageMarshaller:org.apache.activemq.command.DataStructure createObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:org.apache.activemq.command.DataStructure createObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller:org.apache.activemq.command.DataStructure createObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:org.apache.activemq.command.DataStructure createObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller:org.apache.activemq.command.DataStructure createObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:org.apache.activemq.command.DataStructure createObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:void setCacheEnabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.openwire.OpenWireFormatFactory:org.apache.activemq.wireformat.WireFormat createWireFormat()"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:void setStackTraceEnabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.openwire.OpenWireFormatFactory:org.apache.activemq.wireformat.WireFormat createWireFormat()"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:void setTcpNoDelayEnabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.openwire.OpenWireFormatFactory:org.apache.activemq.wireformat.WireFormat createWireFormat()"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:void setSizePrefixDisabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.openwire.OpenWireFormatFactory:org.apache.activemq.wireformat.WireFormat createWireFormat()"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:void setTightEncodingEnabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.openwire.OpenWireFormatFactory:org.apache.activemq.wireformat.WireFormat createWireFormat()"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:void seMaxInactivityDuration(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormatFactory:org.apache.activemq.wireformat.WireFormat createWireFormat()"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:void setCacheSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.openwire.OpenWireFormatFactory:org.apache.activemq.wireformat.WireFormat createWireFormat()"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:void add(java.lang.String[],int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMap:void put(org.apache.activemq.command.ActiveMQDestination,java.lang.Object)",
            "org.apache.activemq.filter.DestinationMapNode:void add(java.lang.String[],int,java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:java.lang.Object getObjectProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.advisory.ConsumerEventSource:int extractConsumerCountFromMessage(javax.jms.Message,int)",
            "org.apache.activemq.advisory.ProducerEventSource:int extractProducerCountFromMessage(javax.jms.Message,int)",
            "org.apache.activemq.command.ActiveMQMessage:boolean getBooleanProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:byte getByteProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:short getShortProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:int getIntProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:long getLongProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:float getFloatProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:double getDoubleProperty(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:java.lang.String getStringProperty(java.lang.String)"
        ]
    },
    "org.apache.activemq.filter.PropertyExpression:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:java.lang.Object getObjectProperty(java.lang.String)",
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.PropertyExpression variable()"
        ]
    },
    "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.PropertyExpression variable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression primaryExpr()"
        ]
    },
    "org.apache.activemq.jndi.LazyCreateContext:java.lang.Object lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookup(java.lang.String)",
            "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookup(javax.naming.Name)",
            "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookupLink(java.lang.String)",
            "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration list(java.lang.String)",
            "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration listBindings(java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore$1:void onRedoItem(org.apache.activemq.kaha.StoreLocation,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void recoverRedoItems(org.apache.activemq.kaha.impl.data.RedoListener)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location recoveryCheck(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void start()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location getNextLocation(org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint:void dispatchToConsumer()",
            "org.apache.activemq.kaha.impl.async.JournalFacade:org.apache.activeio.journal.RecordLocation getNextRecordLocation(org.apache.activeio.journal.RecordLocation)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location getNextLocation(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.Location,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location getNextLocation(java.io.File,org.apache.activemq.kaha.impl.async.Location,boolean)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.util.ByteSequence read(org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.component.JournalEndpoint:void dispatchToConsumer()",
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)",
            "org.apache.activemq.kaha.impl.async.JournalFacade:org.apache.activeio.packet.Packet read(org.apache.activeio.journal.RecordLocation)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.command.DataStructure readCommand(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void update(org.apache.activemq.kaha.impl.async.Location,org.apache.activemq.util.ByteSequence,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:void updateItem(org.apache.activemq.kaha.StoreLocation,org.apache.activemq.kaha.Marshaller,java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.MapTransportConnectionStateRegister:void intialize(org.apache.activemq.broker.TransportConnectionStateRegister)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState registerConnectionState(org.apache.activemq.command.ConnectionId,org.apache.activemq.broker.TransportConnectionState)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:java.util.Map getDestinationMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:java.util.Map getDestinationMap()",
            "org.apache.activemq.broker.MutableBrokerFilter:java.util.Map getDestinationMap()",
            "org.apache.activemq.broker.region.RegionBroker:java.util.Map getDestinationMap()"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:void setPreparedTransactions(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:org.apache.activemq.kaha.impl.data.DataFile findSpaceForData(org.apache.activemq.kaha.impl.data.DataItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.data.SyncDataFileWriter:org.apache.activemq.kaha.impl.data.DataItem storeItem(org.apache.activemq.kaha.Marshaller,java.lang.Object,byte)"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:void addInterestInFile(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:void <init>(org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.impl.DataManager)",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()",
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void expressDataInterest()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:void load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:int size()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean isEmpty()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsKey(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object get(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getEntry(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void putAll(java.util.Map)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.util.Set keySet()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.util.Collection values()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.util.Set entrySet()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean removeValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry place(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void remove(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getFirst()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getLast()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getNext(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getPrevious(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry refresh(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object getValue(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object getKey(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TransactionStore createTransactionStore()",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.MapContainer getSubsMapContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.kaha.MapContainer getMapReferenceContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:java.util.Map retrievePreparedState()"
        ]
    },
    "org.apache.activemq.broker.region.ConnectionStatistics:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void <init>(org.apache.activemq.broker.TransportConnector,org.apache.activemq.transport.Transport,org.apache.activemq.broker.Broker,org.apache.activemq.thread.TaskRunnerFactory)"
        ]
    },
    "org.apache.activemq.broker.region.ConnectorStatistics:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:void <init>()"
        ]
    },
    "org.apache.activemq.broker.region.DestinationStatistics:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.usage.SystemUsage,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.kaha.Store)",
            "org.apache.activemq.broker.region.RegionBroker:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationFactory,org.apache.activemq.broker.region.DestinationInterceptor)",
            "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)"
        ]
    },
    "org.apache.activemq.management.JCAConnectionPoolStatsImpl:void <init>(java.lang.String,java.lang.String,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.BoundedRangeStatisticImpl,org.apache.activemq.management.BoundedRangeStatisticImpl,org.apache.activemq.management.RangeStatisticImpl)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.management.JCAConnectionStatsImpl:void <init>(java.lang.String,java.lang.String,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.TimeStatisticImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JCAConnectionPoolStatsImpl:void <init>(java.lang.String,java.lang.String,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.BoundedRangeStatisticImpl,org.apache.activemq.management.BoundedRangeStatisticImpl,org.apache.activemq.management.RangeStatisticImpl)"
        ]
    },
    "org.apache.activemq.management.JMSEndpointStatsImpl:void <init>(org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.TimeStatisticImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSConsumerStatsImpl:void <init>(org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,java.lang.String)",
            "org.apache.activemq.management.JMSEndpointStatsImpl:void <init>()",
            "org.apache.activemq.management.JMSProducerStatsImpl:void <init>(org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,java.lang.String)"
        ]
    },
    "org.apache.activemq.management.JMSSessionStatsImpl:void <init>(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSession:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.SessionId,int,boolean,boolean)"
        ]
    },
    "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:boolean add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:int tightMarshalCachedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.LocalTransactionIdMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageIdMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.NetworkBridgeFilterMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.RemoveInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.RemoveSubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.SessionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.SubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.TransactionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void looseMarshalCachedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.LocalTransactionIdMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.MessageAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.MessageIdMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.NetworkBridgeFilterMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.RemoveInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.RemoveSubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.SessionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.SubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.TransactionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:int tightMarshalCachedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.LocalTransactionIdMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageIdMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessagePullMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.NetworkBridgeFilterMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.RemoveInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.RemoveSubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.SessionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.SubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.TransactionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void looseMarshalCachedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.LocalTransactionIdMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageIdMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessagePullMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.NetworkBridgeFilterMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.RemoveInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.RemoveSubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.SessionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.SubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.TransactionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:int tightMarshalCachedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.LocalTransactionIdMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageIdMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessagePullMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.NetworkBridgeFilterMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.RemoveInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.RemoveSubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.SessionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.TransactionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void looseMarshalCachedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.LocalTransactionIdMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageIdMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessagePullMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.NetworkBridgeFilterMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.RemoveInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.RemoveSubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.SessionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.TransactionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.pool.PooledConnection:javax.jms.Session createSession(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.pool.PooledConnection:javax.jms.QueueSession createQueueSession(boolean,int)",
            "org.apache.activemq.pool.PooledConnection:javax.jms.TopicSession createTopicSession(boolean,int)"
        ]
    },
    "org.apache.activemq.security.SimpleAuthenticationPlugin:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ProducerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ConsumerInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:void addMessage(org.apache.activemq.store.amq.AMQMessageStore,org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:void removeMessage(org.apache.activemq.store.amq.AMQMessageStore,org.apache.activemq.command.MessageAck,org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:void acknowledge(org.apache.activemq.store.amq.AMQTopicMessageStore,org.apache.activemq.command.JournalTopicAck,org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore$1:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore:void addMessage(org.apache.activemq.store.journal.JournalMessageStore,org.apache.activemq.command.Message,org.apache.activeio.journal.RecordLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore:void removeMessage(org.apache.activemq.store.journal.JournalMessageStore,org.apache.activemq.command.MessageAck,org.apache.activeio.journal.RecordLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore:void acknowledge(org.apache.activemq.store.journal.JournalTopicMessageStore,org.apache.activemq.command.JournalTopicAck,org.apache.activeio.journal.RecordLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:boolean replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()",
            "org.apache.activemq.store.amq.AMQTxOperation:boolean replay(org.apache.activemq.store.amq.AMQPersistenceAdapter,org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void addInterest(org.apache.activemq.store.kahadaptor.ReferenceRecord)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void addReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addReferenceFileIdsInUse()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.TopicMessageStore createTopicMessageStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:org.apache.activemq.store.TopicReferenceStore createTopicReferenceStore(org.apache.activemq.command.ActiveMQTopic)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverState()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:javax.jmdns.JmDNS createJmDNS()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:javax.jmdns.JmDNS getJmdns()"
        ]
    },
    "org.apache.activemq.transport.udp.CommandDatagramChannel:void sendWriteBuffer(int,java.net.SocketAddress,java.nio.ByteBuffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.CommandDatagramChannel:void write(org.apache.activemq.command.Command,java.net.SocketAddress)",
            "org.apache.activemq.transport.udp.CommandDatagramChannel:void sendBuffer(int,java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.udp.CommandDatagramSocket:void sendWriteBuffer(int,java.net.SocketAddress,byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.CommandDatagramSocket:void sendWriteBuffer(java.net.SocketAddress,org.apache.activemq.util.ByteArrayOutputStream,int)",
            "org.apache.activemq.transport.udp.CommandDatagramSocket:void sendBuffer(int,java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.udp.DatagramHeaderMarshaller:org.apache.activemq.command.Endpoint createEndpoint(java.nio.ByteBuffer,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.CommandDatagramChannel:org.apache.activemq.command.Command read()"
        ]
    },
    "org.apache.activemq.transport.udp.DatagramHeaderMarshaller:org.apache.activemq.command.Endpoint createEndpoint(java.net.DatagramPacket,java.io.DataInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.CommandDatagramSocket:org.apache.activemq.command.Command read()"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:void setVersion(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void <init>(int)",
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:java.lang.Throwable createThrowable(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:java.lang.Throwable tightUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:java.lang.Throwable looseUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:java.lang.Throwable createThrowable(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:java.lang.Throwable tightUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:java.lang.Throwable looseUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:java.lang.Throwable createThrowable(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:java.lang.Throwable tightUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:java.lang.Throwable looseUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.util.ClassLoading:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void setVersion(int)",
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:java.lang.Throwable createThrowable(java.lang.String,java.lang.String)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:java.lang.Throwable createThrowable(java.lang.String,java.lang.String)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:java.lang.Throwable createThrowable(java.lang.String,java.lang.String)",
            "org.apache.activemq.util.ClassLoading:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)",
            "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class load(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.activemq.util.ClassLoading:java.lang.String getClassName(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.util.ClassLoading:java.lang.Class getPrimitiveType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ClassLoading:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.activemq.util.ClassLoading:java.lang.Class getVMPrimitiveType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ClassLoading:java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class load(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)",
            "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class resolveProxyClass(java.lang.String[])"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:void populateProperties(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.JNDIBaseStorable:java.util.Properties getProperties()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector addConnector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void processHelperProperties()",
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addConnector(java.lang.String)",
            "org.apache.activemq.transport.peer.PeerTransportFactory$2:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.DefaultBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI,boolean)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.lang.String,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.Broker getRoot()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.broker.Broker getRoot()",
            "org.apache.activemq.broker.region.TopicSubscription:void discard(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$4:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter$5:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.MutableBrokerFilter:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.RegionBroker:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)"
        ]
    },
    "org.apache.activemq.command.MessageDispatchNotification:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.transport.nio.NIOTransport:void initializeStreams()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ]
    },
    "org.apache.activemq.openwire.tool.SingleSourceGenerator:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CHeadersGenerator:java.lang.Object run()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void setSystemUsage(org.apache.activemq.usage.SystemUsage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void setConsumerSystemUsage(org.apache.activemq.usage.SystemUsage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void setProducerSystemUsage(org.apache.activemq.usage.SystemUsage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.DestinationMap:void remove(org.apache.activemq.command.ActiveMQDestination,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMap:void remove(org.apache.activemq.command.ActiveMQDestination,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:void removeAllTreeEntries(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void removeAllTreeEntries(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.management.PollCountStatisticImpl:void setParent(org.apache.activemq.management.PollCountStatisticImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.ConnectorStatistics:void setParent(org.apache.activemq.broker.region.ConnectorStatistics)",
            "org.apache.activemq.broker.region.DestinationStatistics:void setParent(org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.management.PollCountStatisticImpl:void <init>(org.apache.activemq.management.PollCountStatisticImpl,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean containsAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean retainAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean removeAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.pool.ConnectionKey:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ComparisonExpression$1:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.kaha.ContainerId:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int indexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int lastIndexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean removeValue(java.lang.Object)",
            "org.apache.activemq.pool.ConnectionKey:boolean isEqual(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.impl.index.hash.HashBin getBin(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:void store(java.lang.Object,org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.StoreEntry get(java.lang.Object)",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.StoreEntry remove(java.lang.Object)"
        ]
    },
    "org.apache.activemq.management.JMSStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:boolean buildFromMap(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:void setBrokerURL(java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:void buildFromProperties(java.util.Properties)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.wireformat.WireFormatFactory createWireFormatFactory(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.wireformat.WireFormat createWireFormat(java.util.Map)",
            "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.lang.String,java.net.URI)",
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.lang.String,java.net.URI)"
        ]
    },
    "org.apache.activemq.command.ActiveMQDestination:void buildFromProperties(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.JNDIBaseStorable:void setProperties(java.util.Properties)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport configure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)"
        ]
    },
    "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgentFactory:org.apache.activemq.transport.discovery.DiscoveryAgent doCreateDiscoveryAgent(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryAgentFactory:org.apache.activemq.transport.discovery.DiscoveryAgent createDiscoveryAgent(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgentFactory:org.apache.activemq.transport.discovery.DiscoveryAgent doCreateDiscoveryAgent(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryAgentFactory:org.apache.activemq.transport.discovery.DiscoveryAgent createDiscoveryAgent(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.discovery.simple.SimpleDiscoveryAgentFactory:org.apache.activemq.transport.discovery.DiscoveryAgent doCreateDiscoveryAgent(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.DiscoveryAgentFactory:org.apache.activemq.transport.discovery.DiscoveryAgent createDiscoveryAgent(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.peer.PeerTransportFactory$2:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI,boolean)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompSslTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport configure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport configure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)"
        ]
    },
    "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.lang.String,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.transport.TransportServer createSslTransportServer(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.TransportServer bind(java.lang.String,java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport configure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)",
            "org.apache.activemq.transport.stomp.StompSslTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void initialiseSocket(java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void connect()"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.lang.String,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.TransportServer bind(java.lang.String,java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport configure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)",
            "org.apache.activemq.transport.stomp.StompTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport configure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportFactory:org.apache.activemq.transport.Transport configure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.lang.String,java.net.URI)",
            "org.apache.activemq.transport.udp.UdpTransportFactory:org.apache.activemq.transport.Transport configure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.CompositeDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.store.MessageStore createQueueMessageStore(org.apache.activemq.command.ActiveMQQueue)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void buildReferenceFileIdsInUse()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void resetForGC()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void resetForGC()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:void resetForGC()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void reset()"
        ]
    },
    "org.apache.activemq.kaha.StoreFactory:boolean delete(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.StoreFactory:boolean delete(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void clearMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.DestinationFactoryImpl:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.Set getDurableDestinations()",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.RegionBroker:java.util.Set getDurableDestinations()"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:java.util.Set getDestinations()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:java.util.Set getDestinations()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:java.util.Set getDestinations()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:java.util.Set getDestinations()"
        ]
    },
    "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.TransactionContext:void addSynchronization(org.apache.activemq.transaction.Synchronization)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void ackLater(org.apache.activemq.command.MessageDispatch,byte)",
            "org.apache.activemq.ActiveMQSession:void run()"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void addListener(org.apache.activemq.broker.Broker)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector addConnector(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector addConnector(java.net.URI)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector addConnector(org.apache.activemq.transport.TransportServer)",
            "org.apache.activemq.broker.BrokerService:void setTransportConnectors(java.util.List)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(org.apache.activemq.network.NetworkConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(java.net.URI)",
            "org.apache.activemq.broker.BrokerService:void setNetworkConnectors(java.util.List)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(org.apache.activemq.proxy.ProxyConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(java.net.URI)",
            "org.apache.activemq.broker.BrokerService:void setProxyConnectors(java.util.List)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.jms.JmsConnector addJmsConnector(org.apache.activemq.network.jms.JmsConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void processHelperProperties()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void setServices(org.apache.activemq.Service[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void addService(org.apache.activemq.Service)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getSystemUsage()",
            "org.apache.activemq.broker.BrokerService:void setSystemUsage(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getConsumerSystemUsage()",
            "org.apache.activemq.broker.BrokerService:void setConsumerSystemUsage(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.usage.SystemUsage getProducerSystemUsage()",
            "org.apache.activemq.broker.BrokerService:void setProducerSystemUsage(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.broker.BrokerService:void processHelperProperties()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector registerConnectorMBean(org.apache.activemq.broker.TransportConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector startTransportConnector(org.apache.activemq.broker.TransportConnector)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void registerNetworkConnectorMBean(org.apache.activemq.network.NetworkConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(org.apache.activemq.network.NetworkConnector)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void registerProxyConnectorMBean(org.apache.activemq.proxy.ProxyConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(org.apache.activemq.proxy.ProxyConnector)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void registerFTConnectorMBean(org.apache.activemq.broker.ft.MasterConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void registerJmsConnectorMBean(org.apache.activemq.network.jms.JmsConnector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.jms.JmsConnector addJmsConnector(org.apache.activemq.network.jms.JmsConnector)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker$1:boolean recoverMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:boolean recoverMessage(org.apache.activemq.store.MessageRecoveryListener,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:void addItem(java.lang.String,java.lang.String,javax.management.openmbean.OpenType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.OpenTypeSupport$ByteMessageOpenTypeFactory:void init()",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$MapMessageOpenTypeFactory:void init()",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$MessageOpenTypeFactory:void init()",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$TextMessageOpenTypeFactory:void init()"
        ]
    },
    "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:boolean add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void dispatch(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:void closeDataFileReader(org.apache.activemq.kaha.impl.async.DataFileAccessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void closeDataFileAccessor(org.apache.activemq.kaha.impl.async.DataFileAccessor)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashPageInfo addHashPageInfo(long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:void addToBin(org.apache.activemq.kaha.impl.index.hash.HashPage)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.impl.index.hash.HashPage getFullPage(long)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage getFullPage(long)"
        ]
    },
    "org.apache.activemq.management.JMSStatsImpl:void addConnection(org.apache.activemq.ActiveMQConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void <init>(org.apache.activemq.transport.Transport,org.apache.activemq.util.IdGenerator,org.apache.activemq.management.JMSStatsImpl)"
        ]
    },
    "org.apache.activemq.management.PollCountStatisticImpl:void addChild(org.apache.activemq.management.PollCountStatisticImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.PollCountStatisticImpl:void setParent(org.apache.activemq.management.PollCountStatisticImpl)"
        ]
    },
    "org.apache.activemq.memory.CacheEvictionUsageListener:void add(org.apache.activemq.memory.CacheEvictor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.memory.buffer.MessageQueue:void appendMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.list.DestinationBasedMessageList:java.util.List getMessages(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:org.apache.activemq.memory.buffer.MessageQueue createMessageQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.list.DestinationBasedMessageList:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.network.NetworkConnector:void addExcludedDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.NetworkConnector:void addStaticallyIncludedDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.NetworkConnector:void addDynamicallyIncludedDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.JmsConnector:void addInboundBridge(org.apache.activemq.network.jms.DestinationBridge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeInboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeInboundTopicBridges()"
        ]
    },
    "org.apache.activemq.network.jms.JmsConnector:void addOutboundBridge(org.apache.activemq.network.jms.DestinationBridge)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeOutboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeOutboundTopicBridges()"
        ]
    },
    "org.apache.activemq.network.jms.JmsConnector:void removeInboundBridge(org.apache.activemq.network.jms.DestinationBridge)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.JmsConnector:void removeOutboundBridge(org.apache.activemq.network.jms.DestinationBridge)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void processClass(org.codehaus.jam.JClass)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.MultiSourceGenerator:java.lang.Object run()"
        ]
    },
    "org.apache.activemq.state.ConnectionState:void addTempDestination(org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.state.TransactionState:void addCommand(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processEndTransaction(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTx:void add(org.apache.activemq.store.amq.AMQMessageStore,org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQTransactionStore:void addMessage(org.apache.activemq.store.amq.AMQMessageStore,org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTx:void add(org.apache.activemq.store.amq.AMQMessageStore,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQTransactionStore:void removeMessage(org.apache.activemq.store.amq.AMQMessageStore,org.apache.activemq.command.MessageAck,org.apache.activemq.kaha.impl.async.Location)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTx:void add(org.apache.activemq.store.amq.AMQTopicMessageStore,org.apache.activemq.command.JournalTopicAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQTransactionStore:void acknowledge(org.apache.activemq.store.amq.AMQTopicMessageStore,org.apache.activemq.command.JournalTopicAck,org.apache.activemq.kaha.impl.async.Location)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:org.apache.activemq.store.amq.AMQTx readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:java.lang.Object readPayload(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void addSubscriberState(org.apache.activemq.command.SubscriptionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransaction:void add(org.apache.activemq.store.kahadaptor.KahaMessageStore,org.apache.activemq.command.BaseCommand)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.transport.udp.DefaultBufferPool:void returnBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.usage.SystemUsage:void addChild(org.apache.activemq.usage.SystemUsage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.SystemUsage:void start()"
        ]
    },
    "org.apache.activemq.usage.Usage:void addUsageListener(org.apache.activemq.usage.UsageListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void start()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void start()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()",
            "org.apache.activemq.store.journal.JournalMessageStore:void start()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.usage.Usage:void addChild(org.apache.activemq.usage.Usage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.usage.Usage:void start()"
        ]
    },
    "org.apache.activemq.usage.Usage:boolean notifyCallbackWhenNotFull(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.usage.Usage:boolean notifyCallbackWhenNotFull(java.lang.Runnable)"
        ]
    },
    "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void bubbleUp(org.apache.activemq.memory.buffer.MessageQueue,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void onSizeChanged(org.apache.activemq.memory.buffer.MessageQueue,int,int)"
        ]
    },
    "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void bubbleDown(org.apache.activemq.memory.buffer.MessageQueue,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void onSizeChanged(org.apache.activemq.memory.buffer.MessageQueue,int,int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void put(org.apache.activemq.kaha.impl.index.hash.HashEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry put(org.apache.activemq.kaha.impl.index.tree.TreeEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void store(java.lang.Object,org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doInsert(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry put(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doInsert(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doInsert(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doRemove(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:int doInsertEntry(org.apache.activemq.kaha.impl.index.tree.TreeEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doInsert(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:void destroySubscription(org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.QueueSubscription:boolean canDispatch(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.view.DotFileInterceptorSupport:void generateFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.Message createMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.Message createMessage()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.Message createMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.Message createMessage()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.Message createMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.Message createMessage()",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.Message createMessage()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.ObjectMessage createObjectMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.ObjectMessage createObjectMessage()"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.ObjectMessage createObjectMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.ObjectMessage createObjectMessage()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.ObjectMessage createObjectMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.ObjectMessage createObjectMessage()",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.ObjectMessage createObjectMessage()"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)",
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.ObjectMessage createObjectMessage(java.io.Serializable)"
        ]
    },
    "org.apache.activemq.broker.region.QueueMessageReference:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.Response pullMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void pullTimeout(long)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void onDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.MessageDispatch createMessageDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void browseDone()",
            "org.apache.activemq.broker.region.QueueMessageReference:void <clinit>()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:boolean isEmpty()"
        ]
    },
    "org.apache.activemq.camel.converter.ActiveMQMessageConverter:org.apache.activemq.command.ActiveMQMessage toMessage(org.apache.camel.Exchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.converter.ActiveMQMessageConverter$1:void process(org.apache.camel.Exchange)"
        ]
    },
    "org.apache.activemq.network.DemandForwardingBridgeSupport:org.apache.activemq.command.Message configureMessage(org.apache.activemq.command.MessageDispatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void setObjectProperty(java.lang.String,java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMessage:void setProperties(java.util.Map)",
            "org.apache.activemq.command.ActiveMQMessage:void setByteProperty(java.lang.String,byte)",
            "org.apache.activemq.command.ActiveMQMessage:void setShortProperty(java.lang.String,short)",
            "org.apache.activemq.command.ActiveMQMessage:void setIntProperty(java.lang.String,int)",
            "org.apache.activemq.command.ActiveMQMessage:void setLongProperty(java.lang.String,long)",
            "org.apache.activemq.command.ActiveMQMessage:void setFloatProperty(java.lang.String,float)",
            "org.apache.activemq.command.ActiveMQMessage:void setDoubleProperty(java.lang.String,double)",
            "org.apache.activemq.command.ActiveMQMessage:void setStringProperty(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:void setBooleanProperty(java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueSubscription:void assignGroupToMe(org.apache.activemq.broker.region.group.MessageGroupMap,org.apache.activemq.broker.region.MessageReference,java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:void setBooleanProperty(java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object unmarshal(org.apache.activemq.util.ByteSequence)",
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object unmarshal(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure tightUnmarsalNestedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure tightUnmarsalCachedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure tightUnmarsalNestedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure tightUnmarsalCachedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure tightUnmarsalNestedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure tightUnmarsalCachedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure looseUnmarsalNestedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure looseUnmarsalCachedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure looseUnmarsalNestedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure looseUnmarsalCachedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure looseUnmarsalNestedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure looseUnmarsalCachedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormatFactory:org.apache.activemq.wireformat.WireFormat createWireFormat()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.wireformat.WireFormat createWireFormat()",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.wireformat.WireFormat createWireFormat(java.util.Map)",
            "org.apache.activemq.transport.tcp.TcpTransportServer:void run()"
        ]
    },
    "org.apache.activemq.filter.DestinationMap:void put(org.apache.activemq.command.ActiveMQDestination,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:void setVirtualDestinations(org.apache.activemq.broker.region.virtual.VirtualDestination[])",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.filter.DestinationMap:void put(org.apache.activemq.command.ActiveMQDestination,java.lang.Object)",
            "org.apache.activemq.filter.DestinationMap:void setEntries(java.util.List)",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.ConsumerEventSource:int extractConsumerCountFromMessage(javax.jms.Message,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.ConsumerEventSource:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.advisory.ProducerEventSource:int extractProducerCountFromMessage(javax.jms.Message,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.ProducerEventSource:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression primaryExpr()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression unaryExpr()"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.LazyCreateContext:java.lang.Object lookup(java.lang.String)",
            "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookup(java.lang.String)",
            "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookup(javax.naming.Name)",
            "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookupLink(java.lang.String)",
            "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration list(java.lang.String)",
            "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration listBindings(java.lang.String)"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookup(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookup(java.lang.String)"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookupLink(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookupLink(javax.naming.Name)"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration list(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration list(java.lang.String)",
            "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration list(javax.naming.Name)"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration listBindings(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration listBindings(java.lang.String)",
            "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration listBindings(javax.naming.Name)"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:void recoverRedoItems(org.apache.activemq.kaha.impl.data.RedoListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void recover(org.apache.activemq.kaha.impl.DataManager)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.JournalFacade:org.apache.activeio.journal.RecordLocation getNextRecordLocation(org.apache.activeio.journal.RecordLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location getNextLocation(java.io.File,org.apache.activemq.kaha.impl.async.Location,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.async.DataManagerFacade:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:void <init>(org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.impl.DataManager)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object getValue(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void load()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object getValue(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object getKey(org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.JournalFacade:org.apache.activeio.packet.Packet read(org.apache.activeio.journal.RecordLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.command.DataStructure readCommand(org.apache.activeio.journal.RecordLocation)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.command.DataStructure readCommand(org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.store.ReferenceStore$ReferenceData)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataManagerFacade:void updateItem(org.apache.activemq.kaha.StoreLocation,org.apache.activemq.kaha.Marshaller,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:void update(org.apache.activemq.kaha.StoreEntry,java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:java.util.Map getDestinationMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:java.util.Map getDestinationMap()",
            "org.apache.activemq.broker.MutableBrokerFilter:java.util.Map getDestinationMap()",
            "org.apache.activemq.broker.region.RegionBroker:java.util.Map getDestinationMap()"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:java.util.Map getDestinationMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:java.util.Map getDestinationMap()",
            "org.apache.activemq.broker.MutableBrokerFilter:java.util.Map getDestinationMap()",
            "org.apache.activemq.broker.region.RegionBroker:java.util.Map getDestinationMap()"
        ]
    },
    "org.apache.activemq.kaha.impl.data.SyncDataFileWriter:org.apache.activemq.kaha.impl.data.DataItem storeItem(org.apache.activemq.kaha.Marshaller,java.lang.Object,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:org.apache.activemq.kaha.StoreLocation storeDataItem(org.apache.activemq.kaha.Marshaller,java.lang.Object)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:org.apache.activemq.kaha.StoreLocation storeRedoItem(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void expressDataInterest()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueRegion:java.lang.String toString()",
            "org.apache.activemq.broker.region.TempQueueRegion:java.lang.String toString()",
            "org.apache.activemq.broker.region.TempTopicRegion:java.lang.String toString()",
            "org.apache.activemq.broker.region.TopicRegion:java.lang.String toString()",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:java.lang.String toString()",
            "org.apache.activemq.filter.DestinationMapNode:int getChildCount()",
            "org.apache.activemq.kaha.impl.container.ContainerCollectionSupport:int size()",
            "org.apache.activemq.memory.MapCache:int size()",
            "org.apache.activemq.openwire.OpenWireFormat:void runMarshallCacheEvictionSweep()",
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Short addToMarshallCache(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.kaha.impl.async.Location doAsyncWrite()",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:int getMessageCount()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:int getMessageCount()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:int size()",
            "org.apache.activemq.store.memory.MemoryMessageStore:int getMessageCount()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.memory.MemoryTopicSub:int size()",
            "org.apache.activemq.transport.reliable.DefaultReplayBuffer:void addBuffer(int,java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.util.Map extractProperties(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveMap(java.util.Map,java.io.DataOutputStream)",
            "org.apache.activemq.util.URISupport:java.lang.String createQueryString(java.util.Map)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.MapTransportConnectionStateRegister:boolean isEmpty()",
            "org.apache.activemq.command.ActiveMQMapMessage:void storeContent()",
            "org.apache.activemq.command.ActiveMQMapMessage:void loadContent()",
            "org.apache.activemq.filter.DestinationMapNode:void pruneIfEmpty()",
            "org.apache.activemq.kaha.impl.container.ContainerCollectionSupport:boolean isEmpty()",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void removeMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void removeMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:boolean isEmpty()",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.store.kahadaptor.ConsumerMessageRef remove(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void removeMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void removeMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.transport.failover.FailoverTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.util.URISupport$CompositeData:java.net.URI toURI()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMapMessage:boolean itemExists(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:boolean propertyExists(java.lang.String)",
            "org.apache.activemq.kaha.impl.IndexRootContainer:org.apache.activemq.kaha.impl.index.IndexItem addRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.IndexRootContainer:boolean doesRootExist(java.lang.Object)",
            "org.apache.activemq.kaha.impl.KahaStore:boolean doesMapContainerExist(java.lang.Object,java.lang.String)",
            "org.apache.activemq.kaha.impl.KahaStore:boolean doesListContainerExist(java.lang.Object,java.lang.String)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.index.VMIndex:boolean containsKey(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompBegin(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)",
            "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService lookup(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:java.lang.Object getPort(java.util.Map)",
            "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(java.lang.String)",
            "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.TransactionBroker:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker:org.apache.activemq.transaction.Transaction getTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.ProducerBrokerExchange getProducerBrokerExchange(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.ConsumerBrokerExchange getConsumerBrokerExchange(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:org.apache.activemq.broker.jmx.OpenTypeSupport$OpenTypeFactory getFactory(java.lang.Class)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination lookup(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.RegionBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean isEmpty(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.command.ConsumerId get(java.lang.String)",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.broker.region.group.MessageGroupSet removeConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:char getChar(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte[] getBytes(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.Object getObject(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:void setObjectProperty(java.lang.String,java.lang.Object,boolean)",
            "org.apache.activemq.command.Message:java.lang.Object getProperty(java.lang.String)",
            "org.apache.activemq.command.WireFormatInfo:java.lang.Object getProperty(java.lang.String)",
            "org.apache.activemq.filter.DestinationMapNode:org.apache.activemq.filter.DestinationMapNode getChild(java.lang.String)",
            "org.apache.activemq.filter.DestinationMapNode:org.apache.activemq.filter.DestinationMapNode getChildOrCreate(java.lang.String)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void addExpressionListner(org.apache.activemq.filter.Expression,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:boolean removeEventListner(java.lang.String,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression addToCache(org.apache.activemq.filter.Expression)",
            "org.apache.activemq.filter.PropertyExpression:void <init>(java.lang.String)",
            "org.apache.activemq.jaas.CertificateLoginModule:void initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)",
            "org.apache.activemq.jaas.LDAPLoginModule:void initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)",
            "org.apache.activemq.jaas.PropertiesLoginModule:void initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)",
            "org.apache.activemq.jaas.TextFileCertificateLoginModule:void initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:java.lang.String[] getConnectionFactoryNames(java.util.Map)",
            "org.apache.activemq.jndi.ReadOnlyContext:java.util.Map internalBind(java.lang.String,java.lang.Object)",
            "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookup(java.lang.String)",
            "org.apache.activemq.kaha.impl.IndexRootContainer:org.apache.activemq.kaha.impl.index.IndexItem getRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.impl.DataManager getDataManager(java.lang.String)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.impl.index.IndexManager getIndexManager(org.apache.activemq.kaha.impl.DataManager,java.lang.String)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.DataFile getDataFile(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:java.io.File getFile(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void addInterestInFile(int)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void removeInterestInFile(int)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFilesNotIn(java.util.Set,java.util.Set)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location getNextLocation(java.io.File,org.apache.activemq.kaha.impl.async.Location,boolean)",
            "org.apache.activemq.kaha.impl.async.DataFileAccessor:org.apache.activemq.util.ByteSequence readRecord(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.DataFileAccessor:void readLocationDetails(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.DataFileAccessor:boolean readLocationDetailsAndValidate(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeDataFileAccessors(org.apache.activemq.kaha.impl.async.DataFile)",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:org.apache.activemq.kaha.impl.async.DataFileAccessor openDataFileAccessor(org.apache.activemq.kaha.impl.async.DataFile)",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void closeDataFileAccessor(org.apache.activemq.kaha.impl.async.DataFileAccessor)",
            "org.apache.activemq.kaha.impl.container.ContainerMapEntry:java.lang.Object getValue()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:org.apache.activemq.kaha.impl.data.DataFile getDataFile(org.apache.activemq.kaha.StoreLocation)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void addInterestInFile(int)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void removeInterestInFile(int)",
            "org.apache.activemq.kaha.impl.index.VMIndex:org.apache.activemq.kaha.StoreEntry get(java.lang.Object)",
            "org.apache.activemq.management.StatsImpl:javax.management.j2ee.statistics.Statistic getStatistic(java.lang.String)",
            "org.apache.activemq.memory.MapCache:java.lang.Object get(java.lang.Object)",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Short getMarshallCacheIndex(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.pool.ConnectionPool:javax.jms.Session createSession(boolean,int)",
            "org.apache.activemq.pool.PooledConnectionFactory:javax.jms.Connection createConnection(java.lang.String,java.lang.String)",
            "org.apache.activemq.security.LDAPAuthorizationMap:void <init>(java.util.Map)",
            "org.apache.activemq.security.SimpleAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.state.SessionState:org.apache.activemq.state.ProducerState getProducerState(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.state.SessionState:org.apache.activemq.state.ConsumerState getConsumerState(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.kaha.impl.async.Location getLocation(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void addInProgressDataFile(org.apache.activemq.store.amq.AMQMessageStore,int)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void removeInProgressDataFile(org.apache.activemq.store.amq.AMQMessageStore,int)",
            "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.store.amq.AMQTx getTx(org.apache.activemq.command.TransactionId,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activemq.store.journal.JournalTransactionStore$Tx getTx(java.lang.Object,org.apache.activeio.journal.RecordLocation)",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:org.apache.activemq.store.ReferenceStore$ReferenceData getMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void addInterestInRecordFile(int)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void removeInterestInRecordFile(int)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:java.util.Map retrievePreparedState()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.store.ReferenceStore$ReferenceData getMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:boolean acknowledgeReference(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:org.apache.activemq.store.kahadaptor.KahaTransaction getTx(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:org.apache.activemq.store.kahadaptor.KahaTransaction getOrCreateTx(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.memory.MemoryMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.wireformat.WireFormatFactory createWireFormatFactory(java.util.Map)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processAlive(java.lang.String,java.lang.String)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void serviceFailed(org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.transport.discovery.rendezvous.JmDNSFactory:javax.jmdns.JmDNS create(java.net.InetAddress)",
            "org.apache.activemq.transport.discovery.rendezvous.JmDNSFactory:boolean onClose(java.net.InetAddress)",
            "org.apache.activemq.transport.reliable.DefaultReplayBuffer:void replayMessages(int,int,org.apache.activemq.transport.reliable.Replayer)",
            "org.apache.activemq.transport.stomp.ProtocolConverter$2$1:void onResponse(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.Response)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.transport.stomp.ResponseHandler createResponseHandler(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommad(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompBegin(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommit(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAbort(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompConnect(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.udp.DatagramHeaderMarshaller:org.apache.activemq.command.Endpoint getEndpoint(java.net.SocketAddress)",
            "org.apache.activemq.transport.udp.UdpTransportServer:void processInboundConnection(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.util.ClassLoading:java.lang.String getClassName(java.lang.Class)",
            "org.apache.activemq.util.ClassLoading:java.lang.Class getPrimitiveType(java.lang.String)",
            "org.apache.activemq.util.ClassLoading:java.lang.Class getVMPrimitiveType(java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:java.util.Map extractProperties(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.MapHelper:int getInt(java.util.Map,java.lang.String,int)",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveMap(java.util.Map,java.io.DataOutputStream)",
            "org.apache.activemq.util.URISupport:java.lang.String createQueryString(java.util.Map)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getEntry(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void removeMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void removeMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.store.kahadaptor.ConsumerMessageRef remove(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.util.Set keySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTopics()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getQueues()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryTopics()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryQueues()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTopicSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getDurableTopicSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getQueueSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryTopicSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryQueueSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getInactiveDurableTopicSubscribers()",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.broker.region.group.MessageGroupSet removeConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.util.Enumeration getMapNames()",
            "org.apache.activemq.command.ActiveMQMessage:java.util.Enumeration getPropertyNames()",
            "org.apache.activemq.kaha.impl.IndexRootContainer:java.util.Set getKeys()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFilesNotIn(java.util.Set,java.util.Set)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:java.util.Set getFiles()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.util.Set buildEntrySet()",
            "org.apache.activemq.management.StatsImpl:java.lang.String[] getStatisticNames()",
            "org.apache.activemq.state.SessionState:java.util.Set getConsumerIds()",
            "org.apache.activemq.state.SessionState:java.util.Set getProducerIds()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:java.util.Set getReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:java.util.Map retrievePreparedState()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:java.util.Map extractProperties(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveMap(java.util.Map,java.io.DataOutputStream)",
            "org.apache.activemq.util.URISupport:java.lang.String createQueryString(java.util.Map)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.util.Collection values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService findFirst()",
            "org.apache.activemq.broker.MapTransportConnectionStateRegister:java.util.List listConnectionStates()",
            "org.apache.activemq.broker.TransactionBroker:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:void stop()",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:void gc()",
            "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.ActiveMQDestination[] getDestinations()",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.filter.DestinationMapNode:java.util.Collection getChildren()",
            "org.apache.activemq.filter.DestinationMapNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.kaha.impl.KahaStore:void close()",
            "org.apache.activemq.kaha.impl.KahaStore:void force()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()",
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void start()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:boolean delete()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFiles()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void clearUsedMark()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeUnused()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void close()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void close()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void force()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:boolean delete()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void consolidateDataFiles()",
            "org.apache.activemq.management.StatsImpl:javax.management.j2ee.statistics.Statistic[] getStatistics()",
            "org.apache.activemq.pool.ConnectionPool:void close()",
            "org.apache.activemq.pool.PooledConnectionFactory:void stop()",
            "org.apache.activemq.state.SessionState:java.util.Collection getProducerStates()",
            "org.apache.activemq.state.SessionState:java.util.Collection getConsumerStates()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void cleanup()",
            "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.kaha.impl.async.Location checkpoint()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activeio.journal.RecordLocation checkpoint()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:java.util.Iterator iterator()",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doExpireOldServices()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.util.Set entrySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.SingleTransportConnectionStateRegister:void intialize(org.apache.activemq.broker.TransportConnectionStateRegister)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void writeLabels(java.io.PrintWriter,java.lang.String,java.lang.String,java.util.Map)",
            "org.apache.activemq.command.ActiveMQMessage:void setProperties(java.util.Map)",
            "org.apache.activemq.jndi.ReadOnlyContext$LocalNamingEnumeration:void <init>(org.apache.activemq.jndi.ReadOnlyContext)",
            "org.apache.activemq.jndi.ReadOnlyContext:java.util.Map internalBind(java.lang.String,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void putAll(java.util.Map)",
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void savePreparedState(java.util.Map)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromMessageToFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.transport.stomp.FrameTranslator)",
            "org.apache.activemq.transport.stomp.StompFrame:java.lang.String toString()",
            "org.apache.activemq.transport.stomp.StompWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerRegistry:void unbind(java.lang.String)",
            "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState unregisterConnectionState(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.TransactionBroker:void removeTransaction(org.apache.activemq.command.XATransactionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.TransportConnection:void removeProducerBrokerExchange(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.TransportConnection:void removeConsumerBrokerExchange(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterDestination(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(javax.management.ObjectName)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.RegionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.region.RegionBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void remove(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.command.ConsumerId removeGroup(java.lang.String)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.command.ActiveMQMapMessage:void setBytes(java.lang.String,byte[])",
            "org.apache.activemq.filter.DestinationMapNode:void removeChild(org.apache.activemq.filter.DestinationMapNode)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:boolean removeEventListner(java.lang.String,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void removeFromCache(org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression)",
            "org.apache.activemq.kaha.impl.IndexRootContainer:void removeRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void forceRemoveDataFile(org.apache.activemq.kaha.impl.async.DataFile)",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeDataFileAccessors(org.apache.activemq.kaha.impl.async.DataFile)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:void processQueue()",
            "org.apache.activemq.kaha.impl.async.NIODataFileAppender:void processQueue()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySetIterator:void remove()",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean removeValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void remove(org.apache.activemq.kaha.impl.index.IndexItem)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry place(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void removeDataFile(org.apache.activemq.kaha.impl.data.DataFile)",
            "org.apache.activemq.kaha.impl.index.VMIndex:org.apache.activemq.kaha.StoreEntry remove(java.lang.Object)",
            "org.apache.activemq.memory.MapCache:java.lang.Object remove(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void runMarshallCacheEvictionSweep()",
            "org.apache.activemq.state.SessionState:org.apache.activemq.state.ProducerState removeProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.state.SessionState:org.apache.activemq.state.ConsumerState removeConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.store.amq.AMQMessageStore:void removeMessage(org.apache.activemq.command.MessageAck,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void prepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void replayPrepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.store.amq.AMQTx replayCommit(org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void rollback(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void replayRollback(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeMessage(org.apache.activemq.command.MessageAck,org.apache.activeio.journal.RecordLocation)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void prepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void replayPrepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activemq.store.journal.JournalTransactionStore$Tx replayCommit(org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void rollback(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void replayRollback(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void removeMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void removeInterestInRecordFile(int)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeTx(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void removeMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void removeMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.transport.ResponseCorrelator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void processDead(java.lang.String)",
            "org.apache.activemq.transport.discovery.rendezvous.JmDNSFactory:boolean onClose(java.net.InetAddress)",
            "org.apache.activemq.transport.reliable.DefaultReplayBuffer:void addBuffer(int,java.lang.Object)",
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQMessage convertFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommit(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAbort(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:void remove(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void removeMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:boolean acknowledgeReference(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.store.kahadaptor.ConsumerMessageRef remove(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getFirst()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void addReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.kaha.StoreEntry getEntry()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getLast()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getNext(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void addReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.kaha.StoreEntry getNextEntry(org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getPrevious(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry refresh(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:boolean acknowledgeReference(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.kaha.StoreEntry refreshEntry(org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object getValue(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerListIterator:java.lang.Object previous()",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:java.lang.Object[] toArray()",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:java.lang.Object[] toArray(java.lang.Object[])",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollectionIterator:java.lang.Object next()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object get(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean removeValue(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void addReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.store.kahadaptor.ConsumerMessageRef remove(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.store.kahadaptor.ConsumerMessageRef get(org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object getKey(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:java.lang.Object[] toArray()",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:java.lang.Object[] toArray(java.lang.Object[])",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:java.lang.String toString()",
            "org.apache.activemq.kaha.impl.container.ContainerKeySetIterator:java.lang.Object next()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean removeValue(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void remove(org.apache.activemq.kaha.impl.index.IndexItem)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void remove(org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:java.util.Map retrievePreparedState()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.transport.TransportServer)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void <init>(org.apache.activemq.broker.BrokerService,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationFactory,org.apache.activemq.broker.region.DestinationInterceptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void <init>(org.apache.activemq.broker.BrokerService,javax.management.MBeanServer,javax.management.ObjectName,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationFactory,org.apache.activemq.broker.region.DestinationInterceptor)"
        ]
    },
    "org.apache.activemq.management.JMSConsumerStatsImpl:void <init>(org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.management.JMSEndpointStatsImpl:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSEndpointStatsImpl:void <init>(org.apache.activemq.management.JMSSessionStatsImpl)"
        ]
    },
    "org.apache.activemq.management.JMSProducerStatsImpl:void <init>(org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.CountStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,org.apache.activemq.management.TimeStatisticImpl,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.LocalTransactionIdMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageIdMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.ActiveMQMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.NetworkBridgeFilterMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.RemoveInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.RemoveSubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.SessionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.SubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.TransactionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.LocalTransactionIdMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageIdMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.ActiveMQMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.NetworkBridgeFilterMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.RemoveInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.RemoveSubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.SessionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.SubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.TransactionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.LocalTransactionIdMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageIdMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessagePullMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.NetworkBridgeFilterMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.RemoveInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.RemoveSubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.SessionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.SubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.TransactionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.LocalTransactionIdMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageIdMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessagePullMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.NetworkBridgeFilterMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.RemoveInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.RemoveSubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.SessionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.SubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.TransactionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.LocalTransactionIdMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageIdMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessagePullMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.NetworkBridgeFilterMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.RemoveInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.RemoveSubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.SessionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.TransactionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.LocalTransactionIdMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageIdMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessagePullMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.NetworkBridgeFilterMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.RemoveInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.RemoveSubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.SessionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.TransactionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.pool.PooledConnection:javax.jms.QueueSession createQueueSession(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeInboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeOutboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageConsumer createConsumer()",
            "org.apache.activemq.network.jms.QueueBridge:javax.jms.MessageProducer createProducer()"
        ]
    },
    "org.apache.activemq.pool.PooledConnection:javax.jms.TopicSession createTopicSession(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeInboundTopicBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeOutboundTopicBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Destination createReplyToBridge(javax.jms.Destination,javax.jms.Connection,javax.jms.Connection)",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageConsumer createConsumer()",
            "org.apache.activemq.network.jms.TopicBridge:javax.jms.MessageProducer createProducer()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void addReferenceFileIdsInUse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void buildReferenceFileIdsInUse()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addReferenceFileIdsInUse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void buildReferenceFileIdsInUse()"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:javax.jmdns.JmDNS getJmdns()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void start()",
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void registerService(java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.udp.CommandDatagramChannel:void write(org.apache.activemq.command.Command,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.CommandChannelSupport:void write(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.udp.UdpTransport:void oneway(java.lang.Object,java.net.SocketAddress)"
        ]
    },
    "org.apache.activemq.transport.udp.CommandDatagramChannel:void sendBuffer(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.reliable.DefaultReplayBuffer:void replayMessages(int,int,org.apache.activemq.transport.reliable.Replayer)"
        ]
    },
    "org.apache.activemq.transport.udp.CommandDatagramSocket:void sendWriteBuffer(java.net.SocketAddress,org.apache.activemq.util.ByteArrayOutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.CommandDatagramSocket:void write(org.apache.activemq.command.Command,java.net.SocketAddress)"
        ]
    },
    "org.apache.activemq.transport.udp.CommandDatagramSocket:void sendBuffer(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.reliable.DefaultReplayBuffer:void replayMessages(int,int,org.apache.activemq.transport.reliable.Replayer)"
        ]
    },
    "org.apache.activemq.transport.udp.CommandDatagramChannel:org.apache.activemq.command.Command read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransport:void run()"
        ]
    },
    "org.apache.activemq.transport.udp.CommandDatagramSocket:org.apache.activemq.command.Command read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransport:void run()"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void <init>()"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:java.lang.Throwable tightUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:java.lang.Throwable tightUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConnectionErrorMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ExceptionResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:java.lang.Throwable looseUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:java.lang.Throwable looseUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ConnectionErrorMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ExceptionResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:java.lang.Throwable tightUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:java.lang.Throwable tightUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConnectionErrorMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ExceptionResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:java.lang.Throwable looseUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:java.lang.Throwable looseUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ConnectionErrorMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ExceptionResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:java.lang.Throwable tightUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:java.lang.Throwable tightUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConnectionErrorMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ExceptionResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:java.lang.Throwable looseUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:java.lang.Throwable looseUnmarsalThrowable(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ConnectionErrorMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ExceptionResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.util.ClassLoadingAwareObjectInputStream:java.lang.Class resolveProxyClass(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jndi.JNDIBaseStorable:java.util.Properties getProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.JNDIBaseStorable:void writeExternal(java.io.ObjectOutput)",
            "org.apache.activemq.jndi.JNDIReferenceFactory:javax.naming.Reference createReference(java.lang.String,org.apache.activemq.jndi.JNDIStorableInterface)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void processHelperProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void start()"
        ]
    },
    "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.lang.String,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void connect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.nio.NIOTransport:void doStart()",
            "org.apache.activemq.transport.tcp.TcpTransport:void doStart()"
        ]
    },
    "org.apache.activemq.openwire.tool.CHeadersGenerator:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CGeneratorTask:void execute()",
            "org.apache.activemq.openwire.tool.CSourcesGenerator:java.lang.Object run()"
        ]
    },
    "org.apache.activemq.broker.region.ConnectorStatistics:void setParent(org.apache.activemq.broker.region.ConnectorStatistics)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DestinationStatistics:void setParent(org.apache.activemq.broker.region.DestinationStatistics)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.usage.SystemUsage,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.kaha.Store)",
            "org.apache.activemq.broker.region.Queue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.Topic:void dispose(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.management.PollCountStatisticImpl:void <init>(org.apache.activemq.management.PollCountStatisticImpl,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:void store(java.lang.Object,org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void load()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry place(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.StoreEntry get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object get(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getEntry(java.lang.Object)",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.StoreEntry remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void remove(org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:void setBrokerURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:void <init>(java.net.URI)",
            "org.apache.activemq.ActiveMQConnectionFactory:void <init>(java.lang.String,java.lang.String,java.net.URI)",
            "org.apache.activemq.ActiveMQConnectionFactory:void <init>(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:void buildFromProperties(java.util.Properties)",
            "org.apache.activemq.camel.component.ActiveMQConfiguration:javax.jms.ConnectionFactory createConnectionFactory()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:void buildFromProperties(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.JNDIBaseStorable:void setProperties(java.util.Properties)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.wireformat.WireFormat createWireFormat(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.udp.UdpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.lang.String,java.net.URI)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.jndi.JNDIBaseStorable:void setProperties(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.util.Hashtable)",
            "org.apache.activemq.jndi.JNDIBaseStorable:void readExternal(java.io.ObjectInput)",
            "org.apache.activemq.jndi.JNDIReferenceFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport compositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport configure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport serverConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.HashMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransportServer:void run()"
        ]
    },
    "org.apache.activemq.transport.discovery.DiscoveryAgentFactory:org.apache.activemq.transport.discovery.DiscoveryAgent createDiscoveryAgent(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:org.apache.activemq.transport.discovery.DiscoveryAgent createDiscoveryAgent()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void setUri(java.net.URI)",
            "org.apache.activemq.transport.discovery.DiscoveryTransportFactory:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.util.URISupport$CompositeData)",
            "org.apache.activemq.transport.fanout.FanoutTransportFactory:org.apache.activemq.transport.Transport createTransport(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.transport.TransportServer createSslTransportServer(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.broker.TransportConnector addSslConnector(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)"
        ]
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.TransportServer bind(java.lang.String,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector createTransportConnector(org.apache.activemq.broker.Broker,java.net.URI)",
            "org.apache.activemq.broker.SslBrokerService:org.apache.activemq.transport.TransportServer createSslTransportServer(java.net.URI,javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)",
            "org.apache.activemq.broker.TransportConnector:org.apache.activemq.transport.TransportServer createTransportServer()",
            "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.TransportServer createServer()"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.lang.String,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.TransportServer bind(java.lang.String,java.net.URI)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportFactory:org.apache.activemq.transport.Transport configure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.region.CompositeDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.CompositeDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:java.util.Set getDurableDestinations()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractRegion:java.util.Set getInactiveDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.QueueRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.TopicRegion:java.util.Set getInactiveDestinations()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:java.util.Set getDurableDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:java.util.Set getDurableDestinations()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.MutableBrokerFilter:java.util.Set getDurableDestinations()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void setTransportConnectors(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(java.lang.String)",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStart()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void setNetworkConnectors(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void setProxyConnectors(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$ByteMessageOpenTypeFactory:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:javax.management.openmbean.CompositeType getCompositeType()"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$MapMessageOpenTypeFactory:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:javax.management.openmbean.CompositeType getCompositeType()"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$MessageOpenTypeFactory:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:javax.management.openmbean.CompositeType getCompositeType()",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$ByteMessageOpenTypeFactory:void init()",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$MapMessageOpenTypeFactory:void init()",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$ObjectMessageOpenTypeFactory:void init()",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$StreamMessageOpenTypeFactory:void init()",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$TextMessageOpenTypeFactory:void init()"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$TextMessageOpenTypeFactory:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:javax.management.openmbean.CompositeType getCompositeType()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void closeDataFileAccessor(org.apache.activemq.kaha.impl.async.DataFileAccessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location recoveryCheck(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location getNextLocation(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location getNextLocation(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.Location,boolean)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.util.ByteSequence read(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void update(org.apache.activemq.kaha.impl.async.Location,org.apache.activemq.util.ByteSequence,boolean)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:void addToBin(org.apache.activemq.kaha.impl.index.hash.HashPage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:void load()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.impl.index.hash.HashPage getFullPage(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.impl.index.hash.HashPage lookupPage(long)",
            "org.apache.activemq.kaha.impl.index.hash.HashPageInfo:void begin()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage getFullPage(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void load()",
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage lookupPage(long)"
        ]
    },
    "org.apache.activemq.memory.list.DestinationBasedMessageList:java.util.List getMessages(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:java.util.List getMessages(org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.openwire.tool.MultiSourceGenerator:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.Object run()",
            "org.apache.activemq.openwire.tool.CppClassesGenerator:java.lang.Object run()",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:java.lang.Object run()",
            "org.apache.activemq.openwire.tool.JavaTestsGenerator:java.lang.Object run()"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.DestinationInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processMessage(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processMessageAck(org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.MessageAck:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processEndTransaction(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:java.lang.Object readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileReader:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)",
            "org.apache.activemq.kaha.impl.index.hash.HashEntry:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)",
            "org.apache.activemq.kaha.impl.index.tree.TreeEntry:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.usage.SystemUsage:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.Queue:void start()",
            "org.apache.activemq.broker.region.TopicSubscription:void init()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.store.ProxyMessageStore:void start()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void start()",
            "org.apache.activemq.store.journal.JournalMessageStore:void start()"
        ]
    },
    "org.apache.activemq.usage.Usage:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.region.Queue:void start()",
            "org.apache.activemq.broker.region.Topic:void start()",
            "org.apache.activemq.usage.SystemUsage:void start()",
            "org.apache.activemq.usage.Usage:void start()",
            "org.apache.activemq.usage.Usage:void addChild(org.apache.activemq.usage.Usage)"
        ]
    },
    "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void onSizeChanged(org.apache.activemq.memory.buffer.MessageQueue,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.buffer.MessageQueue:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.memory.buffer.MessageQueue:void add(org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:void put(org.apache.activemq.kaha.impl.index.hash.HashEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:void store(java.lang.Object,org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void store(java.lang.Object,org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void load()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry place(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doRemove(org.apache.activemq.kaha.impl.index.tree.TreeEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry remove(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doRemove(org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:org.apache.activemq.command.MessageDispatch createMessageDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:org.apache.activemq.command.MessageDispatch createMessageDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:boolean isEmpty(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean hasMessagesBufferedToDeliver()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor:boolean isEmpty(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()"
        ]
    },
    "org.apache.activemq.command.ActiveMQBytesMessage:void setObjectProperty(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)",
            "org.apache.activemq.command.ActiveMQMessage:void setProperties(java.util.Map)",
            "org.apache.activemq.command.ActiveMQMessage:void setByteProperty(java.lang.String,byte)",
            "org.apache.activemq.command.ActiveMQMessage:void setShortProperty(java.lang.String,short)",
            "org.apache.activemq.command.ActiveMQMessage:void setIntProperty(java.lang.String,int)",
            "org.apache.activemq.command.ActiveMQMessage:void setLongProperty(java.lang.String,long)",
            "org.apache.activemq.command.ActiveMQMessage:void setFloatProperty(java.lang.String,float)",
            "org.apache.activemq.command.ActiveMQMessage:void setDoubleProperty(java.lang.String,double)",
            "org.apache.activemq.command.ActiveMQMessage:void setStringProperty(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:void setProperties(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromFrameToMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.FrameTranslator)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:void setByteProperty(java.lang.String,byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:void setShortProperty(java.lang.String,short)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:void setIntProperty(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void fireConsumerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void fireProducerAdvisory(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQTopic,org.apache.activemq.command.Command,org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:void setLongProperty(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:void setFloatProperty(java.lang.String,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:void setDoubleProperty(java.lang.String,double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:void setStringProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:void setBooleanProperty(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object unmarshal(org.apache.activemq.util.ByteSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.CommandMarshaller:java.lang.Object readPayload(java.io.DataInput)",
            "org.apache.activemq.kaha.MessageMarshaller:org.apache.activemq.command.Message readPayload(java.io.DataInput)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.command.DataStructure readCommand(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()",
            "org.apache.activemq.store.amq.AMQTxOperation:void readExternal(org.apache.activemq.wireformat.WireFormat,java.io.DataInput)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$1:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore$2:boolean recoverMessage(long,byte[])",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.command.DataStructure readCommand(org.apache.activeio.journal.RecordLocation)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()",
            "org.apache.activemq.store.kahadaptor.TransactionMarshaller:java.lang.Object readPayload(java.io.DataInput)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object unmarshal(java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.CommandJoiner:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.nio.NIOTransport:void serviceRead()",
            "org.apache.activemq.transport.tcp.TcpTransport:java.lang.Object readCommand()",
            "org.apache.activemq.transport.udp.CommandDatagramChannel:org.apache.activemq.command.Command read()",
            "org.apache.activemq.transport.udp.CommandDatagramSocket:org.apache.activemq.command.Command read()"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure tightUnmarsalNestedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConnectionErrorMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConsumerControlMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.DataArrayResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.DataResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.JournalQueueAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.JournalTopicAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.JournalTransactionMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure tightUnmarsalCachedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.LocalTransactionIdMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageIdMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.NetworkBridgeFilterMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.RemoveInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.RemoveSubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.SessionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.SubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.TransactionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure tightUnmarsalNestedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConnectionErrorMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConsumerControlMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.DataArrayResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.DataResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.JournalQueueAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.JournalTopicAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.JournalTransactionMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure tightUnmarsalCachedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.LocalTransactionIdMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageIdMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessagePullMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.NetworkBridgeFilterMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.RemoveInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.RemoveSubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.SessionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.SubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.TransactionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure tightUnmarsalNestedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConnectionErrorMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConsumerControlMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.DataArrayResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.DataResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.JournalQueueAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.JournalTopicAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.JournalTransactionMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessagePullMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ProducerAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure tightUnmarsalCachedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.LocalTransactionIdMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageIdMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessagePullMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.NetworkBridgeFilterMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.RemoveInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.RemoveSubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.SessionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.TransactionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure looseUnmarsalNestedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ConnectionErrorMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ConsumerControlMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.DataArrayResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.DataResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.JournalQueueAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.JournalTopicAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.JournalTransactionMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.MessageAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure looseUnmarsalCachedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.LocalTransactionIdMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.MessageAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.MessageIdMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.NetworkBridgeFilterMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.RemoveInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.RemoveSubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.SessionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.SubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.TransactionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure looseUnmarsalNestedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ConnectionErrorMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ConsumerControlMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.DataArrayResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.DataResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.JournalQueueAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.JournalTopicAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.JournalTransactionMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.MessageAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure looseUnmarsalCachedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.LocalTransactionIdMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.MessageAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.MessageIdMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.MessagePullMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.NetworkBridgeFilterMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.RemoveInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.RemoveSubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.SessionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.SubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.TransactionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure looseUnmarsalNestedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ConnectionErrorMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ConsumerControlMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.DataArrayResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.DataResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.JournalQueueAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.JournalTopicAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.JournalTransactionMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.MessageAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.MessagePullMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ProducerAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:org.apache.activemq.command.DataStructure looseUnmarsalCachedObject(org.apache.activemq.openwire.OpenWireFormat,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.LocalTransactionIdMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.MessageAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.MessageIdMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.MessagePullMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.NetworkBridgeFilterMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.RemoveInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.RemoveSubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.SessionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.TransactionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.wireformat.WireFormat createWireFormat()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.wireformat.WireFormat getWireFormat()"
        ]
    },
    "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:void setVirtualDestinations(org.apache.activemq.broker.region.virtual.VirtualDestination[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.DestinationInterceptor[] createDefaultDestinationInterceptor()"
        ]
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.DotFileInterceptorSupport:void generateFile()"
        ]
    },
    "org.apache.activemq.filter.DestinationMap:void setEntries(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyMap:void setPolicyEntries(java.util.List)",
            "org.apache.activemq.security.DefaultAuthorizationMap:void setAuthorizationEntries(java.util.List)"
        ]
    },
    "org.apache.activemq.advisory.ConsumerEventSource:void onMessage(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()",
            "org.apache.activemq.ActiveMQSession:void run()",
            "org.apache.activemq.camel.CamelMessageConsumer$1:void process(org.apache.camel.Exchange)",
            "org.apache.activemq.camel.converter.ActiveMQMessageConverter$1:void process(org.apache.camel.Exchange)"
        ]
    },
    "org.apache.activemq.advisory.ProducerEventSource:void onMessage(javax.jms.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:boolean iterate()",
            "org.apache.activemq.ActiveMQSession:void run()",
            "org.apache.activemq.camel.CamelMessageConsumer$1:void process(org.apache.camel.Exchange)",
            "org.apache.activemq.camel.converter.ActiveMQMessageConverter$1:void process(org.apache.camel.Exchange)"
        ]
    },
    "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression unaryExpr()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression multExpr()",
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression unaryExpr()"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext:java.lang.Object lookupLink(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration list(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration listBindings(javax.naming.Name)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.KahaStore:void recover(org.apache.activemq.kaha.impl.DataManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.impl.DataManager getDataManager(java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object getValue(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerListIterator:java.lang.Object previous()",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollectionIterator:java.lang.Object next()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:void load()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object removeFirst()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object removeLast()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object[] toArray()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object[] toArray(java.lang.Object[])",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object get(int)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object set(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object remove(int)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int indexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int lastIndexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.util.List subList(int,int)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object get(org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activemq.command.DataStructure readCommand(org.apache.activeio.journal.RecordLocation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.IndirectMessageReference:int incrementReferenceCount()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.store.ReferenceStore$ReferenceData)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:void update(org.apache.activemq.kaha.StoreEntry,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:org.apache.activemq.kaha.StoreLocation storeDataItem(org.apache.activemq.kaha.Marshaller,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:org.apache.activemq.kaha.impl.index.IndexItem addRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem writeLast(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem writeFirst(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem insert(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem write(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:org.apache.activemq.kaha.StoreLocation storeRedoItem(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.StoreIndexWriter:void storeItem(org.apache.activemq.kaha.impl.index.IndexItem)",
            "org.apache.activemq.kaha.impl.index.StoreIndexWriter:void updateIndexes(org.apache.activemq.kaha.impl.index.IndexItem)"
        ]
    },
    "org.apache.activemq.broker.region.QueueRegion:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueueRegion:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.TempTopicRegion:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:int getChildCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMap:int getTopicRootChildCount()",
            "org.apache.activemq.filter.DestinationMap:int getQueueRootChildCount()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerCollectionSupport:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTopics()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getQueues()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryTopics()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryQueues()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTopicSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getDurableTopicSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getQueueSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryTopicSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryQueueSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getInactiveDurableTopicSubscribers()",
            "org.apache.activemq.management.StatsImpl:java.lang.String[] getStatisticNames()",
            "org.apache.activemq.management.StatsImpl:javax.management.j2ee.statistics.Statistic[] getStatistics()",
            "org.apache.activemq.network.NetworkConnector:org.apache.activemq.network.NetworkBridge configureBridge(org.apache.activemq.network.DemandForwardingBridgeSupport)"
        ]
    },
    "org.apache.activemq.memory.MapCache:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:int size()"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:void runMarshallCacheEvictionSweep()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:int getMessageCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:int size()",
            "org.apache.activemq.store.ProxyMessageStore:int getMessageCount()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount()",
            "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:int getMessageCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:int size()",
            "org.apache.activemq.store.ProxyMessageStore:int getMessageCount()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount()",
            "org.apache.activemq.store.amq.AMQMessageStore:int getMessageCount()",
            "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.TopicSubContainer:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:int getMessageCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:int size()",
            "org.apache.activemq.store.ProxyMessageStore:int getMessageCount()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount()",
            "org.apache.activemq.store.journal.JournalMessageStore:int getMessageCount()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicSub:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.util.IntrospectionSupport:java.util.Map extractProperties(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:void setBrokerURL(java.lang.String)",
            "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.lang.String,java.net.URI)",
            "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.TransportServer doBind(java.lang.String,java.net.URI)",
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveMap(java.util.Map,java.io.DataOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMapMessage:void storeContent()",
            "org.apache.activemq.command.Message:void beforeMarshall(org.apache.activemq.wireformat.WireFormat)",
            "org.apache.activemq.command.WireFormatInfo:void beforeMarshall(org.apache.activemq.wireformat.WireFormat)",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitive(java.io.DataOutputStream,java.lang.Object)"
        ]
    },
    "org.apache.activemq.util.URISupport:java.lang.String createQueryString(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(org.apache.activemq.network.NetworkConnector)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.util.URISupport$CompositeData:java.net.URI toURI()",
            "org.apache.activemq.util.URISupport:java.net.URI createRemainingURI(java.net.URI,java.util.Map)"
        ]
    },
    "org.apache.activemq.broker.MapTransportConnectionStateRegister:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.SingleTransportConnectionStateRegister:void intialize(org.apache.activemq.broker.TransportConnectionStateRegister)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState registerConnectionState(org.apache.activemq.command.ConnectionId,org.apache.activemq.broker.TransportConnectionState)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void storeContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMapMessage:void copy(org.apache.activemq.command.ActiveMQMapMessage)",
            "org.apache.activemq.command.ActiveMQMapMessage:void beforeMarshall(org.apache.activemq.wireformat.WireFormat)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void loadContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMapMessage:void initializeReading()"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:void pruneIfEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMapNode:java.util.List removeValues()",
            "org.apache.activemq.filter.DestinationMapNode:void remove(java.lang.String[],int,java.lang.Object)",
            "org.apache.activemq.filter.DestinationMapNode:void removeChild(org.apache.activemq.filter.DestinationMapNode)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerCollectionSupport:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMap:java.lang.Object chooseValue(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.network.DemandSubscription:boolean isEmpty()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:void removeMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void removeMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.TopicSubContainer:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.store.kahadaptor.ConsumerMessageRef remove(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:boolean acknowledgeReference(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:void removeMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicSub:void removeMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.util.URISupport$CompositeData:java.net.URI toURI()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:void setBrokerURL(java.lang.String)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:boolean itemExists(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:boolean propertyExists(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.IndexRootContainer:boolean doesRootExist(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:boolean doesMapContainerExist(java.lang.Object,java.lang.String)",
            "org.apache.activemq.kaha.impl.KahaStore:boolean doesListContainerExist(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupSet:boolean contains(java.lang.String)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:void <init>(org.apache.activemq.filter.Expression,java.lang.String,int)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.openwire.tool.MultiSourceGenerator:boolean isValidClass(org.codehaus.jam.JClass)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean containsAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean containsAll(java.util.Collection)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.VMIndex:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)",
            "org.apache.activemq.transport.vm.VMTransportFactory:boolean validateBroker(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:java.lang.Object getPort(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.SessionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:org.apache.activemq.transaction.Transaction getTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.TransactionBroker:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.TransactionBroker:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.TransactionBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.BrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.MutableBrokerFilter:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.command.ConsumerId get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueSubscription:boolean canDispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.broker.region.group.MessageGroupSet removeConsumer(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:char getChar(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:byte[] getBytes(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:java.lang.Object getObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)"
        ]
    },
    "org.apache.activemq.command.Message:java.lang.Object getProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.PropertyExpression:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.PropertyExpression:java.lang.Object evaluate(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:java.lang.Object getProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.WireFormatInfo:boolean isCacheEnabled()",
            "org.apache.activemq.command.WireFormatInfo:boolean isStackTraceEnabled()",
            "org.apache.activemq.command.WireFormatInfo:boolean isTcpNoDelayEnabled()",
            "org.apache.activemq.command.WireFormatInfo:boolean isSizePrefixDisabled()",
            "org.apache.activemq.command.WireFormatInfo:boolean isTightEncodingEnabled()",
            "org.apache.activemq.command.WireFormatInfo:long getMaxInactivityDuration()",
            "org.apache.activemq.command.WireFormatInfo:int getCacheSize()"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:org.apache.activemq.filter.DestinationMapNode getChild(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMapNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.DestinationMapNode:org.apache.activemq.filter.DestinationNode getChild(java.lang.String)"
        ]
    },
    "org.apache.activemq.jaas.CertificateLoginModule:void initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jaas.TextFileCertificateLoginModule:void initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)"
        ]
    },
    "org.apache.activemq.jaas.LDAPLoginModule:void initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jaas.PropertiesLoginModule:void initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jaas.TextFileCertificateLoginModule:void initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jndi.ActiveMQInitialContextFactory:java.lang.String[] getConnectionFactoryNames(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:javax.naming.Context getInitialContext(java.util.Hashtable)"
        ]
    },
    "org.apache.activemq.kaha.impl.IndexRootContainer:org.apache.activemq.kaha.impl.index.IndexItem getRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String,boolean)",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.DataFile getDataFile(org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void removeLocation(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location getNextLocation(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.util.ByteSequence read(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void update(org.apache.activemq.kaha.impl.async.Location,org.apache.activemq.util.ByteSequence,boolean)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:java.io.File getFile(org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void addInterestInFile(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:void addInterestInFile(int)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void removeInterestInFile(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:void removeInterestInFile(int)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFilesNotIn(java.util.Set,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void cleanup()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAccessor:org.apache.activemq.util.ByteSequence readRecord(org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.util.ByteSequence read(org.apache.activemq.kaha.impl.async.Location)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAccessor:void readLocationDetails(org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location recoveryCheck(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location getNextLocation(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location getNextLocation(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.Location,boolean)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAccessor:boolean readLocationDetailsAndValidate(org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.Location recoveryCheck(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.Location)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeDataFileAccessors(org.apache.activemq.kaha.impl.async.DataFile)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void forceRemoveDataFile(org.apache.activemq.kaha.impl.async.DataFile)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerMapEntry:java.lang.Object getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.SingleTransportConnectionStateRegister:void intialize(org.apache.activemq.broker.TransportConnectionStateRegister)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void writeLabels(java.io.PrintWriter,java.lang.String,java.lang.String,java.util.Map)",
            "org.apache.activemq.command.ActiveMQMessage:void setProperties(java.util.Map)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.lang.String,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQWASInitialContextFactory:java.util.Hashtable transformEnvironment(java.util.Hashtable)",
            "org.apache.activemq.jndi.ReadOnlyContext$ListBindingEnumeration:java.lang.Object nextElement()",
            "org.apache.activemq.jndi.ReadOnlyContext$ListEnumeration:java.lang.Object nextElement()",
            "org.apache.activemq.jndi.ReadOnlyContext:java.util.Map internalBind(java.lang.String,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void putAll(java.util.Map)",
            "org.apache.activemq.network.jms.JmsConnector$1:boolean removeEldestEntry(java.util.Map$Entry)",
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void savePreparedState(java.util.Map)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromMessageToFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.transport.stomp.FrameTranslator)",
            "org.apache.activemq.transport.stomp.StompFrame:java.lang.String toString()",
            "org.apache.activemq.transport.stomp.StompSubscription:org.apache.activemq.command.MessageAck onStompMessageAck(java.lang.String)",
            "org.apache.activemq.transport.stomp.StompWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.String toString(java.lang.Object,java.lang.Class)"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:org.apache.activemq.kaha.impl.data.DataFile getDataFile(org.apache.activemq.kaha.StoreLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.data.SyncDataFileReader:byte readDataItemSize(org.apache.activemq.kaha.impl.data.DataItem)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileReader:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileWriter:void updateItem(org.apache.activemq.kaha.impl.data.DataItem,org.apache.activemq.kaha.Marshaller,java.lang.Object,byte)"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:void removeInterestInFile(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:void removeRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void doClear()",
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void delete(org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexItem)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.VMIndex:org.apache.activemq.kaha.StoreEntry get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object get(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getEntry(java.lang.Object)"
        ]
    },
    "org.apache.activemq.management.StatsImpl:javax.management.j2ee.statistics.Statistic getStatistic(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.memory.MapCache:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:java.lang.Object get(java.lang.Object)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:java.lang.Short getMarshallCacheIndex(org.apache.activemq.command.DataStructure)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:int tightMarshalCachedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void tightMarshalCachedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void looseMarshalCachedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:int tightMarshalCachedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void tightMarshalCachedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void looseMarshalCachedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:int tightMarshalCachedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void tightMarshalCachedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void looseMarshalCachedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.security.LDAPAuthorizationMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.state.SessionState:org.apache.activemq.state.ProducerState getProducerState(org.apache.activemq.command.ProducerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.ProducerBrokerExchange getProducerBrokerExchange(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.state.SessionState:org.apache.activemq.state.ConsumerState getConsumerState(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.ConsumerBrokerExchange getConsumerBrokerExchange(org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.kaha.impl.async.Location getLocation(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void removeInProgressDataFile(org.apache.activemq.store.amq.AMQMessageStore,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.IndirectMessageReference:int incrementReferenceCount()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:org.apache.activemq.store.ReferenceStore$ReferenceData getMessageReference(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore:boolean replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.amq.AMQMessageStore:boolean replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.kaha.impl.async.Location getLocation(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void removeInterestInRecordFile(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void removeInterest(org.apache.activemq.store.kahadaptor.ReferenceRecord)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int getStoreSize()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void stop()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.store.ReferenceStore$ReferenceData getMessageReference(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQMessageStore:boolean replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message,org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.store.amq.AMQMessageStore:boolean replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.kaha.impl.async.Location getLocation(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:boolean acknowledgeReference(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.kaha.impl.async.Location,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:boolean replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int getStoreSize()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:boolean replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void stop()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore:org.apache.activemq.store.kahadaptor.KahaTransaction getTx(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void prepare(org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void rollback(org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.IndirectMessageReference:int incrementReferenceCount()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message loadMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.amq.RecoveryListenerAdapter:boolean recoverMessageReference(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore:org.apache.activemq.command.Message getMessage(org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:int getStoreSize()",
            "org.apache.activemq.store.ProxyTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:int getMessageCount(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void stop()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.JmDNSFactory:boolean onClose(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.rendezvous.JmDNSFactory$1:void close()"
        ]
    },
    "org.apache.activemq.transport.reliable.DefaultReplayBuffer:void replayMessages(int,int,org.apache.activemq.transport.reliable.Replayer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.reliable.ReliableTransport:void replayCommands(org.apache.activemq.command.ReplayCommand)"
        ]
    },
    "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.transport.stomp.ResponseHandler createResponseHandler(org.apache.activemq.transport.stomp.StompFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSend(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompBegin(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompCommit(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAbort(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompSubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompDisconnect(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.util.MapHelper:int getInt(java.util.Map,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:javax.jmdns.ServiceInfo createServiceInfo(java.lang.String,java.util.Map)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTopics()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getTopics()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getQueues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getQueues()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryTopics()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getTemporaryTopics()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryQueues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getTemporaryQueues()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTopicSubscribers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getDurableTopicSubscribers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getDurableTopicSubscribers()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getQueueSubscribers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getQueueSubscribers()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryTopicSubscribers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getTopicSubscribers()",
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getTemporaryTopicSubscribers()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryQueueSubscribers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getTemporaryQueueSubscribers()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getInactiveDurableTopicSubscribers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getInactiveDurableTopicSubscribers()"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:java.util.Enumeration getMapNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:java.util.Enumeration getPropertyNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)"
        ]
    },
    "org.apache.activemq.kaha.impl.IndexRootContainer:java.util.Set getKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getMapContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getListContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:java.util.Set getFiles()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.util.Set buildEntrySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.util.Iterator iterator()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.lang.Object[] toArray()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.lang.Object[] toArray(java.lang.Object[])",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean containsAll(java.util.Collection)"
        ]
    },
    "org.apache.activemq.management.StatsImpl:java.lang.String[] getStatisticNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.state.SessionState:java.util.Set getConsumerIds()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)"
        ]
    },
    "org.apache.activemq.state.SessionState:java.util.Set getProducerIds()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:java.util.Set getReferenceFileIdsInUse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void cleanup()"
        ]
    },
    "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService findFirst()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService lookup(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.MapTransportConnectionStateRegister:java.util.List listConnectionStates()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:java.util.List listConnectionStates()"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRecoverTransactions(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:void gc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void gc()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:org.apache.activemq.command.ActiveMQDestination[] getDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.ActiveMQDestination[] getDestinations()",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.ActiveMQDestination[] getDestinations()"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:java.util.Collection getChildren()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildren()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildNodes()"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:void appendDescendantValues(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.DestinationMapNode:java.util.Set getDesendentValues()",
            "org.apache.activemq.filter.DestinationMapNode:void appendDescendantValues(java.util.Set)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:boolean delete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:boolean delete()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:void consolidateDataFiles()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void clearUsedMark()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeUnused()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void cleanup()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void close()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:boolean delete()"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void close()"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:void force()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void force()"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:boolean delete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:void consolidateDataFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()"
        ]
    },
    "org.apache.activemq.management.StatsImpl:javax.management.j2ee.statistics.Statistic[] getStatistics()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.StatsImpl:void reset()"
        ]
    },
    "org.apache.activemq.state.SessionState:java.util.Collection getProducerStates()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)"
        ]
    },
    "org.apache.activemq.state.SessionState:java.util.Collection getConsumerStates()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void cleanup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter$3:void run()"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.kaha.impl.async.Location checkpoint()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activeio.journal.RecordLocation checkpoint()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.Topic:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.TopicSubContainer:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.SingleTransportConnectionStateRegister:void intialize(org.apache.activemq.broker.TransportConnectionStateRegister)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void writeLabels(java.io.PrintWriter,java.lang.String,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext$LocalNamingEnumeration:void <init>(org.apache.activemq.jndi.ReadOnlyContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ReadOnlyContext$LocalNamingEnumeration:void <init>(org.apache.activemq.jndi.ReadOnlyContext,org.apache.activemq.jndi.ReadOnlyContext$1)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupSet:boolean contains(java.lang.String)",
            "org.apache.activemq.filter.ComparisonExpression$LikeExpression:void <init>(org.apache.activemq.filter.Expression,java.lang.String,int)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.Object evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.openwire.tool.MultiSourceGenerator:boolean isValidClass(org.codehaus.jam.JClass)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompFrame:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompWireFormat:void marshal(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void trace(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.transport.stomp.StompWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.transport.tcp.TcpTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.BrokerRegistry:void unbind(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void stop()"
        ]
    },
    "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState unregisterConnectionState(org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState unregisterConnectionState(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.broker.TransactionBroker:void removeTransaction(org.apache.activemq.command.XATransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:void setStateFinished()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void removeProducerBrokerExchange(org.apache.activemq.command.ProducerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:void removeConsumerBrokerExchange(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterDestination(javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregister(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void remove(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void remove(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.command.ConsumerId removeGroup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueSubscription:boolean canDispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:void removeChild(org.apache.activemq.filter.DestinationMapNode)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMapNode:void pruneIfEmpty()"
        ]
    },
    "org.apache.activemq.filter.MultiExpressionEvaluator:void removeFromCache(org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.MultiExpressionEvaluator:boolean removeEventListner(java.lang.String,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void removeFromCache(org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression)"
        ]
    },
    "org.apache.activemq.kaha.impl.IndexRootContainer:void removeRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:org.apache.activemq.kaha.impl.index.IndexItem addRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(org.apache.activemq.kaha.ContainerId)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void forceRemoveDataFile(org.apache.activemq.kaha.impl.async.DataFile)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFilesNotIn(java.util.Set,java.util.Set)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void removeDataFile(org.apache.activemq.kaha.impl.async.DataFile)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAppender:void processQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataFileAppender$1:void run()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.NIODataFileAppender:void processQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataFileAppender$1:void run()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterDestination(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(javax.management.ObjectName)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.network.DemandSubscription:boolean remove(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.store.amq.AMQMessageStore$2:void afterCommit()",
            "org.apache.activemq.store.amq.AMQMessageStore$2:void afterRollback()",
            "org.apache.activemq.store.amq.AMQMessageStore$3:void afterCommit()",
            "org.apache.activemq.store.amq.AMQMessageStore$3:void afterRollback()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void removeInProgressDataFile(org.apache.activemq.store.amq.AMQMessageStore,int)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore$1:void afterCommit()",
            "org.apache.activemq.store.amq.AMQTopicMessageStore$1:void afterRollback()",
            "org.apache.activemq.store.journal.JournalMessageStore$1:void afterCommit()",
            "org.apache.activemq.store.journal.JournalMessageStore$1:void afterRollback()",
            "org.apache.activemq.store.journal.JournalMessageStore$2:void afterCommit()",
            "org.apache.activemq.store.journal.JournalMessageStore$2:void afterRollback()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$1:void afterCommit()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$1:void afterRollback()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerEntrySetIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.region.Queue:void gc()",
            "org.apache.activemq.broker.region.QueueRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.TopicRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.broker.region.group.MessageGroupSet removeConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.kaha.impl.KahaStore:void close()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeUnused()",
            "org.apache.activemq.memory.CacheEvictionUsageListener:boolean evictMessages()",
            "org.apache.activemq.pool.ConnectionPool:void close()",
            "org.apache.activemq.state.ConnectionState:void removeTempDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void remove(java.net.URI[])",
            "org.apache.activemq.transport.nio.SelectorWorker:void run()",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.StompSubscription:org.apache.activemq.command.MessageAck onStompMessageAck(java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:java.util.Map extractProperties(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterDestination(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void registerSubscription(javax.management.ObjectName,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.util.SubscriptionKey,org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(javax.management.ObjectName)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.network.DemandSubscription:boolean remove(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.store.amq.AMQMessageStore$2:void afterCommit()",
            "org.apache.activemq.store.amq.AMQMessageStore$2:void afterRollback()",
            "org.apache.activemq.store.amq.AMQMessageStore$3:void afterCommit()",
            "org.apache.activemq.store.amq.AMQMessageStore$3:void afterRollback()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void removeInProgressDataFile(org.apache.activemq.store.amq.AMQMessageStore,int)",
            "org.apache.activemq.store.amq.AMQTopicMessageStore$1:void afterCommit()",
            "org.apache.activemq.store.amq.AMQTopicMessageStore$1:void afterRollback()",
            "org.apache.activemq.store.journal.JournalMessageStore$1:void afterCommit()",
            "org.apache.activemq.store.journal.JournalMessageStore$1:void afterRollback()",
            "org.apache.activemq.store.journal.JournalMessageStore$2:void afterCommit()",
            "org.apache.activemq.store.journal.JournalMessageStore$2:void afterRollback()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$1:void afterCommit()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$1:void afterRollback()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:void remove(org.apache.activemq.kaha.impl.index.IndexItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerKeySetIterator:void remove()",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollectionIterator:void remove()"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:void removeDataFile(org.apache.activemq.kaha.impl.data.DataFile)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:org.apache.activemq.kaha.impl.data.DataFile findSpaceForData(org.apache.activemq.kaha.impl.data.DataItem)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void removeInterestInFile(org.apache.activemq.kaha.impl.data.DataFile)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void consolidateDataFiles()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.VMIndex:org.apache.activemq.kaha.StoreEntry remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void remove(org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.memory.MapCache:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:java.lang.Object remove(java.lang.Object)"
        ]
    },
    "org.apache.activemq.state.SessionState:org.apache.activemq.state.ProducerState removeProducer(org.apache.activemq.command.ProducerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.state.SessionState:org.apache.activemq.state.ConsumerState removeConsumer(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.store.amq.AMQTx replayCommit(org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.amq.AMQTransactionStore:void replayRollback(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void stop()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activemq.store.journal.JournalTransactionStore$Tx replayCommit(org.apache.activemq.command.TransactionId,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore:void replayRollback(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeTx(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void commit(org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void rollback(org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.kaha.StoreEntry getEntry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.kaha.StoreEntry getNextEntry(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.kaha.StoreEntry refreshEntry(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerListIterator:java.lang.Object previous()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ContainerValueCollection:java.lang.Object[] toArray()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ContainerValueCollection:java.lang.Object[] toArray(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.StatsImpl:javax.management.j2ee.statistics.Statistic[] getStatistics()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerValueCollectionIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.ActiveMQConnection:void start()",
            "org.apache.activemq.ActiveMQConnection:void stop()",
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.ActiveMQConnection:void cleanup()",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void transportInterupted()",
            "org.apache.activemq.ActiveMQConnection:void transportResumed()",
            "org.apache.activemq.ActiveMQConnection:void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)",
            "org.apache.activemq.ActiveMQConnection:void onConnectionControl(org.apache.activemq.command.ConnectionControl)",
            "org.apache.activemq.ActiveMQConnection:void onConsumerControl(org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispose()",
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)",
            "org.apache.activemq.ActiveMQSession:void clearMessagesInProgress()",
            "org.apache.activemq.ActiveMQSession:void deliverAcks()",
            "org.apache.activemq.ActiveMQSession:void dispose()",
            "org.apache.activemq.ActiveMQSession:void recover()",
            "org.apache.activemq.ActiveMQSession:void acknowledge()",
            "org.apache.activemq.ActiveMQSession:void start()",
            "org.apache.activemq.ActiveMQSession:void stop()",
            "org.apache.activemq.ActiveMQSession:void redispatch(org.apache.activemq.ActiveMQDispatcher,org.apache.activemq.MessageDispatchChannel)",
            "org.apache.activemq.ActiveMQSession:void checkMessageListener()",
            "org.apache.activemq.ActiveMQSession:void setOptimizeAcknowledge(boolean)",
            "org.apache.activemq.ActiveMQSession:void setPrefetchSize(org.apache.activemq.command.ConsumerId,int)",
            "org.apache.activemq.ActiveMQSession:void close(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.ActiveMQSession:boolean isInUse(org.apache.activemq.command.ActiveMQTempDestination)",
            "org.apache.activemq.ActiveMQSessionExecutor:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSessionExecutor:boolean iterate()",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService findFirst()",
            "org.apache.activemq.broker.BrokerService$1:boolean connectTo(java.net.URI)",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector getNetworkConnectorByName(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector getConnectorByName(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void setTransportConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:void setNetworkConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:void setProxyConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.SingleTransportConnectionStateRegister:void intialize(org.apache.activemq.broker.TransportConnectionStateRegister)",
            "org.apache.activemq.broker.TransactionBroker:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.TransportConnection:java.lang.String getConnectionId()",
            "org.apache.activemq.broker.TransportConnector:void stop()",
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection()",
            "org.apache.activemq.broker.TransportStatusDetector:void doSweep()",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:void stop()",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void gc()",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void gc()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.QueueRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:java.util.LinkedList pageInList(int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void gc()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void clear()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void release()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:int size()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxBatchSize(int)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void gc()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setSystemUsage(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxProducersToAudit(int)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxAuditDepth(int)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setEnableAudit(boolean)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void dispatched(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void gc()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.broker.region.group.MessageGroupSet removeConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.OldestMessageWithLowestPriorityEvictionStrategy:org.apache.activemq.broker.region.MessageReference[] evictMessages(java.util.LinkedList)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map,org.apache.activemq.command.ProducerId,java.util.Set)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void writeLabels(java.io.PrintWriter,java.lang.String,java.lang.String,java.util.Map)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.command.ActiveMQDestination:void setPhysicalName(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:void setProperties(java.util.Map)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.AnyChildDestinationNode:org.apache.activemq.filter.DestinationNode getChild(java.lang.String)",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildren()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeValues()",
            "org.apache.activemq.filter.DestinationMap:void setEntries(java.util.List)",
            "org.apache.activemq.filter.DestinationMapNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.String toString()",
            "org.apache.activemq.jaas.CertificateLoginModule:boolean commit()",
            "org.apache.activemq.jaas.LDAPLoginModule:boolean commit()",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.lang.String,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQWASInitialContextFactory:java.util.Hashtable transformEnvironment(java.util.Hashtable)",
            "org.apache.activemq.jndi.ReadOnlyContext$LocalNamingEnumeration:java.util.Map$Entry getNext()",
            "org.apache.activemq.jndi.ReadOnlyContext:java.util.Map internalBind(java.lang.String,java.lang.Object)",
            "org.apache.activemq.kaha.impl.KahaStore:void close()",
            "org.apache.activemq.kaha.impl.KahaStore:void force()",
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getMapContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getListContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void start()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:boolean delete()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFilesNotIn(java.util.Set,java.util.Set)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFiles()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:void dispose()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void clearUsedMark()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeUnused()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void close()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.util.Set buildEntrySet()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySetIterator:java.lang.Object next()",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(int,java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.String toString()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void putAll(java.util.Map)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void close()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void force()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:boolean delete()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void consolidateDataFiles()",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashPageInfo getRetrievePage(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:int getRetrieveOffset(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void end()",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void dump()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void checkLeaf()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void removePageId(long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean resetPageReference(long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void resetParentId(long,java.util.List)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void dump()",
            "org.apache.activemq.management.PollCountStatisticImpl:long getCount()",
            "org.apache.activemq.memory.CacheEvictionUsageListener:boolean evictMessages()",
            "org.apache.activemq.memory.buffer.MessageQueue:void appendMessages(java.util.List)",
            "org.apache.activemq.memory.buffer.OrderBasedMessageBuffer:void clear()",
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void clear()",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:java.util.List getMessages(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.memory.list.SimpleMessageList:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.ConduitBridge:boolean addToAlreadyInterestedConsumers(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.DurableConduitBridge:boolean doesConsumerExist(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStart()",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.jms.JmsConnector$1:boolean removeEldestEntry(java.util.Map$Entry)",
            "org.apache.activemq.openwire.tool.CHeadersGenerator:java.util.List sort(java.util.List)",
            "org.apache.activemq.openwire.tool.CHeadersGenerator:void generateFields(java.io.PrintWriter,org.codehaus.jam.JClass)",
            "org.apache.activemq.openwire.tool.CHeadersGenerator:void generateSetup(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeHashCodeBody()",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeEqualsBody()",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeToStringBody()",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:int generateTightMarshal1Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateTightMarshal2Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateLooseMarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateFactory(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSourcesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSourcesGenerator:void generateTearDown(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppClassesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppHeadersGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:int generateMarshal1Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateMarshal2Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateFactory(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFactory(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateTightUnmarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:int generateTightMarshal1Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateTightMarshal2Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateLooseMarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateLooseUnmarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaTestsGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.SingleSourceGenerator:java.lang.Object run()",
            "org.apache.activemq.pool.ConnectionPool:void close()",
            "org.apache.activemq.pool.PooledConnectionFactory:void stop()",
            "org.apache.activemq.pool.PooledSession:void close()",
            "org.apache.activemq.proxy.ProxyConnector:void stop()",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getAdminACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getReadACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getWriteACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.JaasAuthenticationBroker:void refresh()",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getACLs(org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.security.SimpleAuthenticationBroker:void refresh()",
            "org.apache.activemq.security.SimpleAuthenticationPlugin:void setUsers(java.util.List)",
            "org.apache.activemq.state.ConnectionState:void removeTempDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.state.ConnectionState:void shutdown()",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void cleanup()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()",
            "org.apache.activemq.store.amq.AMQTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.kaha.impl.async.Location checkpoint()",
            "org.apache.activemq.store.amq.AMQTx:org.apache.activemq.command.Message[] getMessages()",
            "org.apache.activemq.store.amq.AMQTx:org.apache.activemq.command.MessageAck[] getAcks()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTransactionStore$Tx:org.apache.activemq.command.Message[] getMessages()",
            "org.apache.activemq.store.journal.JournalTransactionStore$Tx:org.apache.activemq.command.MessageAck[] getAcks()",
            "org.apache.activemq.store.journal.JournalTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activeio.journal.RecordLocation checkpoint()",
            "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:void writePayload(org.apache.activemq.store.amq.AMQTx,java.io.DataOutput)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void buildReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverState()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:java.util.Map retrievePreparedState()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void savePreparedState(java.util.Map)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:org.apache.activemq.command.Message[] getMessages()",
            "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:org.apache.activemq.command.MessageAck[] getAcks()",
            "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:void commit()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()",
            "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doExpireOldServices()",
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void start()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void stop()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void add(java.net.URI[])",
            "org.apache.activemq.transport.fanout.FanoutTransport:void remove(java.net.URI[])",
            "org.apache.activemq.transport.nio.SelectorWorker:void run()",
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromMessageToFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.transport.stomp.FrameTranslator)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.StompFrame:java.lang.String toString()",
            "org.apache.activemq.transport.stomp.StompSubscription:org.apache.activemq.command.MessageAck onStompMessageAck(java.lang.String)",
            "org.apache.activemq.transport.stomp.StompWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.usage.Usage$1:void run()",
            "org.apache.activemq.usage.Usage:void onLimitChange()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void start()",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:java.util.Map extractProperties(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.String toString(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveMap(java.util.Map,java.io.DataOutputStream)",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveList(java.util.List,java.io.DataOutputStream)",
            "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)",
            "org.apache.activemq.util.URISupport:java.lang.String createQueryString(java.util.Map)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.TopicSubContainer:org.apache.activemq.store.kahadaptor.ConsumerMessageRef get(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverNextMessages(java.lang.String,java.lang.String,int,org.apache.activemq.store.MessageRecoveryListener)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerKeySet:java.lang.Object[] toArray()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.lang.Object[] toArray()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerKeySet:java.lang.Object[] toArray(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTopics()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getQueues()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryTopics()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryQueues()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTopicSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getDurableTopicSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getQueueSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryTopicSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryQueueSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getInactiveDurableTopicSubscribers()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.lang.Object[] toArray(java.lang.Object[])",
            "org.apache.activemq.management.StatsImpl:java.lang.String[] getStatisticNames()",
            "org.apache.activemq.management.StatsImpl:javax.management.j2ee.statistics.Statistic[] getStatistics()",
            "org.apache.activemq.network.NetworkConnector:org.apache.activemq.network.NetworkBridge configureBridge(org.apache.activemq.network.DemandForwardingBridgeSupport)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerKeySet:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerKeySetIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.ActiveMQConnection:void start()",
            "org.apache.activemq.ActiveMQConnection:void stop()",
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.ActiveMQConnection:void cleanup()",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void transportInterupted()",
            "org.apache.activemq.ActiveMQConnection:void transportResumed()",
            "org.apache.activemq.ActiveMQConnection:void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)",
            "org.apache.activemq.ActiveMQConnection:void onConnectionControl(org.apache.activemq.command.ConnectionControl)",
            "org.apache.activemq.ActiveMQConnection:void onConsumerControl(org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispose()",
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)",
            "org.apache.activemq.ActiveMQSession:void clearMessagesInProgress()",
            "org.apache.activemq.ActiveMQSession:void deliverAcks()",
            "org.apache.activemq.ActiveMQSession:void dispose()",
            "org.apache.activemq.ActiveMQSession:void recover()",
            "org.apache.activemq.ActiveMQSession:void acknowledge()",
            "org.apache.activemq.ActiveMQSession:void start()",
            "org.apache.activemq.ActiveMQSession:void stop()",
            "org.apache.activemq.ActiveMQSession:void redispatch(org.apache.activemq.ActiveMQDispatcher,org.apache.activemq.MessageDispatchChannel)",
            "org.apache.activemq.ActiveMQSession:void checkMessageListener()",
            "org.apache.activemq.ActiveMQSession:void setOptimizeAcknowledge(boolean)",
            "org.apache.activemq.ActiveMQSession:void setPrefetchSize(org.apache.activemq.command.ConsumerId,int)",
            "org.apache.activemq.ActiveMQSession:void close(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.ActiveMQSession:boolean isInUse(org.apache.activemq.command.ActiveMQTempDestination)",
            "org.apache.activemq.ActiveMQSessionExecutor:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSessionExecutor:boolean iterate()",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService findFirst()",
            "org.apache.activemq.broker.BrokerService$1:boolean connectTo(java.net.URI)",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector getNetworkConnectorByName(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector getConnectorByName(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void setTransportConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:void setNetworkConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:void setProxyConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.SingleTransportConnectionStateRegister:void intialize(org.apache.activemq.broker.TransportConnectionStateRegister)",
            "org.apache.activemq.broker.TransactionBroker:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.TransportConnection:java.lang.String getConnectionId()",
            "org.apache.activemq.broker.TransportConnector:void stop()",
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection()",
            "org.apache.activemq.broker.TransportStatusDetector:void doSweep()",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:void stop()",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void gc()",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void gc()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.QueueRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:java.util.LinkedList pageInList(int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void gc()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void clear()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void release()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:int size()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxBatchSize(int)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void gc()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setSystemUsage(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxProducersToAudit(int)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxAuditDepth(int)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setEnableAudit(boolean)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void dispatched(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void gc()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.broker.region.group.MessageGroupSet removeConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.OldestMessageWithLowestPriorityEvictionStrategy:org.apache.activemq.broker.region.MessageReference[] evictMessages(java.util.LinkedList)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map,org.apache.activemq.command.ProducerId,java.util.Set)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void writeLabels(java.io.PrintWriter,java.lang.String,java.lang.String,java.util.Map)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.command.ActiveMQDestination:void setPhysicalName(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:void setProperties(java.util.Map)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.AnyChildDestinationNode:org.apache.activemq.filter.DestinationNode getChild(java.lang.String)",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildren()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeValues()",
            "org.apache.activemq.filter.DestinationMap:void setEntries(java.util.List)",
            "org.apache.activemq.filter.DestinationMapNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.String toString()",
            "org.apache.activemq.jaas.CertificateLoginModule:boolean commit()",
            "org.apache.activemq.jaas.LDAPLoginModule:boolean commit()",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.lang.String,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQWASInitialContextFactory:java.util.Hashtable transformEnvironment(java.util.Hashtable)",
            "org.apache.activemq.jndi.ReadOnlyContext$LocalNamingEnumeration:java.util.Map$Entry getNext()",
            "org.apache.activemq.jndi.ReadOnlyContext:java.util.Map internalBind(java.lang.String,java.lang.Object)",
            "org.apache.activemq.kaha.impl.KahaStore:void close()",
            "org.apache.activemq.kaha.impl.KahaStore:void force()",
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getMapContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getListContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void start()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:boolean delete()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFilesNotIn(java.util.Set,java.util.Set)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFiles()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:void dispose()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void clearUsedMark()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeUnused()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void close()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.util.Set buildEntrySet()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySetIterator:java.lang.Object next()",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(int,java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.String toString()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void putAll(java.util.Map)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void close()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void force()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:boolean delete()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void consolidateDataFiles()",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashPageInfo getRetrievePage(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:int getRetrieveOffset(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void end()",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void dump()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void checkLeaf()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void removePageId(long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean resetPageReference(long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void resetParentId(long,java.util.List)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void dump()",
            "org.apache.activemq.management.PollCountStatisticImpl:long getCount()",
            "org.apache.activemq.memory.CacheEvictionUsageListener:boolean evictMessages()",
            "org.apache.activemq.memory.buffer.MessageQueue:void appendMessages(java.util.List)",
            "org.apache.activemq.memory.buffer.OrderBasedMessageBuffer:void clear()",
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void clear()",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:java.util.List getMessages(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.memory.list.SimpleMessageList:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.ConduitBridge:boolean addToAlreadyInterestedConsumers(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.DurableConduitBridge:boolean doesConsumerExist(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStart()",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.jms.JmsConnector$1:boolean removeEldestEntry(java.util.Map$Entry)",
            "org.apache.activemq.openwire.tool.CHeadersGenerator:java.util.List sort(java.util.List)",
            "org.apache.activemq.openwire.tool.CHeadersGenerator:void generateFields(java.io.PrintWriter,org.codehaus.jam.JClass)",
            "org.apache.activemq.openwire.tool.CHeadersGenerator:void generateSetup(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeHashCodeBody()",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeEqualsBody()",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeToStringBody()",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:int generateTightMarshal1Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateTightMarshal2Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateLooseMarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateFactory(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSourcesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSourcesGenerator:void generateTearDown(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppClassesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppHeadersGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:int generateMarshal1Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateMarshal2Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateFactory(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFactory(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateTightUnmarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:int generateTightMarshal1Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateTightMarshal2Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateLooseMarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateLooseUnmarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaTestsGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.SingleSourceGenerator:java.lang.Object run()",
            "org.apache.activemq.pool.ConnectionPool:void close()",
            "org.apache.activemq.pool.PooledConnectionFactory:void stop()",
            "org.apache.activemq.pool.PooledSession:void close()",
            "org.apache.activemq.proxy.ProxyConnector:void stop()",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getAdminACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getReadACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getWriteACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.JaasAuthenticationBroker:void refresh()",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getACLs(org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.security.SimpleAuthenticationBroker:void refresh()",
            "org.apache.activemq.security.SimpleAuthenticationPlugin:void setUsers(java.util.List)",
            "org.apache.activemq.state.ConnectionState:void removeTempDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.state.ConnectionState:void shutdown()",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void cleanup()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()",
            "org.apache.activemq.store.amq.AMQTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.kaha.impl.async.Location checkpoint()",
            "org.apache.activemq.store.amq.AMQTx:org.apache.activemq.command.Message[] getMessages()",
            "org.apache.activemq.store.amq.AMQTx:org.apache.activemq.command.MessageAck[] getAcks()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTransactionStore$Tx:org.apache.activemq.command.Message[] getMessages()",
            "org.apache.activemq.store.journal.JournalTransactionStore$Tx:org.apache.activemq.command.MessageAck[] getAcks()",
            "org.apache.activemq.store.journal.JournalTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activeio.journal.RecordLocation checkpoint()",
            "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:void writePayload(org.apache.activemq.store.amq.AMQTx,java.io.DataOutput)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void buildReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverState()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:java.util.Map retrievePreparedState()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void savePreparedState(java.util.Map)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:org.apache.activemq.command.Message[] getMessages()",
            "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:org.apache.activemq.command.MessageAck[] getAcks()",
            "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:void commit()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()",
            "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doExpireOldServices()",
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void start()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void stop()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void add(java.net.URI[])",
            "org.apache.activemq.transport.fanout.FanoutTransport:void remove(java.net.URI[])",
            "org.apache.activemq.transport.nio.SelectorWorker:void run()",
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromMessageToFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.transport.stomp.FrameTranslator)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.StompFrame:java.lang.String toString()",
            "org.apache.activemq.transport.stomp.StompSubscription:org.apache.activemq.command.MessageAck onStompMessageAck(java.lang.String)",
            "org.apache.activemq.transport.stomp.StompWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.usage.Usage$1:void run()",
            "org.apache.activemq.usage.Usage:void onLimitChange()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void start()",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:java.util.Map extractProperties(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.String toString(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveMap(java.util.Map,java.io.DataOutputStream)",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveList(java.util.List,java.io.DataOutputStream)",
            "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)",
            "org.apache.activemq.util.URISupport:java.lang.String createQueryString(java.util.Map)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.transport.TransportServer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector addConnector(org.apache.activemq.transport.TransportServer)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector createTransportConnector(org.apache.activemq.broker.Broker,java.net.URI)",
            "org.apache.activemq.broker.jmx.ManagedTransportConnector:void <init>(javax.management.MBeanServer,javax.management.ObjectName,org.apache.activemq.broker.Broker,org.apache.activemq.transport.TransportServer)",
            "org.apache.activemq.transport.vm.VMTransportFactory:org.apache.activemq.transport.Transport doCompositeConnect(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void <init>(org.apache.activemq.broker.BrokerService,javax.management.MBeanServer,javax.management.ObjectName,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationFactory,org.apache.activemq.broker.region.DestinationInterceptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()"
        ]
    },
    "org.apache.activemq.management.JMSEndpointStatsImpl:void <init>(org.apache.activemq.management.JMSSessionStatsImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSConsumerStatsImpl:void <init>(org.apache.activemq.management.JMSSessionStatsImpl,javax.jms.Destination)",
            "org.apache.activemq.management.JMSProducerStatsImpl:void <init>(org.apache.activemq.management.JMSSessionStatsImpl,javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.CommandMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.kaha.MessageMarshaller:void writePayload(org.apache.activemq.command.Message,java.io.DataOutput)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.kaha.impl.async.Location writeCommand(org.apache.activemq.command.DataStructure,boolean)",
            "org.apache.activemq.store.amq.AMQTxOperation:void writeExternal(org.apache.activemq.wireformat.WireFormat,java.io.DataOutput)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activeio.journal.RecordLocation writeCommand(org.apache.activemq.command.DataStructure,boolean)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.kahadaptor.TransactionMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void trace(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.transport.tcp.TcpTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.udp.CommandDatagramChannel:void write(org.apache.activemq.command.Command,java.net.SocketAddress)",
            "org.apache.activemq.transport.udp.CommandDatagramSocket:void write(org.apache.activemq.command.Command,java.net.SocketAddress)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:int tightMarshalNestedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:int tightMarshalCachedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:int tightMarshalNestedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:int tightMarshalCachedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:int tightMarshalNestedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:int tightMarshalCachedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQBytesMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQMapMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQStreamMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQTextMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void looseMarshalNestedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void looseMarshalCachedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void looseMarshalNestedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void looseMarshalCachedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void looseMarshalNestedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void looseMarshalCachedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ActiveMQBytesMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ActiveMQMapMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ActiveMQStreamMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ActiveMQTextMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQBytesMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQMapMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQStreamMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQTextMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ActiveMQBytesMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ActiveMQMapMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ActiveMQStreamMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ActiveMQTextMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQBlobMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQBytesMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQMapMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQStreamMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQTextMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ActiveMQBlobMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ActiveMQBytesMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ActiveMQMapMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ActiveMQStreamMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ActiveMQTextMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransportConnector:void start()",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStart()",
            "org.apache.activemq.transport.discovery.DiscoveryTransport:void start()"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void registerService(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:void start()"
        ]
    },
    "org.apache.activemq.transport.udp.CommandChannelSupport:void write(org.apache.activemq.command.Command)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.udp.UdpTransport:void oneway(java.lang.Object,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransport:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.udp.CommandDatagramSocket:void write(org.apache.activemq.command.Command,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.CommandChannelSupport:void write(org.apache.activemq.command.Command)",
            "org.apache.activemq.transport.udp.UdpTransport:void oneway(java.lang.Object,java.net.SocketAddress)"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:org.apache.activemq.kaha.ListContainer getDiskList()",
            "org.apache.activemq.kaha.CommandMarshaller:void <init>()",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.openwire.OpenWireFormat copy()",
            "org.apache.activemq.openwire.OpenWireFormatFactory:org.apache.activemq.wireformat.WireFormat createWireFormat()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void <init>()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void <init>()",
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void <init>(javax.sql.DataSource,org.apache.activemq.wireformat.WireFormat)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void <init>(org.apache.activeio.journal.Journal,org.apache.activemq.store.PersistenceAdapter,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void <init>(java.util.concurrent.atomic.AtomicLong)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConnectionErrorMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ExceptionResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConnectionErrorMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ExceptionResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConnectionErrorMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ExceptionResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConnectionErrorMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ExceptionResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConnectionErrorMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ExceptionResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConnectionErrorMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ExceptionResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.jndi.JNDIBaseStorable:void writeExternal(java.io.ObjectOutput)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.nio.NIOTransport:void doStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceSupport:void start()"
        ]
    },
    "org.apache.activemq.openwire.tool.CGeneratorTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CGeneratorTask:void main(java.lang.String[])"
        ]
    },
    "org.apache.activemq.openwire.tool.CSourcesGenerator:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CGeneratorTask:void execute()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:void <init>(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:void <init>(java.lang.String)",
            "org.apache.activemq.ActiveMQXAConnectionFactory:void <init>(java.net.URI)",
            "org.apache.activemq.network.jms.JmsConnector:void setBrokerService(org.apache.activemq.broker.BrokerService)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:void <init>(java.lang.String,java.lang.String,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.ActiveMQXAConnectionFactory:void <init>(java.lang.String,java.lang.String,java.net.URI)"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQXAConnectionFactory:void <init>(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.camel.component.ActiveMQConfiguration:javax.jms.ConnectionFactory createConnectionFactory()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQSslConnectionFactory:org.apache.activemq.transport.Transport createTransport()",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport doConnect(java.net.URI,java.util.concurrent.Executor)",
            "org.apache.activemq.transport.TransportFactory:org.apache.activemq.transport.Transport connect(java.net.URI)"
        ]
    },
    "org.apache.activemq.jndi.ActiveMQInitialContextFactory:org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.lang.String,java.util.Hashtable)"
        ]
    },
    "org.apache.activemq.jndi.JNDIBaseStorable:void readExternal(java.io.ObjectInput)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnector:org.apache.activemq.transport.discovery.DiscoveryAgent createDiscoveryAgent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:org.apache.activemq.transport.discovery.DiscoveryAgent getDiscoveryAgent()"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void setUri(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DiscoveryNetworkConnector:void <init>(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector createTransportConnector(org.apache.activemq.broker.Broker,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector addConnector(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:org.apache.activemq.transport.TransportServer createTransportServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:org.apache.activemq.transport.TransportServer getServer()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.TransportServer createServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.TransportServer getServer()"
        ]
    },
    "org.apache.activemq.broker.region.QueueRegion:java.util.Set getInactiveDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void start()"
        ]
    },
    "org.apache.activemq.broker.region.TopicRegion:java.util.Set getInactiveDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:java.util.Set getDurableDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:java.util.Set getDurableDestinations()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.MutableBrokerFilter:java.util.Set getDurableDestinations()"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:java.util.Set getDurableDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:java.util.Set getDurableDestinations()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.MutableBrokerFilter:java.util.Set getDurableDestinations()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void processHelperProperties()",
            "org.apache.activemq.broker.DefaultBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)",
            "org.apache.activemq.broker.jmx.BrokerView:java.lang.String addNetworkConnector(java.lang.String)",
            "org.apache.activemq.transport.peer.PeerTransportFactory$2:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.proxy.ProxyConnector addProxyConnector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.DefaultBrokerFactory:org.apache.activemq.broker.BrokerService createBroker(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:javax.management.openmbean.CompositeType getCompositeType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport:javax.management.openmbean.CompositeData convert(org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$ObjectMessageOpenTypeFactory:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:javax.management.openmbean.CompositeType getCompositeType()"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$StreamMessageOpenTypeFactory:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:javax.management.openmbean.CompositeType getCompositeType()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:void load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void load()",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:void store(java.lang.Object,org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.StoreEntry get(java.lang.Object)",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.StoreEntry remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:void clear()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.impl.index.hash.HashPage lookupPage(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPageInfo:void begin()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry getHashEntry(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashPageInfo getRetrievePage(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void load()",
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void clear()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage lookupPage(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage getParent()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry find(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void checkParentIdForRemovedPageEntry(org.apache.activemq.kaha.impl.index.tree.TreeEntry,long,long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePageEntry findClosestEntry(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void resetParentId(long,java.util.List)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void dump()"
        ]
    },
    "org.apache.activemq.memory.list.DestinationBasedMessageList:java.util.List getMessages(org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.memory.list.DestinationBasedMessageList:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpGeneratorTask:void execute()"
        ]
    },
    "org.apache.activemq.openwire.tool.CppClassesGenerator:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CppGeneratorTask:void execute()"
        ]
    },
    "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:java.lang.Object run()",
            "org.apache.activemq.openwire.tool.CppMarshallingHeadersGenerator:java.lang.Object run()",
            "org.apache.activemq.openwire.tool.JavaGeneratorTask:void execute()"
        ]
    },
    "org.apache.activemq.openwire.tool.JavaTestsGenerator:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.JavaGeneratorTask:void execute()"
        ]
    },
    "org.apache.activemq.kaha.impl.data.SyncDataFileReader:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashEntry:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeEntry:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.store.ProxyMessageStore:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.store.ProxyMessageStore:void start()",
            "org.apache.activemq.store.journal.JournalMessageStore:void start()"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.store.ProxyMessageStore:void start()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void start()",
            "org.apache.activemq.store.journal.JournalMessageStore:void start()"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DestinationFilter:void start()"
        ]
    },
    "org.apache.activemq.memory.buffer.MessageQueue:void add(org.apache.activemq.broker.region.MessageReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.list.DestinationBasedMessageList:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.memory.buffer.MessageQueue:void add(org.apache.activemq.command.ActiveMQMessage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry remove(org.apache.activemq.kaha.impl.index.tree.TreeEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.StoreEntry remove(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:org.apache.activemq.command.MessageDispatch createMessageDispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean dispatch(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean hasMessagesBufferedToDeliver()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()"
        ]
    },
    "org.apache.activemq.kaha.CommandMarshaller:java.lang.Object readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileReader:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)",
            "org.apache.activemq.kaha.impl.index.hash.HashEntry:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)",
            "org.apache.activemq.kaha.impl.index.tree.TreeEntry:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.kaha.MessageMarshaller:org.apache.activemq.command.Message readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.MessageMarshaller:java.lang.Object readPayload(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTxOperation:void readExternal(org.apache.activemq.wireformat.WireFormat,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:org.apache.activemq.store.amq.AMQTx readPayload(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.TransactionMarshaller:java.lang.Object readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileReader:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)",
            "org.apache.activemq.kaha.impl.index.hash.HashEntry:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)",
            "org.apache.activemq.kaha.impl.index.tree.TreeEntry:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:java.lang.Object readCommand()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.tcp.TcpTransport:void doRun()"
        ]
    },
    "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConsumerControlMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.DataArrayResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.DataResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalQueueAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalTopicAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalTransactionMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.ActiveMQMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.LocalTransactionIdMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageIdMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.NetworkBridgeFilterMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.RemoveInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.RemoveSubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.SessionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.SubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.TransactionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConsumerControlMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.DataArrayResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.DataResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalQueueAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalTopicAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalTransactionMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.LocalTransactionIdMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageIdMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessagePullMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.NetworkBridgeFilterMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.RemoveInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.RemoveSubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.SessionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.SubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.TransactionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConsumerControlMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.DataArrayResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.DataResponseMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalQueueAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalTopicAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalTransactionMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessagePullMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ProducerAckMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.LocalTransactionIdMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageIdMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.NetworkBridgeFilterMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.RemoveInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.RemoveSubscriptionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.SessionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.TransactionInfoMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConsumerControlMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.DataArrayResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.DataResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalQueueAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalTopicAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalTransactionMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.ActiveMQMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.LocalTransactionIdMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageIdMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.NetworkBridgeFilterMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.RemoveInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.RemoveSubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.SessionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.SubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.TransactionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConsumerControlMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.DataArrayResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.DataResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalQueueAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalTopicAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalTransactionMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.LocalTransactionIdMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageIdMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessagePullMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.NetworkBridgeFilterMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.RemoveInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.RemoveSubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.SessionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.SubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.TransactionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConsumerControlMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.DataArrayResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.DataResponseMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalQueueAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalTopicAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalTransactionMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessagePullMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ProducerAckMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.LocalTransactionIdMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageIdMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.NetworkBridgeFilterMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.RemoveInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.RemoveSubscriptionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.SessionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.TransactionInfoMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.wireformat.WireFormat getWireFormat()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void start()"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.region.DestinationInterceptor[] createDefaultDestinationInterceptor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyMap:void setPolicyEntries(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.security.DefaultAuthorizationMap:void setAuthorizationEntries(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.DefaultAuthorizationMap:void <init>(java.util.List)"
        ]
    },
    "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression multExpr()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression addExpression()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:void load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int size()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object removeFirst()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object removeLast()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean isEmpty()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean contains(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.util.Iterator iterator()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object[] toArray()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object[] toArray(java.lang.Object[])",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean add(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(int,java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object get(int)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object set(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:void add(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry internalAddLast(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry internalAddFirst(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem internalAdd(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry internalGet(int)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean doRemove(int)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object remove(int)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int indexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:int lastIndexOf(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.util.ListIterator listIterator()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.util.ListIterator listIterator(int)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.util.List subList(int,int)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object get(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry getFirst()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry getLast()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry getNext(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry getPrevious(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry refresh(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object removeFirst()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object removeLast()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object[] toArray()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.Service[] getServices()",
            "org.apache.activemq.management.JMSConnectionStatsImpl:org.apache.activemq.management.JMSSessionStatsImpl[] getSessions()",
            "org.apache.activemq.management.JMSSessionStatsImpl:org.apache.activemq.management.JMSProducerStatsImpl[] getProducers()",
            "org.apache.activemq.management.JMSSessionStatsImpl:org.apache.activemq.management.JMSConsumerStatsImpl[] getConsumers()",
            "org.apache.activemq.management.JMSStatsImpl:org.apache.activemq.management.JMSConnectionStatsImpl[] getConnections()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object[] toArray(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void addListener(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeListener(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:javax.management.openmbean.CompositeType createCompositeType()",
            "org.apache.activemq.management.StatsImpl:javax.management.j2ee.statistics.Statistic[] getStatistics()",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.NetworkConnector:org.apache.activemq.network.NetworkBridge configureBridge(org.apache.activemq.network.DemandForwardingBridgeSupport)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object get(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()",
            "org.apache.activemq.TransactionContext:void afterCommit()",
            "org.apache.activemq.TransactionContext:void beforeEnd()",
            "org.apache.activemq.broker.ft.MasterConnector:void setBrokerService(org.apache.activemq.broker.BrokerService)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.Queue:void doDispatch(java.util.List)",
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:void gc()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashPageInfo getRetrievePage(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:org.apache.activemq.kaha.impl.index.hash.HashEntry getHashEntry(int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour getFlavour(org.apache.activemq.kaha.impl.index.tree.TreePage,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void insertTreeEntry(int,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void resetPageReference(int,long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry getTreeEntry(int)",
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void onSizeChanged(org.apache.activemq.memory.buffer.MessageQueue,int,int)",
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void bubbleUp(org.apache.activemq.memory.buffer.MessageQueue,int)",
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void bubbleDown(org.apache.activemq.memory.buffer.MessageQueue,int)",
            "org.apache.activemq.network.jms.JmsConnector:void start()",
            "org.apache.activemq.network.jms.JmsConnector:void stop()",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:org.apache.activemq.command.Message[] getMessages()",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:org.apache.activemq.command.MessageAck[] getAcks()",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.TransactionMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object remove(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:boolean iterate()",
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:void gc()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:org.apache.activemq.kaha.impl.async.DataFileAccessor openDataFileReader()",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:org.apache.activemq.kaha.impl.index.hash.HashEntry removeHashEntry(int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry removeTreeEntry(int)",
            "org.apache.activemq.transport.udp.DefaultBufferPool:java.nio.ByteBuffer borrowBuffer()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.util.List subList(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashPage:java.util.List getSubList(int,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:java.util.List getSubList(int,int)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object get(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:boolean acknowledgeReference(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.StoreIndexWriter:void storeItem(org.apache.activemq.kaha.impl.index.IndexItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.IndexManager:void storeIndex(org.apache.activemq.kaha.impl.index.IndexItem)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.StoreIndexWriter:void updateIndexes(org.apache.activemq.kaha.impl.index.IndexItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.IndexManager:void freeIndex(org.apache.activemq.kaha.impl.index.IndexItem)",
            "org.apache.activemq.kaha.impl.index.IndexManager:void updateIndexes(org.apache.activemq.kaha.impl.index.IndexItem)"
        ]
    },
    "org.apache.activemq.filter.DestinationMap:int getTopicRootChildCount()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.DestinationMap:int getQueueRootChildCount()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.NetworkConnector:org.apache.activemq.network.NetworkBridge configureBridge(org.apache.activemq.network.DemandForwardingBridgeSupport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DiscoveryNetworkConnector:org.apache.activemq.network.NetworkBridge createBridge(org.apache.activemq.transport.Transport,org.apache.activemq.transport.Transport,org.apache.activemq.command.DiscoveryEvent)",
            "org.apache.activemq.network.MulticastNetworkConnector:void handleStart()"
        ]
    },
    "org.apache.activemq.memory.CacheFilter:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:int size()"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.command.Message:void beforeMarshall(org.apache.activemq.wireformat.WireFormat)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMapMessage:void beforeMarshall(org.apache.activemq.wireformat.WireFormat)",
            "org.apache.activemq.command.ActiveMQTextMessage:void beforeMarshall(org.apache.activemq.wireformat.WireFormat)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:void beforeMarshall(org.apache.activemq.wireformat.WireFormat)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.WireFormatInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.WireFormatInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.WireFormatInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.WireFormatInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.WireFormatInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.WireFormatInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.util.MarshallingSupport:void marshalPrimitive(java.io.DataOutputStream,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveMap(java.util.Map,java.io.DataOutputStream)",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveList(java.util.List,java.io.DataOutputStream)"
        ]
    },
    "org.apache.activemq.util.URISupport:java.net.URI createRemainingURI(java.net.URI,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:void setBrokerURL(java.lang.String)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void copy(org.apache.activemq.command.ActiveMQMapMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMapMessage:org.apache.activemq.command.Message copy()"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void beforeMarshall(org.apache.activemq.wireformat.WireFormat)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void initializeReading()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:char getChar(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte[] getBytes(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.Object getObject(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.util.Enumeration getMapNames()",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean itemExists(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.util.Map getContentMap()"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:java.util.List removeValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMapNode:void removeDesendentValues(java.util.Set)",
            "org.apache.activemq.filter.DestinationMapNode:java.util.Collection removeValues()"
        ]
    },
    "org.apache.activemq.filter.DestinationMap:java.lang.Object chooseValue(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyMap:org.apache.activemq.broker.region.policy.PolicyEntry getEntryFor(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:org.apache.activemq.security.AuthorizationEntry getEntryFor(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.network.DemandSubscription:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.amq.AMQMessageStore:boolean replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription,org.apache.activemq.command.MessageAck,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.store.ProxyMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$4:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void removeMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.MessageAck)"
        ]
    },
    "org.apache.activemq.broker.region.group.SimpleMessageGroupSet:boolean contains(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.group.MessageGroupHashBucket$1:boolean contains(java.lang.String)"
        ]
    },
    "org.apache.activemq.filter.ComparisonExpression$LikeExpression:void <init>(org.apache.activemq.filter.Expression,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ComparisonExpression:org.apache.activemq.filter.BooleanExpression createLike(org.apache.activemq.filter.Expression,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean retainAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.openwire.tool.MultiSourceGenerator:boolean isValidClass(org.codehaus.jam.JClass)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.MultiSourceGenerator:java.lang.Object run()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean containsAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean containsAll(java.util.Collection)"
        ]
    },
    "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.ProducerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.broker.MapTransportConnectionStateRegister:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.SessionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.SessionId)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSubscription(org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBeginTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processPrepareTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionOnePhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processCommitTransactionTwoPhase(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRollbackTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processForgetTransaction(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRecoverTransactions(org.apache.activemq.command.TransactionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddProducer(org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConsumer(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddSession(org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.filter.PropertyExpression:java.lang.Object evaluate(org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQMessage:java.lang.Object getObjectProperty(java.lang.String)"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:boolean isCacheEnabled()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:boolean isStackTraceEnabled()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:boolean isTcpNoDelayEnabled()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:boolean isSizePrefixDisabled()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:boolean isTightEncodingEnabled()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:long getMaxInactivityDuration()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor:void startMonitorThreads()"
        ]
    },
    "org.apache.activemq.command.WireFormatInfo:int getCacheSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:void renegotiateWireFormat(org.apache.activemq.command.WireFormatInfo)"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.DestinationMapNode:void removeAll(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.DestinationMapNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:org.apache.activemq.filter.DestinationNode getChild(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:org.apache.activemq.filter.DestinationNode getChild(java.lang.String)",
            "org.apache.activemq.filter.DestinationMapNode:void removeAll(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.DestinationMapNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void removeLocation(org.apache.activemq.kaha.impl.async.Location)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.async.DataManagerFacade:void addInterestInFile(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:void <init>(org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.impl.DataManager)",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()",
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void expressDataInterest()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataManagerFacade:void removeInterestInFile(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:void removeRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void doClear()",
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void delete(org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexItem)"
        ]
    },
    "org.apache.activemq.jndi.ActiveMQInitialContextFactory:org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.lang.String,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:javax.naming.Context getInitialContext(java.util.Hashtable)"
        ]
    },
    "org.apache.activemq.jndi.ActiveMQWASInitialContextFactory:java.util.Hashtable transformEnvironment(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ActiveMQWASInitialContextFactory:javax.naming.Context getInitialContext(java.util.Hashtable)"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext$ListBindingEnumeration:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.jaas.PropertiesLoginModule:boolean commit()",
            "org.apache.activemq.jaas.TextFileCertificateLoginModule:java.lang.String getUserNameForCertificates(java.security.cert.X509Certificate[])",
            "org.apache.activemq.jaas.TextFileCertificateLoginModule:java.util.Set getUserGroups(java.lang.String)",
            "org.apache.activemq.jndi.JNDIReferenceFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.activemq.jndi.JNDIReferenceFactory:javax.naming.Reference createReference(java.lang.String,org.apache.activemq.jndi.JNDIStorableInterface)",
            "org.apache.activemq.jndi.ReadOnlyContext$ListBindingEnumeration:java.lang.Object next()"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext$ListEnumeration:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.jaas.PropertiesLoginModule:boolean commit()",
            "org.apache.activemq.jaas.TextFileCertificateLoginModule:java.lang.String getUserNameForCertificates(java.security.cert.X509Certificate[])",
            "org.apache.activemq.jaas.TextFileCertificateLoginModule:java.util.Set getUserGroups(java.lang.String)",
            "org.apache.activemq.jndi.JNDIReferenceFactory:java.lang.Object getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)",
            "org.apache.activemq.jndi.JNDIReferenceFactory:javax.naming.Reference createReference(java.lang.String,org.apache.activemq.jndi.JNDIStorableInterface)",
            "org.apache.activemq.jndi.ReadOnlyContext$ListEnumeration:java.lang.Object next()"
        ]
    },
    "org.apache.activemq.transport.stomp.StompSubscription:org.apache.activemq.command.MessageAck onStompMessageAck(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.util.IntrospectionSupport:java.lang.String toString(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.BaseCommand:java.lang.String toString()",
            "org.apache.activemq.command.JournalQueueAck:java.lang.String toString()",
            "org.apache.activemq.command.JournalTopicAck:java.lang.String toString()",
            "org.apache.activemq.command.JournalTrace:java.lang.String toString()",
            "org.apache.activemq.command.JournalTransaction:java.lang.String toString()",
            "org.apache.activemq.command.KeepAliveInfo:java.lang.String toString()",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.String toString(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.data.SyncDataFileReader:byte readDataItemSize(org.apache.activemq.kaha.impl.data.DataItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void recoverRedoItems(org.apache.activemq.kaha.impl.data.RedoListener)"
        ]
    },
    "org.apache.activemq.kaha.impl.data.SyncDataFileWriter:void updateItem(org.apache.activemq.kaha.impl.data.DataItem,org.apache.activemq.kaha.Marshaller,java.lang.Object,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void updateItem(org.apache.activemq.kaha.StoreLocation,org.apache.activemq.kaha.Marshaller,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void doClear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:void clear()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void clear()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void delete(org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object removeFirst()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object removeLast()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:void remove(org.apache.activemq.kaha.impl.index.IndexItem)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object set(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem internalSet(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean doRemove(int)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object remove(int)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void remove(org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.memory.CacheFilter:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:java.lang.Object get(java.lang.Object)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void tightMarshalCachedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.LocalTransactionIdMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageIdMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.NetworkBridgeFilterMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.RemoveInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.RemoveSubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.SessionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.SubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.TransactionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void tightMarshalCachedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.LocalTransactionIdMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageIdMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessagePullMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.NetworkBridgeFilterMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.RemoveInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.RemoveSubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.SessionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.SubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.TransactionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void tightMarshalCachedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.LocalTransactionIdMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageIdMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessagePullMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.NetworkBridgeFilterMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.RemoveInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.RemoveSubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.SessionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.TransactionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore:boolean replayRemoveMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()",
            "org.apache.activemq.store.amq.AMQTxOperation:boolean replay(org.apache.activemq.store.amq.AMQPersistenceAdapter,org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void removeInterest(org.apache.activemq.store.kahadaptor.ReferenceRecord)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void removeMessage(org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:boolean acknowledgeReference(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void stop()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void stop()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:boolean replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()",
            "org.apache.activemq.store.amq.AMQTxOperation:boolean replay(org.apache.activemq.store.amq.AMQPersistenceAdapter,org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void stop()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void fillBatch()",
            "org.apache.activemq.store.ProxyTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void resetBatching(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void rollback(org.apache.activemq.command.TransactionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.LocalTransaction:void rollback()",
            "org.apache.activemq.transaction.XATransaction:void rollback()"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.JmDNSFactory$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent$1:void run()"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:javax.jmdns.ServiceInfo createServiceInfo(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void registerService(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getTopics()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getQueues()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getTemporaryTopics()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getTemporaryQueues()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getDurableTopicSubscribers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getQueueSubscribers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getTopicSubscribers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getTemporaryTopicSubscribers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getTemporaryQueueSubscribers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName[] getInactiveDurableTopicSubscribers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService findFirst()",
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.SingleTransportConnectionStateRegister:void intialize(org.apache.activemq.broker.TransportConnectionStateRegister)",
            "org.apache.activemq.broker.TransactionBroker:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection()",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:void stop()",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void gc()",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.QueueRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void gc()",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.broker.region.group.MessageGroupSet removeConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map,org.apache.activemq.command.ProducerId,java.util.Set)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void writeLabels(java.io.PrintWriter,java.lang.String,java.lang.String,java.util.Map)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:void setProperties(java.util.Map)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.AnyChildDestinationNode:org.apache.activemq.filter.DestinationNode getChild(java.lang.String)",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildren()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeValues()",
            "org.apache.activemq.filter.DestinationMapNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.String toString()",
            "org.apache.activemq.jaas.CertificateLoginModule:boolean commit()",
            "org.apache.activemq.jaas.LDAPLoginModule:boolean commit()",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.lang.String,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQWASInitialContextFactory:java.util.Hashtable transformEnvironment(java.util.Hashtable)",
            "org.apache.activemq.jndi.ReadOnlyContext$LocalNamingEnumeration:void <init>(org.apache.activemq.jndi.ReadOnlyContext)",
            "org.apache.activemq.jndi.ReadOnlyContext:java.util.Map internalBind(java.lang.String,java.lang.Object)",
            "org.apache.activemq.kaha.impl.KahaStore:void close()",
            "org.apache.activemq.kaha.impl.KahaStore:void force()",
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getMapContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getListContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:boolean delete()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFiles()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void clearUsedMark()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeUnused()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void close()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.util.Iterator iterator()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.util.Set buildEntrySet()",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(int,java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void putAll(java.util.Map)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void close()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void force()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:boolean delete()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void consolidateDataFiles()",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:java.util.List getMessages(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.ConduitBridge:boolean addToAlreadyInterestedConsumers(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.DurableConduitBridge:boolean doesConsumerExist(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.jms.JmsConnector$1:boolean removeEldestEntry(java.util.Map$Entry)",
            "org.apache.activemq.pool.ConnectionPool:void close()",
            "org.apache.activemq.pool.PooledConnectionFactory:void stop()",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getAdminACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getReadACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getWriteACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getACLs(org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.state.ConnectionState:void shutdown()",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void cleanup()",
            "org.apache.activemq.store.amq.AMQTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.kaha.impl.async.Location checkpoint()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activeio.journal.RecordLocation checkpoint()",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void buildReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:java.util.Map retrievePreparedState()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void savePreparedState(java.util.Map)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:java.util.Iterator iterator()",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doExpireOldServices()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.nio.SelectorWorker:void run()",
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromMessageToFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.transport.stomp.FrameTranslator)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.StompFrame:java.lang.String toString()",
            "org.apache.activemq.transport.stomp.StompSubscription:org.apache.activemq.command.MessageAck onStompMessageAck(java.lang.String)",
            "org.apache.activemq.transport.stomp.StompWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:java.util.Map extractProperties(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.String toString(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.LRUSet:java.util.Iterator iterator()",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveMap(java.util.Map,java.io.DataOutputStream)",
            "org.apache.activemq.util.URISupport:java.lang.String createQueryString(java.util.Map)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.lang.Object[] toArray()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.lang.Object[] toArray()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.lang.Object[] toArray(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTopics()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getQueues()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryTopics()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryQueues()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTopicSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getDurableTopicSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getQueueSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryTopicSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getTemporaryQueueSubscribers()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.ObjectName[] getInactiveDurableTopicSubscribers()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.lang.Object[] toArray(java.lang.Object[])",
            "org.apache.activemq.management.StatsImpl:java.lang.String[] getStatisticNames()",
            "org.apache.activemq.management.StatsImpl:javax.management.j2ee.statistics.Statistic[] getStatistics()",
            "org.apache.activemq.network.NetworkConnector:org.apache.activemq.network.NetworkBridge configureBridge(org.apache.activemq.network.DemandForwardingBridgeSupport)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:java.util.List listConnectionStates()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.TransportConnection:java.lang.String getConnectionId()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRecoverTransactions(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRecoverTransactions(org.apache.activemq.command.TransactionInfo)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRecoverTransactions(org.apache.activemq.command.TransactionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.TransactionInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:void gc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void gc()",
            "org.apache.activemq.broker.BrokerFilter:void gc()",
            "org.apache.activemq.broker.MutableBrokerFilter:void gc()",
            "org.apache.activemq.broker.jmx.BrokerView:void gc()",
            "org.apache.activemq.broker.region.RegionBroker:void gc()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.ActiveMQDestination[] getDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.ActiveMQDestination[] getDestinations()",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.ActiveMQDestination[] getDestinations()",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.ActiveMQDestination[] getDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:org.apache.activemq.command.ActiveMQDestination[] getDestinations()",
            "org.apache.activemq.broker.MutableBrokerFilter:org.apache.activemq.command.ActiveMQDestination[] getDestinations()"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)"
        ]
    },
    "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildren()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildren()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildNodes()"
        ]
    },
    "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildNodes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.AnyChildDestinationNode:org.apache.activemq.filter.DestinationNode getChild(java.lang.String)",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildren()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeValues()"
        ]
    },
    "org.apache.activemq.filter.AnyChildDestinationNode:void appendDescendantValues(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.DestinationMapNode:void appendDescendantValues(java.util.Set)"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:java.util.Set getDesendentValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMapNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.DestinationMapNode:java.util.Collection getDesendentValues()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataManagerFacade:boolean delete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataManagerFacade:void consolidateDataFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void cleanup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager$2:void run()"
        ]
    },
    "org.apache.activemq.management.StatsImpl:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.ConnectionStatistics:void reset()",
            "org.apache.activemq.broker.region.ConnectorStatistics:void reset()",
            "org.apache.activemq.broker.region.DestinationStatistics:void reset()",
            "org.apache.activemq.management.JMSConnectionStatsImpl:void reset()",
            "org.apache.activemq.management.JMSEndpointStatsImpl:void reset()",
            "org.apache.activemq.management.JMSSessionStatsImpl:void reset()",
            "org.apache.activemq.management.StatsImpl:void reset()"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext$LocalNamingEnumeration:void <init>(org.apache.activemq.jndi.ReadOnlyContext,org.apache.activemq.jndi.ReadOnlyContext$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ReadOnlyContext$ListBindingEnumeration:void <init>(org.apache.activemq.jndi.ReadOnlyContext)",
            "org.apache.activemq.jndi.ReadOnlyContext$ListEnumeration:void <init>(org.apache.activemq.jndi.ReadOnlyContext)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean retainAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void trace(org.apache.activemq.command.DataStructure)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void start()",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void stop()",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void acknowledge(org.apache.activemq.broker.ConsumerBrokerExchange,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void addSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void beginTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void commitTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId,boolean)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void forgetTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:org.apache.activemq.command.Response messagePull(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:int prepareTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void postProcessDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeSession(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.SessionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.util.UDPTraceBrokerPlugin:void rollbackTransaction(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.transport.stomp.StompWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.CommandMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.kaha.MessageMarshaller:void writePayload(org.apache.activemq.command.Message,java.io.DataOutput)",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.kaha.impl.async.Location writeCommand(org.apache.activemq.command.DataStructure,boolean)",
            "org.apache.activemq.store.amq.AMQTxOperation:void writeExternal(org.apache.activemq.wireformat.WireFormat,java.io.DataOutput)",
            "org.apache.activemq.store.jdbc.JDBCMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:org.apache.activeio.journal.RecordLocation writeCommand(org.apache.activemq.command.DataStructure,boolean)",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.kahadaptor.TransactionMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void onCommand(java.lang.Object)"
        ]
    },
    "org.apache.activemq.transport.tcp.TcpTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState unregisterConnectionState(org.apache.activemq.command.ConnectionId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.transaction.XATransaction:void setStateFinished()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transaction.XATransaction:void commit(boolean)",
            "org.apache.activemq.transaction.XATransaction:void rollback()",
            "org.apache.activemq.transaction.XATransaction:int prepare()"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregister(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTempTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.jmx.ManagedTopicRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void remove(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Topic:void deactivate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void removeDataFile(org.apache.activemq.kaha.impl.async.DataFile)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:org.apache.activemq.kaha.impl.async.DataFile allocateLocation(org.apache.activemq.kaha.impl.async.Location)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void removeInterestInFile(org.apache.activemq.kaha.impl.async.DataFile)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFiles()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAppender$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean removeAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.jaas.CertificateLoginModule:boolean logout()",
            "org.apache.activemq.jaas.PropertiesLoginModule:boolean logout()"
        ]
    },
    "org.apache.activemq.network.DemandSubscription:boolean remove(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore$2:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()",
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()"
        ]
    },
    "org.apache.activemq.store.amq.AMQMessageStore$3:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()",
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()"
        ]
    },
    "org.apache.activemq.store.amq.AMQTopicMessageStore$1:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()",
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()"
        ]
    },
    "org.apache.activemq.store.journal.JournalMessageStore$2:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()",
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore$1:void afterCommit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()"
        ]
    },
    "org.apache.activemq.store.journal.JournalTopicMessageStore$1:void afterRollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()",
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()"
        ]
    },
    "org.apache.activemq.broker.region.Queue:void gc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:void gc()",
            "org.apache.activemq.broker.region.AbstractRegion:void gc()",
            "org.apache.activemq.broker.region.DestinationFilter:void gc()",
            "org.apache.activemq.broker.region.Queue:void dropEvent(boolean)",
            "org.apache.activemq.broker.region.Queue:void purge()"
        ]
    },
    "org.apache.activemq.memory.CacheEvictionUsageListener:boolean evictMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheEvictionUsageListener$1:boolean iterate()"
        ]
    },
    "org.apache.activemq.state.ConnectionState:void removeTempDestination(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean removeAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.jaas.CertificateLoginModule:boolean logout()",
            "org.apache.activemq.jaas.PropertiesLoginModule:boolean logout()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerKeySetIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.region.Queue:void gc()",
            "org.apache.activemq.broker.region.QueueRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.TopicRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.broker.region.group.MessageGroupSet removeConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.kaha.impl.KahaStore:void close()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeUnused()",
            "org.apache.activemq.memory.CacheEvictionUsageListener:boolean evictMessages()",
            "org.apache.activemq.pool.ConnectionPool:void close()",
            "org.apache.activemq.state.ConnectionState:void removeTempDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void remove(java.net.URI[])",
            "org.apache.activemq.transport.nio.SelectorWorker:void run()",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.StompSubscription:org.apache.activemq.command.MessageAck onStompMessageAck(java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:java.util.Map extractProperties(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerValueCollectionIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.region.Queue:void gc()",
            "org.apache.activemq.broker.region.QueueRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.TopicRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.broker.region.group.MessageGroupSet removeConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.kaha.impl.KahaStore:void close()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeUnused()",
            "org.apache.activemq.memory.CacheEvictionUsageListener:boolean evictMessages()",
            "org.apache.activemq.pool.ConnectionPool:void close()",
            "org.apache.activemq.state.ConnectionState:void removeTempDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void remove(java.net.URI[])",
            "org.apache.activemq.transport.nio.SelectorWorker:void run()",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.StompSubscription:org.apache.activemq.command.MessageAck onStompMessageAck(java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:java.util.Map extractProperties(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:void removeInterestInFile(org.apache.activemq.kaha.impl.data.DataFile)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void removeInterestInFile(int)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processRemoveProducer(org.apache.activemq.command.ProducerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.RemoveInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processRemoveConsumer(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.RemoveInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void deleteSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.util.SubscriptionKey)",
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void deleteSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void close()"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void onConnectionControl(org.apache.activemq.command.ConnectionControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processConnectionControl(org.apache.activemq.command.ConnectionControl)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void clearMessagesInProgress()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void transportInterupted()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void deliverAcks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void transportResumed()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void stop()",
            "org.apache.activemq.ActiveMQMessageConsumer:void setMessageListener(javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void checkMessageListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void checkMessageListener()"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void setOptimizeAcknowledge(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onConnectionControl(org.apache.activemq.command.ConnectionControl)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:void setPrefetchSize(org.apache.activemq.command.ConsumerId,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onConsumerControl(org.apache.activemq.command.ConsumerControl)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:boolean isInUse(org.apache.activemq.command.ActiveMQTempDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)"
        ]
    },
    "org.apache.activemq.broker.BrokerService$1:boolean connectTo(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector getNetworkConnectorByName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:boolean removeNetworkConnector(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector getConnectorByName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:boolean removeConnector(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:java.lang.String getConnectionId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectionView:java.lang.String getConnectionId()"
        ]
    },
    "org.apache.activemq.broker.TransportStatusDetector:void doSweep()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportStatusDetector:void run()"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxBatchSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxBatchSize(int)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setMaxBatchSize(int)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setSystemUsage(org.apache.activemq.usage.SystemUsage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void setPending(org.apache.activemq.broker.region.cursors.PendingMessageCursor)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.TopicSubscription:void init()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setSystemUsage(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setSystemUsage(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxProducersToAudit(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxProducersToAudit(int)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setMaxProducersToAudit(int)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxAuditDepth(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxProducersToAudit(int)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxAuditDepth(int)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setMaxAuditDepth(int)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setEnableAudit(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setEnableAudit(boolean)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setEnableAudit(boolean)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:org.apache.activemq.broker.region.MessageReference next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message getMessage(java.lang.String)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.TopicSubscription:void removeExpiredMessages()",
            "org.apache.activemq.broker.region.TopicSubscription:void processMessageDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)",
            "org.apache.activemq.broker.region.TopicSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:org.apache.activemq.broker.region.MessageReference next()"
        ]
    },
    "org.apache.activemq.broker.region.policy.OldestMessageWithLowestPriorityEvictionStrategy:org.apache.activemq.broker.region.MessageReference[] evictMessages(java.util.LinkedList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicSubscription:void add(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()"
        ]
    },
    "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.CompositeDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.command.ActiveMQDestination:void setPhysicalName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQDestination:void <init>(java.lang.String)",
            "org.apache.activemq.command.ActiveMQDestination:void readExternal(java.io.ObjectInput)",
            "org.apache.activemq.command.ActiveMQTempDestination:void setPhysicalName(java.lang.String)",
            "org.apache.activemq.openwire.v1.ActiveMQDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ActiveMQDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ActiveMQDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.DestinationMapNode:void removeAll(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.DestinationMapNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.filter.AnyChildDestinationNode:org.apache.activemq.filter.DestinationNode getChild(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:org.apache.activemq.filter.DestinationNode getChild(java.lang.String)",
            "org.apache.activemq.filter.DestinationMapNode:void removeAll(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.DestinationMapNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getDesendentValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getDesendentValues()",
            "org.apache.activemq.filter.DestinationMapNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getValues()",
            "org.apache.activemq.filter.DestinationMapNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeDesendentValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeDesendentValues()",
            "org.apache.activemq.filter.DestinationMapNode:void removeAll(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeValues()",
            "org.apache.activemq.filter.DestinationMapNode:void removeAll(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression$2:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:java.lang.String toString()",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.MultiExpressionEvaluator$CacheExpression:java.lang.String toString()",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void addExpressionListner(org.apache.activemq.filter.Expression,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.UnaryExpression$4:java.lang.String toString()",
            "org.apache.activemq.filter.UnaryExpression:java.lang.String toString()",
            "org.apache.activemq.filter.UnaryExpression:int hashCode()",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.jaas.CertificateLoginModule:boolean commit()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jaas.LDAPLoginModule:boolean commit()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jndi.ReadOnlyContext$LocalNamingEnumeration:java.util.Map$Entry getNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ReadOnlyContext$ListBindingEnumeration:java.lang.Object nextElement()",
            "org.apache.activemq.jndi.ReadOnlyContext$ListEnumeration:java.lang.Object nextElement()"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:void dispose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeUnused()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeDataFileAccessors(org.apache.activemq.kaha.impl.async.DataFile)",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void close()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerEntrySetIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$4:void run()",
            "org.apache.activemq.ActiveMQConnection:void start()",
            "org.apache.activemq.ActiveMQConnection:void stop()",
            "org.apache.activemq.ActiveMQConnection:void close()",
            "org.apache.activemq.ActiveMQConnection:void cleanup()",
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.ActiveMQConnection:void transportInterupted()",
            "org.apache.activemq.ActiveMQConnection:void transportResumed()",
            "org.apache.activemq.ActiveMQConnection:void deleteTempDestination(org.apache.activemq.command.ActiveMQTempDestination)",
            "org.apache.activemq.ActiveMQConnection:void onConnectionControl(org.apache.activemq.command.ConnectionControl)",
            "org.apache.activemq.ActiveMQConnection:void onConsumerControl(org.apache.activemq.command.ConsumerControl)",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispose()",
            "org.apache.activemq.ActiveMQMessageConsumer:void rollback()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)",
            "org.apache.activemq.ActiveMQSession:void clearMessagesInProgress()",
            "org.apache.activemq.ActiveMQSession:void deliverAcks()",
            "org.apache.activemq.ActiveMQSession:void dispose()",
            "org.apache.activemq.ActiveMQSession:void recover()",
            "org.apache.activemq.ActiveMQSession:void acknowledge()",
            "org.apache.activemq.ActiveMQSession:void start()",
            "org.apache.activemq.ActiveMQSession:void stop()",
            "org.apache.activemq.ActiveMQSession:void redispatch(org.apache.activemq.ActiveMQDispatcher,org.apache.activemq.MessageDispatchChannel)",
            "org.apache.activemq.ActiveMQSession:void checkMessageListener()",
            "org.apache.activemq.ActiveMQSession:void setOptimizeAcknowledge(boolean)",
            "org.apache.activemq.ActiveMQSession:void setPrefetchSize(org.apache.activemq.command.ConsumerId,int)",
            "org.apache.activemq.ActiveMQSession:void close(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.ActiveMQSession:boolean isInUse(org.apache.activemq.command.ActiveMQTempDestination)",
            "org.apache.activemq.ActiveMQSessionExecutor:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSessionExecutor:boolean iterate()",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService findFirst()",
            "org.apache.activemq.broker.BrokerService$1:boolean connectTo(java.net.URI)",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector getNetworkConnectorByName(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector getConnectorByName(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void setTransportConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:void setNetworkConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:void setProxyConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.SingleTransportConnectionStateRegister:void intialize(org.apache.activemq.broker.TransportConnectionStateRegister)",
            "org.apache.activemq.broker.TransactionBroker:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.TransportConnection:java.lang.String getConnectionId()",
            "org.apache.activemq.broker.TransportConnector:void stop()",
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection()",
            "org.apache.activemq.broker.TransportStatusDetector:void doSweep()",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:void stop()",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void gc()",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.Queue:void addSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:void gc()",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.command.Message[] browse()",
            "org.apache.activemq.broker.region.Queue:void purge()",
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(org.apache.activemq.broker.region.MessageReferenceFilter,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessages(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReferenceFilter,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.QueueRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:java.util.LinkedList pageInList(int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.QueueStorePrefetch:void gc()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void stop()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void clear()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void release()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:int size()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxBatchSize(int)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void gc()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setSystemUsage(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxProducersToAudit(int)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxAuditDepth(int)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setEnableAudit(boolean)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void dispatched(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:org.apache.activemq.broker.region.cursors.PendingMessageCursor getNextCursor()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void gc()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.VMPendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.broker.region.group.MessageGroupSet removeConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.OldestMessageWithLowestPriorityEvictionStrategy:org.apache.activemq.broker.region.MessageReference[] evictMessages(java.util.LinkedList)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map,org.apache.activemq.command.ProducerId,java.util.Set)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void writeLabels(java.io.PrintWriter,java.lang.String,java.lang.String,java.util.Map)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.command.ActiveMQDestination:void setPhysicalName(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:void setProperties(java.util.Map)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.AnyChildDestinationNode:org.apache.activemq.filter.DestinationNode getChild(java.lang.String)",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildren()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeValues()",
            "org.apache.activemq.filter.DestinationMap:void setEntries(java.util.List)",
            "org.apache.activemq.filter.DestinationMapNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.String toString()",
            "org.apache.activemq.jaas.CertificateLoginModule:boolean commit()",
            "org.apache.activemq.jaas.LDAPLoginModule:boolean commit()",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.lang.String,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQWASInitialContextFactory:java.util.Hashtable transformEnvironment(java.util.Hashtable)",
            "org.apache.activemq.jndi.ReadOnlyContext$LocalNamingEnumeration:java.util.Map$Entry getNext()",
            "org.apache.activemq.jndi.ReadOnlyContext:java.util.Map internalBind(java.lang.String,java.lang.Object)",
            "org.apache.activemq.kaha.impl.KahaStore:void close()",
            "org.apache.activemq.kaha.impl.KahaStore:void force()",
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getMapContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getListContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void start()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:boolean delete()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFilesNotIn(java.util.Set,java.util.Set)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFiles()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:void dispose()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void clearUsedMark()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeUnused()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void close()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.util.Set buildEntrySet()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySetIterator:java.lang.Object next()",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(int,java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.String toString()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void putAll(java.util.Map)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void close()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void force()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:boolean delete()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void consolidateDataFiles()",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashPageInfo getRetrievePage(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:int getRetrieveOffset(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void end()",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void dump()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void checkLeaf()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void removePageId(long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean resetPageReference(long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void resetParentId(long,java.util.List)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void dump()",
            "org.apache.activemq.management.PollCountStatisticImpl:long getCount()",
            "org.apache.activemq.memory.CacheEvictionUsageListener:boolean evictMessages()",
            "org.apache.activemq.memory.buffer.MessageQueue:void appendMessages(java.util.List)",
            "org.apache.activemq.memory.buffer.OrderBasedMessageBuffer:void clear()",
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void clear()",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:java.util.List getMessages(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.memory.list.SimpleMessageList:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.ConduitBridge:boolean addToAlreadyInterestedConsumers(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.DurableConduitBridge:boolean doesConsumerExist(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStart()",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.jms.JmsConnector$1:boolean removeEldestEntry(java.util.Map$Entry)",
            "org.apache.activemq.openwire.tool.CHeadersGenerator:java.util.List sort(java.util.List)",
            "org.apache.activemq.openwire.tool.CHeadersGenerator:void generateFields(java.io.PrintWriter,org.codehaus.jam.JClass)",
            "org.apache.activemq.openwire.tool.CHeadersGenerator:void generateSetup(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeHashCodeBody()",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeEqualsBody()",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeToStringBody()",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:int generateTightMarshal1Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateTightMarshal2Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateLooseMarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateFactory(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSourcesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSourcesGenerator:void generateTearDown(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppClassesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppHeadersGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:int generateMarshal1Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateMarshal2Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateFactory(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFactory(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateTightUnmarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:int generateTightMarshal1Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateTightMarshal2Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateLooseMarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateLooseUnmarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaTestsGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.SingleSourceGenerator:java.lang.Object run()",
            "org.apache.activemq.pool.ConnectionPool:void close()",
            "org.apache.activemq.pool.PooledConnectionFactory:void stop()",
            "org.apache.activemq.pool.PooledSession:void close()",
            "org.apache.activemq.proxy.ProxyConnector:void stop()",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getAdminACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getReadACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getWriteACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.JaasAuthenticationBroker:void refresh()",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getACLs(org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.security.SimpleAuthenticationBroker:void refresh()",
            "org.apache.activemq.security.SimpleAuthenticationPlugin:void setUsers(java.util.List)",
            "org.apache.activemq.state.ConnectionState:void removeTempDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.state.ConnectionState:void shutdown()",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void cleanup()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()",
            "org.apache.activemq.store.amq.AMQTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.kaha.impl.async.Location checkpoint()",
            "org.apache.activemq.store.amq.AMQTx:org.apache.activemq.command.Message[] getMessages()",
            "org.apache.activemq.store.amq.AMQTx:org.apache.activemq.command.MessageAck[] getAcks()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void recover()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTransactionStore$Tx:org.apache.activemq.command.Message[] getMessages()",
            "org.apache.activemq.store.journal.JournalTransactionStore$Tx:org.apache.activemq.command.MessageAck[] getAcks()",
            "org.apache.activemq.store.journal.JournalTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activeio.journal.RecordLocation checkpoint()",
            "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:void writePayload(org.apache.activemq.store.amq.AMQTx,java.io.DataOutput)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void buildReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverState()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:java.util.Map retrievePreparedState()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void savePreparedState(java.util.Map)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void recoverSubscription(java.lang.String,java.lang.String,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:org.apache.activemq.command.Message[] getMessages()",
            "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:org.apache.activemq.command.MessageAck[] getAcks()",
            "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:void commit()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.transaction.Transaction:void fireAfterCommit()",
            "org.apache.activemq.transaction.Transaction:void fireAfterRollback()",
            "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doExpireOldServices()",
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void stop()",
            "org.apache.activemq.transport.failover.FailoverTransport$1:boolean iterate()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:boolean doConnect()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void start()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void stop()",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void add(java.net.URI[])",
            "org.apache.activemq.transport.fanout.FanoutTransport:void remove(java.net.URI[])",
            "org.apache.activemq.transport.nio.SelectorWorker:void run()",
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromMessageToFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.transport.stomp.FrameTranslator)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.StompFrame:java.lang.String toString()",
            "org.apache.activemq.transport.stomp.StompSubscription:org.apache.activemq.command.MessageAck onStompMessageAck(java.lang.String)",
            "org.apache.activemq.transport.stomp.StompWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.usage.Usage$1:void run()",
            "org.apache.activemq.usage.Usage:void onLimitChange()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void start()",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:java.util.Map extractProperties(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.String toString(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveMap(java.util.Map,java.io.DataOutputStream)",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveList(java.util.List,java.io.DataOutputStream)",
            "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)",
            "org.apache.activemq.util.URISupport:java.lang.String createQueryString(java.util.Map)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashPageInfo getRetrievePage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry removeHashEntry(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry getHashEntry(int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:int getRetrieveOffset(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry removeHashEntry(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry getHashEntry(int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry find(org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void put(org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry remove(org.apache.activemq.kaha.impl.index.hash.HashEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:void writeFullPage(org.apache.activemq.kaha.impl.index.hash.HashPage)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:void dump()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashPageInfo:void dump()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void writeFullPage(org.apache.activemq.kaha.impl.index.tree.TreePage)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void checkLeaf()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void removePageId(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean resetPageReference(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void resetParentId(long,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void dump()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void dump()"
        ]
    },
    "org.apache.activemq.management.PollCountStatisticImpl:long getCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:long getTotalMessagesCached()",
            "org.apache.activemq.broker.jmx.DestinationView:long getMessagesCached()",
            "org.apache.activemq.management.PollCountStatisticImpl:long getCount()",
            "org.apache.activemq.management.PollCountStatisticImpl:void appendFieldDescription(java.lang.StringBuffer)",
            "org.apache.activemq.management.PollCountStatisticImpl:double getPeriod()",
            "org.apache.activemq.management.PollCountStatisticImpl:double getFrequency()"
        ]
    },
    "org.apache.activemq.memory.buffer.OrderBasedMessageBuffer:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.list.DestinationBasedMessageList:void clear()"
        ]
    },
    "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.list.DestinationBasedMessageList:void clear()"
        ]
    },
    "org.apache.activemq.memory.list.SimpleMessageList:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.network.ConduitBridge:boolean addToAlreadyInterestedConsumers(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.ConduitBridge:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.DurableConduitBridge:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.network.DurableConduitBridge:boolean doesConsumerExist(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DurableConduitBridge:void setupStaticDestinations()"
        ]
    },
    "org.apache.activemq.openwire.tool.CHeadersGenerator:java.util.List sort(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.SingleSourceGenerator:java.lang.Object run()"
        ]
    },
    "org.apache.activemq.openwire.tool.CHeadersGenerator:void generateFields(java.io.PrintWriter,org.codehaus.jam.JClass)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CHeadersGenerator:void generateFields(java.io.PrintWriter,org.codehaus.jam.JClass)",
            "org.apache.activemq.openwire.tool.CHeadersGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.CHeadersGenerator:void generateSetup(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.SingleSourceGenerator:java.lang.Object run()"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeHashCodeBody()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeEqualsBody()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeToStringBody()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpClassesGenerator:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.MultiSourceGenerator:void processClass(org.codehaus.jam.JClass)"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:int generateTightMarshal1Body(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateTightMarshal2Body(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateLooseMarshalBody(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateFactory(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void processFactory()"
        ]
    },
    "org.apache.activemq.openwire.tool.CSourcesGenerator:void generateTearDown(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.SingleSourceGenerator:java.lang.Object run()"
        ]
    },
    "org.apache.activemq.openwire.tool.CppClassesGenerator:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.MultiSourceGenerator:void processClass(org.codehaus.jam.JClass)"
        ]
    },
    "org.apache.activemq.openwire.tool.CppHeadersGenerator:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.MultiSourceGenerator:void processClass(org.codehaus.jam.JClass)"
        ]
    },
    "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:int generateMarshal1Body(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateMarshal2Body(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateFactory(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void processFactory()"
        ]
    },
    "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFactory(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void processFactory()"
        ]
    },
    "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateTightUnmarshalBody(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:int generateTightMarshal1Body(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateTightMarshal2Body(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateLooseMarshalBody(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateLooseUnmarshalBody(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.openwire.tool.JavaTestsGenerator:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.MultiSourceGenerator:void processClass(org.codehaus.jam.JClass)"
        ]
    },
    "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getAdminACLs(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getReadACLs(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getWriteACLs(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.security.JaasAuthenticationBroker:void refresh()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getACLs(org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getAdminACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getReadACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getWriteACLs(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.security.SimpleAuthenticationBroker:void refresh()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.state.ConnectionState:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTx:org.apache.activemq.command.Message[] getMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTx:org.apache.activemq.command.MessageAck[] getAcks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore$Tx:org.apache.activemq.command.Message[] getMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.journal.JournalTransactionStore$Tx:org.apache.activemq.command.MessageAck[] getAcks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:void writePayload(org.apache.activemq.store.amq.AMQTx,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryPersistenceAdapter:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:java.util.Set getDestinations()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:java.util.Set getDestinations()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryPersistenceAdapter:void deleteAllMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void deleteAllMessages()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:org.apache.activemq.command.Message[] getMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTransactionStore$Tx:org.apache.activemq.command.MessageAck[] getAcks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.transport.fanout.FanoutTransport:java.lang.Object narrow(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.Transport createRemoteTransport()",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.fanout.FanoutTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)"
        ]
    },
    "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveList(java.util.List,java.io.DataOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitive(java.io.DataOutputStream,java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.jmx.ManagedTransportConnector:void <init>(javax.management.MBeanServer,javax.management.ObjectName,org.apache.activemq.broker.Broker,org.apache.activemq.transport.TransportServer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:org.apache.activemq.broker.jmx.ManagedTransportConnector asManagedConnector(javax.management.MBeanServer,javax.management.ObjectName)"
        ]
    },
    "org.apache.activemq.management.JMSConsumerStatsImpl:void <init>(org.apache.activemq.management.JMSSessionStatsImpl,javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)"
        ]
    },
    "org.apache.activemq.management.JMSProducerStatsImpl:void <init>(org.apache.activemq.management.JMSSessionStatsImpl,javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageProducer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ProducerId,org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.kaha.CommandMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:org.apache.activemq.kaha.StoreLocation storeDataItem(org.apache.activemq.kaha.Marshaller,java.lang.Object)",
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:void updateItem(org.apache.activemq.kaha.StoreLocation,org.apache.activemq.kaha.Marshaller,java.lang.Object)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileWriter:org.apache.activemq.kaha.impl.data.DataItem storeItem(org.apache.activemq.kaha.Marshaller,java.lang.Object,byte)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileWriter:void updateItem(org.apache.activemq.kaha.impl.data.DataItem,org.apache.activemq.kaha.Marshaller,java.lang.Object,byte)",
            "org.apache.activemq.kaha.impl.index.hash.HashEntry:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.tree.TreeEntry:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.kaha.MessageMarshaller:void writePayload(org.apache.activemq.command.Message,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.MessageMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.amq.AMQTxOperation:void writeExternal(org.apache.activemq.wireformat.WireFormat,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:void writePayload(org.apache.activemq.store.amq.AMQTx,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:void doMessageSend(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalMessageStore:void replayAddMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTransactionStore$3:void run()",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void addMessage(org.apache.activemq.store.MessageStore,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.TransactionMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:org.apache.activemq.kaha.StoreLocation storeDataItem(org.apache.activemq.kaha.Marshaller,java.lang.Object)",
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:void updateItem(org.apache.activemq.kaha.StoreLocation,org.apache.activemq.kaha.Marshaller,java.lang.Object)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileWriter:org.apache.activemq.kaha.impl.data.DataItem storeItem(org.apache.activemq.kaha.Marshaller,java.lang.Object,byte)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileWriter:void updateItem(org.apache.activemq.kaha.impl.data.DataItem,org.apache.activemq.kaha.Marshaller,java.lang.Object,byte)",
            "org.apache.activemq.kaha.impl.index.hash.HashEntry:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.tree.TreeEntry:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:int tightMarshalNestedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:int tightMarshalObjectArray1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConnectionErrorMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConsumerControlMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.DataResponseMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.JournalQueueAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.JournalTopicAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.JournalTransactionMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:int tightMarshalNestedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:int tightMarshalObjectArray1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConnectionErrorMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConsumerControlMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.DataResponseMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.JournalQueueAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.JournalTopicAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.JournalTransactionMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:int tightMarshalNestedObject1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:int tightMarshalObjectArray1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConnectionErrorMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConsumerControlMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.DataResponseMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.JournalQueueAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.JournalTopicAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.JournalTransactionMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessagePullMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ProducerAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQBytesMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQMapMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQStreamMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQTextMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void looseMarshalNestedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void looseMarshalObjectArray(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ConnectionErrorMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ConsumerControlMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.DataResponseMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.JournalQueueAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.JournalTopicAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.JournalTransactionMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.MessageAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void looseMarshalNestedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void looseMarshalObjectArray(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ConnectionErrorMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ConsumerControlMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.DataResponseMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.JournalQueueAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.JournalTopicAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.JournalTransactionMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void looseMarshalNestedObject(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void looseMarshalObjectArray(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ConnectionErrorMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ConsumerControlMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.DataResponseMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.JournalQueueAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.JournalTopicAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.JournalTransactionMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessagePullMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ProducerAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQBytesMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQMapMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQStreamMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQTextMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQBytesMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQMapMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQStreamMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTextMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQBytesMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQMapMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQStreamMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTextMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQBlobMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQBytesMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQMapMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQStreamMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTextMessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQBlobMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQBytesMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQMapMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQStreamMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTextMessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransport:void oneway(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void asyncSendPacket(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:void dispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterBroker:void sendAsyncToSlave(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.ft.MasterConnector:void startBridge()",
            "org.apache.activemq.broker.ft.MasterConnector:void stop()",
            "org.apache.activemq.broker.ft.MasterConnector:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$2:void transportInterupted()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport$7:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startLocalBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void stop()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteConsumerAdvisory(org.apache.activemq.command.DataStructure)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void addSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void removeSubscription(org.apache.activemq.network.DemandSubscription)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.network.ForwardingBridge$4:void onCompletion(org.apache.activemq.transport.FutureResponse)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.network.ForwardingBridge:void stop()",
            "org.apache.activemq.network.ForwardingBridge:void serviceLocalCommand(org.apache.activemq.command.Command)",
            "org.apache.activemq.proxy.ProxyConnection$1:void onCommand(java.lang.Object)",
            "org.apache.activemq.proxy.ProxyConnection$2:void onCommand(java.lang.Object)",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MarshallingTransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.MutexTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.ResponseCorrelator:org.apache.activemq.transport.FutureResponse asyncRequest(java.lang.Object,org.apache.activemq.transport.ResponseCallback)",
            "org.apache.activemq.transport.TransportFilter:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.TransportLogger:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.WireFormatNegotiator:void sendWireFormat(org.apache.activemq.command.WireFormatInfo)",
            "org.apache.activemq.transport.failover.FailoverTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.mock.MockTransport:void oneway(java.lang.Object)",
            "org.apache.activemq.transport.stomp.StompTransportFilter:void sendToStomp(org.apache.activemq.transport.stomp.StompFrame)"
        ]
    },
    "org.apache.activemq.kaha.CommandMarshaller:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.Store:void <clinit>()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.openwire.OpenWireFormat copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportServer:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.command.Command,org.apache.activemq.transport.udp.DatagramEndpoint)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapterFactory:org.apache.activemq.store.PersistenceAdapter createPersistenceAdapter()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.journal.JournalPersistenceAdapterFactory:void <init>()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:void <init>(javax.sql.DataSource,org.apache.activemq.wireformat.WireFormat)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void <init>(java.util.concurrent.atomic.AtomicLong)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void <init>()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void <init>(java.util.concurrent.atomic.AtomicLong)"
        ]
    },
    "org.apache.activemq.openwire.tool.CGeneratorTask:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection(java.lang.String)",
            "org.apache.activemq.ActiveMQConnectionFactory:void <init>()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:void <init>(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.util.CommandAgent:javax.jms.ConnectionFactory getConnectionFactory()",
            "org.apache.activemq.pool.PooledConnectionFactory:void <init>(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:void <init>(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.network.jms.JmsConnector:void setBrokerService(org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.jms.JmsConnector addJmsConnector(org.apache.activemq.network.jms.JmsConnector)"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:void <init>(java.lang.String,java.lang.String,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.TransportConnector:org.apache.activemq.transport.discovery.DiscoveryAgent getDiscoveryAgent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:void start()"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:void <init>(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector addNetworkConnector(java.net.URI)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:org.apache.activemq.transport.TransportServer getServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnector:org.apache.activemq.broker.jmx.ManagedTransportConnector asManagedConnector(javax.management.MBeanServer,javax.management.ObjectName)",
            "org.apache.activemq.broker.TransportConnector:void start()"
        ]
    },
    "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.TransportServer getServer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector:void start()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void clear()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry getHashEntry(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry find(org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void put(org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry remove(org.apache.activemq.kaha.impl.index.hash.HashEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void clear()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage getParent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry find(org.apache.activemq.kaha.impl.index.tree.TreeEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.StoreEntry get(java.lang.Object)",
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:boolean containsKey(java.lang.Object)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry find(org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void checkParentIdForRemovedPageEntry(org.apache.activemq.kaha.impl.index.tree.TreeEntry,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePageEntry findClosestEntry(org.apache.activemq.kaha.impl.index.tree.TreeEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doInsert(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doRemove(org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:org.apache.activemq.command.Message[] browse()"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpGeneratorTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpGeneratorTask:void main(java.lang.String[])"
        ]
    },
    "org.apache.activemq.openwire.tool.CppGeneratorTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CppGeneratorTask:void main(java.lang.String[])"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CSharpGeneratorTask:void execute()",
            "org.apache.activemq.openwire.tool.JavaGeneratorTask:void execute()"
        ]
    },
    "org.apache.activemq.openwire.tool.CppMarshallingHeadersGenerator:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.CppGeneratorTask:void execute()",
            "org.apache.activemq.openwire.tool.JavaGeneratorTask:void execute()"
        ]
    },
    "org.apache.activemq.openwire.tool.JavaGeneratorTask:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.JavaGeneratorTask:void main(java.lang.String[])"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:void <init>(org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.impl.DataManager)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object getValue(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void load()",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object getValue(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object getKey(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void recoverRedoItems(org.apache.activemq.kaha.impl.data.RedoListener)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.StoreEntry remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void remove(org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.kaha.MessageMarshaller:java.lang.Object readPayload(java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileReader:java.lang.Object readItem(org.apache.activemq.kaha.Marshaller,org.apache.activemq.kaha.StoreLocation)",
            "org.apache.activemq.kaha.impl.index.hash.HashEntry:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)",
            "org.apache.activemq.kaha.impl.index.tree.TreeEntry:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQBytesMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQMapMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQStreamMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQTextMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQBytesMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQMapMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQStreamMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQTextMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQBlobMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQBytesMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQMapMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQStreamMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQTextMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ActiveMQBytesMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ActiveMQMapMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ActiveMQStreamMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ActiveMQTextMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ActiveMQBytesMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ActiveMQMapMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ActiveMQStreamMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ActiveMQTextMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ActiveMQBlobMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ActiveMQBytesMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ActiveMQMapMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ActiveMQStreamMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ActiveMQTextMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.security.DefaultAuthorizationMap:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression addExpression()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression comparisonExpression()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void afterRollback()",
            "org.apache.activemq.TransactionContext:void afterCommit()",
            "org.apache.activemq.TransactionContext:void beforeEnd()",
            "org.apache.activemq.broker.BrokerBroadcaster:void addListener(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.BrokerBroadcaster:void removeListener(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.TransportConnection:int getDispatchQueueSize()",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.CompositeData[] browse(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:javax.management.openmbean.TabularData browseAsTable(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:javax.management.openmbean.CompositeType createCompositeType()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:java.lang.String toString()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean isFull()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean isLowWaterMark()",
            "org.apache.activemq.broker.region.PrefetchSubscription:boolean isHighWaterMark()",
            "org.apache.activemq.broker.region.PrefetchSubscription:int countBeforeFull()",
            "org.apache.activemq.broker.region.PrefetchSubscription:int getDispatchedQueueSize()",
            "org.apache.activemq.broker.region.Queue:java.lang.String toString()",
            "org.apache.activemq.broker.region.Queue:void doDispatch(java.util.List)",
            "org.apache.activemq.broker.region.QueueBrowserSubscription:java.lang.String toString()",
            "org.apache.activemq.broker.region.QueueSubscription:java.lang.String toString()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:int size()",
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:void gc()",
            "org.apache.activemq.filter.MultiExpressionEvaluator:boolean removeEventListner(java.lang.String,org.apache.activemq.filter.MultiExpressionEvaluator$ExpressionListener)",
            "org.apache.activemq.filter.UnaryExpression:org.apache.activemq.filter.BooleanExpression createInExpression(org.apache.activemq.filter.PropertyExpression,java.util.List,boolean)",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:org.apache.activemq.kaha.impl.async.DataFileAccessor openDataFileReader()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:void closeDataFileReader(org.apache.activemq.kaha.impl.async.DataFileAccessor)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean equals(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object set(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem internalSet(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:int maximumBinSize()",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:boolean isFull()",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:boolean isUnderflowed()",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:boolean isOverflowed()",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:int size()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean isFull()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean isUnderflowed()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean isOverflowed()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:int size()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour getFlavour(org.apache.activemq.kaha.impl.index.tree.TreePage,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void insertTreeEntry(int,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void resetPageReference(int,long)",
            "org.apache.activemq.management.StatsImpl:javax.management.j2ee.statistics.Statistic[] getStatistics()",
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:org.apache.activemq.memory.buffer.MessageQueue createMessageQueue()",
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void bubbleDown(org.apache.activemq.memory.buffer.MessageQueue,int)",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:org.apache.activemq.command.Message[] browse(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.NetworkConnector:org.apache.activemq.network.NetworkBridge configureBridge(org.apache.activemq.network.DemandForwardingBridgeSupport)",
            "org.apache.activemq.network.jms.JmsConnector:void start()",
            "org.apache.activemq.network.jms.JmsConnector:void stop()",
            "org.apache.activemq.store.amq.AMQMessageStore:org.apache.activemq.kaha.impl.async.Location doAsyncWrite()",
            "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:void writePayload(org.apache.activemq.store.amq.AMQTx,java.io.DataOutput)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:org.apache.activemq.command.Message[] getMessages()",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:org.apache.activemq.command.MessageAck[] getAcks()",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void commit(org.apache.activemq.store.kahadaptor.KahaTransactionStore)",
            "org.apache.activemq.store.kahadaptor.TransactionMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.transport.udp.DefaultBufferPool:java.nio.ByteBuffer borrowBuffer()",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveList(java.util.List,java.io.DataOutputStream)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.broker.TransportConnection:boolean iterate()",
            "org.apache.activemq.broker.ft.MasterConnector:void setBrokerService(org.apache.activemq.broker.BrokerService)",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.Queue:void doDispatch(java.util.List)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isDiskListEmpty()",
            "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.filter.DestinationMapNode:void pruneIfEmpty()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:org.apache.activemq.kaha.impl.async.DataFileAccessor openDataFileReader()",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:boolean isEmpty()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean isEmpty()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean isLeaf()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour getFlavour(org.apache.activemq.kaha.impl.index.tree.TreePage,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFile(java.io.PrintWriter)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:void dispose()",
            "org.apache.activemq.ActiveMQMessageConsumer:void dispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession:void redispatch(org.apache.activemq.ActiveMQDispatcher,org.apache.activemq.MessageDispatchChannel)",
            "org.apache.activemq.TransactionContext:void rollback(javax.transaction.xa.Xid)",
            "org.apache.activemq.TransactionContext:void commit(javax.transaction.xa.Xid,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService findFirst()",
            "org.apache.activemq.broker.BrokerService$1:boolean connectTo(java.net.URI)",
            "org.apache.activemq.broker.BrokerService:void stop()",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.network.NetworkConnector getNetworkConnectorByName(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector getConnectorByName(java.lang.String)",
            "org.apache.activemq.broker.BrokerService:void setTransportConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:void setNetworkConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:void setProxyConnectors(java.util.List)",
            "org.apache.activemq.broker.BrokerService:void stopAllConnectors(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.TransactionBroker:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processBrokerInfo(org.apache.activemq.command.BrokerInfo)",
            "org.apache.activemq.broker.TransportConnection:java.lang.String getConnectionId()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:void stop()",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:void gc()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void acknowledge(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageAck)",
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:java.util.LinkedList pageInList(int)",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void gc()",
            "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:void recover(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Topic,org.apache.activemq.broker.region.SubscriptionRecovery)",
            "org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.SimpleDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy:boolean dispatch(org.apache.activemq.broker.region.MessageReference,org.apache.activemq.filter.MessageEvaluationContext,java.util.List)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.AnyChildDestinationNode:org.apache.activemq.filter.DestinationNode getChild(java.lang.String)",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildren()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeValues()",
            "org.apache.activemq.filter.DestinationMap:void setEntries(java.util.List)",
            "org.apache.activemq.filter.DestinationMapNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.String toString()",
            "org.apache.activemq.kaha.impl.KahaStore:void close()",
            "org.apache.activemq.kaha.impl.KahaStore:void force()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()",
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:boolean delete()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFiles()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:void dispose()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void clearUsedMark()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeUnused()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void close()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(int,java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.String toString()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void close()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void force()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:boolean delete()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void consolidateDataFiles()",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashPageInfo getRetrievePage(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:int getRetrieveOffset(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void end()",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void dump()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void checkLeaf()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void removePageId(long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean resetPageReference(long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void resetParentId(long,java.util.List)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void dump()",
            "org.apache.activemq.management.PollCountStatisticImpl:long getCount()",
            "org.apache.activemq.memory.buffer.SizeBasedMessageBuffer:void clear()",
            "org.apache.activemq.network.ConduitBridge:boolean addToAlreadyInterestedConsumers(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.DurableConduitBridge:boolean doesConsumerExist(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStart()",
            "org.apache.activemq.network.LdapNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.openwire.tool.CHeadersGenerator:void generateSetup(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeHashCodeBody()",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeEqualsBody()",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:java.lang.String makeToStringBody()",
            "org.apache.activemq.openwire.tool.CSharpClassesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:int generateTightMarshal1Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateTightMarshal2Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateLooseMarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSourcesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CSourcesGenerator:void generateTearDown(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppClassesGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppHeadersGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:int generateMarshal1Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateMarshal2Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateTightUnmarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:int generateTightMarshal1Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateTightMarshal2Body(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateLooseMarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateLooseUnmarshalBody(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.JavaTestsGenerator:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.openwire.tool.SingleSourceGenerator:java.lang.Object run()",
            "org.apache.activemq.pool.ConnectionPool:void close()",
            "org.apache.activemq.pool.PooledConnectionFactory:void stop()",
            "org.apache.activemq.security.SimpleAuthenticationPlugin:void setUsers(java.util.List)",
            "org.apache.activemq.state.ConnectionState:void removeTempDestination(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.state.ConnectionState:void shutdown()",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTempDestinations(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void cleanup()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void recover()",
            "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.kaha.impl.async.Location checkpoint()",
            "org.apache.activemq.store.amq.AMQTx:org.apache.activemq.command.Message[] getMessages()",
            "org.apache.activemq.store.amq.AMQTx:org.apache.activemq.command.MessageAck[] getAcks()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activeio.journal.RecordLocation checkpoint()",
            "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:void writePayload(org.apache.activemq.store.amq.AMQTx,java.io.DataOutput)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void recoverState()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:java.util.Iterator iterator()",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doExpireOldServices()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.usage.Usage$1:void run()",
            "org.apache.activemq.usage.Usage:void onLimitChange()",
            "org.apache.activemq.usage.Usage:void start()",
            "org.apache.activemq.usage.Usage:void stop()",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveList(java.util.List,java.io.DataOutputStream)",
            "org.apache.activemq.util.ServiceStopper:void stopServices(java.util.List)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry internalGet(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean doRemove(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.util.ListIterator listIterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void reset()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.util.Iterator iterator()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.util.ListIterator listIterator(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(int,java.util.Collection)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:boolean acknowledgeReference(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void removeSubscriberMessageContainer(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry getFirst()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addReferenceFileIdsInUse()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry getLast()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry getNext(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addReferenceFileIdsInUse()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry getPrevious(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.StoreEntry refresh(org.apache.activemq.kaha.StoreEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:java.lang.Object get(org.apache.activemq.kaha.StoreEntry)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:boolean acknowledgeReference(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void acknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:org.apache.activemq.Service[] getServices()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.management.JMSConnectionStatsImpl:org.apache.activemq.management.JMSSessionStatsImpl[] getSessions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSConnectionStatsImpl:void reset()",
            "org.apache.activemq.management.JMSConnectionStatsImpl:void setEnabled(boolean)",
            "org.apache.activemq.management.JMSConnectionStatsImpl:java.lang.String toString()",
            "org.apache.activemq.management.JMSConnectionStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)"
        ]
    },
    "org.apache.activemq.management.JMSSessionStatsImpl:org.apache.activemq.management.JMSProducerStatsImpl[] getProducers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSSessionStatsImpl:void reset()",
            "org.apache.activemq.management.JMSSessionStatsImpl:void setEnabled(boolean)",
            "org.apache.activemq.management.JMSSessionStatsImpl:java.lang.String toString()",
            "org.apache.activemq.management.JMSSessionStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)"
        ]
    },
    "org.apache.activemq.management.JMSSessionStatsImpl:org.apache.activemq.management.JMSConsumerStatsImpl[] getConsumers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSSessionStatsImpl:void reset()",
            "org.apache.activemq.management.JMSSessionStatsImpl:void setEnabled(boolean)",
            "org.apache.activemq.management.JMSSessionStatsImpl:java.lang.String toString()",
            "org.apache.activemq.management.JMSSessionStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)"
        ]
    },
    "org.apache.activemq.management.JMSStatsImpl:org.apache.activemq.management.JMSConnectionStatsImpl[] getConnections()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSStatsImpl:void dump(org.apache.activemq.util.IndentPrinter)",
            "org.apache.activemq.management.JMSStatsImpl:void setEnabled(boolean)"
        ]
    },
    "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:javax.management.openmbean.CompositeType createCompositeType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.OpenTypeSupport$AbstractOpenTypeFactory:javax.management.openmbean.CompositeType getCompositeType()"
        ]
    },
    "org.apache.activemq.broker.ft.MasterConnector:void setBrokerService(org.apache.activemq.broker.BrokerService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void configureService(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy:void gc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy$1:void run()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:org.apache.activemq.kaha.impl.index.hash.HashEntry getHashEntry(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashPageInfo:org.apache.activemq.kaha.impl.index.hash.HashEntry getHashEntry(int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour getFlavour(org.apache.activemq.kaha.impl.index.tree.TreePage,org.apache.activemq.kaha.impl.index.tree.TreeEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void resetPageReference(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry getTreeEntry(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry find(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePageEntry findClosestEntry(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:int doInsertEntry(org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransaction:org.apache.activemq.command.Message[] getMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTransaction:org.apache.activemq.command.MessageAck[] getAcks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:org.apache.activemq.kaha.impl.async.DataFileAccessor openDataFileReader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:org.apache.activemq.kaha.impl.async.DataFileAccessor openDataFileAccessor(org.apache.activemq.kaha.impl.async.DataFile)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:org.apache.activemq.kaha.impl.index.hash.HashEntry removeHashEntry(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashPageInfo:org.apache.activemq.kaha.impl.index.hash.HashEntry removeHashEntry(int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry removeTreeEntry(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doRemove(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)"
        ]
    },
    "org.apache.activemq.transport.udp.DefaultBufferPool:java.nio.ByteBuffer borrowBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.CommandDatagramChannel:void start()",
            "org.apache.activemq.transport.udp.CommandDatagramChannel:void write(org.apache.activemq.command.Command,java.net.SocketAddress)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:java.util.List getSubList(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:java.util.List getSubList(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.IndexManager:void storeIndex(org.apache.activemq.kaha.impl.index.IndexItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:org.apache.activemq.kaha.impl.index.IndexItem addRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()",
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void storeIndex(org.apache.activemq.kaha.impl.index.IndexItem)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.IndexManager:void freeIndex(org.apache.activemq.kaha.impl.index.IndexItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:void removeRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void doClear()",
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void delete(org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexItem)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.IndexManager:void updateIndexes(org.apache.activemq.kaha.impl.index.IndexItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:void removeRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void updateIndexes(org.apache.activemq.kaha.impl.index.IndexItem)",
            "org.apache.activemq.kaha.impl.index.IndexManager:void initialize()"
        ]
    },
    "org.apache.activemq.network.DiscoveryNetworkConnector:org.apache.activemq.network.NetworkBridge createBridge(org.apache.activemq.transport.Transport,org.apache.activemq.transport.Transport,org.apache.activemq.command.DiscoveryEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DiscoveryNetworkConnector:void onServiceAdd(org.apache.activemq.command.DiscoveryEvent)"
        ]
    },
    "org.apache.activemq.command.ActiveMQTextMessage:void beforeMarshall(org.apache.activemq.wireformat.WireFormat)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.WireFormatInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.WireFormatInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.WireFormatInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.WireFormatInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.WireFormatInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.WireFormatInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:org.apache.activemq.command.Message copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processMessageDispatch(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQMessageConsumer:org.apache.activemq.command.ActiveMQMessage createActiveMQMessage(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage)",
            "org.apache.activemq.broker.CompositeDestinationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.MirroredQueue$1:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:org.apache.activemq.command.Message configureMessage(org.apache.activemq.command.MessageDispatch)",
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.transport.stomp.StompFrame convertMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:java.util.Map getContentMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.OpenTypeSupport$MapMessageOpenTypeFactory:java.util.Map getFields(java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:void removeDesendentValues(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMapNode:java.util.Set removeDesendentValues()"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:java.util.Collection removeValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeValues()",
            "org.apache.activemq.filter.DestinationMapNode:void removeAll(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyMap:org.apache.activemq.broker.region.policy.PolicyEntry getEntryFor(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:void configureQueue(org.apache.activemq.broker.region.Queue,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:void configureTopic(org.apache.activemq.broker.region.Topic,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void configureTopic(org.apache.activemq.broker.region.Topic,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.security.DefaultAuthorizationMap:org.apache.activemq.security.AuthorizationEntry getEntryFor(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.group.MessageGroupHashBucket$1:boolean contains(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)",
            "org.apache.activemq.broker.region.group.MessageGroupHashBucket$1:boolean contains(java.lang.String)"
        ]
    },
    "org.apache.activemq.filter.ComparisonExpression:org.apache.activemq.filter.BooleanExpression createLike(org.apache.activemq.filter.Expression,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ComparisonExpression:org.apache.activemq.filter.BooleanExpression createNotLike(org.apache.activemq.filter.Expression,java.lang.String,java.lang.String)",
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression comparisonExpression()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.ConsumerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processMessagePull(org.apache.activemq.command.MessagePull)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.ConsumerBrokerExchange getConsumerBrokerExchange(org.apache.activemq.command.ConsumerId)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.ProducerId)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.ProducerBrokerExchange getProducerBrokerExchange(org.apache.activemq.command.ProducerId)"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:org.apache.activemq.broker.TransportConnectionState lookupConnectionState(org.apache.activemq.command.SessionId)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.transport.InactivityMonitor:void startMonitorThreads()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.InactivityMonitor:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.InactivityMonitor:void oneway(java.lang.Object)"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:void removeAll(java.util.Set,java.lang.String[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMap:java.util.Set removeAll(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.DestinationMap:java.util.Set findWildcardMatches(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.filter.DestinationMapNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext$ListBindingEnumeration:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jaas.LDAPLoginModule:boolean authenticate(java.lang.String,java.lang.String)",
            "org.apache.activemq.jaas.LDAPLoginModule:java.util.ArrayList getRoles(javax.naming.directory.DirContext,java.lang.String,java.lang.String,java.util.ArrayList)",
            "org.apache.activemq.jaas.LDAPLoginModule:java.util.ArrayList addAttributeValues(java.lang.String,javax.naming.directory.Attributes,java.util.ArrayList)",
            "org.apache.activemq.network.LdapNetworkConnector:java.util.List getLdapUris()",
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getACLs(org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set addAttributeValues(java.lang.String,javax.naming.directory.Attributes,java.util.Set)"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext$ListEnumeration:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jaas.LDAPLoginModule:boolean authenticate(java.lang.String,java.lang.String)",
            "org.apache.activemq.jaas.LDAPLoginModule:java.util.ArrayList getRoles(javax.naming.directory.DirContext,java.lang.String,java.lang.String,java.util.ArrayList)",
            "org.apache.activemq.jaas.LDAPLoginModule:java.util.ArrayList addAttributeValues(java.lang.String,javax.naming.directory.Attributes,java.util.ArrayList)",
            "org.apache.activemq.network.LdapNetworkConnector:java.util.List getLdapUris()",
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getACLs(org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set addAttributeValues(java.lang.String,javax.naming.directory.Attributes,java.util.Set)"
        ]
    },
    "org.apache.activemq.command.BaseCommand:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQBytesMessage:java.lang.String toString()",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String toString()",
            "org.apache.activemq.command.ActiveMQObjectMessage:java.lang.String toString()",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQStreamMessage:java.lang.String toString()",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.state.ConnectionState:java.lang.String toString()",
            "org.apache.activemq.state.ConsumerState:java.lang.String toString()",
            "org.apache.activemq.state.ProducerState:java.lang.String toString()",
            "org.apache.activemq.state.SessionState:java.lang.String toString()",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.JournalQueueAck:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.JournalTopicAck:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.JournalTrace:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.JournalTransaction:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.KeepAliveInfo:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.util.IntrospectionSupport:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.SubscriptionInfo:java.lang.String toString()"
        ]
    },
    "org.apache.activemq.kaha.impl.data.DataManagerImpl:void updateItem(org.apache.activemq.kaha.StoreLocation,org.apache.activemq.kaha.Marshaller,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:void update(org.apache.activemq.kaha.StoreEntry,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void setServices(org.apache.activemq.Service[])",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void destroy()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void clear()",
            "org.apache.activemq.filter.DestinationMapNode:java.util.List removeValues()",
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool$Pool:void dispose()",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void reset()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void reset()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()",
            "org.apache.activemq.state.ConnectionState:void reset(org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void delete()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadaptor.KahaTransaction:void rollback()",
            "org.apache.activemq.transport.udp.DefaultBufferPool:void stop()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.MapTransportConnectionStateRegister:void clear()",
            "org.apache.activemq.broker.MapTransportConnectionStateRegister:void intialize(org.apache.activemq.broker.TransportConnectionStateRegister)",
            "org.apache.activemq.broker.region.AbstractRegion:void stop()",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void generateFile(java.io.PrintWriter)",
            "org.apache.activemq.command.ActiveMQMapMessage:void clearBody()",
            "org.apache.activemq.kaha.impl.KahaStore:void close()",
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void close()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:boolean delete()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void close()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:void clear()",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:void clear()",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:void clear()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void close()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:boolean delete()",
            "org.apache.activemq.kaha.impl.index.VMIndex:void clear()",
            "org.apache.activemq.kaha.impl.index.VMIndex:void unload()",
            "org.apache.activemq.memory.MapCache:void close()",
            "org.apache.activemq.pool.PooledConnectionFactory:void stop()",
            "org.apache.activemq.store.amq.AMQTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.amq.AMQTransactionStore:void setPreparedTransactions(java.util.Map)",
            "org.apache.activemq.store.journal.JournalTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadaptor.KahaMessageStore:void delete()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void delete()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void savePreparedState(java.util.Map)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void delete()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void delete()",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:void clear()",
            "org.apache.activemq.store.memory.MemoryMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void delete()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void delete()",
            "org.apache.activemq.transport.ResponseCorrelator:void onException(java.io.IOException)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:void remove(org.apache.activemq.kaha.impl.index.IndexItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.ContainerValueCollectionIterator:void remove()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean remove(org.apache.activemq.kaha.StoreEntry)"
        ]
    },
    "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.LocalTransactionIdMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageIdMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.MessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.ActiveMQMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.NetworkBridgeFilterMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.RemoveInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.RemoveSubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.SessionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.SubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.TransactionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.LocalTransactionIdMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageIdMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.MessagePullMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.NetworkBridgeFilterMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.RemoveInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.RemoveSubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.SessionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.SubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.TransactionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.LocalTransactionIdMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageIdMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.MessagePullMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.NetworkBridgeFilterMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.RemoveInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.RemoveSubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.SessionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.TransactionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.TransportStatusDetector:void start()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.camel.component.JournalEndpoint:void activateConsumer(org.apache.camel.impl.DefaultConsumer)",
            "org.apache.activemq.kaha.impl.async.DataFileAppender:org.apache.activemq.kaha.impl.async.DataFileAppender$WriteBatch enqueue(org.apache.activemq.kaha.impl.async.DataFile,org.apache.activemq.kaha.impl.async.DataFileAppender$WriteCommand)",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.DedicatedTaskRunner:void <init>(org.apache.activemq.thread.Task,java.lang.String,int,boolean)",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.transport.TransportServerThreadSupport:void doStart()",
            "org.apache.activemq.transport.TransportThreadSupport:void doStart()",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void start()",
            "org.apache.activemq.transport.discovery.rendezvous.RendezvousDiscoveryAgent:void stop()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.util.LRUSet:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQOutputStream:void send(org.apache.activemq.command.ActiveMQMessage,boolean)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.BrokerRegistry:org.apache.activemq.broker.BrokerService findFirst()",
            "org.apache.activemq.broker.BrokerService:void startDestinationsInPersistenceStore(org.apache.activemq.broker.Broker)",
            "org.apache.activemq.broker.SingleTransportConnectionStateRegister:void intialize(org.apache.activemq.broker.TransportConnectionStateRegister)",
            "org.apache.activemq.broker.TransactionBroker:org.apache.activemq.command.TransactionId[] getPreparedTransactions(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.TransactionBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveSession(org.apache.activemq.command.SessionId)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processRemoveConnection(org.apache.activemq.command.ConnectionId)",
            "org.apache.activemq.broker.TransportStatusDetector:void doCollection()",
            "org.apache.activemq.broker.jmx.DestinationView:java.lang.String sendTextMessage(java.util.Map,java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void buildExistingSubscriptions()",
            "org.apache.activemq.broker.region.AbstractRegion:void start()",
            "org.apache.activemq.broker.region.AbstractRegion:void stop()",
            "org.apache.activemq.broker.region.AbstractRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void gc()",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)",
            "org.apache.activemq.broker.region.QueueRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.RemoveSubscriptionInfo)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.Set getInactiveDestinations()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.TopicStorePrefetch:void gc()",
            "org.apache.activemq.broker.region.group.SimpleMessageGroupMap:org.apache.activemq.broker.region.group.MessageGroupSet removeConsumer(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.broker.region.virtual.CompositeDestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printProducers(java.io.PrintWriter,java.util.Map,java.util.Map,java.util.Map,org.apache.activemq.command.ProducerId,java.util.Set)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void writeLabels(java.io.PrintWriter,java.lang.String,java.lang.String,java.util.Map)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.ConnectionDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodes(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.broker.view.DestinationDotFileInterceptor:void printNodeLinks(java.io.PrintWriter,org.apache.activemq.filter.DestinationMapNode,java.lang.String)",
            "org.apache.activemq.command.ActiveMQMessage:void setProperties(java.util.Map)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendMatchingWildcards(java.util.Set,java.lang.String[],int)",
            "org.apache.activemq.filter.AnyChildDestinationNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.AnyChildDestinationNode:org.apache.activemq.filter.DestinationNode getChild(java.lang.String)",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getChildren()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeDesendentValues()",
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeValues()",
            "org.apache.activemq.filter.DestinationMapNode:void appendDescendantValues(java.util.Set)",
            "org.apache.activemq.filter.MultiExpressionEvaluator:void evaluate(org.apache.activemq.filter.MessageEvaluationContext)",
            "org.apache.activemq.filter.UnaryExpression$2:java.lang.String toString()",
            "org.apache.activemq.jaas.CertificateLoginModule:boolean commit()",
            "org.apache.activemq.jaas.LDAPLoginModule:boolean commit()",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.lang.String,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQWASInitialContextFactory:java.util.Hashtable transformEnvironment(java.util.Hashtable)",
            "org.apache.activemq.jndi.ReadOnlyContext$LocalNamingEnumeration:void <init>(org.apache.activemq.jndi.ReadOnlyContext)",
            "org.apache.activemq.jndi.ReadOnlyContext:java.util.Map internalBind(java.lang.String,java.lang.Object)",
            "org.apache.activemq.kaha.impl.KahaStore:void close()",
            "org.apache.activemq.kaha.impl.KahaStore:void force()",
            "org.apache.activemq.kaha.impl.KahaStore:void clear()",
            "org.apache.activemq.kaha.impl.KahaStore:boolean delete()",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getMapContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:java.util.Set getListContainerIds()",
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInListDataFiles()",
            "org.apache.activemq.kaha.impl.KahaStore:void generateInterestInMapDataFiles()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:boolean delete()",
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void consolidateDataFiles()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void clearUsedMark()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void disposeUnused()",
            "org.apache.activemq.kaha.impl.async.DataFileAccessorPool:void close()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.util.Iterator iterator()",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerEntrySet:java.util.Set buildEntrySet()",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerKeySet:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ContainerValueCollection:boolean retainAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean containsAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean addAll(int,java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:boolean removeAll(java.util.Collection)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void putAll(java.util.Map)",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void close()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void force()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:boolean delete()",
            "org.apache.activemq.kaha.impl.data.DataManagerImpl:void consolidateDataFiles()",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:java.util.List getMessages(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.ConduitBridge:boolean addToAlreadyInterestedConsumers(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.network.ConduitBridge:void removeDemandSubscription(org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.network.DiscoveryNetworkConnector:void handleStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.network.DurableConduitBridge:boolean doesConsumerExist(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.jms.JmsConnector$1:boolean removeEldestEntry(java.util.Map$Entry)",
            "org.apache.activemq.pool.ConnectionPool:void close()",
            "org.apache.activemq.pool.PooledConnectionFactory:void stop()",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getAdminACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getReadACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getWriteACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.JaasCertificateAuthenticationBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getACLs(org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.state.ConnectionState:void shutdown()",
            "org.apache.activemq.state.ConnectionStateTracker:void restore(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreTransactions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreSessions(org.apache.activemq.transport.Transport,org.apache.activemq.state.ConnectionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreConsumers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.state.ConnectionStateTracker:void restoreProducers(org.apache.activemq.transport.Transport,org.apache.activemq.state.SessionState)",
            "org.apache.activemq.store.amq.AMQMessageStore$4:void execute()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void stop()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void cleanup()",
            "org.apache.activemq.store.amq.AMQTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.amq.AMQTransactionStore:org.apache.activemq.kaha.impl.async.Location checkpoint()",
            "org.apache.activemq.store.journal.JournalMessageStore$3:void execute()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:boolean doCheckpoint()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore$2:void execute()",
            "org.apache.activemq.store.journal.JournalTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.journal.JournalTransactionStore:org.apache.activeio.journal.RecordLocation checkpoint()",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void buildReferenceFileIdsInUse()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:java.util.Map retrievePreparedState()",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void savePreparedState(java.util.Map)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void <init>(org.apache.activemq.kaha.Store,org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter,org.apache.activemq.kaha.MapContainer,org.apache.activemq.kaha.ListContainer,org.apache.activemq.kaha.MapContainer,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:void addMessageReference(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.MessageId,org.apache.activemq.store.ReferenceStore$ReferenceData)",
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.store.kahadaptor.TopicSubContainer:java.util.Iterator iterator()",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recover(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryMessageStore:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:java.util.Set getDestinations()",
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addMessage(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void addSubsciption(org.apache.activemq.command.SubscriptionInfo,boolean)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverSubscription(org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTopicSub:void recoverNextMessages(int,org.apache.activemq.store.MessageRecoveryListener)",
            "org.apache.activemq.store.memory.MemoryTransactionStore:void recover(org.apache.activemq.store.TransactionRecoveryListener)",
            "org.apache.activemq.transport.discovery.multicast.MulticastDiscoveryAgent:void doExpireOldServices()",
            "org.apache.activemq.transport.failover.FailoverTransport:void restoreTransport(org.apache.activemq.transport.Transport)",
            "org.apache.activemq.transport.fanout.FanoutTransport:void restoreTransport(org.apache.activemq.transport.fanout.FanoutTransport$FanoutTransportHandler)",
            "org.apache.activemq.transport.nio.SelectorWorker:void run()",
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromMessageToFrame(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.transport.stomp.FrameTranslator)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompAck(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:void onStompUnsubscribe(org.apache.activemq.transport.stomp.StompFrame)",
            "org.apache.activemq.transport.stomp.StompFrame:java.lang.String toString()",
            "org.apache.activemq.transport.stomp.StompSubscription:org.apache.activemq.command.MessageAck onStompMessageAck(java.lang.String)",
            "org.apache.activemq.transport.stomp.StompWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:java.util.Map extractProperties(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.IntrospectionSupport:boolean setProperties(java.lang.Object,java.util.Map)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.String toString(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.LRUSet:java.util.Iterator iterator()",
            "org.apache.activemq.util.MarshallingSupport:void marshalPrimitiveMap(java.util.Map,java.io.DataOutputStream)",
            "org.apache.activemq.util.URISupport:java.lang.String createQueryString(java.util.Map)"
        ]
    },
    "org.apache.activemq.broker.BrokerBroadcaster:void gc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void gc()",
            "org.apache.activemq.broker.BrokerFilter:void gc()",
            "org.apache.activemq.broker.MutableBrokerFilter:void gc()",
            "org.apache.activemq.broker.jmx.BrokerView:void gc()",
            "org.apache.activemq.broker.region.RegionBroker:void gc()"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:void gc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void gc()",
            "org.apache.activemq.broker.BrokerFilter:void gc()",
            "org.apache.activemq.broker.MutableBrokerFilter:void gc()",
            "org.apache.activemq.broker.jmx.BrokerView:void gc()",
            "org.apache.activemq.broker.region.RegionBroker:void gc()"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:void gc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerBroadcaster:void gc()",
            "org.apache.activemq.broker.BrokerFilter:void gc()",
            "org.apache.activemq.broker.MutableBrokerFilter:void gc()",
            "org.apache.activemq.broker.jmx.BrokerView:void gc()",
            "org.apache.activemq.broker.region.RegionBroker:void gc()"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:java.util.Collection getDesendentValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection getDesendentValues()",
            "org.apache.activemq.filter.DestinationMapNode:void appendMatchingValues(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.broker.region.ConnectionStatistics:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectionView:void resetStatistics()",
            "org.apache.activemq.management.StatsImpl:void reset()"
        ]
    },
    "org.apache.activemq.broker.region.ConnectorStatistics:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectorView:void resetStatistics()",
            "org.apache.activemq.management.StatsImpl:void reset()"
        ]
    },
    "org.apache.activemq.broker.region.DestinationStatistics:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.BrokerView:void resetStatistics()",
            "org.apache.activemq.broker.jmx.DestinationView:void resetStatistics()",
            "org.apache.activemq.management.StatsImpl:void reset()"
        ]
    },
    "org.apache.activemq.management.JMSConnectionStatsImpl:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.StatsImpl:void reset()"
        ]
    },
    "org.apache.activemq.management.JMSEndpointStatsImpl:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSSessionStatsImpl:void reset()",
            "org.apache.activemq.management.StatsImpl:void reset()"
        ]
    },
    "org.apache.activemq.management.JMSSessionStatsImpl:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSConnectionStatsImpl:void reset()",
            "org.apache.activemq.management.StatsImpl:void reset()"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext$ListBindingEnumeration:void <init>(org.apache.activemq.jndi.ReadOnlyContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration listBindings(java.lang.String)"
        ]
    },
    "org.apache.activemq.jndi.ReadOnlyContext$ListEnumeration:void <init>(org.apache.activemq.jndi.ReadOnlyContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ReadOnlyContext:javax.naming.NamingEnumeration list(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.DestinationFilter:void removeSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Subscription)"
        ]
    },
    "org.apache.activemq.broker.region.Topic:void deactivate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void deactivate(boolean)"
        ]
    },
    "org.apache.activemq.kaha.impl.async.AsyncDataManager:void removeInterestInFile(org.apache.activemq.kaha.impl.async.DataFile)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.AsyncDataManager:void removeInterestInFile(int)"
        ]
    },
    "org.apache.activemq.jaas.CertificateLoginModule:boolean logout()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jaas.PropertiesLoginModule:boolean logout()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:void gc()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DestinationFilter:void gc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.DestinationView:void gc()",
            "org.apache.activemq.broker.region.AbstractRegion:void gc()",
            "org.apache.activemq.broker.region.DestinationFilter:void gc()"
        ]
    },
    "org.apache.activemq.memory.CacheEvictionUsageListener$1:boolean iterate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.thread.DedicatedTaskRunner:void runTask()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()"
        ]
    },
    "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.command.Response processRemoveDestination(org.apache.activemq.command.DestinationInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.DestinationInfo:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection$2:org.apache.activemq.command.Response processConnectionControl(org.apache.activemq.command.ConnectionControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ConnectionControl:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageConsumer:void checkMessageListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive()",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receive(long)",
            "org.apache.activemq.ActiveMQMessageConsumer:javax.jms.Message receiveNoWait()"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectionView:java.lang.String getConnectionId()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setMaxBatchSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()",
            "org.apache.activemq.broker.region.Queue:java.util.List buildList(boolean)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxBatchSize(int)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setMaxBatchSize(int)"
        ]
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void setPending(org.apache.activemq.broker.region.cursors.PendingMessageCursor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setSystemUsage(org.apache.activemq.usage.SystemUsage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,boolean)",
            "org.apache.activemq.broker.region.DurableTopicSubscription:void activate(org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void setPending(org.apache.activemq.broker.region.cursors.PendingMessageCursor)",
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.TopicSubscription:void init()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setSystemUsage(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setSystemUsage(org.apache.activemq.usage.SystemUsage)",
            "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DurableTopicSubscription)"
        ]
    },
    "org.apache.activemq.broker.region.policy.PolicyEntry:void configure(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DurableTopicSubscription)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setMaxProducersToAudit(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxProducersToAudit(int)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setMaxProducersToAudit(int)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setMaxAuditDepth(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxProducersToAudit(int)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setMaxAuditDepth(int)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setMaxAuditDepth(int)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setEnableAudit(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void initialize()",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void setEnableAudit(boolean)",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void start()",
            "org.apache.activemq.broker.region.cursors.StoreQueueCursor:void setEnableAudit(boolean)"
        ]
    },
    "org.apache.activemq.command.ActiveMQDestination:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQQueue:void <init>(java.lang.String)",
            "org.apache.activemq.command.ActiveMQTempDestination:void <init>(java.lang.String)",
            "org.apache.activemq.command.ActiveMQTempDestination:void <init>(java.lang.String,long)",
            "org.apache.activemq.command.ActiveMQTopic:void <init>(java.lang.String)"
        ]
    },
    "org.apache.activemq.command.ActiveMQDestination:void readExternal(java.io.ObjectInput)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQTempDestination:void setPhysicalName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQDestination:void <init>(java.lang.String)",
            "org.apache.activemq.command.ActiveMQDestination:void readExternal(java.io.ObjectInput)",
            "org.apache.activemq.openwire.v1.ActiveMQDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ActiveMQDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ActiveMQDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.ActiveMQQueueMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQTempDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQTopicMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.ActiveMQQueueMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ActiveMQTempDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ActiveMQTopicMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.ActiveMQQueueMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQTempDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQTopicMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.ActiveMQQueueMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ActiveMQTempDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ActiveMQTopicMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.ActiveMQQueueMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQTempDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQTopicMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.ActiveMQQueueMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ActiveMQTempDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ActiveMQTopicMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry removeHashEntry(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry remove(org.apache.activemq.kaha.impl.index.hash.HashEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry find(org.apache.activemq.kaha.impl.index.hash.HashEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.StoreEntry get(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry remove(org.apache.activemq.kaha.impl.index.hash.HashEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.StoreEntry remove(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:void writeFullPage(org.apache.activemq.kaha.impl.index.hash.HashPage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashPageInfo:void end()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPageInfo:void dump()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void writeFullPage(org.apache.activemq.kaha.impl.index.tree.TreePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void save()"
        ]
    },
    "org.apache.activemq.broker.jmx.BrokerView:long getTotalMessagesCached()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:long getMessagesCached()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.management.PollCountStatisticImpl:void appendFieldDescription(java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.StatisticImpl:java.lang.String toString()"
        ]
    },
    "org.apache.activemq.management.PollCountStatisticImpl:double getPeriod()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.management.PollCountStatisticImpl:double getFrequency()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.memory.list.DestinationBasedMessageList:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:void stop()"
        ]
    },
    "org.apache.activemq.network.ConduitBridge:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean addConsumerInfo(org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.network.DurableConduitBridge:org.apache.activemq.network.DemandSubscription createDemandSubscription(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.DemandForwardingBridgeSupport:boolean addConsumerInfo(org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.openwire.tool.CHeadersGenerator:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.SingleSourceGenerator:java.lang.Object run()"
        ]
    },
    "org.apache.activemq.openwire.tool.MultiSourceGenerator:void processClass(org.codehaus.jam.JClass)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void processClass(org.codehaus.jam.JClass)",
            "org.apache.activemq.openwire.tool.MultiSourceGenerator:java.lang.Object run()"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpMarshallingGenerator:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.MultiSourceGenerator:void processClass(org.codehaus.jam.JClass)"
        ]
    },
    "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.MultiSourceGenerator:void processClass(org.codehaus.jam.JClass)"
        ]
    },
    "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:void processFactory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.JavaMarshallingGenerator:java.lang.Object run()"
        ]
    },
    "org.apache.activemq.openwire.tool.CppMarshallingClassesGenerator:void generateFile(java.io.PrintWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.tool.MultiSourceGenerator:void processClass(org.codehaus.jam.JClass)"
        ]
    },
    "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getAdminACLs(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getReadACLs(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getWriteACLs(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.AMQTxMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:org.apache.activemq.kaha.StoreLocation storeDataItem(org.apache.activemq.kaha.Marshaller,java.lang.Object)",
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:void updateItem(org.apache.activemq.kaha.StoreLocation,org.apache.activemq.kaha.Marshaller,java.lang.Object)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileWriter:org.apache.activemq.kaha.impl.data.DataItem storeItem(org.apache.activemq.kaha.Marshaller,java.lang.Object,byte)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileWriter:void updateItem(org.apache.activemq.kaha.impl.data.DataItem,org.apache.activemq.kaha.Marshaller,java.lang.Object,byte)",
            "org.apache.activemq.kaha.impl.index.hash.HashEntry:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.tree.TreeEntry:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.transport.TransportFilter:java.lang.Object narrow(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.Transport createRemoteTransport()",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.fanout.FanoutTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)"
        ]
    },
    "org.apache.activemq.transport.failover.FailoverTransport:java.lang.Object narrow(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.Transport createRemoteTransport()",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.fanout.FanoutTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)"
        ]
    },
    "org.apache.activemq.transport.mock.MockTransport:java.lang.Object narrow(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.proxy.ProxyConnector:org.apache.activemq.transport.Transport createRemoteTransport()",
            "org.apache.activemq.transport.TransportFilter:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.WireFormatNegotiator:void onCommand(java.lang.Object)",
            "org.apache.activemq.transport.failover.FailoverTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.fanout.FanoutTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.mock.MockTransport:java.lang.Object narrow(java.lang.Class)",
            "org.apache.activemq.transport.tcp.SslTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)",
            "org.apache.activemq.transport.tcp.TcpTransportFactory:org.apache.activemq.transport.Transport compositeConfigure(org.apache.activemq.transport.Transport,org.apache.activemq.wireformat.WireFormat,java.util.Map)"
        ]
    },
    "org.apache.activemq.broker.TransportConnector:org.apache.activemq.broker.jmx.ManagedTransportConnector asManagedConnector(javax.management.MBeanServer,javax.management.ObjectName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.TransportConnector registerConnectorMBean(org.apache.activemq.broker.TransportConnector)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashEntry:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeEntry:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.kaha.MessageMarshaller:void writePayload(java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:org.apache.activemq.kaha.StoreLocation storeDataItem(org.apache.activemq.kaha.Marshaller,java.lang.Object)",
            "org.apache.activemq.kaha.impl.async.DataManagerFacade:void updateItem(org.apache.activemq.kaha.StoreLocation,org.apache.activemq.kaha.Marshaller,java.lang.Object)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileWriter:org.apache.activemq.kaha.impl.data.DataItem storeItem(org.apache.activemq.kaha.Marshaller,java.lang.Object,byte)",
            "org.apache.activemq.kaha.impl.data.SyncDataFileWriter:void updateItem(org.apache.activemq.kaha.impl.data.DataItem,org.apache.activemq.kaha.Marshaller,java.lang.Object,byte)",
            "org.apache.activemq.kaha.impl.index.hash.HashEntry:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.tree.TreeEntry:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:int tightMarshalObjectArray1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.DataArrayResponseMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConnectionErrorMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConsumerControlMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.DataResponseMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalQueueAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalTopicAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalTransactionMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:int tightMarshalObjectArray1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.DataArrayResponseMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConnectionErrorMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConsumerControlMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.DataResponseMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalQueueAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalTopicAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalTransactionMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:int tightMarshalObjectArray1(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.DataArrayResponseMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConnectionErrorMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConsumerControlMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.DataResponseMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalQueueAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalTopicAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalTransactionMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ProducerAckMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void looseMarshalObjectArray(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.DataArrayResponseMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConnectionErrorMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConsumerControlMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.DataResponseMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalQueueAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalTopicAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalTransactionMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void looseMarshalObjectArray(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.DataArrayResponseMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConnectionErrorMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConsumerControlMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.DataResponseMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalQueueAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalTopicAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalTransactionMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void looseMarshalObjectArray(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.DataArrayResponseMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConnectionErrorMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConsumerControlMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.DataResponseMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalQueueAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalTopicAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalTransactionMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ProducerAckMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.kaha.Store:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.Store:void <clinit>()",
            "org.apache.activemq.kaha.impl.IndexRootContainer:void <clinit>()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:void <init>(org.apache.activemq.kaha.ContainerId,org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.impl.DataManager,boolean)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void <init>(java.io.File,org.apache.activemq.kaha.ContainerId,org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.impl.DataManager,boolean)",
            "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:org.apache.activemq.kaha.MapContainer getSubsMapContainer(java.lang.Object,java.lang.String)",
            "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void start()",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:org.apache.activemq.kaha.MapContainer addSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicReferenceStore:org.apache.activemq.kaha.MapContainer addSubscriberMessageContainer(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.transport.udp.UdpTransportServer:org.apache.activemq.transport.Transport createTransport(org.apache.activemq.command.Command,org.apache.activemq.transport.udp.DatagramEndpoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.UdpTransportServer:void processInboundConnection(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapterFactory:org.apache.activemq.store.PersistenceAdapter createPersistenceAdapter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.store.PersistenceAdapter createPersistenceAdapter()"
        ]
    },
    "org.apache.activemq.store.journal.JournalPersistenceAdapterFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.PersistenceAdapterFactoryBean:void <init>()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter:void <init>(java.util.concurrent.atomic.AtomicLong)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter createReferenceStoreAdapter()"
        ]
    },
    "org.apache.activemq.ActiveMQConnectionFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.ActiveMQConnection makeConnection()",
            "org.apache.activemq.ActiveMQSslConnectionFactory:void <init>()",
            "org.apache.activemq.ActiveMQXAConnectionFactory:void <init>()",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:org.apache.activemq.ActiveMQConnectionFactory createConnectionFactory(java.util.Hashtable)",
            "org.apache.activemq.pool.PooledConnectionFactory:void <init>()",
            "org.apache.activemq.spring.ActiveMQConnectionFactory:void <init>()"
        ]
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.util.CommandAgent:javax.jms.ConnectionFactory getConnectionFactory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:javax.jms.Connection createConnection()"
        ]
    },
    "org.apache.activemq.pool.PooledConnectionFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.StoreEntry get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:java.lang.Object get(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.StoreEntry getEntry(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:boolean containsKey(java.lang.Object)"
        ]
    },
    "org.apache.activemq.openwire.tool.CSharpGeneratorTask:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.openwire.tool.CppGeneratorTask:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.openwire.tool.JavaGeneratorTask:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.openwire.v1.ActiveMQBytesMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQMapMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQStreamMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQTextMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQBytesMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQMapMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQStreamMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTextMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQBlobMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQBytesMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQMapMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQStreamMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTextMessageMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQBytesMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQMapMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQStreamMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQTextMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQBytesMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQMapMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQStreamMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTextMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQBlobMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQBytesMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQMapMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQStreamMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTextMessageMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression comparisonExpression()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression equalityExpression()"
        ]
    },
    "org.apache.activemq.broker.TransportConnection:int getDispatchQueueSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ConnectionView:int getDispatchQueueSize()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:boolean isFull()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:boolean isFull()",
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:boolean isLowWaterMark()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:boolean isHighWaterMark()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:int countBeforeFull()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:int getDispatchedQueueSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.SubscriptionView:int getDispatchedQueueSize()"
        ]
    },
    "org.apache.activemq.filter.UnaryExpression:org.apache.activemq.filter.BooleanExpression createInExpression(org.apache.activemq.filter.PropertyExpression,java.util.List,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.ComparisonExpression:org.apache.activemq.filter.BooleanExpression createInFilter(org.apache.activemq.filter.Expression,java.util.List)",
            "org.apache.activemq.filter.ComparisonExpression:org.apache.activemq.filter.BooleanExpression createNotInFilter(org.apache.activemq.filter.Expression,java.util.List)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashBin:int maximumBinSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:boolean isFull()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:boolean isUnderflowed()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:boolean isOverflowed()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void writeHeader(java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean isFull()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doInsert(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean isUnderflowed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean isOverflowed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry find(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePageEntry findClosestEntry(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:int doInsertEntry(org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isDiskListEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isEmpty()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void reset()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void destroy()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:java.util.LinkedList pageInList(int)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:org.apache.activemq.broker.region.MessageReference next()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void remove(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:int size()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void clear()",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isSpaceInMemoryList()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry put(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry remove(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean isLeaf()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void writeHeader(java.io.DataOutput)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()"
        ]
    },
    "org.apache.activemq.management.JMSConnectionStatsImpl:void setEnabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void setStatsEnabled(boolean)",
            "org.apache.activemq.management.JMSStatsImpl:void setEnabled(boolean)"
        ]
    },
    "org.apache.activemq.management.JMSConnectionStatsImpl:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.management.JMSSessionStatsImpl:void setEnabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.management.JMSConnectionStatsImpl:void setEnabled(boolean)"
        ]
    },
    "org.apache.activemq.management.JMSSessionStatsImpl:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.management.JMSStatsImpl:void setEnabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnectionFactory:void setStatsEnabled(boolean)"
        ]
    },
    "org.apache.activemq.broker.BrokerService:void configureService(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.store.PersistenceAdapter getPersistenceAdapter()",
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.broker.BrokerService:void configureServices(java.lang.Object[])"
        ]
    },
    "org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:void dispatchAsync(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void processDispatch(org.apache.activemq.command.Command)",
            "org.apache.activemq.broker.TransportConnection:void doStop()",
            "org.apache.activemq.broker.region.Queue:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Queue:boolean iterate()",
            "org.apache.activemq.broker.region.Topic:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.Topic:boolean iterate()",
            "org.apache.activemq.state.Tracked:void onResponses()",
            "org.apache.activemq.thread.PooledTaskRunner:void wakeup()",
            "org.apache.activemq.thread.PooledTaskRunner:void runTask()",
            "org.apache.activemq.thread.Scheduler$SchedulerTimerTask:void run()",
            "org.apache.activemq.usage.Usage$2:void run()",
            "org.apache.activemq.usage.Usage:void fireEvent(int,int)",
            "org.apache.activemq.usage.Usage:void stop()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPageInfo:org.apache.activemq.kaha.impl.index.hash.HashEntry getHashEntry(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry getHashEntry(int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPageInfo:org.apache.activemq.kaha.impl.index.hash.HashEntry removeHashEntry(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:org.apache.activemq.kaha.impl.index.hash.HashEntry removeHashEntry(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)"
        ]
    },
    "org.apache.activemq.transport.udp.CommandDatagramChannel:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:void startAllConnectors()",
            "org.apache.activemq.transport.udp.UdpTransport:void doStart()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void storeIndex(org.apache.activemq.kaha.impl.index.IndexItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void doClear()",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem writeLast(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem writeFirst(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem insert(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem write(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void updateIndexes(org.apache.activemq.kaha.impl.index.IndexItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void delete(org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexItem)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem writeLast(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem writeFirst(java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.ListContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem insert(int,java.lang.Object)",
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:org.apache.activemq.kaha.impl.index.IndexItem write(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.IndexManager:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.IndexManager:void <init>(java.io.File,java.lang.String,java.lang.String,org.apache.activemq.kaha.impl.DataManager,java.util.concurrent.atomic.AtomicLong)"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:java.util.Set removeDesendentValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMapNode:java.util.Collection removeDesendentValues()"
        ]
    },
    "org.apache.activemq.filter.ComparisonExpression:org.apache.activemq.filter.BooleanExpression createNotLike(org.apache.activemq.filter.Expression,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression comparisonExpression()"
        ]
    },
    "org.apache.activemq.filter.DestinationMap:java.util.Set removeAll(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.filter.DestinationMap:java.util.Set removeAll(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.filter.DestinationMap:java.util.Set findWildcardMatches(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.DestinationMap:java.util.Set get(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.jaas.LDAPLoginModule:boolean authenticate(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jaas.LDAPLoginModule:boolean login()"
        ]
    },
    "org.apache.activemq.jaas.LDAPLoginModule:java.util.ArrayList getRoles(javax.naming.directory.DirContext,java.lang.String,java.lang.String,java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jaas.LDAPLoginModule:boolean authenticate(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.jaas.LDAPLoginModule:java.util.ArrayList addAttributeValues(java.lang.String,javax.naming.directory.Attributes,java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jaas.LDAPLoginModule:boolean authenticate(java.lang.String,java.lang.String)",
            "org.apache.activemq.jaas.LDAPLoginModule:java.util.ArrayList getRoles(javax.naming.directory.DirContext,java.lang.String,java.lang.String,java.util.ArrayList)"
        ]
    },
    "org.apache.activemq.network.LdapNetworkConnector:java.util.List getLdapUris()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.LdapNetworkConnector:void handleStart()"
        ]
    },
    "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set addAttributeValues(java.lang.String,javax.naming.directory.Attributes,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.LDAPAuthorizationMap:java.util.Set getACLs(org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.command.ActiveMQBytesMessage:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.ActiveMQObjectMessage:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.ActiveMQStreamMessage:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.state.ConnectionState:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.state.ConsumerState:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.state.ProducerState:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.state.SessionState:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.SubscriptionInfo:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:void releasePage(org.apache.activemq.kaha.impl.index.hash.HashPage)",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.impl.index.hash.HashPage getNextFreePage()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void releasePage(org.apache.activemq.kaha.impl.index.tree.TreePage)",
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage getNextFreePage()"
        ]
    },
    "org.apache.activemq.state.ConnectionState:void reset(org.apache.activemq.command.ConnectionInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response processAddConnection(org.apache.activemq.command.ConnectionInfo)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void delete()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaTransaction:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void rollback(org.apache.activemq.command.TransactionId)"
        ]
    },
    "org.apache.activemq.transport.udp.DefaultBufferPool:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.transport.udp.CommandDatagramChannel:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.broker.MapTransportConnectionStateRegister:void clear()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMapMessage:void clearBody()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.ContainerEntrySet:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.jaas.CertificateLoginModule:boolean logout()",
            "org.apache.activemq.jaas.CertificateLoginModule:void clear()",
            "org.apache.activemq.jaas.PropertiesLoginModule:boolean logout()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerKeySet:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void doStop(org.apache.activemq.util.ServiceStopper)",
            "org.apache.activemq.jaas.CertificateLoginModule:boolean logout()",
            "org.apache.activemq.jaas.CertificateLoginModule:void clear()",
            "org.apache.activemq.jaas.PropertiesLoginModule:boolean logout()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ContainerValueCollection:void clear()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.VMIndex:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void clear()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.VMIndex:void unload()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.MapContainerImpl:void unload()"
        ]
    },
    "org.apache.activemq.memory.MapCache:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.memory.CacheFilter:void close()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaMessageStore:void delete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void delete()"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.Topic:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.amq.AMQMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.kahadaptor.KahaReferenceStore:void delete()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.KahaTransactionStore:void delete()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.kahadaptor.TopicSubContainer:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeSubscriberMessageContainer(java.lang.Object)",
            "org.apache.activemq.store.kahadaptor.KahaTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.broker.region.Topic:void dispose(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.ProxyTopicMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)",
            "org.apache.activemq.store.journal.JournalMessageStore:void removeAllMessages(org.apache.activemq.broker.ConnectionContext)"
        ]
    },
    "org.apache.activemq.store.memory.MemoryMessageStore:void delete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:void deleteAllMessages()",
            "org.apache.activemq.store.memory.MemoryTopicMessageStore:void delete()"
        ]
    },
    "org.apache.activemq.store.memory.MemoryTopicMessageStore:void delete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.memory.MemoryPersistenceAdapter:void deleteAllMessages()"
        ]
    },
    "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void tightMarshalNestedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void tightMarshalCachedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void tightMarshalNestedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void tightMarshalCachedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void tightMarshalNestedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void tightMarshalCachedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQBytesMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQMapMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQStreamMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQTextMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQBytesMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQMapMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQStreamMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQTextMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQBlobMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQBytesMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQMapMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQStreamMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQTextMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectionView:void resetStatistics()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.ConnectorView:void resetStatistics()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.BrokerView:void resetStatistics()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.jmx.DestinationView:void resetStatistics()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ConnectionControl:org.apache.activemq.command.Response visit(org.apache.activemq.state.CommandVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void onCommand(java.lang.Object)",
            "org.apache.activemq.broker.TransportConnection:org.apache.activemq.command.Response service(org.apache.activemq.command.Command)",
            "org.apache.activemq.state.ConnectionStateTracker:org.apache.activemq.state.Tracked track(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.command.ActiveMQQueue:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQDestination transformDestination(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQSession:javax.jms.Queue createQueue(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void addQueue(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeQueue(java.lang.String)",
            "org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy:org.apache.activemq.command.ActiveMQDestination createDestination(org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean)",
            "org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy:void <init>()",
            "org.apache.activemq.broker.region.virtual.CompositeQueue:org.apache.activemq.command.ActiveMQDestination getVirtualDestination()",
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:org.apache.activemq.command.ActiveMQDestination getQueueConsumersWildcard(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.command.ActiveMQDestination:org.apache.activemq.command.ActiveMQDestination createDestination(java.lang.String,byte)",
            "org.apache.activemq.command.ActiveMQDestination:org.apache.activemq.command.ActiveMQDestination transform(javax.jms.Destination)",
            "org.apache.activemq.filter.DestinationMapEntry:void setQueue(java.lang.String)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory$1:java.lang.Object createEntry(java.lang.String)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:javax.jms.Queue createQueue(java.lang.String)",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.security.AuthorizationBroker:void addQueueRole(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.security.AuthorizationBroker:void removeQueueRole(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.command.ActiveMQTempDestination:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQTempQueue:void <init>(java.lang.String)",
            "org.apache.activemq.command.ActiveMQTempTopic:void <init>(java.lang.String)"
        ]
    },
    "org.apache.activemq.command.ActiveMQTempDestination:void <init>(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQTempQueue:void <init>(org.apache.activemq.command.ConnectionId,long)",
            "org.apache.activemq.command.ActiveMQTempTopic:void <init>(org.apache.activemq.command.ConnectionId,long)"
        ]
    },
    "org.apache.activemq.command.ActiveMQTopic:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQDestination transformDestination(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQSession:javax.jms.Topic createTopic(java.lang.String)",
            "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getConsumerAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getProducerAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getExpiredTopicMessageAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getExpiredQueueMessageAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getNoTopicConsumersAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getNoQueueConsumersAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:void <clinit>()",
            "org.apache.activemq.broker.jmx.BrokerView:void addTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:void removeTopic(java.lang.String)",
            "org.apache.activemq.broker.jmx.BrokerView:javax.management.ObjectName createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:void unregisterSubscription(javax.management.ObjectName)",
            "org.apache.activemq.broker.jmx.ManagedRegionBroker:java.util.List getSubscriberMessages(org.apache.activemq.broker.jmx.SubscriptionView)",
            "org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy:org.apache.activemq.command.ActiveMQDestination createDestination(org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean)",
            "org.apache.activemq.broker.region.virtual.CompositeTopic:org.apache.activemq.command.ActiveMQDestination getVirtualDestination()",
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.command.ActiveMQDestination getMirrorTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.virtual.VirtualTopic:org.apache.activemq.command.ActiveMQDestination getVirtualDestination()",
            "org.apache.activemq.command.ActiveMQDestination:org.apache.activemq.command.ActiveMQDestination createDestination(java.lang.String,byte)",
            "org.apache.activemq.command.ActiveMQDestination:org.apache.activemq.command.ActiveMQDestination transform(javax.jms.Destination)",
            "org.apache.activemq.filter.DestinationMapEntry:void setTopic(java.lang.String)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory$2:java.lang.Object createEntry(java.lang.String)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:javax.jms.Topic createTopic(java.lang.String)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.ForwardingBridge:void startBridge()",
            "org.apache.activemq.security.AuthorizationBroker:void addTopicRole(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.activemq.security.AuthorizationBroker:void removeTopicRole(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQQueueMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQTempDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.ActiveMQTempQueueMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ActiveMQTempTopicMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQTopicMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQQueueMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQTempDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.ActiveMQTempQueueMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v1.ActiveMQTempTopicMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQTopicMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQQueueMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTempDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.ActiveMQTempQueueMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ActiveMQTempTopicMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTopicMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQQueueMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTempDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.ActiveMQTempQueueMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v2.ActiveMQTempTopicMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTopicMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQQueueMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTempDestinationMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.ActiveMQTempQueueMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ActiveMQTempTopicMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTopicMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQQueueMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTempDestinationMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.ActiveMQTempQueueMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)",
            "org.apache.activemq.openwire.v3.ActiveMQTempTopicMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTopicMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPageInfo:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void end()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void save()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doInsert(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreeEntry doRemove(org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void checkParentIdForRemovedPageEntry(org.apache.activemq.kaha.impl.index.tree.TreeEntry,long,long)"
        ]
    },
    "org.apache.activemq.management.StatisticImpl:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQMessage transformMessage(javax.jms.Message,org.apache.activemq.ActiveMQConnection)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.command.ActiveMQBytesMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.command.ActiveMQMapMessage:boolean getBoolean(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:byte getByte(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:short getShort(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:int getInt(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:long getLong(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:float getFloat(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:double getDouble(java.lang.String)",
            "org.apache.activemq.command.ActiveMQMapMessage:java.lang.String getString(java.lang.String)",
            "org.apache.activemq.command.ActiveMQStreamMessage:void writeObject(java.lang.Object)",
            "org.apache.activemq.filter.BinaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.ConstantExpression:java.lang.String toString()",
            "org.apache.activemq.filter.ConstantExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.filter.UnaryExpression:boolean equals(java.lang.Object)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)",
            "org.apache.activemq.util.IndentPrinter:void println(java.lang.Object)",
            "org.apache.activemq.util.IntrospectionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "org.apache.activemq.util.MapHelper:java.lang.String getString(java.util.Map,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$1:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void stop()",
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.openwire.v1.DataArrayResponseMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.DataArrayResponseMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.DataArrayResponseMarshaller:int tightMarshal1(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshal1(java.lang.Object,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:int tightMarshalNestedObject1(org.apache.activemq.command.DataStructure,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.DataArrayResponseMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v2.DataArrayResponseMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.openwire.v3.DataArrayResponseMarshaller:void looseMarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void looseMarshalNestedObject(org.apache.activemq.command.DataStructure,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.kaha.impl.IndexRootContainer:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.IndexRootContainer:void <init>(org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.impl.DataManager)",
            "org.apache.activemq.kaha.impl.IndexRootContainer:org.apache.activemq.kaha.impl.index.IndexItem addRoot(org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.IndexRootContainer:void <clinit>()",
            "org.apache.activemq.kaha.impl.KahaStore:void initialize()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.ListContainerImpl:void <init>(org.apache.activemq.kaha.ContainerId,org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.impl.DataManager,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.ListContainer getListContainer(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:void <init>(java.io.File,org.apache.activemq.kaha.ContainerId,org.apache.activemq.kaha.impl.index.IndexItem,org.apache.activemq.kaha.impl.index.IndexManager,org.apache.activemq.kaha.impl.DataManager,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.MapContainer getMapContainer(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "org.apache.activemq.store.PersistenceAdapterFactoryBean:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.store.amq.AMQPersistenceAdapter:org.apache.activemq.store.kahadaptor.KahaReferenceStoreAdapter createReferenceStoreAdapter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.amq.AMQPersistenceAdapter:void start()"
        ]
    },
    "org.apache.activemq.ActiveMQSslConnectionFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQXAConnectionFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.spring.ActiveMQXAConnectionFactory:void <init>()"
        ]
    },
    "org.apache.activemq.pool.PooledConnectionFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.spring.ActiveMQConnectionFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.camel.CamelConnectionFactory:void <init>()",
            "org.apache.activemq.camel.component.ActiveMQConfiguration:javax.jms.ConnectionFactory createConnectionFactory()"
        ]
    },
    "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression equalityExpression()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression andExpression()"
        ]
    },
    "org.apache.activemq.broker.jmx.ConnectionView:int getDispatchQueueSize()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.DurableTopicSubscription:boolean isFull()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void add(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.PrefetchSubscription:void dispatchMatched()"
        ]
    },
    "org.apache.activemq.broker.jmx.SubscriptionView:int getDispatchedQueueSize()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.filter.ComparisonExpression:org.apache.activemq.filter.BooleanExpression createInFilter(org.apache.activemq.filter.Expression,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression comparisonExpression()"
        ]
    },
    "org.apache.activemq.filter.ComparisonExpression:org.apache.activemq.filter.BooleanExpression createNotInFilter(org.apache.activemq.filter.Expression,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression comparisonExpression()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashPage:void writeHeader(java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:void load()",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:void writePageHeader(org.apache.activemq.kaha.impl.index.hash.HashPage)",
            "org.apache.activemq.kaha.impl.index.hash.HashPage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:boolean isSpaceInMemoryList()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageLast(org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.broker.region.cursors.FilePendingMessageCursor:void addMessageFirst(org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void writeHeader(java.io.DataOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void load()",
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void writePage(org.apache.activemq.kaha.impl.index.tree.TreePage)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void write(org.apache.activemq.kaha.Marshaller,java.io.DataOutput)"
        ]
    },
    "org.apache.activemq.ActiveMQConnection:void setStatsEnabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.ActiveMQConnectionFactory:void setStatsEnabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.BrokerService:void configureServices(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerService:org.apache.activemq.broker.Broker createRegionBroker()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.IndexManager:void <init>(java.io.File,java.lang.String,java.lang.String,org.apache.activemq.kaha.impl.DataManager,java.util.concurrent.atomic.AtomicLong)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:org.apache.activemq.kaha.impl.index.IndexManager getIndexManager(org.apache.activemq.kaha.impl.DataManager,java.lang.String)"
        ]
    },
    "org.apache.activemq.filter.DestinationMapNode:java.util.Collection removeDesendentValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.filter.AnyChildDestinationNode:java.util.Collection removeDesendentValues()",
            "org.apache.activemq.filter.DestinationMapNode:void removeAll(java.util.Set,java.lang.String[],int)"
        ]
    },
    "org.apache.activemq.filter.DestinationMap:java.util.Set get(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractRegion:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:org.apache.activemq.broker.region.Destination intercept(org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.filter.DestinationMap:java.util.Set get(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.filter.DestinationMap:java.lang.Object chooseValue(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.memory.list.DestinationBasedMessageList:java.util.List getMessages(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getAllEntries(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.SimpleAuthorizationMap:java.util.Set getAdminACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.SimpleAuthorizationMap:java.util.Set getReadACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.SimpleAuthorizationMap:java.util.Set getWriteACLs(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.jaas.LDAPLoginModule:boolean login()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:void releasePage(org.apache.activemq.kaha.impl.index.hash.HashPage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.impl.index.hash.HashPage getNextFreePage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.impl.index.hash.HashPage createPage(int)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void releasePage(org.apache.activemq.kaha.impl.index.tree.TreePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflowLeaf()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage getNextFreePage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage createPage(long)"
        ]
    },
    "org.apache.activemq.transport.udp.CommandDatagramChannel:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.ServiceStopper:void stop(org.apache.activemq.Service)",
            "org.apache.activemq.util.ServiceSupport:void dispose(org.apache.activemq.Service)"
        ]
    },
    "org.apache.activemq.jaas.CertificateLoginModule:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jaas.CertificateLoginModule:boolean commit()",
            "org.apache.activemq.jaas.CertificateLoginModule:boolean abort()"
        ]
    },
    "org.apache.activemq.kaha.impl.container.MapContainerImpl:void unload()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void close()"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void tightMarshalNestedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void tightMarshalObjectArray2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConnectionErrorMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConsumerControlMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.DataResponseMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.JournalQueueAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.JournalTopicAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.JournalTransactionMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageDispatchMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageDispatchNotificationMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void tightMarshalNestedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void tightMarshalObjectArray2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConnectionErrorMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConsumerControlMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.DataResponseMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.JournalQueueAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.JournalTopicAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.JournalTransactionMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageDispatchMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageDispatchNotificationMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void tightMarshalNestedObject2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void tightMarshalObjectArray2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConnectionErrorMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConsumerControlMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.DataResponseMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.JournalQueueAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.JournalTopicAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.JournalTransactionMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageDispatchMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageDispatchNotificationMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessagePullMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ProducerAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.SubscriptionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQBytesMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQMapMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQObjectMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQStreamMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQTextMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQBytesMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQMapMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQObjectMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQStreamMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTextMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQBlobMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQBytesMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQMapMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQObjectMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQStreamMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTextMessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQDestination transformDestination(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createDurableConnectionConsumer(javax.jms.Topic,java.lang.String,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQConnection:javax.jms.ConnectionConsumer createConnectionConsumer(javax.jms.Destination,java.lang.String,javax.jms.ServerSessionPool,int,boolean)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageProducer createProducer(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQSession:javax.jms.MessageConsumer createConsumer(javax.jms.Destination,java.lang.String,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createDurableSubscriber(javax.jms.Topic,java.lang.String,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueBrowser createBrowser(javax.jms.Queue,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueReceiver createReceiver(javax.jms.Queue,java.lang.String)",
            "org.apache.activemq.ActiveMQSession:javax.jms.QueueSender createSender(javax.jms.Queue)",
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)",
            "org.apache.activemq.ActiveMQSession:javax.jms.TopicPublisher createPublisher(javax.jms.Topic)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.Queue createQueue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.Queue createQueue(java.lang.String)",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Queue createActiveMQQueue(javax.jms.QueueSession,java.lang.String)",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Queue createForeignQueue(javax.jms.QueueSession,java.lang.String)",
            "org.apache.activemq.pool.PooledSession:javax.jms.Queue createQueue(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy:org.apache.activemq.command.ActiveMQDestination createDestination(org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy:org.apache.activemq.command.ActiveMQDestination getDeadLetterQueueFor(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.usage.SystemUsage,org.apache.activemq.store.MessageStore,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory,org.apache.activemq.kaha.Store)",
            "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.CompositeQueue:org.apache.activemq.command.ActiveMQDestination getVirtualDestination()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:void setVirtualDestinations(org.apache.activemq.broker.region.virtual.VirtualDestination[])"
        ]
    },
    "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:org.apache.activemq.command.ActiveMQDestination getQueueConsumersWildcard(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.command.ActiveMQDestination:org.apache.activemq.command.ActiveMQDestination createDestination(java.lang.String,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.QueueView:boolean copyMessageTo(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.QueueView:int copyMatchingMessagesTo(java.lang.String,java.lang.String,int)",
            "org.apache.activemq.broker.jmx.QueueView:boolean moveMessageTo(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String)",
            "org.apache.activemq.broker.jmx.QueueView:int moveMatchingMessagesTo(java.lang.String,java.lang.String,int)",
            "org.apache.activemq.broker.region.virtual.FilteredDestination:void setQueue(java.lang.String)",
            "org.apache.activemq.broker.region.virtual.FilteredDestination:void setTopic(java.lang.String)",
            "org.apache.activemq.camel.converter.ActiveMQConverter:org.apache.activemq.command.ActiveMQDestination toDestination(java.lang.String)",
            "org.apache.activemq.command.ActiveMQDestination:org.apache.activemq.command.ActiveMQDestination createDestination(java.lang.String)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:org.apache.activemq.command.SubscriptionInfo doGetSubscriberEntry(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:org.apache.activemq.command.SubscriptionInfo[] doGetAllSubscriptions(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:java.util.Set doGetDestinations(org.apache.activemq.store.jdbc.TransactionContext)",
            "org.apache.activemq.transport.stomp.LegacyFrameTranslator:org.apache.activemq.command.ActiveMQDestination convertDestination(org.apache.activemq.transport.stomp.ProtocolConverter,java.lang.String)",
            "org.apache.activemq.util.TypeConversionSupport$14:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "org.apache.activemq.command.ActiveMQDestination:org.apache.activemq.command.ActiveMQDestination transform(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:java.io.InputStream doCreateInputStream(javax.jms.Destination,java.lang.String,boolean,java.lang.String)",
            "org.apache.activemq.ActiveMQConnection:java.io.OutputStream createOutputStream(javax.jms.Destination,java.util.Map,int,int,long)",
            "org.apache.activemq.ActiveMQMessageProducer:void send(javax.jms.Destination,javax.jms.Message,int,int,long)",
            "org.apache.activemq.advisory.ConsumerEventSource:void <init>(javax.jms.Connection,javax.jms.Destination)",
            "org.apache.activemq.advisory.ProducerEventSource:void <init>(javax.jms.Connection,javax.jms.Destination)",
            "org.apache.activemq.command.ActiveMQMessage:void setJMSReplyTo(javax.jms.Destination)",
            "org.apache.activemq.command.ActiveMQMessage:void setJMSDestination(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.filter.DestinationMapEntry:void setQueue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jndi.ActiveMQInitialContextFactory$1:java.lang.Object createEntry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.LazyCreateContext:java.lang.Object lookup(java.lang.String)"
        ]
    },
    "org.apache.activemq.jndi.ActiveMQInitialContextFactory:javax.jms.Queue createQueue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createQueues(java.util.Map,java.util.Hashtable)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void addQueueRole(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.security.AuthorizationBroker:void removeQueueRole(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQTempQueue:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQDestination transformDestination(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQSession:javax.jms.Queue createQueue(java.lang.String)",
            "org.apache.activemq.command.ActiveMQDestination:org.apache.activemq.command.ActiveMQDestination createDestination(java.lang.String,byte)",
            "org.apache.activemq.command.ActiveMQDestination:org.apache.activemq.command.ActiveMQDestination transform(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.command.ActiveMQTempTopic:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:org.apache.activemq.command.ActiveMQDestination transformDestination(javax.jms.Destination)",
            "org.apache.activemq.ActiveMQSession:javax.jms.Topic createTopic(java.lang.String)",
            "org.apache.activemq.command.ActiveMQDestination:org.apache.activemq.command.ActiveMQDestination createDestination(java.lang.String,byte)",
            "org.apache.activemq.command.ActiveMQDestination:org.apache.activemq.command.ActiveMQDestination transform(javax.jms.Destination)"
        ]
    },
    "org.apache.activemq.command.ActiveMQTempQueue:void <init>(org.apache.activemq.command.ConnectionId,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.ActiveMQTempDestination createTempDestination(boolean)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempQueue(java.lang.String)"
        ]
    },
    "org.apache.activemq.command.ActiveMQTempTopic:void <init>(org.apache.activemq.command.ConnectionId,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:org.apache.activemq.command.ActiveMQTempDestination createTempDestination(boolean)",
            "org.apache.activemq.transport.stomp.ProtocolConverter:org.apache.activemq.command.ActiveMQDestination createTempTopic(java.lang.String)"
        ]
    },
    "org.apache.activemq.ActiveMQSession:javax.jms.Topic createTopic(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.Topic createTopic(java.lang.String)",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Topic createActiveMQTopic(javax.jms.TopicSession,java.lang.String)",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Topic createForeignTopic(javax.jms.TopicSession,java.lang.String)",
            "org.apache.activemq.pool.PooledSession:javax.jms.Topic createTopic(java.lang.String)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getConsumerAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.ConsumerEventSource:void start()"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getProducerAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.ProducerEventSource:void start()"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getExpiredTopicMessageAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getExpiredMessageTopic(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getExpiredQueueMessageAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getExpiredMessageTopic(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getNoTopicConsumersAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getNoQueueConsumersAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.advisory.AdvisorySupport:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.AdvisoryConsumer:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)",
            "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getConnectionAdvisoryTopic()",
            "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getExpiredMessageTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getDestinationAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:boolean isDestinationAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:boolean isAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:boolean isConnectionAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:boolean isProducerAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:boolean isConsumerAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisorySupport:javax.jms.Destination getAgentDestination()",
            "org.apache.activemq.advisory.AdvisorySupport:void <clinit>()",
            "org.apache.activemq.advisory.ConsumerEventSource:void start()",
            "org.apache.activemq.advisory.ProducerEventSource:void start()",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.broker.util.CommandAgent:javax.jms.Destination createCommandDestination()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void startRemoteBridge()",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.CompositeTopic:org.apache.activemq.command.ActiveMQDestination getVirtualDestination()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:void setVirtualDestinations(org.apache.activemq.broker.region.virtual.VirtualDestination[])"
        ]
    },
    "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.command.ActiveMQDestination getMirrorTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.MirroredQueue:org.apache.activemq.broker.region.Destination getMirrorDestination(org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.VirtualTopic:org.apache.activemq.command.ActiveMQDestination getVirtualDestination()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor:void setVirtualDestinations(org.apache.activemq.broker.region.virtual.VirtualDestination[])"
        ]
    },
    "org.apache.activemq.filter.DestinationMapEntry:void setTopic(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.jndi.ActiveMQInitialContextFactory$2:java.lang.Object createEntry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.LazyCreateContext:java.lang.Object lookup(java.lang.String)"
        ]
    },
    "org.apache.activemq.jndi.ActiveMQInitialContextFactory:javax.jms.Topic createTopic(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.jndi.ActiveMQInitialContextFactory:void createTopics(java.util.Map,java.util.Hashtable)"
        ]
    },
    "org.apache.activemq.security.AuthorizationBroker:void addTopicRole(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.security.AuthorizationBroker:void removeTopicRole(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.openwire.v1.ActiveMQTempQueueMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQTempTopicMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQTempQueueMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v1.ActiveMQTempTopicMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTempQueueMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTempTopicMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTempQueueMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v2.ActiveMQTempTopicMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTempQueueMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTempTopicMarshaller:void tightUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure tightUnmarshalNestedObject(java.io.DataInput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTempQueueMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.openwire.v3.ActiveMQTempTopicMarshaller:void looseUnmarshal(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:java.lang.Object doUnmarshal(java.io.DataInput)",
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.command.DataStructure looseUnmarshalNestedObject(java.io.DataInput)"
        ]
    },
    "org.apache.activemq.spring.ActiveMQXAConnectionFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.camel.CamelConnectionFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression andExpression()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression orExpression()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:void writePageHeader(org.apache.activemq.kaha.impl.index.hash.HashPage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.impl.index.hash.HashPage createPage(int)",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:void releasePage(org.apache.activemq.kaha.impl.index.hash.HashPage)",
            "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.impl.index.hash.HashPage getNextFreePage()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void writePage(org.apache.activemq.kaha.impl.index.tree.TreePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage createPage(long)",
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void releasePage(org.apache.activemq.kaha.impl.index.tree.TreePage)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void setParentId(long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void saveHeader()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractRegion:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getAllEntries(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getAdminACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getReadACLs(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.DefaultAuthorizationMap:java.util.Set getWriteACLs(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.security.SimpleAuthorizationMap:java.util.Set getAdminACLs(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.security.AuthorizationBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)"
        ]
    },
    "org.apache.activemq.security.SimpleAuthorizationMap:java.util.Set getReadACLs(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.security.SimpleAuthorizationMap:java.util.Set getWriteACLs(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.security.AuthorizationBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.security.AuthorizationBroker:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.hash.HashIndex:org.apache.activemq.kaha.impl.index.hash.HashPage createPage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void addHashEntry(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)",
            "org.apache.activemq.kaha.impl.index.hash.HashBin:void doOverFlow(int,org.apache.activemq.kaha.impl.index.hash.HashEntry)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage createPage(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage createRoot()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.jaas.CertificateLoginModule:boolean abort()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.kaha.impl.container.BaseContainerImpl:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.KahaStore:void close()",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteMapContainer(org.apache.activemq.kaha.ContainerId)",
            "org.apache.activemq.kaha.impl.KahaStore:void deleteListContainer(org.apache.activemq.kaha.ContainerId)"
        ]
    },
    "org.apache.activemq.openwire.v1.BaseDataStreamMarshaller:void tightMarshalObjectArray2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v1.BrokerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConnectionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ConsumerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.DataArrayResponseMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.DestinationInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.MessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v1.ProducerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConnectionErrorMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.ConsumerControlMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.DataResponseMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalQueueAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalTopicAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v1.JournalTransactionMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.BaseDataStreamMarshaller:void tightMarshalObjectArray2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v2.BrokerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConnectionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ConsumerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.DataArrayResponseMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.DestinationInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.MessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v2.ProducerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConnectionErrorMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.ConsumerControlMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.DataResponseMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalQueueAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalTopicAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.JournalTransactionMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.BaseDataStreamMarshaller:void tightMarshalObjectArray2(org.apache.activemq.openwire.OpenWireFormat,org.apache.activemq.command.DataStructure[],java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.v3.BrokerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConnectionInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ConsumerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.DataArrayResponseMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.DestinationInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.MessageMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.v3.ProducerInfoMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConnectionErrorMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ConsumerControlMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.DataResponseMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalQueueAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalTopicAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.JournalTransactionMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.ProducerAckMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.ActiveMQQueueSession:javax.jms.Queue createQueue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.Queue createQueue(java.lang.String)",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Queue createActiveMQQueue(javax.jms.QueueSession,java.lang.String)",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Queue createForeignQueue(javax.jms.QueueSession,java.lang.String)"
        ]
    },
    "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Queue createActiveMQQueue(javax.jms.QueueSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeInboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeOutboundQueueBridges()"
        ]
    },
    "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Queue createForeignQueue(javax.jms.QueueSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeInboundQueueBridges()",
            "org.apache.activemq.network.jms.JmsQueueConnector:void initializeOutboundQueueBridges()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.Queue createQueue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQQueueSession:javax.jms.Queue createQueue(java.lang.String)",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Queue createActiveMQQueue(javax.jms.QueueSession,java.lang.String)",
            "org.apache.activemq.network.jms.JmsQueueConnector:javax.jms.Queue createForeignQueue(javax.jms.QueueSession,java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy:org.apache.activemq.command.ActiveMQDestination getDeadLetterQueueFor(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.RegionBroker:void sendToDeadLetterQueue(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.FilteredDestination:void setQueue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.virtual.FilteredDestination:void setTopic(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.camel.converter.ActiveMQConverter:org.apache.activemq.command.ActiveMQDestination toDestination(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQDestination:org.apache.activemq.command.ActiveMQDestination createDestination(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.command.ActiveMQDestination:void setPhysicalName(java.lang.String)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:org.apache.activemq.command.SubscriptionInfo doGetSubscriberEntry(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:org.apache.activemq.command.SubscriptionInfo[] doGetAllSubscriptions(org.apache.activemq.store.jdbc.TransactionContext,org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter:java.util.Set doGetDestinations(org.apache.activemq.store.jdbc.TransactionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:java.util.Set getDestinations()"
        ]
    },
    "org.apache.activemq.util.TypeConversionSupport$14:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.util.TypeConversionSupport:java.lang.Object convert(java.lang.Object,java.lang.Class)"
        ]
    },
    "org.apache.activemq.advisory.ConsumerEventSource:void <init>(javax.jms.Connection,javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.advisory.ProducerEventSource:void <init>(javax.jms.Connection,javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.command.ActiveMQMessage:void setJMSReplyTo(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)",
            "org.apache.activemq.network.jms.SimpleJmsMessageConvertor:javax.jms.Message convert(javax.jms.Message,javax.jms.Destination)",
            "org.apache.activemq.transport.stomp.FrameTranslator$Helper:void copyStandardHeadersFromFrameToMessage(org.apache.activemq.transport.stomp.ProtocolConverter,org.apache.activemq.transport.stomp.StompFrame,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.transport.stomp.FrameTranslator)"
        ]
    },
    "org.apache.activemq.command.ActiveMQMessage:void setJMSDestination(javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQConnection:void send(org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.command.ActiveMQMessage,org.apache.activemq.command.MessageId,int,int,long,boolean)",
            "org.apache.activemq.ActiveMQMessageTransformation:void copyProperties(javax.jms.Message,javax.jms.Message)",
            "org.apache.activemq.ActiveMQSession:void send(org.apache.activemq.ActiveMQMessageProducer,org.apache.activemq.command.ActiveMQDestination,javax.jms.Message,int,int,long,org.apache.activemq.usage.MemoryUsage)"
        ]
    },
    "org.apache.activemq.ActiveMQTopicSession:javax.jms.Topic createTopic(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.Topic createTopic(java.lang.String)",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Topic createActiveMQTopic(javax.jms.TopicSession,java.lang.String)",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Topic createForeignTopic(javax.jms.TopicSession,java.lang.String)"
        ]
    },
    "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Topic createActiveMQTopic(javax.jms.TopicSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeInboundTopicBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeOutboundTopicBridges()"
        ]
    },
    "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Topic createForeignTopic(javax.jms.TopicSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeInboundTopicBridges()",
            "org.apache.activemq.network.jms.JmsTopicConnector:void initializeOutboundTopicBridges()"
        ]
    },
    "org.apache.activemq.pool.PooledSession:javax.jms.Topic createTopic(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQTopicSession:javax.jms.Topic createTopic(java.lang.String)",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Topic createActiveMQTopic(javax.jms.TopicSession,java.lang.String)",
            "org.apache.activemq.network.jms.JmsTopicConnector:javax.jms.Topic createForeignTopic(javax.jms.TopicSession,java.lang.String)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getExpiredMessageTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void messageExpired(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.MessageReference)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getConnectionAdvisoryTopic()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:void addConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConnection(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConnectionInfo,java.lang.Throwable)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:org.apache.activemq.command.ActiveMQTopic getDestinationAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,long)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:boolean isDestinationAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisorySupport:boolean isDestinationAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:boolean isAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Destination addDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.advisory.AdvisoryBroker:void addDestinationInfo(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.DestinationInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisoryBroker:void removeProducer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ProducerInfo)",
            "org.apache.activemq.advisory.AdvisorySupport:boolean isAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.broker.region.Destination createDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.broker.region.DestinationStatistics)",
            "org.apache.activemq.broker.region.Topic:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.command.ActiveMQDestination,org.apache.activemq.store.TopicMessageStore,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.region.DestinationStatistics,org.apache.activemq.thread.TaskRunnerFactory)",
            "org.apache.activemq.broker.region.Topic:void onMessageWithNoConsumers(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.Message)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.cursors.StoreDurableSubscriberCursor:void add(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:boolean isConnectionAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisorySupport:boolean isConnectionAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:boolean isProducerAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisorySupport:boolean isProducerAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:boolean isConsumerAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.advisory.AdvisoryBroker:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.advisory.AdvisorySupport:boolean isConsumerAdvisoryTopic(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.network.DemandForwardingBridgeSupport:void serviceRemoteCommand(org.apache.activemq.command.Command)"
        ]
    },
    "org.apache.activemq.advisory.AdvisorySupport:javax.jms.Destination getAgentDestination()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:javax.jms.Destination createCommandDestination()"
        ]
    },
    "org.apache.activemq.broker.util.CommandAgent:javax.jms.Destination createCommandDestination()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:javax.jms.Destination getCommandDestination()"
        ]
    },
    "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression orExpression()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.BooleanExpression JmsSelector()",
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.Expression primaryExpr()"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void setParentId(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage createPage(long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void readHeader(java.io.DataInput)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void reset()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:boolean doUnderflow(org.apache.activemq.kaha.impl.index.tree.TreeEntry,int)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void checkParentIdForRemovedPageEntry(org.apache.activemq.kaha.impl.index.tree.TreeEntry,long,long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void resetParentId(long,java.util.List)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void saveHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage getNextFreePage()"
        ]
    },
    "org.apache.activemq.broker.region.RegionBroker:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.MutableBrokerFilter:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage createRoot()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void load()",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:org.apache.activemq.kaha.impl.index.tree.TreePage doOverflow(org.apache.activemq.kaha.impl.index.tree.TreePage$Flavour,org.apache.activemq.kaha.impl.index.tree.TreeEntry)"
        ]
    },
    "org.apache.activemq.openwire.v1.DataArrayResponseMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v2.DataArrayResponseMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.openwire.v3.DataArrayResponseMarshaller:void tightMarshal2(org.apache.activemq.openwire.OpenWireFormat,java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.openwire.OpenWireFormat:org.apache.activemq.util.ByteSequence marshal(java.lang.Object)",
            "org.apache.activemq.openwire.OpenWireFormat:void marshal(java.lang.Object,java.io.DataOutput)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshal2(java.lang.Object,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)",
            "org.apache.activemq.openwire.OpenWireFormat:void tightMarshalNestedObject2(org.apache.activemq.command.DataStructure,java.io.DataOutput,org.apache.activemq.openwire.BooleanStream)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Topic:void activate(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.DurableTopicSubscription)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo lookupSubscription(java.lang.String,java.lang.String)",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:void replayAcknowledge(org.apache.activemq.broker.ConnectionContext,java.lang.String,java.lang.String,org.apache.activemq.command.MessageId)"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:org.apache.activemq.command.SubscriptionInfo[] getAllDurableSubscriptions(org.apache.activemq.command.ActiveMQTopic)",
            "org.apache.activemq.broker.region.TopicRegion:java.util.List addSubscriptionsForDestination(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.broker.region.Destination)",
            "org.apache.activemq.store.ProxyTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()",
            "org.apache.activemq.store.journal.JournalTopicMessageStore:org.apache.activemq.command.SubscriptionInfo[] getAllSubscriptions()"
        ]
    },
    "org.apache.activemq.store.jdbc.JDBCPersistenceAdapter:java.util.Set getDestinations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DestinationFactoryImpl:java.util.Set getDestinations()",
            "org.apache.activemq.store.journal.JournalPersistenceAdapter:java.util.Set getDestinations()"
        ]
    },
    "org.apache.activemq.network.jms.SimpleJmsMessageConvertor:javax.jms.Message convert(javax.jms.Message,javax.jms.Destination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.network.jms.DestinationBridge:void onMessage(javax.jms.Message)"
        ]
    },
    "org.apache.activemq.broker.util.CommandAgent:javax.jms.Destination getCommandDestination()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.util.CommandAgent:void start()"
        ]
    },
    "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.BooleanExpression JmsSelector()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.BooleanExpression parse(java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreePage:void readHeader(java.io.DataInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:void load()",
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage getPage(long)",
            "org.apache.activemq.kaha.impl.index.tree.TreePage:void read(org.apache.activemq.kaha.Marshaller,java.io.DataInput)"
        ]
    },
    "org.apache.activemq.broker.BrokerFilter:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.MutableBrokerFilter:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.broker.MutableBrokerFilter:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.BrokerFilter:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.MutableBrokerFilter:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.DestinationFilter:void send(org.apache.activemq.broker.ProducerBrokerExchange,org.apache.activemq.command.Message,org.apache.activemq.command.ActiveMQDestination)",
            "org.apache.activemq.broker.region.RegionBroker:java.util.Set getDestinations(org.apache.activemq.command.ActiveMQDestination)"
        ]
    },
    "org.apache.activemq.selector.SelectorParser:org.apache.activemq.filter.BooleanExpression parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.ActiveMQInputStream:void <init>(org.apache.activemq.ActiveMQConnection,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,boolean,java.lang.String,int)",
            "org.apache.activemq.ActiveMQMessageConsumer:void <init>(org.apache.activemq.ActiveMQSession,org.apache.activemq.command.ConsumerId,org.apache.activemq.command.ActiveMQDestination,java.lang.String,java.lang.String,int,int,boolean,boolean,boolean,javax.jms.MessageListener)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.CompositeData[] browse(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:java.util.List browseMessages(java.lang.String)",
            "org.apache.activemq.broker.jmx.DestinationView:javax.management.openmbean.TabularData browseAsTable(java.lang.String)",
            "org.apache.activemq.broker.region.AbstractSubscription:org.apache.activemq.filter.BooleanExpression parseSelector(org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.MessageReferenceFilter createSelectorFilter(java.lang.String)",
            "org.apache.activemq.broker.region.virtual.FilteredDestination:void setSelector(java.lang.String)"
        ]
    },
    "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage getPage(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.kaha.impl.index.tree.TreeIndex:org.apache.activemq.kaha.impl.index.tree.TreePage getNextFreePage()"
        ]
    },
    "org.apache.activemq.broker.region.AbstractSubscription:org.apache.activemq.filter.BooleanExpression parseSelector(org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.AbstractSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractSubscription:void setSelector(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.Queue:org.apache.activemq.broker.region.MessageReferenceFilter createSelectorFilter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.Queue:int removeMatchingMessages(java.lang.String,int)",
            "org.apache.activemq.broker.region.Queue:int copyMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)",
            "org.apache.activemq.broker.region.Queue:int moveMatchingMessagesTo(org.apache.activemq.broker.ConnectionContext,java.lang.String,org.apache.activemq.command.ActiveMQDestination,int)"
        ]
    },
    "org.apache.activemq.broker.region.virtual.FilteredDestination:void setSelector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.AbstractSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.cursors.PendingMessageCursor)",
            "org.apache.activemq.broker.region.TopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.usage.SystemUsage)"
        ]
    },
    "org.apache.activemq.broker.region.AbstractSubscription:void setSelector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.SubscriptionView:void setSelector(java.lang.String)"
        ]
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.broker.region.cursors.PendingMessageCursor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.PrefetchSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,org.apache.activemq.usage.SystemUsage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.TempTopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TopicRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.jmx.SubscriptionView:void setSelector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.activemq.broker.region.PrefetchSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.DurableTopicSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo,boolean)",
            "org.apache.activemq.broker.region.QueueSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.QueueSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueBrowserSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.QueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TempQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.QueueBrowserSubscription:void <init>(org.apache.activemq.broker.Broker,org.apache.activemq.usage.SystemUsage,org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.region.QueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.TempQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.QueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    },
    "org.apache.activemq.broker.region.TempQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.activemq.broker.jmx.ManagedTempQueueRegion:org.apache.activemq.broker.region.Subscription createSubscription(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)",
            "org.apache.activemq.broker.region.AbstractRegion:org.apache.activemq.broker.region.Subscription addConsumer(org.apache.activemq.broker.ConnectionContext,org.apache.activemq.command.ConsumerInfo)"
        ]
    }
}