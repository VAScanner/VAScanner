{
    "net.opentsdb.query.expression.ExpressionIterator:void next(int)": {
        "isVulRoot": true,
        "vulCaller": [
            "net.opentsdb.query.expression.EDPtoDPS$Iterator:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)"
        ]
    },
    "net.opentsdb.query.expression.EDPtoDPS$Iterator:net.opentsdb.core.DataPoint next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void moveToNext(int)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()",
            "net.opentsdb.core.RateSpan:void populateNextRate()",
            "net.opentsdb.core.SpanGroup:int size()",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.EDPtoDPS$Iterator:java.lang.Object next()",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()"
        ]
    },
    "net.opentsdb.query.expression.IntersectionIterator:void next(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)"
        ]
    },
    "net.opentsdb.query.expression.UnionIterator:void next(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)"
        ]
    },
    "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:net.opentsdb.core.AggregationIterator create(java.util.List,long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,net.opentsdb.core.Aggregator,long,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.FillPolicy)",
            "net.opentsdb.core.AggregationIterator:net.opentsdb.core.AggregationIterator create(java.util.List,long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,net.opentsdb.core.DownsamplingSpecification,long,long,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.AggregationIterator:net.opentsdb.core.AggregationIterator createForTesting(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)"
        ]
    },
    "net.opentsdb.core.AggregationIterator:void moveToNext(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Downsampler$ValuesInInterval:void initializeIfNotDone()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:double nextDoubleValue()"
        ]
    },
    "net.opentsdb.core.RateSpan:void populateNextRate()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.RateSpan:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.RateSpan:void initializeIfNotDone()",
            "net.opentsdb.core.RateSpan:void populateNextRate()"
        ]
    },
    "net.opentsdb.core.SpanGroup:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:boolean hasNext()",
            "net.opentsdb.core.DataPointsIterator:void seek(long)",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)"
        ]
    },
    "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:long timestamp(int)",
            "net.opentsdb.core.SpanGroup:boolean isInteger(int)",
            "net.opentsdb.core.SpanGroup:double doubleValue(int)",
            "net.opentsdb.core.SpanGroup:long longValue(int)"
        ]
    },
    "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.EDPtoDPS$Iterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.AppendDataPoints:java.util.Collection parseKeyValue(net.opentsdb.core.TSDB,org.hbase.async.KeyValue)",
            "net.opentsdb.core.ByteBufferList:byte[] toBytes(int)",
            "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue findFirstDatapointColumn()",
            "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()",
            "net.opentsdb.core.CompactionQueue$Compaction:boolean updateDeletesCheckForWrite(org.hbase.async.KeyValue)",
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush(long,int)",
            "net.opentsdb.core.IncomingDataPoint:java.lang.String toString()",
            "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.core.IncomingDataPoints:void checkMetricAndTags(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(java.util.ArrayList,int)",
            "net.opentsdb.core.Internal:void createAndSetTSUIDFilter(org.hbase.async.Scanner,java.util.List)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner:com.stumbleupon.async.Deferred scan()",
            "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()",
            "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)",
            "net.opentsdb.core.Span:int size()",
            "net.opentsdb.core.Span:void addRow(org.hbase.async.KeyValue)",
            "net.opentsdb.core.Span:long getIdxOffsetFor(int)",
            "net.opentsdb.core.SpanGroup$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)",
            "net.opentsdb.core.SpanGroup:void computeTags()",
            "net.opentsdb.core.SpanGroup:java.util.List getTSUIDs()",
            "net.opentsdb.core.SpanGroup:int aggregatedSize()",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveAggTags(java.util.Set)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveTags(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags$1NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags$2NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred getTagsAsync(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllInternalAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveIdsAsync(net.opentsdb.core.TSDB,java.util.List)",
            "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred configureFromQuery(net.opentsdb.core.TSQuery,int)",
            "net.opentsdb.core.TsdbQuery:void findGroupBys()",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()",
            "net.opentsdb.core.TsdbQuery:java.lang.String toString()",
            "net.opentsdb.core.TSQuery:void validateAndSetQuery()",
            "net.opentsdb.core.TSQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.util.Map getTags()",
            "net.opentsdb.core.TSSubQuery:net.opentsdb.utils.ByteSet getFilterTagKs()",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.meta.Annotation$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation$2ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,java.lang.Boolean)",
            "net.opentsdb.meta.Annotation:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSMeta$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.TSMeta$LoadUIDs:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.TSMeta:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$1TagsCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner getScanner()",
            "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.UIDMeta:byte[] getStorageJSON()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_add_error_token(int,int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred metricNameAsync()",
            "net.opentsdb.query.expression.EDPtoDPS:byte[] metricUID()",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.ExpressionIterator:void compile()",
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.ExpressionIterator:void extractVariableNames()",
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String clean(java.util.Collection)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()",
            "net.opentsdb.query.expression.IntersectionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.IntersectionIterator:byte[] flattenTags(boolean,boolean,org.hbase.async.Bytes$ByteMap,net.opentsdb.utils.ByteSet,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()",
            "net.opentsdb.query.expression.UnionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.UnionIterator:byte[] flattenTags(boolean,boolean,net.opentsdb.query.expression.ExpressionDataPoint,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)",
            "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)",
            "net.opentsdb.query.filter.TagVFilter:void mapToFilters(java.util.Map,java.util.List,boolean)",
            "net.opentsdb.query.filter.TagVFilter:java.util.Map loadedFilters()",
            "net.opentsdb.query.filter.TagVFilter:com.stumbleupon.async.Deferred resolveTags(net.opentsdb.core.TSDB,java.util.Set)",
            "net.opentsdb.query.pojo.Expression:void validate()",
            "net.opentsdb.query.pojo.Query:void validate()",
            "net.opentsdb.query.pojo.Query:void validateFilters()",
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap,boolean,byte[],byte[])",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyTSUIDRegex(java.util.List)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.search.TimeSeriesLookup$1TagResolution:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.stats.QueryStats:java.util.Map getRunningAndCompleteStats()",
            "net.opentsdb.stats.QueryStats:void aggQueryStats()",
            "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)",
            "net.opentsdb.stats.QueryStats:java.util.Map getQueryStats(int,boolean)",
            "net.opentsdb.stats.StatsCollector:void <init>(java.lang.String)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long,java.lang.String)",
            "net.opentsdb.tools.ArgP:void addUsageTo(java.lang.StringBuilder)",
            "net.opentsdb.tools.ArgP:java.lang.String toString()",
            "net.opentsdb.tools.CliOptions:void overloadConfig(net.opentsdb.tools.ArgP,net.opentsdb.utils.Config)",
            "net.opentsdb.tools.CliOptions:void honorVerboseFlag(net.opentsdb.tools.ArgP)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tools.CliQuery:java.util.HashMap parsePlotParams(java.util.ArrayList)",
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void run()",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckDataPoints(java.util.Map)",
            "net.opentsdb.tools.Fsck:void runFullTable()",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)",
            "net.opentsdb.tools.MetaPurge$1MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaPurge$2MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync:void run()",
            "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])",
            "net.opentsdb.tools.UidManager:boolean printResult(java.util.ArrayList,byte[],boolean)",
            "net.opentsdb.tools.UidManager:int fsck(org.hbase.async.HBaseClient,byte[],boolean,boolean)",
            "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Branch:byte[] compileBranchId()",
            "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Leaf$1CollateUIDsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Leaf:com.stumbleupon.async.Deferred parseFromStorage(net.opentsdb.core.TSDB,org.hbase.async.KeyValue,boolean)",
            "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.Tree$1DeleteTreeScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1FetchTreeCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$2GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree:void <init>(net.opentsdb.tree.Tree)",
            "net.opentsdb.tree.Tree:boolean copyChanges(net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred storeTree(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchCollisions(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchNotMatched(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushCollisions(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushNotMatched(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.util.List call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)",
            "net.opentsdb.tree.TreeBuilder:void parseTagkRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagkCustomRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagvRule()",
            "net.opentsdb.tree.TreeBuilder:void calculateMaxLevel()",
            "net.opentsdb.tree.TreeRule$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeRule:boolean copyChanges(net.opentsdb.tree.TreeRule,boolean)",
            "net.opentsdb.tree.TreeRule:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getPrintableHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.nio.charset.Charset getCharset()",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatConfigV1(net.opentsdb.utils.Config)",
            "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.LogsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()",
            "net.opentsdb.tsd.QueryRpc$1FetchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:com.stumbleupon.async.Deferred call(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.RpcManager$Help:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.RpcManager:com.stumbleupon.async.Deferred shutdown()",
            "net.opentsdb.tsd.RpcManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.StatsRpc:void printRegionClientStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printThreadStats(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printJVMStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:java.lang.String getTSUIDForMetric(java.lang.String,net.opentsdb.core.TSDB)",
            "net.opentsdb.uid.UniqueId$2GetCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId:void preloadUidCache(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.uid.UniqueIdWhitelistFilter:com.stumbleupon.async.Deferred allowUIDAssignment(net.opentsdb.uid.UniqueId$UniqueIdType,java.lang.String,java.lang.String,java.util.Map)",
            "net.opentsdb.utils.ByteSet:java.lang.String toString()",
            "net.opentsdb.utils.Config:java.lang.String dumpConfiguration()",
            "net.opentsdb.utils.Config:void setDefaults()",
            "net.opentsdb.utils.Config:void loadConfig()",
            "net.opentsdb.utils.PluginLoader:java.lang.Object loadSpecificPlugin(java.lang.String,java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:java.util.List loadPlugins(java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:void loadJARs(java.lang.String)"
        ]
    },
    "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.tsd.QueryExecutor$SerializeSubIterator:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)"
        ]
    },
    "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.TimeSyncedIterator:void <init>(java.lang.String,net.opentsdb.utils.ByteSet,net.opentsdb.core.DataPoints[])",
            "net.opentsdb.query.expression.TimeSyncedIterator:void <init>(net.opentsdb.query.expression.TimeSyncedIterator)"
        ]
    },
    "net.opentsdb.core.AggregationIterator:net.opentsdb.core.AggregationIterator create(java.util.List,long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,net.opentsdb.core.Aggregator,long,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.FillPolicy)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:net.opentsdb.core.AggregationIterator create(java.util.List,long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,net.opentsdb.core.Aggregator,long,boolean,net.opentsdb.core.RateOptions)"
        ]
    },
    "net.opentsdb.core.AggregationIterator:net.opentsdb.core.AggregationIterator create(java.util.List,long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,net.opentsdb.core.DownsamplingSpecification,long,long,boolean,net.opentsdb.core.RateOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.SeekableView iterator()"
        ]
    },
    "net.opentsdb.core.AggregationIterator:net.opentsdb.core.AggregationIterator createForTesting(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)"
        ]
    },
    "net.opentsdb.core.AggregationIterator:net.opentsdb.core.DataPoint next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void moveToNext(int)",
            "net.opentsdb.core.AggregationIterator:java.lang.Object next()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()",
            "net.opentsdb.core.RateSpan:void populateNextRate()",
            "net.opentsdb.core.SpanGroup:int size()",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()"
        ]
    },
    "net.opentsdb.core.Downsampler$ValuesInInterval:void initializeIfNotDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextInterval()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:boolean hasNextValue()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Downsampler$ValuesInInterval:double nextDoubleValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Aggregators$Avg:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$Count:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$First:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$Last:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$Max:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$Min:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$Multiply:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$None:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$PercentileAgg:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$StdDev:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$Sum:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.HighestCurrent$MaxLatestAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.HighestMax$MaxCacheAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)"
        ]
    },
    "net.opentsdb.core.RateSpan:net.opentsdb.core.DataPoint next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void moveToNext(int)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()",
            "net.opentsdb.core.RateSpan:void populateNextRate()",
            "net.opentsdb.core.RateSpan:java.lang.Object next()",
            "net.opentsdb.core.SpanGroup:int size()",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()"
        ]
    },
    "net.opentsdb.core.RateSpan:void initializeIfNotDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.RateSpan:boolean hasNext()",
            "net.opentsdb.core.RateSpan:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.DataPointsIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void moveToNext(int)",
            "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.AppendDataPoints:java.util.Collection parseKeyValue(net.opentsdb.core.TSDB,org.hbase.async.KeyValue)",
            "net.opentsdb.core.ByteBufferList:byte[] toBytes(int)",
            "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue findFirstDatapointColumn()",
            "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()",
            "net.opentsdb.core.CompactionQueue$Compaction:boolean updateDeletesCheckForWrite(org.hbase.async.KeyValue)",
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush(long,int)",
            "net.opentsdb.core.DataPointsIterator:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void initializeIfNotDone()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()",
            "net.opentsdb.core.IncomingDataPoint:java.lang.String toString()",
            "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.core.IncomingDataPoints:void checkMetricAndTags(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(java.util.ArrayList,int)",
            "net.opentsdb.core.Internal:void createAndSetTSUIDFilter(org.hbase.async.Scanner,java.util.List)",
            "net.opentsdb.core.RateSpan:void populateNextRate()",
            "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner:com.stumbleupon.async.Deferred scan()",
            "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()",
            "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)",
            "net.opentsdb.core.Span:int size()",
            "net.opentsdb.core.Span:void addRow(org.hbase.async.KeyValue)",
            "net.opentsdb.core.Span:long getIdxOffsetFor(int)",
            "net.opentsdb.core.SpanGroup$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)",
            "net.opentsdb.core.SpanGroup:void computeTags()",
            "net.opentsdb.core.SpanGroup:java.util.List getTSUIDs()",
            "net.opentsdb.core.SpanGroup:int size()",
            "net.opentsdb.core.SpanGroup:int aggregatedSize()",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveAggTags(java.util.Set)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveTags(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags$1NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags$2NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred getTagsAsync(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllInternalAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveIdsAsync(net.opentsdb.core.TSDB,java.util.List)",
            "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred configureFromQuery(net.opentsdb.core.TSQuery,int)",
            "net.opentsdb.core.TsdbQuery:void findGroupBys()",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()",
            "net.opentsdb.core.TsdbQuery:java.lang.String toString()",
            "net.opentsdb.core.TSQuery:void validateAndSetQuery()",
            "net.opentsdb.core.TSQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.util.Map getTags()",
            "net.opentsdb.core.TSSubQuery:net.opentsdb.utils.ByteSet getFilterTagKs()",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.meta.Annotation$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation$2ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,java.lang.Boolean)",
            "net.opentsdb.meta.Annotation:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSMeta$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.TSMeta$LoadUIDs:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.TSMeta:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$1TagsCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner getScanner()",
            "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.UIDMeta:byte[] getStorageJSON()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_add_error_token(int,int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.ExpressionIterator:void compile()",
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.ExpressionIterator:void extractVariableNames()",
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String clean(java.util.Collection)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()",
            "net.opentsdb.query.expression.IntersectionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.IntersectionIterator:byte[] flattenTags(boolean,boolean,org.hbase.async.Bytes$ByteMap,net.opentsdb.utils.ByteSet,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()",
            "net.opentsdb.query.expression.UnionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.UnionIterator:byte[] flattenTags(boolean,boolean,net.opentsdb.query.expression.ExpressionDataPoint,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)",
            "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)",
            "net.opentsdb.query.filter.TagVFilter:void mapToFilters(java.util.Map,java.util.List,boolean)",
            "net.opentsdb.query.filter.TagVFilter:java.util.Map loadedFilters()",
            "net.opentsdb.query.filter.TagVFilter:com.stumbleupon.async.Deferred resolveTags(net.opentsdb.core.TSDB,java.util.Set)",
            "net.opentsdb.query.pojo.Expression:void validate()",
            "net.opentsdb.query.pojo.Query:void validate()",
            "net.opentsdb.query.pojo.Query:void validateFilters()",
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap,boolean,byte[],byte[])",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyTSUIDRegex(java.util.List)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.search.TimeSeriesLookup$1TagResolution:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.stats.QueryStats:java.util.Map getRunningAndCompleteStats()",
            "net.opentsdb.stats.QueryStats:void aggQueryStats()",
            "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)",
            "net.opentsdb.stats.QueryStats:java.util.Map getQueryStats(int,boolean)",
            "net.opentsdb.stats.StatsCollector:void <init>(java.lang.String)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long,java.lang.String)",
            "net.opentsdb.tools.ArgP:void addUsageTo(java.lang.StringBuilder)",
            "net.opentsdb.tools.ArgP:java.lang.String toString()",
            "net.opentsdb.tools.CliOptions:void overloadConfig(net.opentsdb.tools.ArgP,net.opentsdb.utils.Config)",
            "net.opentsdb.tools.CliOptions:void honorVerboseFlag(net.opentsdb.tools.ArgP)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tools.CliQuery:java.util.HashMap parsePlotParams(java.util.ArrayList)",
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void run()",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckDataPoints(java.util.Map)",
            "net.opentsdb.tools.Fsck:void runFullTable()",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)",
            "net.opentsdb.tools.MetaPurge$1MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaPurge$2MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync:void run()",
            "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])",
            "net.opentsdb.tools.UidManager:boolean printResult(java.util.ArrayList,byte[],boolean)",
            "net.opentsdb.tools.UidManager:int fsck(org.hbase.async.HBaseClient,byte[],boolean,boolean)",
            "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Branch:byte[] compileBranchId()",
            "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Leaf$1CollateUIDsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Leaf:com.stumbleupon.async.Deferred parseFromStorage(net.opentsdb.core.TSDB,org.hbase.async.KeyValue,boolean)",
            "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.Tree$1DeleteTreeScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1FetchTreeCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$2GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree:void <init>(net.opentsdb.tree.Tree)",
            "net.opentsdb.tree.Tree:boolean copyChanges(net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred storeTree(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchCollisions(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchNotMatched(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushCollisions(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushNotMatched(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.util.List call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)",
            "net.opentsdb.tree.TreeBuilder:void parseTagkRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagkCustomRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagvRule()",
            "net.opentsdb.tree.TreeBuilder:void calculateMaxLevel()",
            "net.opentsdb.tree.TreeRule$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeRule:boolean copyChanges(net.opentsdb.tree.TreeRule,boolean)",
            "net.opentsdb.tree.TreeRule:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getPrintableHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.nio.charset.Charset getCharset()",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatConfigV1(net.opentsdb.utils.Config)",
            "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.LogsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()",
            "net.opentsdb.tsd.QueryRpc$1FetchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:com.stumbleupon.async.Deferred call(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.RpcManager$Help:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.RpcManager:com.stumbleupon.async.Deferred shutdown()",
            "net.opentsdb.tsd.RpcManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.StatsRpc:void printRegionClientStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printThreadStats(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printJVMStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:java.lang.String getTSUIDForMetric(java.lang.String,net.opentsdb.core.TSDB)",
            "net.opentsdb.uid.UniqueId$2GetCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId:void preloadUidCache(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.uid.UniqueIdWhitelistFilter:com.stumbleupon.async.Deferred allowUIDAssignment(net.opentsdb.uid.UniqueId$UniqueIdType,java.lang.String,java.lang.String,java.util.Map)",
            "net.opentsdb.utils.ByteSet:java.lang.String toString()",
            "net.opentsdb.utils.Config:java.lang.String dumpConfiguration()",
            "net.opentsdb.utils.Config:void setDefaults()",
            "net.opentsdb.utils.Config:void loadConfig()",
            "net.opentsdb.utils.PluginLoader:java.lang.Object loadSpecificPlugin(java.lang.String,java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:java.util.List loadPlugins(java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:void loadJARs(java.lang.String)"
        ]
    },
    "net.opentsdb.core.DataPointsIterator:void seek(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void seek(long)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void seekInterval(long)",
            "net.opentsdb.core.RateSpan:void seek(long)"
        ]
    },
    "net.opentsdb.core.SpanGroup:long timestamp(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:void seek(long)",
            "net.opentsdb.core.DataPointsIterator:long timestamp()"
        ]
    },
    "net.opentsdb.core.SpanGroup:boolean isInteger(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:boolean isInteger()"
        ]
    },
    "net.opentsdb.core.SpanGroup:double doubleValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:double doubleValue()"
        ]
    },
    "net.opentsdb.core.SpanGroup:long longValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:long longValue()"
        ]
    },
    "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:long longValue()"
        ]
    },
    "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.AppendDataPoints:java.util.Collection parseKeyValue(net.opentsdb.core.TSDB,org.hbase.async.KeyValue)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)"
        ]
    },
    "net.opentsdb.core.ByteBufferList:byte[] toBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue buildCompactedColumn(net.opentsdb.core.ByteBufferList,net.opentsdb.core.ByteBufferList)"
        ]
    },
    "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue findFirstDatapointColumn()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue$Compaction:com.stumbleupon.async.Deferred compact()"
        ]
    },
    "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue$Compaction:com.stumbleupon.async.Deferred compact()"
        ]
    },
    "net.opentsdb.core.CompactionQueue$Compaction:boolean updateDeletesCheckForWrite(org.hbase.async.KeyValue)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue$Compaction:com.stumbleupon.async.Deferred compact()"
        ]
    },
    "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush(long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush()",
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred access$100(net.opentsdb.core.CompactionQueue,long,int)"
        ]
    },
    "net.opentsdb.core.IncomingDataPoint:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.IncomingDataPoints:void checkMetricAndTags(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.BatchedDataPoints:void setSeries(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:void setSeries(java.lang.String,java.util.Map)",
            "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred addPointInternal(java.lang.String,long,byte[],java.util.Map,short)"
        ]
    },
    "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.BatchedDataPoints:void setSeries(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:void setSeries(java.lang.String,java.util.Map)",
            "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred addPointInternal(java.lang.String,long,byte[],java.util.Map,short)"
        ]
    },
    "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(java.util.ArrayList,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Internal$GetLastDataPointCB:net.opentsdb.core.IncomingDataPoint call(java.util.ArrayList)",
            "net.opentsdb.core.Internal:net.opentsdb.core.Internal$Cell parseSingleValue(org.hbase.async.KeyValue)",
            "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(org.hbase.async.KeyValue)"
        ]
    },
    "net.opentsdb.core.Internal:void createAndSetTSUIDFilter(org.hbase.async.Scanner,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.Annotation$2ScannerCB:void <init>(net.opentsdb.core.TSDB,byte[],byte[],byte[],java.util.List,long,long)"
        ]
    },
    "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.SaltScanner:com.stumbleupon.async.Deferred scan()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()"
        ]
    },
    "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)",
            "net.opentsdb.core.SaltScanner:void handleException(java.lang.Exception)"
        ]
    },
    "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner:void access$1400(net.opentsdb.core.SaltScanner,java.util.List,java.util.Map)"
        ]
    },
    "net.opentsdb.core.Span:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:boolean hasNext()",
            "net.opentsdb.core.DataPointsIterator:void seek(long)",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)",
            "net.opentsdb.core.SpanGroup:int aggregatedSize()",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)"
        ]
    },
    "net.opentsdb.core.Span:void addRow(org.hbase.async.KeyValue)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.Span:long getIdxOffsetFor(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Span:long timestamp(int)",
            "net.opentsdb.core.Span:boolean isInteger(int)",
            "net.opentsdb.core.Span:long longValue(int)",
            "net.opentsdb.core.Span:double doubleValue(int)"
        ]
    },
    "net.opentsdb.core.SpanGroup$1ResolveCB:java.util.List call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup$1ResolveCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,long,net.opentsdb.core.Aggregator,int,net.opentsdb.core.FillPolicy)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)"
        ]
    },
    "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)"
        ]
    },
    "net.opentsdb.core.SpanGroup:void computeTags()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred getTagsAsync()",
            "net.opentsdb.core.SpanGroup:org.hbase.async.Bytes$ByteMap getTagUids()",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.core.SpanGroup:java.util.List getAggregatedTagUids()"
        ]
    },
    "net.opentsdb.core.SpanGroup:java.util.List getTSUIDs()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.List getTSUIDs()",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.SpanGroup:int aggregatedSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler:void doGraph(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveAggTags(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred getAggregatedTagsAsync()"
        ]
    },
    "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveTags(org.hbase.async.Bytes$ByteMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred getTagsAsync()"
        ]
    },
    "net.opentsdb.core.Tags$1NameCB:java.util.Map call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Tags$1NameCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.Tags$2NameCB:java.util.Map call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Tags$2NameCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred getTagsAsync(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getTagsAsync()",
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAll(net.opentsdb.core.TSDB,java.util.Map)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveOrCreateAll(net.opentsdb.core.TSDB,java.util.Map)"
        ]
    },
    "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllInternalAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllAsync(net.opentsdb.core.TSDB,java.util.Map)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveOrCreateAllAsync(net.opentsdb.core.TSDB,java.util.Map)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveOrCreateAllAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)"
        ]
    },
    "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveIdsAsync(net.opentsdb.core.TSDB,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Tags:java.util.HashMap resolveIds(net.opentsdb.core.TSDB,java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2MetricCB:com.stumbleupon.async.Deferred call(java.lang.String)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)"
        ]
    },
    "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery$1MetricCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean)",
            "net.opentsdb.tools.CliQuery:void parseCommandLineQuery(java.lang.String[],net.opentsdb.core.TSDB,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean)"
        ]
    },
    "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred configureFromQuery(net.opentsdb.core.TSQuery,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSQuery:com.stumbleupon.async.Deferred buildQueriesAsync(net.opentsdb.core.TSDB)"
        ]
    },
    "net.opentsdb.core.TsdbQuery:void findGroupBys()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:void access$000(net.opentsdb.core.TsdbQuery)"
        ]
    },
    "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred runAsync()"
        ]
    },
    "net.opentsdb.core.TsdbQuery:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TSQuery:void validateAndSetQuery()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler:void doGraph(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)",
            "net.opentsdb.tsd.QueryRpc:void handleQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,boolean)"
        ]
    },
    "net.opentsdb.core.TSQuery:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.stats.QueryStats:void <init>(java.lang.String,net.opentsdb.core.TSQuery,java.util.Map)",
            "net.opentsdb.tsd.QueryRpc:void handleQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,boolean)"
        ]
    },
    "net.opentsdb.core.TSSubQuery:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TSSubQuery:java.util.Map getTags()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TSSubQuery:net.opentsdb.utils.ByteSet getFilterTagKs()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()"
        ]
    },
    "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliQuery:void main(java.lang.String[])",
            "net.opentsdb.tsd.GraphHandler:int runGnuplot(net.opentsdb.tsd.HttpQuery,java.lang.String,net.opentsdb.graph.Plot)"
        ]
    },
    "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)"
        ]
    },
    "net.opentsdb.meta.Annotation$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.Annotation$1ScannerCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.Annotation$2ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.Annotation$2ScannerCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.AnnotationRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.meta.Annotation:byte[] getStorageJSON()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.Annotation:byte[] access$000(net.opentsdb.meta.Annotation)"
        ]
    },
    "net.opentsdb.meta.TSMeta$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$1GetCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSMeta$LoadUIDs:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$1CreateNewCB$1StoreNewCB:com.stumbleupon.async.Deferred call(java.lang.Boolean)",
            "net.opentsdb.meta.TSMeta$1TSMetaCB$1StoreNewCB:com.stumbleupon.async.Deferred call(java.lang.Boolean)",
            "net.opentsdb.meta.TSMeta$LoadUIDs:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.MetaSync$1TSMetaCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleTSMeta(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.meta.TSMeta:byte[] getStorageJSON()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred storeNew(net.opentsdb.core.TSDB)",
            "net.opentsdb.meta.TSMeta:byte[] access$000(net.opentsdb.meta.TSMeta)"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$1TagsCB:byte[] call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery$1TagsCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.util.List call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner getScanner()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner access$600(net.opentsdb.meta.TSUIDQuery)"
        ]
    },
    "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.MetaSync$1UidCB$UidNameCB:com.stumbleupon.async.Deferred call(java.lang.String)",
            "net.opentsdb.tools.MetaSync$1UidCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.UIDMeta)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleUIDMeta(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.meta.UIDMeta:byte[] getStorageJSON()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred storeNew(net.opentsdb.core.TSDB)",
            "net.opentsdb.meta.UIDMeta:byte[] access$800(net.opentsdb.meta.UIDMeta)"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_add_error_token(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_scan_token(int)",
            "net.opentsdb.query.expression.parser.SyntaxChecker:net.opentsdb.query.expression.parser.ParseException generateParseException()"
        ]
    },
    "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.util.List call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred metricNameAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.EDPtoDPS:java.lang.String metricName()",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred metricNameAsync()",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.EDPtoDPS:byte[] metricUID()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:byte[] metricUID()"
        ]
    },
    "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getAggregatedTagsAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.EDPtoDPS:java.util.List getAggregatedTags()",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()",
            "net.opentsdb.tsd.QueryExecutor$SerializeSubIterator:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ITimeSyncedIterator getCopy()"
        ]
    },
    "net.opentsdb.query.expression.ExpressionIterator:void compile()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.ExpressionIterator:void compile()",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.tsd.QueryExecutor$SerializeExpressionIterator:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionIterator:void extractVariableNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(java.lang.String,java.lang.String,net.opentsdb.query.expression.VariableIterator$SetOperator,boolean,boolean)",
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)"
        ]
    },
    "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String toString()"
        ]
    },
    "net.opentsdb.query.expression.ExpressionTree:java.lang.String clean(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()"
        ]
    },
    "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:void compile()"
        ]
    },
    "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.IntersectionIterator:net.opentsdb.query.expression.ITimeSyncedIterator getCopy()"
        ]
    },
    "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()"
        ]
    },
    "net.opentsdb.query.expression.IntersectionIterator:void next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)"
        ]
    },
    "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()"
        ]
    },
    "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)"
        ]
    },
    "net.opentsdb.query.expression.IntersectionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()"
        ]
    },
    "net.opentsdb.query.expression.IntersectionIterator:byte[] flattenTags(boolean,boolean,org.hbase.async.Bytes$ByteMap,net.opentsdb.utils.ByteSet,net.opentsdb.query.expression.ITimeSyncedIterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()"
        ]
    },
    "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)"
        ]
    },
    "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:long longValue()"
        ]
    },
    "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:com.stumbleupon.async.Deferred call(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:void compile()"
        ]
    },
    "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.UnionIterator:net.opentsdb.query.expression.ITimeSyncedIterator getCopy()"
        ]
    },
    "net.opentsdb.query.expression.UnionIterator:void computeUnion()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)"
        ]
    },
    "net.opentsdb.query.expression.UnionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()"
        ]
    },
    "net.opentsdb.query.expression.UnionIterator:byte[] flattenTags(boolean,boolean,net.opentsdb.query.expression.ExpressionDataPoint,net.opentsdb.query.expression.ITimeSyncedIterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()"
        ]
    },
    "net.opentsdb.query.expression.UnionIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:void next(int)"
        ]
    },
    "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void next()"
        ]
    },
    "net.opentsdb.query.expression.UnionIterator:void next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)"
        ]
    },
    "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)"
        ]
    },
    "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:byte[] call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void initializePlugins(boolean)"
        ]
    },
    "net.opentsdb.query.filter.TagVFilter:void mapToFilters(java.util.Map,java.util.List,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Tags:java.lang.String parseWithMetricAndFilters(java.lang.String,java.util.List)",
            "net.opentsdb.query.filter.TagVFilter:void tagsToFilters(java.util.Map,java.util.List)"
        ]
    },
    "net.opentsdb.query.filter.TagVFilter:java.util.Map loadedFilters()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcManager$ShowConfig:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.query.filter.TagVFilter:com.stumbleupon.async.Deferred resolveTags(net.opentsdb.core.TSDB,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.filter.TagVLiteralOrFilter:com.stumbleupon.async.Deferred resolveTagkName(net.opentsdb.core.TSDB)"
        ]
    },
    "net.opentsdb.query.pojo.Expression:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.pojo.Validatable:void validatePOJO(net.opentsdb.query.pojo.Validatable,java.lang.String)"
        ]
    },
    "net.opentsdb.query.pojo.Query:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.pojo.Validatable:void validatePOJO(net.opentsdb.query.pojo.Validatable,java.lang.String)",
            "net.opentsdb.tsd.QueryRpc:void handleExpressionQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.query.pojo.Query:void validateFilters()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.pojo.Query:void validate()"
        ]
    },
    "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.pojo.Query:void validate()"
        ]
    },
    "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap,boolean,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.QueryUtil:void setDataTableScanFilter(org.hbase.async.Scanner,java.util.List,org.hbase.async.Bytes$ByteMap,boolean,boolean,int)"
        ]
    },
    "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyTSUIDRegex(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery:void createAndSetTSUIDFilter(org.hbase.async.Scanner)"
        ]
    },
    "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.search.TimeSeriesLookup$1TagResolution:com.stumbleupon.async.Deferred call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.search.TimeSeriesLookup$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.search.TimeSeriesLookup$1TagResolution:java.lang.Object call(java.lang.Object)",
            "net.opentsdb.search.TimeSeriesLookup:com.stumbleupon.async.Deferred resolveUIDs()"
        ]
    },
    "net.opentsdb.stats.QueryStats:java.util.Map getRunningAndCompleteStats()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.StatsRpc:void printQueryStats(net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.stats.QueryStats:void aggQueryStats()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.stats.QueryStats:void markSerialized(org.jboss.netty.handler.codec.http.HttpResponseStatus,java.lang.Throwable)"
        ]
    },
    "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.stats.QueryStats:java.lang.String toString()",
            "net.opentsdb.stats.QueryStats:java.util.Map getStats()",
            "net.opentsdb.tsd.HttpJsonSerializer$1FinalCB:org.jboss.netty.buffer.ChannelBuffer call(java.lang.Object)"
        ]
    },
    "net.opentsdb.stats.QueryStats:java.util.Map getQueryStats(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.stats.StatsCollector:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TextImporter$1:void <init>(java.lang.String)",
            "net.opentsdb.tsd.StatsRpc$ASCIICollector:void <init>(net.opentsdb.tsd.StatsRpc,java.lang.String,java.lang.StringBuilder,java.util.ArrayList)",
            "net.opentsdb.tsd.StatsRpc$SerializerCollector:void <init>(net.opentsdb.tsd.StatsRpc,java.lang.String,java.util.List,boolean)"
        ]
    },
    "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.core.TSDB:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.core.TSDB:void collectUidStats(net.opentsdb.uid.UniqueId,net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.stats.QueryStats:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,java.lang.Number)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,java.lang.Number,java.lang.String)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,net.opentsdb.stats.Histogram,java.lang.String)",
            "net.opentsdb.tsd.ConnectionManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.uid.UniqueIdWhitelistFilter:void collectStats(net.opentsdb.stats.StatsCollector)"
        ]
    },
    "net.opentsdb.tools.ArgP:void addUsageTo(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.ArgP:java.lang.String usage()"
        ]
    },
    "net.opentsdb.tools.ArgP:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.CliOptions:void overloadConfig(net.opentsdb.tools.ArgP,net.opentsdb.utils.Config)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliOptions:net.opentsdb.utils.Config getConfig(net.opentsdb.tools.ArgP)"
        ]
    },
    "net.opentsdb.tools.CliOptions:void honorVerboseFlag(net.opentsdb.tools.ArgP)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliOptions:java.lang.String[] parse(net.opentsdb.tools.ArgP,java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliQuery:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.CliQuery:java.util.HashMap parsePlotParams(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)"
        ]
    },
    "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.DumpSeries:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,org.hbase.async.KeyValue,long)"
        ]
    },
    "net.opentsdb.tools.Fsck$FsckWorker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.Fsck:void runFullTable()",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)",
            "net.opentsdb.tools.UidManager:int metaPurge(net.opentsdb.core.TSDB)",
            "net.opentsdb.tools.UidManager:int treeSync(net.opentsdb.core.TSDB)"
        ]
    },
    "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.Fsck$FsckWorker:void run()"
        ]
    },
    "net.opentsdb.tools.Fsck$FsckWorker:void fsckDataPoints(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.Fsck$FsckWorker:void run()"
        ]
    },
    "net.opentsdb.tools.Fsck:void runFullTable()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.Fsck:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.Fsck:void runQueries(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.Fsck:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.MetaPurge$1MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.MetaPurge$1MetaScanner:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tools.MetaPurge$2MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.MetaPurge$2MetaScanner:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tools.TreeSync$1TsuidScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TreeSync$1TsuidScanner:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tools.TreeSync:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int metaPurge(net.opentsdb.core.TSDB)",
            "net.opentsdb.tools.UidManager:int treeSync(net.opentsdb.core.TSDB)"
        ]
    },
    "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int runCommand(net.opentsdb.core.TSDB,byte[],short,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.UidManager:boolean printResult(java.util.ArrayList,byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])",
            "net.opentsdb.tools.UidManager:int findAndPrintRow(org.hbase.async.HBaseClient,byte[],byte[],byte[],boolean)"
        ]
    },
    "net.opentsdb.tools.UidManager:int fsck(org.hbase.async.HBaseClient,byte[],boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int runCommand(net.opentsdb.core.TSDB,byte[],short,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int runCommand(net.opentsdb.core.TSDB,byte[],short,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.Branch:byte[] compileBranchId()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Branch:java.lang.String getBranchId()",
            "net.opentsdb.tree.Branch:java.util.Map getPath()"
        ]
    },
    "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1ProcessCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Branch)",
            "net.opentsdb.tree.TreeBuilder$1RootCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Branch)"
        ]
    },
    "net.opentsdb.tree.Leaf$1CollateUIDsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Leaf$1CollateUIDsCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.Leaf:com.stumbleupon.async.Deferred parseFromStorage(net.opentsdb.core.TSDB,org.hbase.async.KeyValue,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Tree$1CreateNewCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.Tree$1DeleteTreeScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Tree$1DeleteTreeScanner:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.Tree$1FetchTreeCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Tree$1FetchTreeCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.Tree$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Tree$1GetCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.Tree$2GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Tree$2GetCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.Tree:void <init>(net.opentsdb.tree.Tree)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)"
        ]
    },
    "net.opentsdb.tree.Tree:boolean copyChanges(net.opentsdb.tree.Tree,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Tree$1StoreTreeCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Tree)"
        ]
    },
    "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred storeTree(net.opentsdb.core.TSDB,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.TreeRpc:void handleTree(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchCollisions(net.opentsdb.core.TSDB,int,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.TreeRpc:void handleCollisionNotMatched(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,boolean)"
        ]
    },
    "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchNotMatched(net.opentsdb.core.TSDB,int,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.TreeRpc:void handleCollisionNotMatched(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,boolean)"
        ]
    },
    "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushCollisions(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1ProcessCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Branch)"
        ]
    },
    "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushNotMatched(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1ProcessCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Branch)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.util.List call(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:java.lang.Object call(java.lang.Object)",
            "net.opentsdb.tree.TreeBuilder:com.stumbleupon.async.Deferred processAllTrees(net.opentsdb.core.TSDB,net.opentsdb.meta.TSMeta)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)",
            "net.opentsdb.tree.TreeBuilder:boolean access$000(net.opentsdb.tree.TreeBuilder,net.opentsdb.tree.Branch,int)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder:void parseTagkRule()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder:void parseTagkCustomRule()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder:void parseTagvRule()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder:void calculateMaxLevel()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder:void <init>(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree)",
            "net.opentsdb.tree.TreeBuilder:void setTree(net.opentsdb.tree.Tree)"
        ]
    },
    "net.opentsdb.tree.TreeRule$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeRule$1GetCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.TreeRule:boolean copyChanges(net.opentsdb.tree.TreeRule,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeRule$1StoreCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.TreeRule)"
        ]
    },
    "net.opentsdb.tree.TreeRule:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.TreeRpc:void handleRule(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getPrintableHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:void handleQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,boolean)"
        ]
    },
    "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryExecutor:void execute(net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.AbstractHttpQuery:java.nio.charset.Charset getCharset()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.AbstractHttpQuery:java.lang.String getContent()",
            "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.HttpQuery:void redirect(java.lang.String)",
            "net.opentsdb.tsd.HttpSerializer:org.jboss.netty.buffer.ChannelBuffer formatNotFoundV1()",
            "net.opentsdb.tsd.HttpSerializer:org.jboss.netty.buffer.ChannelBuffer formatErrorV1(net.opentsdb.tsd.BadRequestException)",
            "net.opentsdb.tsd.HttpSerializer:org.jboss.netty.buffer.ChannelBuffer formatErrorV1(java.lang.Exception)"
        ]
    },
    "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.AnnotationRpc:void executeBulk(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.AnnotationRpc:void executeBulk(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler:void doGraph(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.TreeRpc:void handleTree(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatQueryV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatConfigV1(net.opentsdb.utils.Config)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcManager$ShowConfig:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.PipelineFactory:void <init>(net.opentsdb.core.TSDB,net.opentsdb.tsd.RpcManager,int)"
        ]
    },
    "net.opentsdb.tsd.LogsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.lang.Object)",
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:java.lang.Object call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor$SerializeExpressionIterator:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor$SerializeSubIterator:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:void handleExpressionQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred access$600(net.opentsdb.tsd.QueryExecutor)"
        ]
    },
    "net.opentsdb.tsd.QueryRpc$1FetchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc$1FetchCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:com.stumbleupon.async.Deferred call(org.hbase.async.Bytes$ByteMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:void handleQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,boolean)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.QueryRpc:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.RpcManager$Help:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleTelnetRpc(org.jboss.netty.channel.Channel,java.lang.String[])"
        ]
    },
    "net.opentsdb.tsd.RpcManager:com.stumbleupon.async.Deferred shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TSDMain$1TSDBShutdown:void run()"
        ]
    },
    "net.opentsdb.tsd.RpcManager:void collectStats(net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.StatsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void doCollectStats(net.opentsdb.core.TSDB,net.opentsdb.stats.StatsCollector,boolean)"
        ]
    },
    "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.SearchRpc$1LookupCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.StatsRpc:void printRegionClientStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.StatsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.StatsRpc:void printThreadStats(net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.StatsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.StatsRpc:void printJVMStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.StatsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.StatsRpc:void doCollectStats(net.opentsdb.core.TSDB,net.opentsdb.stats.StatsCollector,boolean)"
        ]
    },
    "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.TreeRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.TreeRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.UniqueIdRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.UniqueIdRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.UniqueIdRpc:java.lang.String getTSUIDForMetric(java.lang.String,net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.UniqueIdRpc:void handleTSMeta(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.uid.UniqueId$2GetCB:java.util.Map call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.uid.UniqueId$2GetCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.uid.UniqueId:void preloadUidCache(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void <init>(org.hbase.async.HBaseClient,net.opentsdb.utils.Config)"
        ]
    },
    "net.opentsdb.uid.UniqueIdWhitelistFilter:com.stumbleupon.async.Deferred allowUIDAssignment(net.opentsdb.uid.UniqueId$UniqueIdType,java.lang.String,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.uid.UniqueId$1HandleNoSuchUniqueNameCB:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.uid.UniqueId:byte[] getOrCreateId(java.lang.String)"
        ]
    },
    "net.opentsdb.utils.ByteSet:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.utils.Config:java.lang.String dumpConfiguration()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void <init>(org.hbase.async.HBaseClient,net.opentsdb.utils.Config)"
        ]
    },
    "net.opentsdb.utils.Config:void setDefaults()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.utils.Config:void <init>(boolean)",
            "net.opentsdb.utils.Config:void <init>(java.lang.String)",
            "net.opentsdb.utils.Config:void <init>(net.opentsdb.utils.Config)"
        ]
    },
    "net.opentsdb.utils.Config:void loadConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.utils.Config:void <init>(boolean)"
        ]
    },
    "net.opentsdb.utils.PluginLoader:java.lang.Object loadSpecificPlugin(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void initializePlugins(boolean)",
            "net.opentsdb.tools.TSDMain:net.opentsdb.tools.StartupPlugin loadStartupPlugins(net.opentsdb.utils.Config)",
            "net.opentsdb.tsd.RpcManager:java.lang.Object createAndInitialize(java.lang.String,java.lang.Class)"
        ]
    },
    "net.opentsdb.utils.PluginLoader:java.util.List loadPlugins(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)"
        ]
    },
    "net.opentsdb.utils.PluginLoader:void loadJARs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void loadPluginPath(java.lang.String)"
        ]
    },
    "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:net.opentsdb.core.DataPoints[] evaluate(java.util.List)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor$SerializeSubIterator:com.stumbleupon.async.Deferred call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryExecutor$SerializeSubIterator:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.TimeSyncedIterator:void <init>(java.lang.String,net.opentsdb.utils.ByteSet,net.opentsdb.core.DataPoints[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()"
        ]
    },
    "net.opentsdb.query.expression.TimeSyncedIterator:void <init>(net.opentsdb.query.expression.TimeSyncedIterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ITimeSyncedIterator getCopy()"
        ]
    },
    "net.opentsdb.core.AggregationIterator:net.opentsdb.core.AggregationIterator create(java.util.List,long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,net.opentsdb.core.Aggregator,long,boolean,net.opentsdb.core.RateOptions)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.SpanGroup:net.opentsdb.core.SeekableView iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:int size()",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.core.SpanGroup:java.util.Iterator iterator()",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()"
        ]
    },
    "net.opentsdb.core.AggregationIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.AppendDataPoints:java.util.Collection parseKeyValue(net.opentsdb.core.TSDB,org.hbase.async.KeyValue)",
            "net.opentsdb.core.ByteBufferList:byte[] toBytes(int)",
            "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue findFirstDatapointColumn()",
            "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()",
            "net.opentsdb.core.CompactionQueue$Compaction:boolean updateDeletesCheckForWrite(org.hbase.async.KeyValue)",
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush(long,int)",
            "net.opentsdb.core.IncomingDataPoint:java.lang.String toString()",
            "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.core.IncomingDataPoints:void checkMetricAndTags(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(java.util.ArrayList,int)",
            "net.opentsdb.core.Internal:void createAndSetTSUIDFilter(org.hbase.async.Scanner,java.util.List)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner:com.stumbleupon.async.Deferred scan()",
            "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()",
            "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)",
            "net.opentsdb.core.Span:int size()",
            "net.opentsdb.core.Span:void addRow(org.hbase.async.KeyValue)",
            "net.opentsdb.core.Span:long getIdxOffsetFor(int)",
            "net.opentsdb.core.SpanGroup$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)",
            "net.opentsdb.core.SpanGroup:void computeTags()",
            "net.opentsdb.core.SpanGroup:java.util.List getTSUIDs()",
            "net.opentsdb.core.SpanGroup:int aggregatedSize()",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveAggTags(java.util.Set)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveTags(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags$1NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags$2NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred getTagsAsync(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllInternalAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveIdsAsync(net.opentsdb.core.TSDB,java.util.List)",
            "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred configureFromQuery(net.opentsdb.core.TSQuery,int)",
            "net.opentsdb.core.TsdbQuery:void findGroupBys()",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()",
            "net.opentsdb.core.TsdbQuery:java.lang.String toString()",
            "net.opentsdb.core.TSQuery:void validateAndSetQuery()",
            "net.opentsdb.core.TSQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.util.Map getTags()",
            "net.opentsdb.core.TSSubQuery:net.opentsdb.utils.ByteSet getFilterTagKs()",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.meta.Annotation$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation$2ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,java.lang.Boolean)",
            "net.opentsdb.meta.Annotation:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSMeta$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.TSMeta$LoadUIDs:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.TSMeta:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$1TagsCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner getScanner()",
            "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.UIDMeta:byte[] getStorageJSON()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_add_error_token(int,int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred metricNameAsync()",
            "net.opentsdb.query.expression.EDPtoDPS:byte[] metricUID()",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.ExpressionIterator:void compile()",
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.ExpressionIterator:void extractVariableNames()",
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String clean(java.util.Collection)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()",
            "net.opentsdb.query.expression.IntersectionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.IntersectionIterator:byte[] flattenTags(boolean,boolean,org.hbase.async.Bytes$ByteMap,net.opentsdb.utils.ByteSet,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()",
            "net.opentsdb.query.expression.UnionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.UnionIterator:byte[] flattenTags(boolean,boolean,net.opentsdb.query.expression.ExpressionDataPoint,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)",
            "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)",
            "net.opentsdb.query.filter.TagVFilter:void mapToFilters(java.util.Map,java.util.List,boolean)",
            "net.opentsdb.query.filter.TagVFilter:java.util.Map loadedFilters()",
            "net.opentsdb.query.filter.TagVFilter:com.stumbleupon.async.Deferred resolveTags(net.opentsdb.core.TSDB,java.util.Set)",
            "net.opentsdb.query.pojo.Expression:void validate()",
            "net.opentsdb.query.pojo.Query:void validate()",
            "net.opentsdb.query.pojo.Query:void validateFilters()",
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap,boolean,byte[],byte[])",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyTSUIDRegex(java.util.List)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.search.TimeSeriesLookup$1TagResolution:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.stats.QueryStats:java.util.Map getRunningAndCompleteStats()",
            "net.opentsdb.stats.QueryStats:void aggQueryStats()",
            "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)",
            "net.opentsdb.stats.QueryStats:java.util.Map getQueryStats(int,boolean)",
            "net.opentsdb.stats.StatsCollector:void <init>(java.lang.String)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long,java.lang.String)",
            "net.opentsdb.tools.ArgP:void addUsageTo(java.lang.StringBuilder)",
            "net.opentsdb.tools.ArgP:java.lang.String toString()",
            "net.opentsdb.tools.CliOptions:void overloadConfig(net.opentsdb.tools.ArgP,net.opentsdb.utils.Config)",
            "net.opentsdb.tools.CliOptions:void honorVerboseFlag(net.opentsdb.tools.ArgP)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tools.CliQuery:java.util.HashMap parsePlotParams(java.util.ArrayList)",
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void run()",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckDataPoints(java.util.Map)",
            "net.opentsdb.tools.Fsck:void runFullTable()",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)",
            "net.opentsdb.tools.MetaPurge$1MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaPurge$2MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync:void run()",
            "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])",
            "net.opentsdb.tools.UidManager:boolean printResult(java.util.ArrayList,byte[],boolean)",
            "net.opentsdb.tools.UidManager:int fsck(org.hbase.async.HBaseClient,byte[],boolean,boolean)",
            "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Branch:byte[] compileBranchId()",
            "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Leaf$1CollateUIDsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Leaf:com.stumbleupon.async.Deferred parseFromStorage(net.opentsdb.core.TSDB,org.hbase.async.KeyValue,boolean)",
            "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.Tree$1DeleteTreeScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1FetchTreeCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$2GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree:void <init>(net.opentsdb.tree.Tree)",
            "net.opentsdb.tree.Tree:boolean copyChanges(net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred storeTree(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchCollisions(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchNotMatched(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushCollisions(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushNotMatched(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.util.List call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)",
            "net.opentsdb.tree.TreeBuilder:void parseTagkRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagkCustomRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagvRule()",
            "net.opentsdb.tree.TreeBuilder:void calculateMaxLevel()",
            "net.opentsdb.tree.TreeRule$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeRule:boolean copyChanges(net.opentsdb.tree.TreeRule,boolean)",
            "net.opentsdb.tree.TreeRule:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getPrintableHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.nio.charset.Charset getCharset()",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatConfigV1(net.opentsdb.utils.Config)",
            "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.LogsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()",
            "net.opentsdb.tsd.QueryRpc$1FetchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:com.stumbleupon.async.Deferred call(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.RpcManager$Help:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.RpcManager:com.stumbleupon.async.Deferred shutdown()",
            "net.opentsdb.tsd.RpcManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.StatsRpc:void printRegionClientStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printThreadStats(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printJVMStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:java.lang.String getTSUIDForMetric(java.lang.String,net.opentsdb.core.TSDB)",
            "net.opentsdb.uid.UniqueId$2GetCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId:void preloadUidCache(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.uid.UniqueIdWhitelistFilter:com.stumbleupon.async.Deferred allowUIDAssignment(net.opentsdb.uid.UniqueId$UniqueIdType,java.lang.String,java.lang.String,java.util.Map)",
            "net.opentsdb.utils.ByteSet:java.lang.String toString()",
            "net.opentsdb.utils.Config:java.lang.String dumpConfiguration()",
            "net.opentsdb.utils.Config:void setDefaults()",
            "net.opentsdb.utils.Config:void loadConfig()",
            "net.opentsdb.utils.PluginLoader:java.lang.Object loadSpecificPlugin(java.lang.String,java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:java.util.List loadPlugins(java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:void loadJARs(java.lang.String)"
        ]
    },
    "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextInterval()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Downsampler$ValuesInInterval:boolean hasNextValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Aggregators$Avg:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$Count:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$First:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$Last:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$Max:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$Min:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$Multiply:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$None:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$PercentileAgg:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$StdDev:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Aggregators$Sum:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:double nextDoubleValue()",
            "net.opentsdb.core.Downsampler:boolean hasNext()",
            "net.opentsdb.core.FillingDownsampler:boolean hasNext()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.query.expression.HighestCurrent$MaxLatestAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.HighestMax$MaxCacheAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)"
        ]
    },
    "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void moveToNext(int)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()",
            "net.opentsdb.core.Downsampler:java.lang.Object next()",
            "net.opentsdb.core.FillingDownsampler:java.lang.Object next()",
            "net.opentsdb.core.RateSpan:void populateNextRate()",
            "net.opentsdb.core.SpanGroup:int size()",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()"
        ]
    },
    "net.opentsdb.core.Aggregators$Avg:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Aggregators$Count:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Aggregators$First:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Aggregators$Last:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Aggregators$Max:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Aggregators$Min:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Aggregators$Multiply:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Aggregators$None:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Aggregators$PercentileAgg:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Aggregators$StdDev:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.Aggregators$Sum:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.query.expression.HighestCurrent$MaxLatestAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.query.expression.HighestMax$MaxCacheAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:double doubleValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()"
        ]
    },
    "net.opentsdb.core.RateSpan:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.AppendDataPoints:java.util.Collection parseKeyValue(net.opentsdb.core.TSDB,org.hbase.async.KeyValue)",
            "net.opentsdb.core.ByteBufferList:byte[] toBytes(int)",
            "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue findFirstDatapointColumn()",
            "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()",
            "net.opentsdb.core.CompactionQueue$Compaction:boolean updateDeletesCheckForWrite(org.hbase.async.KeyValue)",
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush(long,int)",
            "net.opentsdb.core.IncomingDataPoint:java.lang.String toString()",
            "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.core.IncomingDataPoints:void checkMetricAndTags(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(java.util.ArrayList,int)",
            "net.opentsdb.core.Internal:void createAndSetTSUIDFilter(org.hbase.async.Scanner,java.util.List)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner:com.stumbleupon.async.Deferred scan()",
            "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()",
            "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)",
            "net.opentsdb.core.Span:int size()",
            "net.opentsdb.core.Span:void addRow(org.hbase.async.KeyValue)",
            "net.opentsdb.core.Span:long getIdxOffsetFor(int)",
            "net.opentsdb.core.SpanGroup$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)",
            "net.opentsdb.core.SpanGroup:void computeTags()",
            "net.opentsdb.core.SpanGroup:java.util.List getTSUIDs()",
            "net.opentsdb.core.SpanGroup:int aggregatedSize()",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveAggTags(java.util.Set)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveTags(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags$1NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags$2NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred getTagsAsync(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllInternalAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveIdsAsync(net.opentsdb.core.TSDB,java.util.List)",
            "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred configureFromQuery(net.opentsdb.core.TSQuery,int)",
            "net.opentsdb.core.TsdbQuery:void findGroupBys()",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()",
            "net.opentsdb.core.TsdbQuery:java.lang.String toString()",
            "net.opentsdb.core.TSQuery:void validateAndSetQuery()",
            "net.opentsdb.core.TSQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.util.Map getTags()",
            "net.opentsdb.core.TSSubQuery:net.opentsdb.utils.ByteSet getFilterTagKs()",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.meta.Annotation$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation$2ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,java.lang.Boolean)",
            "net.opentsdb.meta.Annotation:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSMeta$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.TSMeta$LoadUIDs:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.TSMeta:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$1TagsCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner getScanner()",
            "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.UIDMeta:byte[] getStorageJSON()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_add_error_token(int,int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred metricNameAsync()",
            "net.opentsdb.query.expression.EDPtoDPS:byte[] metricUID()",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.ExpressionIterator:void compile()",
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.ExpressionIterator:void extractVariableNames()",
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String clean(java.util.Collection)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()",
            "net.opentsdb.query.expression.IntersectionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.IntersectionIterator:byte[] flattenTags(boolean,boolean,org.hbase.async.Bytes$ByteMap,net.opentsdb.utils.ByteSet,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()",
            "net.opentsdb.query.expression.UnionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.UnionIterator:byte[] flattenTags(boolean,boolean,net.opentsdb.query.expression.ExpressionDataPoint,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)",
            "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)",
            "net.opentsdb.query.filter.TagVFilter:void mapToFilters(java.util.Map,java.util.List,boolean)",
            "net.opentsdb.query.filter.TagVFilter:java.util.Map loadedFilters()",
            "net.opentsdb.query.filter.TagVFilter:com.stumbleupon.async.Deferred resolveTags(net.opentsdb.core.TSDB,java.util.Set)",
            "net.opentsdb.query.pojo.Expression:void validate()",
            "net.opentsdb.query.pojo.Query:void validate()",
            "net.opentsdb.query.pojo.Query:void validateFilters()",
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap,boolean,byte[],byte[])",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyTSUIDRegex(java.util.List)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.search.TimeSeriesLookup$1TagResolution:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.stats.QueryStats:java.util.Map getRunningAndCompleteStats()",
            "net.opentsdb.stats.QueryStats:void aggQueryStats()",
            "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)",
            "net.opentsdb.stats.QueryStats:java.util.Map getQueryStats(int,boolean)",
            "net.opentsdb.stats.StatsCollector:void <init>(java.lang.String)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long,java.lang.String)",
            "net.opentsdb.tools.ArgP:void addUsageTo(java.lang.StringBuilder)",
            "net.opentsdb.tools.ArgP:java.lang.String toString()",
            "net.opentsdb.tools.CliOptions:void overloadConfig(net.opentsdb.tools.ArgP,net.opentsdb.utils.Config)",
            "net.opentsdb.tools.CliOptions:void honorVerboseFlag(net.opentsdb.tools.ArgP)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tools.CliQuery:java.util.HashMap parsePlotParams(java.util.ArrayList)",
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void run()",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckDataPoints(java.util.Map)",
            "net.opentsdb.tools.Fsck:void runFullTable()",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)",
            "net.opentsdb.tools.MetaPurge$1MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaPurge$2MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync:void run()",
            "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])",
            "net.opentsdb.tools.UidManager:boolean printResult(java.util.ArrayList,byte[],boolean)",
            "net.opentsdb.tools.UidManager:int fsck(org.hbase.async.HBaseClient,byte[],boolean,boolean)",
            "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Branch:byte[] compileBranchId()",
            "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Leaf$1CollateUIDsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Leaf:com.stumbleupon.async.Deferred parseFromStorage(net.opentsdb.core.TSDB,org.hbase.async.KeyValue,boolean)",
            "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.Tree$1DeleteTreeScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1FetchTreeCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$2GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree:void <init>(net.opentsdb.tree.Tree)",
            "net.opentsdb.tree.Tree:boolean copyChanges(net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred storeTree(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchCollisions(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchNotMatched(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushCollisions(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushNotMatched(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.util.List call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)",
            "net.opentsdb.tree.TreeBuilder:void parseTagkRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagkCustomRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagvRule()",
            "net.opentsdb.tree.TreeBuilder:void calculateMaxLevel()",
            "net.opentsdb.tree.TreeRule$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeRule:boolean copyChanges(net.opentsdb.tree.TreeRule,boolean)",
            "net.opentsdb.tree.TreeRule:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getPrintableHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.nio.charset.Charset getCharset()",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatConfigV1(net.opentsdb.utils.Config)",
            "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.LogsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()",
            "net.opentsdb.tsd.QueryRpc$1FetchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:com.stumbleupon.async.Deferred call(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.RpcManager$Help:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.RpcManager:com.stumbleupon.async.Deferred shutdown()",
            "net.opentsdb.tsd.RpcManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.StatsRpc:void printRegionClientStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printThreadStats(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printJVMStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:java.lang.String getTSUIDForMetric(java.lang.String,net.opentsdb.core.TSDB)",
            "net.opentsdb.uid.UniqueId$2GetCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId:void preloadUidCache(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.uid.UniqueIdWhitelistFilter:com.stumbleupon.async.Deferred allowUIDAssignment(net.opentsdb.uid.UniqueId$UniqueIdType,java.lang.String,java.lang.String,java.util.Map)",
            "net.opentsdb.utils.ByteSet:java.lang.String toString()",
            "net.opentsdb.utils.Config:java.lang.String dumpConfiguration()",
            "net.opentsdb.utils.Config:void setDefaults()",
            "net.opentsdb.utils.Config:void loadConfig()",
            "net.opentsdb.utils.PluginLoader:java.lang.Object loadSpecificPlugin(java.lang.String,java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:java.util.List loadPlugins(java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:void loadJARs(java.lang.String)"
        ]
    },
    "net.opentsdb.core.RateSpan:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void moveToNext(int)",
            "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.AppendDataPoints:java.util.Collection parseKeyValue(net.opentsdb.core.TSDB,org.hbase.async.KeyValue)",
            "net.opentsdb.core.ByteBufferList:byte[] toBytes(int)",
            "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue findFirstDatapointColumn()",
            "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()",
            "net.opentsdb.core.CompactionQueue$Compaction:boolean updateDeletesCheckForWrite(org.hbase.async.KeyValue)",
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush(long,int)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void initializeIfNotDone()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()",
            "net.opentsdb.core.IncomingDataPoint:java.lang.String toString()",
            "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.core.IncomingDataPoints:void checkMetricAndTags(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(java.util.ArrayList,int)",
            "net.opentsdb.core.Internal:void createAndSetTSUIDFilter(org.hbase.async.Scanner,java.util.List)",
            "net.opentsdb.core.RateSpan:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.RateSpan:void populateNextRate()",
            "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner:com.stumbleupon.async.Deferred scan()",
            "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()",
            "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)",
            "net.opentsdb.core.Span:int size()",
            "net.opentsdb.core.Span:void addRow(org.hbase.async.KeyValue)",
            "net.opentsdb.core.Span:long getIdxOffsetFor(int)",
            "net.opentsdb.core.SpanGroup$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)",
            "net.opentsdb.core.SpanGroup:void computeTags()",
            "net.opentsdb.core.SpanGroup:java.util.List getTSUIDs()",
            "net.opentsdb.core.SpanGroup:int size()",
            "net.opentsdb.core.SpanGroup:int aggregatedSize()",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveAggTags(java.util.Set)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveTags(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags$1NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags$2NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred getTagsAsync(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllInternalAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveIdsAsync(net.opentsdb.core.TSDB,java.util.List)",
            "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred configureFromQuery(net.opentsdb.core.TSQuery,int)",
            "net.opentsdb.core.TsdbQuery:void findGroupBys()",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()",
            "net.opentsdb.core.TsdbQuery:java.lang.String toString()",
            "net.opentsdb.core.TSQuery:void validateAndSetQuery()",
            "net.opentsdb.core.TSQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.util.Map getTags()",
            "net.opentsdb.core.TSSubQuery:net.opentsdb.utils.ByteSet getFilterTagKs()",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.meta.Annotation$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation$2ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,java.lang.Boolean)",
            "net.opentsdb.meta.Annotation:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSMeta$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.TSMeta$LoadUIDs:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.TSMeta:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$1TagsCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner getScanner()",
            "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.UIDMeta:byte[] getStorageJSON()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_add_error_token(int,int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.ExpressionIterator:void compile()",
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.ExpressionIterator:void extractVariableNames()",
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String clean(java.util.Collection)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()",
            "net.opentsdb.query.expression.IntersectionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.IntersectionIterator:byte[] flattenTags(boolean,boolean,org.hbase.async.Bytes$ByteMap,net.opentsdb.utils.ByteSet,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()",
            "net.opentsdb.query.expression.UnionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.UnionIterator:byte[] flattenTags(boolean,boolean,net.opentsdb.query.expression.ExpressionDataPoint,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)",
            "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)",
            "net.opentsdb.query.filter.TagVFilter:void mapToFilters(java.util.Map,java.util.List,boolean)",
            "net.opentsdb.query.filter.TagVFilter:java.util.Map loadedFilters()",
            "net.opentsdb.query.filter.TagVFilter:com.stumbleupon.async.Deferred resolveTags(net.opentsdb.core.TSDB,java.util.Set)",
            "net.opentsdb.query.pojo.Expression:void validate()",
            "net.opentsdb.query.pojo.Query:void validate()",
            "net.opentsdb.query.pojo.Query:void validateFilters()",
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap,boolean,byte[],byte[])",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyTSUIDRegex(java.util.List)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.search.TimeSeriesLookup$1TagResolution:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.stats.QueryStats:java.util.Map getRunningAndCompleteStats()",
            "net.opentsdb.stats.QueryStats:void aggQueryStats()",
            "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)",
            "net.opentsdb.stats.QueryStats:java.util.Map getQueryStats(int,boolean)",
            "net.opentsdb.stats.StatsCollector:void <init>(java.lang.String)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long,java.lang.String)",
            "net.opentsdb.tools.ArgP:void addUsageTo(java.lang.StringBuilder)",
            "net.opentsdb.tools.ArgP:java.lang.String toString()",
            "net.opentsdb.tools.CliOptions:void overloadConfig(net.opentsdb.tools.ArgP,net.opentsdb.utils.Config)",
            "net.opentsdb.tools.CliOptions:void honorVerboseFlag(net.opentsdb.tools.ArgP)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tools.CliQuery:java.util.HashMap parsePlotParams(java.util.ArrayList)",
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void run()",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckDataPoints(java.util.Map)",
            "net.opentsdb.tools.Fsck:void runFullTable()",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)",
            "net.opentsdb.tools.MetaPurge$1MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaPurge$2MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync:void run()",
            "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])",
            "net.opentsdb.tools.UidManager:boolean printResult(java.util.ArrayList,byte[],boolean)",
            "net.opentsdb.tools.UidManager:int fsck(org.hbase.async.HBaseClient,byte[],boolean,boolean)",
            "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Branch:byte[] compileBranchId()",
            "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Leaf$1CollateUIDsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Leaf:com.stumbleupon.async.Deferred parseFromStorage(net.opentsdb.core.TSDB,org.hbase.async.KeyValue,boolean)",
            "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.Tree$1DeleteTreeScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1FetchTreeCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$2GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree:void <init>(net.opentsdb.tree.Tree)",
            "net.opentsdb.tree.Tree:boolean copyChanges(net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred storeTree(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchCollisions(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchNotMatched(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushCollisions(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushNotMatched(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.util.List call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)",
            "net.opentsdb.tree.TreeBuilder:void parseTagkRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagkCustomRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagvRule()",
            "net.opentsdb.tree.TreeBuilder:void calculateMaxLevel()",
            "net.opentsdb.tree.TreeRule$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeRule:boolean copyChanges(net.opentsdb.tree.TreeRule,boolean)",
            "net.opentsdb.tree.TreeRule:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getPrintableHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.nio.charset.Charset getCharset()",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatConfigV1(net.opentsdb.utils.Config)",
            "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.LogsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()",
            "net.opentsdb.tsd.QueryRpc$1FetchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:com.stumbleupon.async.Deferred call(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.RpcManager$Help:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.RpcManager:com.stumbleupon.async.Deferred shutdown()",
            "net.opentsdb.tsd.RpcManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.StatsRpc:void printRegionClientStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printThreadStats(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printJVMStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:java.lang.String getTSUIDForMetric(java.lang.String,net.opentsdb.core.TSDB)",
            "net.opentsdb.uid.UniqueId$2GetCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId:void preloadUidCache(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.uid.UniqueIdWhitelistFilter:com.stumbleupon.async.Deferred allowUIDAssignment(net.opentsdb.uid.UniqueId$UniqueIdType,java.lang.String,java.lang.String,java.util.Map)",
            "net.opentsdb.utils.ByteSet:java.lang.String toString()",
            "net.opentsdb.utils.Config:java.lang.String dumpConfiguration()",
            "net.opentsdb.utils.Config:void setDefaults()",
            "net.opentsdb.utils.Config:void loadConfig()",
            "net.opentsdb.utils.PluginLoader:java.lang.Object loadSpecificPlugin(java.lang.String,java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:java.util.List loadPlugins(java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:void loadJARs(java.lang.String)"
        ]
    },
    "net.opentsdb.core.DataPointsIterator:net.opentsdb.core.DataPoint next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void moveToNext(int)",
            "net.opentsdb.core.DataPointsIterator:java.lang.Object next()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()",
            "net.opentsdb.core.RateSpan:void populateNextRate()",
            "net.opentsdb.core.SpanGroup:int size()",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()"
        ]
    },
    "net.opentsdb.core.AggregationIterator:void seek(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void seek(long)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void seekInterval(long)",
            "net.opentsdb.core.RateSpan:void seek(long)"
        ]
    },
    "net.opentsdb.core.Downsampler$ValuesInInterval:void seekInterval(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Downsampler:void seek(long)"
        ]
    },
    "net.opentsdb.core.RateSpan:void seek(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void seek(long)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void seekInterval(long)",
            "net.opentsdb.core.RateSpan:void seek(long)"
        ]
    },
    "net.opentsdb.core.DataPointsIterator:long timestamp()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void putDataPoint(int,net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void initializeIfNotDone()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void resetEndOfInterval()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:boolean hasNextValue()",
            "net.opentsdb.core.MutableDataPoint:void reset(net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.MutableDataPoint:net.opentsdb.core.MutableDataPoint fromPoint(net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.SpanGroup:long timestamp(int)",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestCurrent$MaxLatestAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.HighestCurrent$MaxLatestAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax$MaxCacheAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.HighestMax$MaxCacheAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints$SeekableViewImpl:void seek(long)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:long timestamp(int)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:long nextTimestamp()",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.DataPointsIterator:boolean isInteger()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void putDataPoint(int,net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.DataPointsIterator:double toDouble()",
            "net.opentsdb.core.DataPointsIterator:java.lang.String toString()",
            "net.opentsdb.core.MutableDataPoint:void reset(net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.MutableDataPoint:net.opentsdb.core.MutableDataPoint fromPoint(net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.SpanGroup:boolean isInteger(int)",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:boolean isInteger(int)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.DataPointsIterator:double doubleValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void putDataPoint(int,net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.DataPointsIterator:double toDouble()",
            "net.opentsdb.core.DataPointsIterator:java.lang.String toString()",
            "net.opentsdb.core.MutableDataPoint:void reset(net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.MutableDataPoint:net.opentsdb.core.MutableDataPoint fromPoint(net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.SpanGroup:double doubleValue(int)",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:double doubleValue(int)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.DataPointsIterator:long longValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void putDataPoint(int,net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.DataPointsIterator:double toDouble()",
            "net.opentsdb.core.DataPointsIterator:java.lang.String toString()",
            "net.opentsdb.core.MutableDataPoint:void reset(net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.MutableDataPoint:net.opentsdb.core.MutableDataPoint fromPoint(net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.SpanGroup:long longValue(int)",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:long longValue(int)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.AggregationIterator:long longValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void putDataPoint(int,net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.AggregationIterator:double toDouble()",
            "net.opentsdb.core.MutableDataPoint:void reset(net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.MutableDataPoint:net.opentsdb.core.MutableDataPoint fromPoint(net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.SpanGroup:long longValue(int)",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:long longValue(int)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.AggregationIterator:double doubleValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void putDataPoint(int,net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.AggregationIterator:double toDouble()",
            "net.opentsdb.core.MutableDataPoint:void reset(net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.MutableDataPoint:net.opentsdb.core.MutableDataPoint fromPoint(net.opentsdb.core.DataPoint)",
            "net.opentsdb.core.SpanGroup:double doubleValue(int)",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:double doubleValue(int)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void moveToNext(int)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()",
            "net.opentsdb.core.Downsampler:java.lang.Object next()",
            "net.opentsdb.core.RateSpan:void populateNextRate()",
            "net.opentsdb.core.SpanGroup:int size()",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()"
        ]
    },
    "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue buildCompactedColumn(net.opentsdb.core.ByteBufferList,net.opentsdb.core.ByteBufferList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue$Compaction:com.stumbleupon.async.Deferred compact()"
        ]
    },
    "net.opentsdb.core.CompactionQueue$Compaction:com.stumbleupon.async.Deferred compact()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred compact(java.util.ArrayList,org.hbase.async.KeyValue[],java.util.List)"
        ]
    },
    "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue$Thrd:void run()",
            "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred flush()",
            "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred shutdown()"
        ]
    },
    "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred access$100(net.opentsdb.core.CompactionQueue,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue$1FlushMoreCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.core.CompactionQueue$Thrd:void run()"
        ]
    },
    "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.BatchedDataPoints:void setSeries(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.BatchedDataPoints:void <init>(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.tools.TextImporter:net.opentsdb.core.WritableDataPoints getDataPoints(net.opentsdb.core.TSDB,java.lang.String,java.util.HashMap)"
        ]
    },
    "net.opentsdb.core.IncomingDataPoints:void setSeries(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TextImporter:net.opentsdb.core.WritableDataPoints getDataPoints(net.opentsdb.core.TSDB,java.lang.String,java.util.HashMap)"
        ]
    },
    "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred addPointInternal(java.lang.String,long,byte[],java.util.Map,short)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred addPoint(java.lang.String,long,long,java.util.Map)",
            "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred addPoint(java.lang.String,long,double,java.util.Map)",
            "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred addPoint(java.lang.String,long,float,java.util.Map)"
        ]
    },
    "net.opentsdb.core.Internal$GetLastDataPointCB:net.opentsdb.core.IncomingDataPoint call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Internal$GetLastDataPointCB:java.lang.Object call(java.lang.Object)",
            "net.opentsdb.meta.TSUIDQuery$LastPointCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.Internal:net.opentsdb.core.Internal$Cell parseSingleValue(org.hbase.async.KeyValue)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)"
        ]
    },
    "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(org.hbase.async.KeyValue)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)"
        ]
    },
    "net.opentsdb.meta.Annotation$2ScannerCB:void <init>(net.opentsdb.core.TSDB,byte[],byte[],byte[],java.util.List,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred deleteRange(net.opentsdb.core.TSDB,byte[],long,long)"
        ]
    },
    "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.SaltScanner:void handleException(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner:void access$400(net.opentsdb.core.SaltScanner,java.lang.Exception)"
        ]
    },
    "net.opentsdb.core.SaltScanner:void access$1400(net.opentsdb.core.SaltScanner,java.util.List,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner$ScannerCB:void close(boolean)"
        ]
    },
    "net.opentsdb.core.Span:long timestamp(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:void seek(long)",
            "net.opentsdb.core.DataPointsIterator:long timestamp()",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)"
        ]
    },
    "net.opentsdb.core.Span:boolean isInteger(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:boolean isInteger()"
        ]
    },
    "net.opentsdb.core.Span:long longValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:long longValue()"
        ]
    },
    "net.opentsdb.core.Span:double doubleValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:double doubleValue()"
        ]
    },
    "net.opentsdb.core.SpanGroup$1ResolveCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,long,net.opentsdb.core.Aggregator,int,net.opentsdb.core.FillPolicy)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,long,net.opentsdb.core.Aggregator)"
        ]
    },
    "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred getTagsAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:java.util.Map getTags()",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred metricNameAsync()",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred getTagsAsync()",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.SpanGroup:org.hbase.async.Bytes$ByteMap getTagUids()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:org.hbase.async.Bytes$ByteMap getTagUids()"
        ]
    },
    "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred getAggregatedTagsAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:java.util.List getAggregatedTags()",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.SpanGroup:java.util.List getAggregatedTagUids()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.List getAggregatedTagUids()"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.List getTSUIDs()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.List getTSUIDs()",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.tsd.GraphHandler:void doGraph(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.core.Tags$1NameCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.Tags$2NameCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getTagsAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.EDPtoDPS:java.util.Map getTags()",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred metricNameAsync()",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred getTagsAsync()",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.Tags:java.util.ArrayList resolveAll(net.opentsdb.core.TSDB,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery:void setQuery(java.lang.String,java.util.Map)"
        ]
    },
    "net.opentsdb.core.Tags:java.util.ArrayList resolveOrCreateAll(net.opentsdb.core.TSDB,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)"
        ]
    },
    "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllAsync(net.opentsdb.core.TSDB,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.meta.TSUIDQuery$3MetricCB:com.stumbleupon.async.Deferred call(byte[])"
        ]
    },
    "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveOrCreateAllAsync(net.opentsdb.core.TSDB,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveOrCreateAllAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.IncomingDataPoints:com.stumbleupon.async.Deferred rowKeyTemplateAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)"
        ]
    },
    "net.opentsdb.core.Tags:java.util.HashMap resolveIds(net.opentsdb.core.TSDB,java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.Fsck$FsckWorker:boolean fsckKey(byte[])"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$2MetricCB:com.stumbleupon.async.Deferred call(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery$2MetricCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TsdbQuery$1MetricCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.CliQuery:void parseCommandLineQuery(java.lang.String[],net.opentsdb.core.TSDB,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.Fsck:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TSQuery:com.stumbleupon.async.Deferred buildQueriesAsync(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSQuery:net.opentsdb.core.Query[] buildQueries(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.QueryExecutor:void execute(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc$1GlobalCB:java.lang.Object call(java.util.List)",
            "net.opentsdb.tsd.QueryRpc:void handleQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,boolean)"
        ]
    },
    "net.opentsdb.core.TsdbQuery:void access$000(net.opentsdb.core.TsdbQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery$1FilterCB:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred runAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery:net.opentsdb.core.DataPoints[] run()",
            "net.opentsdb.tsd.QueryExecutor$1BuildCB:com.stumbleupon.async.Deferred call(net.opentsdb.core.Query[])",
            "net.opentsdb.tsd.QueryRpc$1BuildCB:com.stumbleupon.async.Deferred call(net.opentsdb.core.Query[])"
        ]
    },
    "net.opentsdb.tsd.QueryRpc:void handleQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.stats.QueryStats:void <init>(java.lang.String,net.opentsdb.core.TSQuery,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryExecutor:void execute(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc:void handleQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,boolean)"
        ]
    },
    "net.opentsdb.tools.CliQuery:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.GraphHandler:int runGnuplot(net.opentsdb.tsd.HttpQuery,java.lang.String,net.opentsdb.graph.Plot)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler$RunGnuplot:void execute()"
        ]
    },
    "net.opentsdb.meta.Annotation$1ScannerCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.Annotation$2ScannerCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.AnnotationRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.meta.Annotation:byte[] access$000(net.opentsdb.meta.Annotation)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.Annotation$1StoreCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.Annotation)"
        ]
    },
    "net.opentsdb.meta.TSMeta$1GetCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSMeta$1CreateNewCB$1StoreNewCB:com.stumbleupon.async.Deferred call(java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$1CreateNewCB$1StoreNewCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSMeta$1TSMetaCB$1StoreNewCB:com.stumbleupon.async.Deferred call(java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$1TSMetaCB$1StoreNewCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSMeta$LoadUIDs:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.MetaSync$1TSMetaCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.MetaSync$1TSMetaCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.UniqueIdRpc:void handleTSMeta(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.UniqueIdRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred storeNew(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$1CreateNewCB:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.meta.TSMeta$1TSMetaCB:com.stumbleupon.async.Deferred call(java.lang.Long)",
            "net.opentsdb.tools.MetaSync$1TSMetaCB$1CounterCB:com.stumbleupon.async.Deferred call(java.lang.Boolean)",
            "net.opentsdb.tools.MetaSync$1TSMetaCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleTSMeta(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.meta.TSMeta:byte[] access$000(net.opentsdb.meta.TSMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$1ValidateCB$StoreCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSUIDQuery$1TagsCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner access$600(net.opentsdb.meta.TSUIDQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tools.MetaSync$1UidCB$UidNameCB:com.stumbleupon.async.Deferred call(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.MetaSync$1UidCB$UidNameCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tools.MetaSync$1UidCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.UIDMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.MetaSync$1UidCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.UniqueIdRpc:void handleUIDMeta(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.UniqueIdRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred storeNew(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.uid.UniqueId$UniqueIdAllocator:com.stumbleupon.async.Deferred done(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.UIDMeta:byte[] access$800(net.opentsdb.meta.UIDMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.UIDMeta$1NameCB$StoreUIDMeta:com.stumbleupon.async.Deferred call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_scan_token(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_4()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_7()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_8()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_1()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_6()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_5()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_5()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_4()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:net.opentsdb.query.expression.parser.ParseException generateParseException()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:net.opentsdb.query.expression.parser.Token jj_consume_token(int)"
        ]
    },
    "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.expression.EDPtoDPS:java.lang.String metricName()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred metricNameAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.PostAggregatedDataPoints:java.lang.String metricName()",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred metricNameAsync()",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver:com.stumbleupon.async.Deferred call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:byte[] metricUID()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:byte[] metricUID()"
        ]
    },
    "net.opentsdb.query.expression.EDPtoDPS:java.util.List getAggregatedTags()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.List getAggregatedTags()",
            "net.opentsdb.tsd.GraphHandler:void doGraph(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred getAggregatedTagsAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ITimeSyncedIterator getCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor$SerializeExpressionIterator:com.stumbleupon.async.Deferred call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryExecutor$SerializeExpressionIterator:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionIterator:void <init>(java.lang.String,java.lang.String,net.opentsdb.query.expression.VariableIterator$SetOperator,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionTree:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()"
        ]
    },
    "net.opentsdb.query.expression.IntersectionIterator:net.opentsdb.query.expression.ITimeSyncedIterator getCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.tsd.QueryExecutor$SerializeExpressionIterator:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionIterator:long nextTimestamp()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.tsd.QueryExecutor$SerializeExpressionIterator:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionIterator:boolean hasNext(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.EDPtoDPS$Iterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.expression.UnionIterator:net.opentsdb.query.expression.ITimeSyncedIterator getCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)"
        ]
    },
    "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TSDB:void initializePlugins(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TSDMain:void main(java.lang.String[])",
            "net.opentsdb.tools.UidManager:int runCommand(net.opentsdb.core.TSDB,byte[],short,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.core.Tags:java.lang.String parseWithMetricAndFilters(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:void parseMTypeSubQuery(java.lang.String,net.opentsdb.core.TSQuery)"
        ]
    },
    "net.opentsdb.query.filter.TagVFilter:void tagsToFilters(java.util.Map,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Tags:java.lang.String parseWithMetricAndFilters(java.lang.String,java.util.List)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TSSubQuery:void setTags(java.util.Map)"
        ]
    },
    "net.opentsdb.tsd.RpcManager$ShowConfig:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.query.filter.TagVLiteralOrFilter:com.stumbleupon.async.Deferred resolveTagkName(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)"
        ]
    },
    "net.opentsdb.query.pojo.Validatable:void validatePOJO(net.opentsdb.query.pojo.Validatable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.pojo.Query:void validate()"
        ]
    },
    "net.opentsdb.tsd.QueryRpc:void handleExpressionQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.QueryUtil:void setDataTableScanFilter(org.hbase.async.Scanner,java.util.List,org.hbase.async.Bytes$ByteMap,boolean,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery:void createAndSetFilter(org.hbase.async.Scanner)"
        ]
    },
    "net.opentsdb.core.TsdbQuery:void createAndSetTSUIDFilter(org.hbase.async.Scanner)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery:org.hbase.async.Scanner getScanner(int)"
        ]
    },
    "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.search.TimeSeriesLookup$1MetricCB:com.stumbleupon.async.Deferred call(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.search.TimeSeriesLookup$1MetricCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.search.TimeSeriesLookup$1TagResolution:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.search.TimeSeriesLookup:com.stumbleupon.async.Deferred resolveUIDs()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.search.TimeSeriesLookup:com.stumbleupon.async.Deferred lookupAsync()"
        ]
    },
    "net.opentsdb.tsd.StatsRpc:void printQueryStats(net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.StatsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.stats.QueryStats:void markSerialized(org.jboss.netty.handler.codec.http.HttpResponseStatus,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.stats.QueryStats:void markSerializationSuccessful()",
            "net.opentsdb.tsd.QueryRpc$1ErrorCB:java.lang.Object call(java.lang.Exception)"
        ]
    },
    "net.opentsdb.stats.QueryStats:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.stats.QueryStats:void markSent()",
            "net.opentsdb.stats.QueryStats:void markSendFailed()"
        ]
    },
    "net.opentsdb.stats.QueryStats:java.util.Map getStats()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.HttpJsonSerializer$1FinalCB:org.jboss.netty.buffer.ChannelBuffer call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.HttpJsonSerializer$1FinalCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tools.TextImporter$1:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TextImporter:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tsd.StatsRpc$ASCIICollector:void <init>(net.opentsdb.tsd.StatsRpc,java.lang.String,java.lang.StringBuilder,java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.StatsRpc:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.StatsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.StatsRpc$SerializerCollector:void <init>(net.opentsdb.tsd.StatsRpc,java.lang.String,java.util.List,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.StatsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.core.CompactionQueue:void collectStats(net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void collectStats(net.opentsdb.stats.StatsCollector)"
        ]
    },
    "net.opentsdb.core.TSDB:void collectStats(net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TextImporter:void main(java.lang.String[])",
            "net.opentsdb.tsd.StatsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void doCollectStats(net.opentsdb.core.TSDB,net.opentsdb.stats.StatsCollector,boolean)"
        ]
    },
    "net.opentsdb.core.TSDB:void collectUidStats(net.opentsdb.uid.UniqueId,net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void collectStats(net.opentsdb.stats.StatsCollector)"
        ]
    },
    "net.opentsdb.stats.QueryStats:void collectStats(net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)"
        ]
    },
    "net.opentsdb.stats.StatsCollector:void record(java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.QueryRpc:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.RpcHandler:void collectStats(net.opentsdb.stats.StatsCollector)"
        ]
    },
    "net.opentsdb.stats.StatsCollector:void record(java.lang.String,java.lang.Number,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.core.TSDB:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.ConnectionManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.GraphHandler:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.PutDataPointRpc:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.RpcHandler:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)"
        ]
    },
    "net.opentsdb.stats.StatsCollector:void record(java.lang.String,net.opentsdb.stats.Histogram,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.GraphHandler:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.HttpQuery:void collectStats(net.opentsdb.stats.StatsCollector)"
        ]
    },
    "net.opentsdb.tsd.ConnectionManager:void collectStats(net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.StatsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void doCollectStats(net.opentsdb.core.TSDB,net.opentsdb.stats.StatsCollector,boolean)"
        ]
    },
    "net.opentsdb.uid.UniqueIdWhitelistFilter:void collectStats(net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void collectStats(net.opentsdb.stats.StatsCollector)"
        ]
    },
    "net.opentsdb.tools.ArgP:java.lang.String usage()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliQuery:void usage(net.opentsdb.tools.ArgP,java.lang.String,int)",
            "net.opentsdb.tools.DumpSeries:void usage(net.opentsdb.tools.ArgP,java.lang.String,int)",
            "net.opentsdb.tools.Fsck:void usage(net.opentsdb.tools.ArgP,java.lang.String,int)",
            "net.opentsdb.tools.Search:void usage(net.opentsdb.tools.ArgP,java.lang.String)",
            "net.opentsdb.tools.TextImporter:void usage(net.opentsdb.tools.ArgP,int)",
            "net.opentsdb.tools.TSDMain:void usage(net.opentsdb.tools.ArgP,java.lang.String,int)",
            "net.opentsdb.tools.UidManager:void usage(net.opentsdb.tools.ArgP,java.lang.String)"
        ]
    },
    "net.opentsdb.tools.CliOptions:net.opentsdb.utils.Config getConfig(net.opentsdb.tools.ArgP)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliQuery:void main(java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void main(java.lang.String[])",
            "net.opentsdb.tools.Fsck:void main(java.lang.String[])",
            "net.opentsdb.tools.Search:void main(java.lang.String[])",
            "net.opentsdb.tools.TextImporter:void main(java.lang.String[])",
            "net.opentsdb.tools.TSDMain:void main(java.lang.String[])",
            "net.opentsdb.tools.UidManager:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.CliOptions:java.lang.String[] parse(net.opentsdb.tools.ArgP,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliQuery:void main(java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void main(java.lang.String[])",
            "net.opentsdb.tools.Fsck:void main(java.lang.String[])",
            "net.opentsdb.tools.Search:void main(java.lang.String[])",
            "net.opentsdb.tools.TextImporter:void main(java.lang.String[])",
            "net.opentsdb.tools.TSDMain:void main(java.lang.String[])",
            "net.opentsdb.tools.UidManager:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.DumpSeries:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,org.hbase.async.KeyValue,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.UidManager:int metaPurge(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int runCommand(net.opentsdb.core.TSDB,byte[],short,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.UidManager:int treeSync(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int runCommand(net.opentsdb.core.TSDB,byte[],short,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.Fsck:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.MetaPurge$1MetaScanner:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.MetaPurge$2MetaScanner:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.TreeSync$1TsuidScanner:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.UidManager:int runCommand(net.opentsdb.core.TSDB,byte[],short,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.UidManager:int findAndPrintRow(org.hbase.async.HBaseClient,byte[],byte[],byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int lookupId(org.hbase.async.HBaseClient,byte[],short,long,java.lang.String)",
            "net.opentsdb.tools.UidManager:int lookupName(org.hbase.async.HBaseClient,byte[],short,java.lang.String,java.lang.String)"
        ]
    },
    "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.Branch:java.lang.String getBranchId()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Branch:java.lang.String toString()",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Branch)"
        ]
    },
    "net.opentsdb.tree.Branch:java.util.Map getPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1ProcessCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Branch)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder$1ProcessCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Branch)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1LoadRootCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Branch)",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB:java.lang.Object call(java.lang.Object)",
            "net.opentsdb.tree.TreeBuilder:com.stumbleupon.async.Deferred processTimeseriesMeta(net.opentsdb.meta.TSMeta,boolean)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder$1RootCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Branch)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1RootCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.Leaf$1CollateUIDsCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.Tree$1CreateNewCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.Tree$1DeleteTreeScanner:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.Tree$1FetchTreeCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.Tree$1GetCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.Tree$2GetCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.Tree$1StoreTreeCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Tree)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.Tree$1StoreTreeCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.TreeRpc:void handleTree(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.TreeRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.TreeRpc:void handleCollisionNotMatched(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.TreeRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.TreeBuilder:com.stumbleupon.async.Deferred processAllTrees(net.opentsdb.core.TSDB,net.opentsdb.meta.TSMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred processTSMetaThroughTrees(net.opentsdb.meta.TSMeta)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder:boolean access$000(net.opentsdb.tree.TreeBuilder,net.opentsdb.tree.Branch,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1ProcessCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Branch)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder:void <init>(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder:void setTree(net.opentsdb.tree.Tree)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.TreeRule$1GetCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.TreeRule$1StoreCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.TreeRule)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeRule$1StoreCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.TreeRpc:void handleRule(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.TreeRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor:void execute(net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:void handleExpressionQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.AbstractHttpQuery:java.lang.String getContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.HttpJsonSerializer:java.util.List parsePutV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:java.util.HashMap parseSuggestV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:java.util.HashMap parseUidAssignV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:java.util.HashMap parseUidRenameV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.core.TSQuery parseQueryV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQueryV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.meta.UIDMeta parseUidMetaV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.meta.TSMeta parseTSMetaV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.TreeRule parseTreeRuleV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:java.util.List parseTreeRulesV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:java.util.Map parseTreeTSUIDsListV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.meta.Annotation parseAnnotationV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:java.util.List parseAnnotationsV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tsd.AnnotationRpc$AnnotationBulkDelete parseAnnotationBulkDeleteV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.search.SearchQuery parseSearchQueryV1()",
            "net.opentsdb.tsd.QueryRpc:void handleExpressionQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleTree(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpQuery:void redirect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpSerializer:org.jboss.netty.buffer.ChannelBuffer formatNotFoundV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.HttpQuery:void notFound()",
            "net.opentsdb.tsd.HttpQuery:void sendFile(org.jboss.netty.handler.codec.http.HttpResponseStatus,java.lang.String,int)"
        ]
    },
    "net.opentsdb.tsd.HttpSerializer:org.jboss.netty.buffer.ChannelBuffer formatErrorV1(net.opentsdb.tsd.BadRequestException)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.HttpQuery:void badRequest(net.opentsdb.tsd.BadRequestException)",
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.SearchRpc$1ErrCB:java.lang.Object call(java.lang.Exception)"
        ]
    },
    "net.opentsdb.tsd.HttpSerializer:org.jboss.netty.buffer.ChannelBuffer formatErrorV1(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.HttpQuery:void internalError(java.lang.Exception)"
        ]
    },
    "net.opentsdb.tsd.AnnotationRpc:void executeBulk(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.AnnotationRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatQueryV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.PipelineFactory:void <init>(net.opentsdb.core.TSDB,net.opentsdb.tsd.RpcManager,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TSDMain:void main(java.lang.String[])",
            "net.opentsdb.tsd.PipelineFactory:void <init>(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.PipelineFactory:void <init>(net.opentsdb.core.TSDB,net.opentsdb.tsd.RpcManager)"
        ]
    },
    "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.QueryExecutor$MetaSerializer:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred access$600(net.opentsdb.tsd.QueryExecutor)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.tsd.QueryRpc$1FetchCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.QueryRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler:void doGraph(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.RpcHandler:void handleTelnetRpc(org.jboss.netty.channel.Channel,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "net.opentsdb.tools.TSDMain$1TSDBShutdown:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int metaPurge(net.opentsdb.core.TSDB)",
            "net.opentsdb.tools.UidManager:int treeSync(net.opentsdb.core.TSDB)"
        ]
    },
    "net.opentsdb.tsd.StatsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.tsd.StatsRpc:void doCollectStats(net.opentsdb.core.TSDB,net.opentsdb.stats.StatsCollector,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.StatsRpc:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.StatsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.SearchRpc$1LookupCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.TreeRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.tsd.UniqueIdRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.uid.UniqueId$2GetCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TSDB:void <init>(org.hbase.async.HBaseClient,net.opentsdb.utils.Config)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void <init>(net.opentsdb.utils.Config)"
        ]
    },
    "net.opentsdb.uid.UniqueId$1HandleNoSuchUniqueNameCB:java.lang.Object call(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.uid.UniqueId$1HandleNoSuchUniqueNameCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.uid.UniqueId:byte[] getOrCreateId(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)",
            "net.opentsdb.core.TSDB:byte[] assignUid(java.lang.String,java.lang.String)",
            "net.opentsdb.tools.UidManager:int assign(net.opentsdb.core.TSDB,byte[],short,java.lang.String[])"
        ]
    },
    "net.opentsdb.utils.Config:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliOptions:net.opentsdb.utils.Config getConfig(net.opentsdb.tools.ArgP)"
        ]
    },
    "net.opentsdb.utils.Config:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliOptions:net.opentsdb.utils.Config getConfig(net.opentsdb.tools.ArgP)"
        ]
    },
    "net.opentsdb.utils.Config:void <init>(net.opentsdb.utils.Config)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.TSDMain:net.opentsdb.tools.StartupPlugin loadStartupPlugins(net.opentsdb.utils.Config)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TSDMain:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tsd.RpcManager:java.lang.Object createAndInitialize(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcManager:void initializeHttpRpcPlugins(java.lang.String,java.lang.String[],com.google.common.collect.ImmutableMap$Builder)",
            "net.opentsdb.tsd.RpcManager:void initializeRpcPlugins(java.lang.String[],com.google.common.collect.ImmutableList$Builder)"
        ]
    },
    "net.opentsdb.core.TSDB:void loadPluginPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void initializePlugins(boolean)",
            "net.opentsdb.tools.TSDMain:net.opentsdb.tools.StartupPlugin loadStartupPlugins(net.opentsdb.utils.Config)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor$SerializeSubIterator:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ITimeSyncedIterator getCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)"
        ]
    },
    "net.opentsdb.core.SpanGroup:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.Downsampler:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void moveToNext(int)",
            "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.AppendDataPoints:java.util.Collection parseKeyValue(net.opentsdb.core.TSDB,org.hbase.async.KeyValue)",
            "net.opentsdb.core.ByteBufferList:byte[] toBytes(int)",
            "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue findFirstDatapointColumn()",
            "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()",
            "net.opentsdb.core.CompactionQueue$Compaction:boolean updateDeletesCheckForWrite(org.hbase.async.KeyValue)",
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush(long,int)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void initializeIfNotDone()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.IncomingDataPoint:java.lang.String toString()",
            "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.core.IncomingDataPoints:void checkMetricAndTags(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(java.util.ArrayList,int)",
            "net.opentsdb.core.Internal:void createAndSetTSUIDFilter(org.hbase.async.Scanner,java.util.List)",
            "net.opentsdb.core.RateSpan:void populateNextRate()",
            "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner:com.stumbleupon.async.Deferred scan()",
            "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()",
            "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)",
            "net.opentsdb.core.Span:int size()",
            "net.opentsdb.core.Span:void addRow(org.hbase.async.KeyValue)",
            "net.opentsdb.core.Span:long getIdxOffsetFor(int)",
            "net.opentsdb.core.SpanGroup$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)",
            "net.opentsdb.core.SpanGroup:void computeTags()",
            "net.opentsdb.core.SpanGroup:java.util.List getTSUIDs()",
            "net.opentsdb.core.SpanGroup:int size()",
            "net.opentsdb.core.SpanGroup:int aggregatedSize()",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveAggTags(java.util.Set)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveTags(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags$1NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags$2NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred getTagsAsync(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllInternalAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveIdsAsync(net.opentsdb.core.TSDB,java.util.List)",
            "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred configureFromQuery(net.opentsdb.core.TSQuery,int)",
            "net.opentsdb.core.TsdbQuery:void findGroupBys()",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()",
            "net.opentsdb.core.TsdbQuery:java.lang.String toString()",
            "net.opentsdb.core.TSQuery:void validateAndSetQuery()",
            "net.opentsdb.core.TSQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.util.Map getTags()",
            "net.opentsdb.core.TSSubQuery:net.opentsdb.utils.ByteSet getFilterTagKs()",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.meta.Annotation$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation$2ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,java.lang.Boolean)",
            "net.opentsdb.meta.Annotation:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSMeta$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.TSMeta$LoadUIDs:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.TSMeta:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$1TagsCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner getScanner()",
            "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.UIDMeta:byte[] getStorageJSON()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_add_error_token(int,int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.ExpressionIterator:void compile()",
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.ExpressionIterator:void extractVariableNames()",
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String clean(java.util.Collection)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()",
            "net.opentsdb.query.expression.IntersectionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.IntersectionIterator:byte[] flattenTags(boolean,boolean,org.hbase.async.Bytes$ByteMap,net.opentsdb.utils.ByteSet,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()",
            "net.opentsdb.query.expression.UnionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.UnionIterator:byte[] flattenTags(boolean,boolean,net.opentsdb.query.expression.ExpressionDataPoint,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)",
            "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)",
            "net.opentsdb.query.filter.TagVFilter:void mapToFilters(java.util.Map,java.util.List,boolean)",
            "net.opentsdb.query.filter.TagVFilter:java.util.Map loadedFilters()",
            "net.opentsdb.query.filter.TagVFilter:com.stumbleupon.async.Deferred resolveTags(net.opentsdb.core.TSDB,java.util.Set)",
            "net.opentsdb.query.pojo.Expression:void validate()",
            "net.opentsdb.query.pojo.Query:void validate()",
            "net.opentsdb.query.pojo.Query:void validateFilters()",
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap,boolean,byte[],byte[])",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyTSUIDRegex(java.util.List)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.search.TimeSeriesLookup$1TagResolution:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.stats.QueryStats:java.util.Map getRunningAndCompleteStats()",
            "net.opentsdb.stats.QueryStats:void aggQueryStats()",
            "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)",
            "net.opentsdb.stats.QueryStats:java.util.Map getQueryStats(int,boolean)",
            "net.opentsdb.stats.StatsCollector:void <init>(java.lang.String)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long,java.lang.String)",
            "net.opentsdb.tools.ArgP:void addUsageTo(java.lang.StringBuilder)",
            "net.opentsdb.tools.ArgP:java.lang.String toString()",
            "net.opentsdb.tools.CliOptions:void overloadConfig(net.opentsdb.tools.ArgP,net.opentsdb.utils.Config)",
            "net.opentsdb.tools.CliOptions:void honorVerboseFlag(net.opentsdb.tools.ArgP)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tools.CliQuery:java.util.HashMap parsePlotParams(java.util.ArrayList)",
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void run()",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckDataPoints(java.util.Map)",
            "net.opentsdb.tools.Fsck:void runFullTable()",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)",
            "net.opentsdb.tools.MetaPurge$1MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaPurge$2MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync:void run()",
            "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])",
            "net.opentsdb.tools.UidManager:boolean printResult(java.util.ArrayList,byte[],boolean)",
            "net.opentsdb.tools.UidManager:int fsck(org.hbase.async.HBaseClient,byte[],boolean,boolean)",
            "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Branch:byte[] compileBranchId()",
            "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Leaf$1CollateUIDsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Leaf:com.stumbleupon.async.Deferred parseFromStorage(net.opentsdb.core.TSDB,org.hbase.async.KeyValue,boolean)",
            "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.Tree$1DeleteTreeScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1FetchTreeCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$2GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree:void <init>(net.opentsdb.tree.Tree)",
            "net.opentsdb.tree.Tree:boolean copyChanges(net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred storeTree(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchCollisions(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchNotMatched(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushCollisions(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushNotMatched(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.util.List call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)",
            "net.opentsdb.tree.TreeBuilder:void parseTagkRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagkCustomRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagvRule()",
            "net.opentsdb.tree.TreeBuilder:void calculateMaxLevel()",
            "net.opentsdb.tree.TreeRule$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeRule:boolean copyChanges(net.opentsdb.tree.TreeRule,boolean)",
            "net.opentsdb.tree.TreeRule:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getPrintableHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.nio.charset.Charset getCharset()",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatConfigV1(net.opentsdb.utils.Config)",
            "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.LogsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()",
            "net.opentsdb.tsd.QueryRpc$1FetchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:com.stumbleupon.async.Deferred call(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.RpcManager$Help:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.RpcManager:com.stumbleupon.async.Deferred shutdown()",
            "net.opentsdb.tsd.RpcManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.StatsRpc:void printRegionClientStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printThreadStats(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printJVMStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:java.lang.String getTSUIDForMetric(java.lang.String,net.opentsdb.core.TSDB)",
            "net.opentsdb.uid.UniqueId$2GetCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId:void preloadUidCache(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.uid.UniqueIdWhitelistFilter:com.stumbleupon.async.Deferred allowUIDAssignment(net.opentsdb.uid.UniqueId$UniqueIdType,java.lang.String,java.lang.String,java.util.Map)",
            "net.opentsdb.utils.ByteSet:java.lang.String toString()",
            "net.opentsdb.utils.Config:java.lang.String dumpConfiguration()",
            "net.opentsdb.utils.Config:void setDefaults()",
            "net.opentsdb.utils.Config:void loadConfig()",
            "net.opentsdb.utils.PluginLoader:java.lang.Object loadSpecificPlugin(java.lang.String,java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:java.util.List loadPlugins(java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:void loadJARs(java.lang.String)"
        ]
    },
    "net.opentsdb.core.FillingDownsampler:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void moveToNext(int)",
            "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.AppendDataPoints:java.util.Collection parseKeyValue(net.opentsdb.core.TSDB,org.hbase.async.KeyValue)",
            "net.opentsdb.core.ByteBufferList:byte[] toBytes(int)",
            "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue findFirstDatapointColumn()",
            "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()",
            "net.opentsdb.core.CompactionQueue$Compaction:boolean updateDeletesCheckForWrite(org.hbase.async.KeyValue)",
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush(long,int)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void initializeIfNotDone()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()",
            "net.opentsdb.core.Downsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.FillingDownsampler:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.IncomingDataPoint:java.lang.String toString()",
            "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.core.IncomingDataPoints:void checkMetricAndTags(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(java.util.ArrayList,int)",
            "net.opentsdb.core.Internal:void createAndSetTSUIDFilter(org.hbase.async.Scanner,java.util.List)",
            "net.opentsdb.core.RateSpan:void populateNextRate()",
            "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner:com.stumbleupon.async.Deferred scan()",
            "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()",
            "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)",
            "net.opentsdb.core.Span:int size()",
            "net.opentsdb.core.Span:void addRow(org.hbase.async.KeyValue)",
            "net.opentsdb.core.Span:long getIdxOffsetFor(int)",
            "net.opentsdb.core.SpanGroup$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)",
            "net.opentsdb.core.SpanGroup:void computeTags()",
            "net.opentsdb.core.SpanGroup:java.util.List getTSUIDs()",
            "net.opentsdb.core.SpanGroup:int size()",
            "net.opentsdb.core.SpanGroup:int aggregatedSize()",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveAggTags(java.util.Set)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveTags(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags$1NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags$2NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred getTagsAsync(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllInternalAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveIdsAsync(net.opentsdb.core.TSDB,java.util.List)",
            "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred configureFromQuery(net.opentsdb.core.TSQuery,int)",
            "net.opentsdb.core.TsdbQuery:void findGroupBys()",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()",
            "net.opentsdb.core.TsdbQuery:java.lang.String toString()",
            "net.opentsdb.core.TSQuery:void validateAndSetQuery()",
            "net.opentsdb.core.TSQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.util.Map getTags()",
            "net.opentsdb.core.TSSubQuery:net.opentsdb.utils.ByteSet getFilterTagKs()",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.meta.Annotation$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation$2ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,java.lang.Boolean)",
            "net.opentsdb.meta.Annotation:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSMeta$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.TSMeta$LoadUIDs:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.TSMeta:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$1TagsCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner getScanner()",
            "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.UIDMeta:byte[] getStorageJSON()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_add_error_token(int,int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.ExpressionIterator:void compile()",
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.ExpressionIterator:void extractVariableNames()",
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String clean(java.util.Collection)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()",
            "net.opentsdb.query.expression.IntersectionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.IntersectionIterator:byte[] flattenTags(boolean,boolean,org.hbase.async.Bytes$ByteMap,net.opentsdb.utils.ByteSet,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()",
            "net.opentsdb.query.expression.UnionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.UnionIterator:byte[] flattenTags(boolean,boolean,net.opentsdb.query.expression.ExpressionDataPoint,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)",
            "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)",
            "net.opentsdb.query.filter.TagVFilter:void mapToFilters(java.util.Map,java.util.List,boolean)",
            "net.opentsdb.query.filter.TagVFilter:java.util.Map loadedFilters()",
            "net.opentsdb.query.filter.TagVFilter:com.stumbleupon.async.Deferred resolveTags(net.opentsdb.core.TSDB,java.util.Set)",
            "net.opentsdb.query.pojo.Expression:void validate()",
            "net.opentsdb.query.pojo.Query:void validate()",
            "net.opentsdb.query.pojo.Query:void validateFilters()",
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap,boolean,byte[],byte[])",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyTSUIDRegex(java.util.List)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.search.TimeSeriesLookup$1TagResolution:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.stats.QueryStats:java.util.Map getRunningAndCompleteStats()",
            "net.opentsdb.stats.QueryStats:void aggQueryStats()",
            "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)",
            "net.opentsdb.stats.QueryStats:java.util.Map getQueryStats(int,boolean)",
            "net.opentsdb.stats.StatsCollector:void <init>(java.lang.String)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long,java.lang.String)",
            "net.opentsdb.tools.ArgP:void addUsageTo(java.lang.StringBuilder)",
            "net.opentsdb.tools.ArgP:java.lang.String toString()",
            "net.opentsdb.tools.CliOptions:void overloadConfig(net.opentsdb.tools.ArgP,net.opentsdb.utils.Config)",
            "net.opentsdb.tools.CliOptions:void honorVerboseFlag(net.opentsdb.tools.ArgP)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tools.CliQuery:java.util.HashMap parsePlotParams(java.util.ArrayList)",
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void run()",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckDataPoints(java.util.Map)",
            "net.opentsdb.tools.Fsck:void runFullTable()",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)",
            "net.opentsdb.tools.MetaPurge$1MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaPurge$2MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync:void run()",
            "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])",
            "net.opentsdb.tools.UidManager:boolean printResult(java.util.ArrayList,byte[],boolean)",
            "net.opentsdb.tools.UidManager:int fsck(org.hbase.async.HBaseClient,byte[],boolean,boolean)",
            "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Branch:byte[] compileBranchId()",
            "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Leaf$1CollateUIDsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Leaf:com.stumbleupon.async.Deferred parseFromStorage(net.opentsdb.core.TSDB,org.hbase.async.KeyValue,boolean)",
            "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.Tree$1DeleteTreeScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1FetchTreeCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$2GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree:void <init>(net.opentsdb.tree.Tree)",
            "net.opentsdb.tree.Tree:boolean copyChanges(net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred storeTree(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchCollisions(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchNotMatched(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushCollisions(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushNotMatched(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.util.List call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)",
            "net.opentsdb.tree.TreeBuilder:void parseTagkRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagkCustomRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagvRule()",
            "net.opentsdb.tree.TreeBuilder:void calculateMaxLevel()",
            "net.opentsdb.tree.TreeRule$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeRule:boolean copyChanges(net.opentsdb.tree.TreeRule,boolean)",
            "net.opentsdb.tree.TreeRule:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getPrintableHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.nio.charset.Charset getCharset()",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatConfigV1(net.opentsdb.utils.Config)",
            "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.LogsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()",
            "net.opentsdb.tsd.QueryRpc$1FetchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:com.stumbleupon.async.Deferred call(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.RpcManager$Help:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.RpcManager:com.stumbleupon.async.Deferred shutdown()",
            "net.opentsdb.tsd.RpcManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.StatsRpc:void printRegionClientStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printThreadStats(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printJVMStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:java.lang.String getTSUIDForMetric(java.lang.String,net.opentsdb.core.TSDB)",
            "net.opentsdb.uid.UniqueId$2GetCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId:void preloadUidCache(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.uid.UniqueIdWhitelistFilter:com.stumbleupon.async.Deferred allowUIDAssignment(net.opentsdb.uid.UniqueId$UniqueIdType,java.lang.String,java.lang.String,java.util.Map)",
            "net.opentsdb.utils.ByteSet:java.lang.String toString()",
            "net.opentsdb.utils.Config:java.lang.String dumpConfiguration()",
            "net.opentsdb.utils.Config:void setDefaults()",
            "net.opentsdb.utils.Config:void loadConfig()",
            "net.opentsdb.utils.PluginLoader:java.lang.Object loadSpecificPlugin(java.lang.String,java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:java.util.List loadPlugins(java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:void loadJARs(java.lang.String)"
        ]
    },
    "net.opentsdb.core.Downsampler:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.AppendDataPoints:java.util.Collection parseKeyValue(net.opentsdb.core.TSDB,org.hbase.async.KeyValue)",
            "net.opentsdb.core.ByteBufferList:byte[] toBytes(int)",
            "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue findFirstDatapointColumn()",
            "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()",
            "net.opentsdb.core.CompactionQueue$Compaction:boolean updateDeletesCheckForWrite(org.hbase.async.KeyValue)",
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush(long,int)",
            "net.opentsdb.core.IncomingDataPoint:java.lang.String toString()",
            "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.core.IncomingDataPoints:void checkMetricAndTags(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(java.util.ArrayList,int)",
            "net.opentsdb.core.Internal:void createAndSetTSUIDFilter(org.hbase.async.Scanner,java.util.List)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner:com.stumbleupon.async.Deferred scan()",
            "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()",
            "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)",
            "net.opentsdb.core.Span:int size()",
            "net.opentsdb.core.Span:void addRow(org.hbase.async.KeyValue)",
            "net.opentsdb.core.Span:long getIdxOffsetFor(int)",
            "net.opentsdb.core.SpanGroup$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)",
            "net.opentsdb.core.SpanGroup:void computeTags()",
            "net.opentsdb.core.SpanGroup:java.util.List getTSUIDs()",
            "net.opentsdb.core.SpanGroup:int aggregatedSize()",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveAggTags(java.util.Set)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveTags(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags$1NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags$2NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred getTagsAsync(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllInternalAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveIdsAsync(net.opentsdb.core.TSDB,java.util.List)",
            "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred configureFromQuery(net.opentsdb.core.TSQuery,int)",
            "net.opentsdb.core.TsdbQuery:void findGroupBys()",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()",
            "net.opentsdb.core.TsdbQuery:java.lang.String toString()",
            "net.opentsdb.core.TSQuery:void validateAndSetQuery()",
            "net.opentsdb.core.TSQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.util.Map getTags()",
            "net.opentsdb.core.TSSubQuery:net.opentsdb.utils.ByteSet getFilterTagKs()",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.meta.Annotation$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation$2ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,java.lang.Boolean)",
            "net.opentsdb.meta.Annotation:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSMeta$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.TSMeta$LoadUIDs:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.TSMeta:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$1TagsCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner getScanner()",
            "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.UIDMeta:byte[] getStorageJSON()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_add_error_token(int,int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred metricNameAsync()",
            "net.opentsdb.query.expression.EDPtoDPS:byte[] metricUID()",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.ExpressionIterator:void compile()",
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.ExpressionIterator:void extractVariableNames()",
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String clean(java.util.Collection)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()",
            "net.opentsdb.query.expression.IntersectionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.IntersectionIterator:byte[] flattenTags(boolean,boolean,org.hbase.async.Bytes$ByteMap,net.opentsdb.utils.ByteSet,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()",
            "net.opentsdb.query.expression.UnionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.UnionIterator:byte[] flattenTags(boolean,boolean,net.opentsdb.query.expression.ExpressionDataPoint,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)",
            "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)",
            "net.opentsdb.query.filter.TagVFilter:void mapToFilters(java.util.Map,java.util.List,boolean)",
            "net.opentsdb.query.filter.TagVFilter:java.util.Map loadedFilters()",
            "net.opentsdb.query.filter.TagVFilter:com.stumbleupon.async.Deferred resolveTags(net.opentsdb.core.TSDB,java.util.Set)",
            "net.opentsdb.query.pojo.Expression:void validate()",
            "net.opentsdb.query.pojo.Query:void validate()",
            "net.opentsdb.query.pojo.Query:void validateFilters()",
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap,boolean,byte[],byte[])",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyTSUIDRegex(java.util.List)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.search.TimeSeriesLookup$1TagResolution:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.stats.QueryStats:java.util.Map getRunningAndCompleteStats()",
            "net.opentsdb.stats.QueryStats:void aggQueryStats()",
            "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)",
            "net.opentsdb.stats.QueryStats:java.util.Map getQueryStats(int,boolean)",
            "net.opentsdb.stats.StatsCollector:void <init>(java.lang.String)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long,java.lang.String)",
            "net.opentsdb.tools.ArgP:void addUsageTo(java.lang.StringBuilder)",
            "net.opentsdb.tools.ArgP:java.lang.String toString()",
            "net.opentsdb.tools.CliOptions:void overloadConfig(net.opentsdb.tools.ArgP,net.opentsdb.utils.Config)",
            "net.opentsdb.tools.CliOptions:void honorVerboseFlag(net.opentsdb.tools.ArgP)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tools.CliQuery:java.util.HashMap parsePlotParams(java.util.ArrayList)",
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void run()",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckDataPoints(java.util.Map)",
            "net.opentsdb.tools.Fsck:void runFullTable()",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)",
            "net.opentsdb.tools.MetaPurge$1MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaPurge$2MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync:void run()",
            "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])",
            "net.opentsdb.tools.UidManager:boolean printResult(java.util.ArrayList,byte[],boolean)",
            "net.opentsdb.tools.UidManager:int fsck(org.hbase.async.HBaseClient,byte[],boolean,boolean)",
            "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Branch:byte[] compileBranchId()",
            "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Leaf$1CollateUIDsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Leaf:com.stumbleupon.async.Deferred parseFromStorage(net.opentsdb.core.TSDB,org.hbase.async.KeyValue,boolean)",
            "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.Tree$1DeleteTreeScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1FetchTreeCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$2GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree:void <init>(net.opentsdb.tree.Tree)",
            "net.opentsdb.tree.Tree:boolean copyChanges(net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred storeTree(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchCollisions(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchNotMatched(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushCollisions(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushNotMatched(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.util.List call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)",
            "net.opentsdb.tree.TreeBuilder:void parseTagkRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagkCustomRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagvRule()",
            "net.opentsdb.tree.TreeBuilder:void calculateMaxLevel()",
            "net.opentsdb.tree.TreeRule$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeRule:boolean copyChanges(net.opentsdb.tree.TreeRule,boolean)",
            "net.opentsdb.tree.TreeRule:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getPrintableHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.nio.charset.Charset getCharset()",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatConfigV1(net.opentsdb.utils.Config)",
            "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.LogsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()",
            "net.opentsdb.tsd.QueryRpc$1FetchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:com.stumbleupon.async.Deferred call(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.RpcManager$Help:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.RpcManager:com.stumbleupon.async.Deferred shutdown()",
            "net.opentsdb.tsd.RpcManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.StatsRpc:void printRegionClientStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printThreadStats(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printJVMStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:java.lang.String getTSUIDForMetric(java.lang.String,net.opentsdb.core.TSDB)",
            "net.opentsdb.uid.UniqueId$2GetCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId:void preloadUidCache(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.uid.UniqueIdWhitelistFilter:com.stumbleupon.async.Deferred allowUIDAssignment(net.opentsdb.uid.UniqueId$UniqueIdType,java.lang.String,java.lang.String,java.util.Map)",
            "net.opentsdb.utils.ByteSet:java.lang.String toString()",
            "net.opentsdb.utils.Config:java.lang.String dumpConfiguration()",
            "net.opentsdb.utils.Config:void setDefaults()",
            "net.opentsdb.utils.Config:void loadConfig()",
            "net.opentsdb.utils.PluginLoader:java.lang.Object loadSpecificPlugin(java.lang.String,java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:java.util.List loadPlugins(java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:void loadJARs(java.lang.String)"
        ]
    },
    "net.opentsdb.core.FillingDownsampler:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.AppendDataPoints:java.util.Collection parseKeyValue(net.opentsdb.core.TSDB,org.hbase.async.KeyValue)",
            "net.opentsdb.core.ByteBufferList:byte[] toBytes(int)",
            "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue findFirstDatapointColumn()",
            "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()",
            "net.opentsdb.core.CompactionQueue$Compaction:boolean updateDeletesCheckForWrite(org.hbase.async.KeyValue)",
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush(long,int)",
            "net.opentsdb.core.IncomingDataPoint:java.lang.String toString()",
            "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.core.IncomingDataPoints:void checkMetricAndTags(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(java.util.ArrayList,int)",
            "net.opentsdb.core.Internal:void createAndSetTSUIDFilter(org.hbase.async.Scanner,java.util.List)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner:com.stumbleupon.async.Deferred scan()",
            "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()",
            "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)",
            "net.opentsdb.core.Span:int size()",
            "net.opentsdb.core.Span:void addRow(org.hbase.async.KeyValue)",
            "net.opentsdb.core.Span:long getIdxOffsetFor(int)",
            "net.opentsdb.core.SpanGroup$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)",
            "net.opentsdb.core.SpanGroup:void computeTags()",
            "net.opentsdb.core.SpanGroup:java.util.List getTSUIDs()",
            "net.opentsdb.core.SpanGroup:int aggregatedSize()",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveAggTags(java.util.Set)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveTags(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags$1NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags$2NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred getTagsAsync(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllInternalAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveIdsAsync(net.opentsdb.core.TSDB,java.util.List)",
            "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred configureFromQuery(net.opentsdb.core.TSQuery,int)",
            "net.opentsdb.core.TsdbQuery:void findGroupBys()",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()",
            "net.opentsdb.core.TsdbQuery:java.lang.String toString()",
            "net.opentsdb.core.TSQuery:void validateAndSetQuery()",
            "net.opentsdb.core.TSQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.util.Map getTags()",
            "net.opentsdb.core.TSSubQuery:net.opentsdb.utils.ByteSet getFilterTagKs()",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.meta.Annotation$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation$2ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,java.lang.Boolean)",
            "net.opentsdb.meta.Annotation:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSMeta$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.TSMeta$LoadUIDs:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.TSMeta:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$1TagsCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner getScanner()",
            "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.UIDMeta:byte[] getStorageJSON()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_add_error_token(int,int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred metricNameAsync()",
            "net.opentsdb.query.expression.EDPtoDPS:byte[] metricUID()",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.ExpressionIterator:void compile()",
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.ExpressionIterator:void extractVariableNames()",
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String clean(java.util.Collection)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()",
            "net.opentsdb.query.expression.IntersectionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.IntersectionIterator:byte[] flattenTags(boolean,boolean,org.hbase.async.Bytes$ByteMap,net.opentsdb.utils.ByteSet,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()",
            "net.opentsdb.query.expression.UnionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.UnionIterator:byte[] flattenTags(boolean,boolean,net.opentsdb.query.expression.ExpressionDataPoint,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)",
            "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)",
            "net.opentsdb.query.filter.TagVFilter:void mapToFilters(java.util.Map,java.util.List,boolean)",
            "net.opentsdb.query.filter.TagVFilter:java.util.Map loadedFilters()",
            "net.opentsdb.query.filter.TagVFilter:com.stumbleupon.async.Deferred resolveTags(net.opentsdb.core.TSDB,java.util.Set)",
            "net.opentsdb.query.pojo.Expression:void validate()",
            "net.opentsdb.query.pojo.Query:void validate()",
            "net.opentsdb.query.pojo.Query:void validateFilters()",
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap,boolean,byte[],byte[])",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyTSUIDRegex(java.util.List)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.search.TimeSeriesLookup$1TagResolution:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.stats.QueryStats:java.util.Map getRunningAndCompleteStats()",
            "net.opentsdb.stats.QueryStats:void aggQueryStats()",
            "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)",
            "net.opentsdb.stats.QueryStats:java.util.Map getQueryStats(int,boolean)",
            "net.opentsdb.stats.StatsCollector:void <init>(java.lang.String)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long,java.lang.String)",
            "net.opentsdb.tools.ArgP:void addUsageTo(java.lang.StringBuilder)",
            "net.opentsdb.tools.ArgP:java.lang.String toString()",
            "net.opentsdb.tools.CliOptions:void overloadConfig(net.opentsdb.tools.ArgP,net.opentsdb.utils.Config)",
            "net.opentsdb.tools.CliOptions:void honorVerboseFlag(net.opentsdb.tools.ArgP)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tools.CliQuery:java.util.HashMap parsePlotParams(java.util.ArrayList)",
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void run()",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckDataPoints(java.util.Map)",
            "net.opentsdb.tools.Fsck:void runFullTable()",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)",
            "net.opentsdb.tools.MetaPurge$1MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaPurge$2MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync:void run()",
            "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])",
            "net.opentsdb.tools.UidManager:boolean printResult(java.util.ArrayList,byte[],boolean)",
            "net.opentsdb.tools.UidManager:int fsck(org.hbase.async.HBaseClient,byte[],boolean,boolean)",
            "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Branch:byte[] compileBranchId()",
            "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Leaf$1CollateUIDsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Leaf:com.stumbleupon.async.Deferred parseFromStorage(net.opentsdb.core.TSDB,org.hbase.async.KeyValue,boolean)",
            "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.Tree$1DeleteTreeScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1FetchTreeCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$2GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree:void <init>(net.opentsdb.tree.Tree)",
            "net.opentsdb.tree.Tree:boolean copyChanges(net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred storeTree(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchCollisions(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchNotMatched(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushCollisions(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushNotMatched(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.util.List call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)",
            "net.opentsdb.tree.TreeBuilder:void parseTagkRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagkCustomRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagvRule()",
            "net.opentsdb.tree.TreeBuilder:void calculateMaxLevel()",
            "net.opentsdb.tree.TreeRule$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeRule:boolean copyChanges(net.opentsdb.tree.TreeRule,boolean)",
            "net.opentsdb.tree.TreeRule:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getPrintableHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.nio.charset.Charset getCharset()",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatConfigV1(net.opentsdb.utils.Config)",
            "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.LogsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()",
            "net.opentsdb.tsd.QueryRpc$1FetchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:com.stumbleupon.async.Deferred call(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.RpcManager$Help:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.RpcManager:com.stumbleupon.async.Deferred shutdown()",
            "net.opentsdb.tsd.RpcManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.StatsRpc:void printRegionClientStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printThreadStats(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printJVMStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:java.lang.String getTSUIDForMetric(java.lang.String,net.opentsdb.core.TSDB)",
            "net.opentsdb.uid.UniqueId$2GetCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId:void preloadUidCache(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.uid.UniqueIdWhitelistFilter:com.stumbleupon.async.Deferred allowUIDAssignment(net.opentsdb.uid.UniqueId$UniqueIdType,java.lang.String,java.lang.String,java.util.Map)",
            "net.opentsdb.utils.ByteSet:java.lang.String toString()",
            "net.opentsdb.utils.Config:java.lang.String dumpConfiguration()",
            "net.opentsdb.utils.Config:void setDefaults()",
            "net.opentsdb.utils.Config:void loadConfig()",
            "net.opentsdb.utils.PluginLoader:java.lang.Object loadSpecificPlugin(java.lang.String,java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:java.util.List loadPlugins(java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:void loadJARs(java.lang.String)"
        ]
    },
    "net.opentsdb.core.DataPointsIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.AppendDataPoints:java.util.Collection parseKeyValue(net.opentsdb.core.TSDB,org.hbase.async.KeyValue)",
            "net.opentsdb.core.ByteBufferList:byte[] toBytes(int)",
            "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue findFirstDatapointColumn()",
            "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()",
            "net.opentsdb.core.CompactionQueue$Compaction:boolean updateDeletesCheckForWrite(org.hbase.async.KeyValue)",
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush(long,int)",
            "net.opentsdb.core.IncomingDataPoint:java.lang.String toString()",
            "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.core.IncomingDataPoints:void checkMetricAndTags(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(java.util.ArrayList,int)",
            "net.opentsdb.core.Internal:void createAndSetTSUIDFilter(org.hbase.async.Scanner,java.util.List)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner:com.stumbleupon.async.Deferred scan()",
            "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()",
            "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)",
            "net.opentsdb.core.Span:int size()",
            "net.opentsdb.core.Span:void addRow(org.hbase.async.KeyValue)",
            "net.opentsdb.core.Span:long getIdxOffsetFor(int)",
            "net.opentsdb.core.SpanGroup$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)",
            "net.opentsdb.core.SpanGroup:void computeTags()",
            "net.opentsdb.core.SpanGroup:java.util.List getTSUIDs()",
            "net.opentsdb.core.SpanGroup:int aggregatedSize()",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveAggTags(java.util.Set)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveTags(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags$1NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags$2NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred getTagsAsync(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllInternalAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveIdsAsync(net.opentsdb.core.TSDB,java.util.List)",
            "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred configureFromQuery(net.opentsdb.core.TSQuery,int)",
            "net.opentsdb.core.TsdbQuery:void findGroupBys()",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()",
            "net.opentsdb.core.TsdbQuery:java.lang.String toString()",
            "net.opentsdb.core.TSQuery:void validateAndSetQuery()",
            "net.opentsdb.core.TSQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.util.Map getTags()",
            "net.opentsdb.core.TSSubQuery:net.opentsdb.utils.ByteSet getFilterTagKs()",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.meta.Annotation$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation$2ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,java.lang.Boolean)",
            "net.opentsdb.meta.Annotation:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSMeta$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.TSMeta$LoadUIDs:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.TSMeta:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$1TagsCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner getScanner()",
            "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.UIDMeta:byte[] getStorageJSON()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_add_error_token(int,int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred metricNameAsync()",
            "net.opentsdb.query.expression.EDPtoDPS:byte[] metricUID()",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.ExpressionIterator:void compile()",
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.ExpressionIterator:void extractVariableNames()",
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String clean(java.util.Collection)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()",
            "net.opentsdb.query.expression.IntersectionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.IntersectionIterator:byte[] flattenTags(boolean,boolean,org.hbase.async.Bytes$ByteMap,net.opentsdb.utils.ByteSet,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()",
            "net.opentsdb.query.expression.UnionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.UnionIterator:byte[] flattenTags(boolean,boolean,net.opentsdb.query.expression.ExpressionDataPoint,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)",
            "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)",
            "net.opentsdb.query.filter.TagVFilter:void mapToFilters(java.util.Map,java.util.List,boolean)",
            "net.opentsdb.query.filter.TagVFilter:java.util.Map loadedFilters()",
            "net.opentsdb.query.filter.TagVFilter:com.stumbleupon.async.Deferred resolveTags(net.opentsdb.core.TSDB,java.util.Set)",
            "net.opentsdb.query.pojo.Expression:void validate()",
            "net.opentsdb.query.pojo.Query:void validate()",
            "net.opentsdb.query.pojo.Query:void validateFilters()",
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap,boolean,byte[],byte[])",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyTSUIDRegex(java.util.List)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.search.TimeSeriesLookup$1TagResolution:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.stats.QueryStats:java.util.Map getRunningAndCompleteStats()",
            "net.opentsdb.stats.QueryStats:void aggQueryStats()",
            "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)",
            "net.opentsdb.stats.QueryStats:java.util.Map getQueryStats(int,boolean)",
            "net.opentsdb.stats.StatsCollector:void <init>(java.lang.String)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long,java.lang.String)",
            "net.opentsdb.tools.ArgP:void addUsageTo(java.lang.StringBuilder)",
            "net.opentsdb.tools.ArgP:java.lang.String toString()",
            "net.opentsdb.tools.CliOptions:void overloadConfig(net.opentsdb.tools.ArgP,net.opentsdb.utils.Config)",
            "net.opentsdb.tools.CliOptions:void honorVerboseFlag(net.opentsdb.tools.ArgP)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tools.CliQuery:java.util.HashMap parsePlotParams(java.util.ArrayList)",
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void run()",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckDataPoints(java.util.Map)",
            "net.opentsdb.tools.Fsck:void runFullTable()",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)",
            "net.opentsdb.tools.MetaPurge$1MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaPurge$2MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync:void run()",
            "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])",
            "net.opentsdb.tools.UidManager:boolean printResult(java.util.ArrayList,byte[],boolean)",
            "net.opentsdb.tools.UidManager:int fsck(org.hbase.async.HBaseClient,byte[],boolean,boolean)",
            "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Branch:byte[] compileBranchId()",
            "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Leaf$1CollateUIDsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Leaf:com.stumbleupon.async.Deferred parseFromStorage(net.opentsdb.core.TSDB,org.hbase.async.KeyValue,boolean)",
            "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.Tree$1DeleteTreeScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1FetchTreeCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$2GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree:void <init>(net.opentsdb.tree.Tree)",
            "net.opentsdb.tree.Tree:boolean copyChanges(net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred storeTree(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchCollisions(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchNotMatched(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushCollisions(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushNotMatched(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.util.List call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)",
            "net.opentsdb.tree.TreeBuilder:void parseTagkRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagkCustomRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagvRule()",
            "net.opentsdb.tree.TreeBuilder:void calculateMaxLevel()",
            "net.opentsdb.tree.TreeRule$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeRule:boolean copyChanges(net.opentsdb.tree.TreeRule,boolean)",
            "net.opentsdb.tree.TreeRule:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getPrintableHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.nio.charset.Charset getCharset()",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatConfigV1(net.opentsdb.utils.Config)",
            "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.LogsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()",
            "net.opentsdb.tsd.QueryRpc$1FetchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:com.stumbleupon.async.Deferred call(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.RpcManager$Help:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.RpcManager:com.stumbleupon.async.Deferred shutdown()",
            "net.opentsdb.tsd.RpcManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.StatsRpc:void printRegionClientStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printThreadStats(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printJVMStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:java.lang.String getTSUIDForMetric(java.lang.String,net.opentsdb.core.TSDB)",
            "net.opentsdb.uid.UniqueId$2GetCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId:void preloadUidCache(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.uid.UniqueIdWhitelistFilter:com.stumbleupon.async.Deferred allowUIDAssignment(net.opentsdb.uid.UniqueId$UniqueIdType,java.lang.String,java.lang.String,java.util.Map)",
            "net.opentsdb.utils.ByteSet:java.lang.String toString()",
            "net.opentsdb.utils.Config:java.lang.String dumpConfiguration()",
            "net.opentsdb.utils.Config:void setDefaults()",
            "net.opentsdb.utils.Config:void loadConfig()",
            "net.opentsdb.utils.PluginLoader:java.lang.Object loadSpecificPlugin(java.lang.String,java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:java.util.List loadPlugins(java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:void loadJARs(java.lang.String)"
        ]
    },
    "net.opentsdb.core.Downsampler:void seek(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void seek(long)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void seekInterval(long)",
            "net.opentsdb.core.RateSpan:void seek(long)"
        ]
    },
    "net.opentsdb.core.AggregationIterator:void putDataPoint(int,net.opentsdb.core.DataPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void moveToNext(int)"
        ]
    },
    "net.opentsdb.core.Downsampler$ValuesInInterval:void resetEndOfInterval()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextInterval()"
        ]
    },
    "net.opentsdb.core.MutableDataPoint:void reset(net.opentsdb.core.DataPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.RateSpan:net.opentsdb.core.DataPoint next()",
            "net.opentsdb.core.RateSpan:void populateNextRate()",
            "net.opentsdb.query.expression.ExpressionDataPoint:void reset(net.opentsdb.core.DataPoint)"
        ]
    },
    "net.opentsdb.core.MutableDataPoint:net.opentsdb.core.MutableDataPoint fromPoint(net.opentsdb.core.DataPoint)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.expression.HighestCurrent$MaxLatestAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:long longValue()"
        ]
    },
    "net.opentsdb.query.expression.HighestMax$MaxCacheAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:long longValue()"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints$SeekableViewImpl:void seek(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void seek(long)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void seekInterval(long)",
            "net.opentsdb.core.RateSpan:void seek(long)"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:long timestamp(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:void seek(long)",
            "net.opentsdb.core.DataPointsIterator:long timestamp()"
        ]
    },
    "net.opentsdb.query.expression.TimeSyncedIterator:long nextTimestamp()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.tsd.QueryExecutor$SerializeSubIterator:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.DataPointsIterator:double toDouble()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Downsampler$ValuesInInterval:double nextDoubleValue()",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)"
        ]
    },
    "net.opentsdb.core.DataPointsIterator:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:boolean isInteger(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:boolean isInteger()"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:double doubleValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:double doubleValue()"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:long longValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.DataPointsIterator:long longValue()"
        ]
    },
    "net.opentsdb.core.AggregationIterator:double toDouble()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Downsampler$ValuesInInterval:double nextDoubleValue()",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)"
        ]
    },
    "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred compact(java.util.ArrayList,org.hbase.async.KeyValue[],java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue:org.hbase.async.KeyValue compact(java.util.ArrayList,java.util.List)"
        ]
    },
    "net.opentsdb.core.CompactionQueue$Thrd:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue:void startCompactionThread()",
            "net.opentsdb.tools.UidManager:int metaPurge(net.opentsdb.core.TSDB)",
            "net.opentsdb.tools.UidManager:int treeSync(net.opentsdb.core.TSDB)"
        ]
    },
    "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)",
            "net.opentsdb.tools.UidManager:int metaPurge(net.opentsdb.core.TSDB)",
            "net.opentsdb.tools.UidManager:int treeSync(net.opentsdb.core.TSDB)"
        ]
    },
    "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliQuery:void main(java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void main(java.lang.String[])",
            "net.opentsdb.tools.Fsck:void main(java.lang.String[])",
            "net.opentsdb.tools.TextImporter:void main(java.lang.String[])",
            "net.opentsdb.tools.TSDMain$1TSDBShutdown:void run()",
            "net.opentsdb.tools.TSDMain:void main(java.lang.String[])",
            "net.opentsdb.tsd.RpcManager$DieDieDie:com.stumbleupon.async.Deferred doShutdown(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel)"
        ]
    },
    "net.opentsdb.core.CompactionQueue$1FlushMoreCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue$1FlushMoreCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.BatchedDataPoints:void <init>(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:net.opentsdb.core.WritableDataPoints newBatch(java.lang.String,java.util.Map)"
        ]
    },
    "net.opentsdb.tools.TextImporter:net.opentsdb.core.WritableDataPoints getDataPoints(net.opentsdb.core.TSDB,java.lang.String,java.util.HashMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TextImporter:int importFile(org.hbase.async.HBaseClient,net.opentsdb.core.TSDB,java.lang.String,boolean)"
        ]
    },
    "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred addPoint(java.lang.String,long,long,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc:com.stumbleupon.async.Deferred importDataPoint(net.opentsdb.core.TSDB,java.lang.String[])"
        ]
    },
    "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred addPoint(java.lang.String,long,double,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred addPoint(java.lang.String,long,float,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc:com.stumbleupon.async.Deferred importDataPoint(net.opentsdb.core.TSDB,java.lang.String[])"
        ]
    },
    "net.opentsdb.core.Internal$GetLastDataPointCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSUIDQuery$LastPointCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery$LastPointCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred deleteRange(net.opentsdb.core.TSDB,byte[],long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.core.SaltScanner:void access$400(net.opentsdb.core.SaltScanner,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner$ScannerCB$ErrorCb:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.SaltScanner$ScannerCB:void close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner$ScannerCB$ErrorCb:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,long,net.opentsdb.core.Aggregator)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.Aggregator,long,net.opentsdb.core.Aggregator)"
        ]
    },
    "net.opentsdb.core.SpanGroup:java.util.Map getTags()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.Map getTags()",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred getTagsAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred metricNameAsync()",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred getTagsAsync()",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver:com.stumbleupon.async.Deferred call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:org.hbase.async.Bytes$ByteMap getTagUids()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:com.stumbleupon.async.Deferred metricNameAsync()",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:org.hbase.async.Bytes$ByteMap getTagUids()"
        ]
    },
    "net.opentsdb.core.SpanGroup:java.util.List getAggregatedTags()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.List getAggregatedTags()",
            "net.opentsdb.tsd.GraphHandler:void doGraph(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.List getAggregatedTagUids()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.List getAggregatedTagUids()"
        ]
    },
    "net.opentsdb.tsd.GraphHandler:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.query.expression.EDPtoDPS:java.util.Map getTags()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.Map getTags()",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery:void setQuery(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSUIDQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery$1MetricCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$3MetricCB:com.stumbleupon.async.Deferred call(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery$3MetricCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.IncomingDataPoints:com.stumbleupon.async.Deferred rowKeyTemplateAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.Fsck$FsckWorker:boolean fsckKey(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$2MetricCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TSQuery:net.opentsdb.core.Query[] buildQueries(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler:void doGraph(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.QueryRpc$1GlobalCB:java.lang.Object call(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc$1GlobalCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.TsdbQuery$1FilterCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery$1FilterCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.TsdbQuery:net.opentsdb.core.DataPoints[] run()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void doGraph(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor$1BuildCB:com.stumbleupon.async.Deferred call(net.opentsdb.core.Query[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryExecutor$1BuildCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.QueryRpc$1BuildCB:com.stumbleupon.async.Deferred call(net.opentsdb.core.Query[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc$1BuildCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.GraphHandler$RunGnuplot:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler$RunGnuplot:void run()"
        ]
    },
    "net.opentsdb.meta.Annotation$1StoreCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.Annotation)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.Annotation$1StoreCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSMeta$1CreateNewCB$1StoreNewCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSMeta$1TSMetaCB$1StoreNewCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.MetaSync$1TSMetaCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSMeta$1CreateNewCB:com.stumbleupon.async.Deferred call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$1CreateNewCB:java.lang.Object call(java.lang.Object)",
            "net.opentsdb.meta.TSMeta$3ExistsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.meta.TSMeta$1TSMetaCB:com.stumbleupon.async.Deferred call(java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$1TSMetaCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tools.MetaSync$1TSMetaCB$1CounterCB:com.stumbleupon.async.Deferred call(java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.MetaSync$1TSMetaCB$1CounterCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSMeta$1ValidateCB$StoreCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$1ValidateCB$StoreCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$1ResolutionCB:com.stumbleupon.async.Deferred call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB:java.lang.Object call(java.lang.Object)",
            "net.opentsdb.meta.TSUIDQuery:com.stumbleupon.async.Deferred getLastWriteTimes()"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$2ResolutionCB:com.stumbleupon.async.Deferred call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB:java.lang.Object call(java.lang.Object)",
            "net.opentsdb.meta.TSUIDQuery:com.stumbleupon.async.Deferred getTSMetas()"
        ]
    },
    "net.opentsdb.tools.MetaSync$1UidCB$UidNameCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.MetaSync$1UidCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.uid.UniqueId$UniqueIdAllocator:com.stumbleupon.async.Deferred done(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.uid.UniqueId$UniqueIdAllocator:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.UIDMeta$1NameCB$StoreUIDMeta:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.UIDMeta$1NameCB$StoreUIDMeta:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_4()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_2()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_7()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_7(int)",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_8()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_rescan_token()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_8()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_8(int)",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_5()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_rescan_token()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_1(int)",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_4()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_rescan_token()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_6()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_6(int)",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_5()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_rescan_token()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_5()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_5(int)",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_5()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_rescan_token()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_5()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_3()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_4()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_4(int)",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_3()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_rescan_token()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:net.opentsdb.query.expression.parser.Token jj_consume_token(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:net.opentsdb.query.expression.ExpressionTree EXPRESSION()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void PARAMETER(net.opentsdb.query.expression.ExpressionTree,int)",
            "net.opentsdb.query.expression.parser.SyntaxChecker:java.lang.String METRIC()"
        ]
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:java.lang.String metricName()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.List getAggregatedTags()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.List getAggregatedTags()",
            "net.opentsdb.tsd.GraphHandler:void doGraph(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor$SerializeExpressionIterator:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.expression.EDPtoDPS$Iterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.AggregationIterator:void <init>(net.opentsdb.core.SeekableView[],long,long,net.opentsdb.core.Aggregator,net.opentsdb.core.Aggregators$Interpolation,boolean)",
            "net.opentsdb.core.AggregationIterator:void moveToNext(int)",
            "net.opentsdb.core.Aggregators$MovingAverage:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.core.Aggregators$MovingAverage:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.core.AppendDataPoints:java.util.Collection parseKeyValue(net.opentsdb.core.TSDB,org.hbase.async.KeyValue)",
            "net.opentsdb.core.ByteBufferList:byte[] toBytes(int)",
            "net.opentsdb.core.CompactionQueue$Compaction:org.hbase.async.KeyValue findFirstDatapointColumn()",
            "net.opentsdb.core.CompactionQueue$Compaction:int buildHeapProcessAnnotations()",
            "net.opentsdb.core.CompactionQueue$Compaction:boolean updateDeletesCheckForWrite(org.hbase.async.KeyValue)",
            "net.opentsdb.core.CompactionQueue:com.stumbleupon.async.Deferred flush(long,int)",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void initializeIfNotDone()",
            "net.opentsdb.core.Downsampler$ValuesInInterval:void moveToNextValue()",
            "net.opentsdb.core.IncomingDataPoint:java.lang.String toString()",
            "net.opentsdb.core.IncomingDataPoints$1CopyTagsInRowKeyCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.core.IncomingDataPoints:void checkMetricAndTags(java.lang.String,java.util.Map)",
            "net.opentsdb.core.IncomingDataPoints:byte[] rowKeyTemplate(net.opentsdb.core.TSDB,java.lang.String,java.util.Map)",
            "net.opentsdb.core.Internal:java.util.ArrayList extractDataPoints(java.util.ArrayList,int)",
            "net.opentsdb.core.Internal:void createAndSetTSUIDFilter(org.hbase.async.Scanner,java.util.List)",
            "net.opentsdb.core.RateSpan:void populateNextRate()",
            "net.opentsdb.core.SaltScanner$ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.SaltScanner$ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.SaltScanner:com.stumbleupon.async.Deferred scan()",
            "net.opentsdb.core.SaltScanner:void mergeAndReturnResults()",
            "net.opentsdb.core.SaltScanner:void validateAndTriggerCallback(java.util.List,java.util.Map)",
            "net.opentsdb.core.Span:int size()",
            "net.opentsdb.core.Span:void addRow(org.hbase.async.KeyValue)",
            "net.opentsdb.core.Span:long getIdxOffsetFor(int)",
            "net.opentsdb.core.SpanGroup$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.RateOptions,net.opentsdb.core.Aggregator,net.opentsdb.core.DownsamplingSpecification,long,long,int)",
            "net.opentsdb.core.SpanGroup:void add(net.opentsdb.core.Span)",
            "net.opentsdb.core.SpanGroup:void computeTags()",
            "net.opentsdb.core.SpanGroup:java.util.List getTSUIDs()",
            "net.opentsdb.core.SpanGroup:int size()",
            "net.opentsdb.core.SpanGroup:int aggregatedSize()",
            "net.opentsdb.core.SpanGroup:net.opentsdb.core.DataPoint getDataPoint(int)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveAggTags(java.util.Set)",
            "net.opentsdb.core.SpanGroup:com.stumbleupon.async.Deferred resolveTags(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags$1NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags$2NameCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred getTagsAsync(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.core.Tags:java.util.ArrayList resolveAllInternal(net.opentsdb.core.TSDB,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveAllInternalAsync(net.opentsdb.core.TSDB,java.lang.String,java.util.Map,boolean)",
            "net.opentsdb.core.Tags:com.stumbleupon.async.Deferred resolveIdsAsync(net.opentsdb.core.TSDB,java.util.List)",
            "net.opentsdb.core.TSDB$1ShutdownErrback:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.core.TsdbQuery$1MetricCB:com.stumbleupon.async.Deferred call(byte[])",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1GetTagsCB:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB$1MatchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$GroupByAndAggregateCB:net.opentsdb.core.DataPoints[] call(java.util.TreeMap)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.lang.String,java.util.Map,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:void setTimeSeries(java.util.List,net.opentsdb.core.Aggregator,boolean,net.opentsdb.core.RateOptions)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred configureFromQuery(net.opentsdb.core.TSQuery,int)",
            "net.opentsdb.core.TsdbQuery:void findGroupBys()",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()",
            "net.opentsdb.core.TsdbQuery:java.lang.String toString()",
            "net.opentsdb.core.TSQuery:void validateAndSetQuery()",
            "net.opentsdb.core.TSQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.lang.String toString()",
            "net.opentsdb.core.TSSubQuery:java.util.Map getTags()",
            "net.opentsdb.core.TSSubQuery:net.opentsdb.utils.ByteSet getFilterTagKs()",
            "net.opentsdb.graph.Plot:int dumpToFiles(java.lang.String)",
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.meta.Annotation$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation$2ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.Annotation:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,java.lang.Boolean)",
            "net.opentsdb.meta.Annotation:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSMeta$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.meta.TSMeta$LoadUIDs:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.meta.TSMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.TSMeta:byte[] getStorageJSON()",
            "net.opentsdb.meta.TSUIDQuery$1ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$1TagsCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1ScannerCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery$2ResolutionCB$1TSMetaGroupCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.meta.TSUIDQuery:org.hbase.async.Scanner getScanner()",
            "net.opentsdb.meta.UIDMeta:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.meta.UIDMeta:byte[] getStorageJSON()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_add_error_token(int,int)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Absolute:net.opentsdb.core.DataPoints abs(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.Alias:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DiffSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.DivideSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.EDPtoDPS$1ResolveCB:java.util.List call(java.util.ArrayList)",
            "net.opentsdb.query.expression.EDPtoDPS:com.stumbleupon.async.Deferred getAggregatedTagsAsync()",
            "net.opentsdb.query.expression.ExpressionDataPoint:void <init>(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionDataPoint:void add(net.opentsdb.core.DataPoints)",
            "net.opentsdb.query.expression.ExpressionIterator:void <init>(net.opentsdb.query.expression.ExpressionIterator)",
            "net.opentsdb.query.expression.ExpressionIterator:void compile()",
            "net.opentsdb.query.expression.ExpressionIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.ExpressionIterator:void extractVariableNames()",
            "net.opentsdb.query.expression.ExpressionIterator:void next(int)",
            "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String writeStringField()",
            "net.opentsdb.query.expression.ExpressionTree:java.lang.String clean(java.util.Collection)",
            "net.opentsdb.query.expression.HighestCurrent:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.HighestMax:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.IntersectionIterator:void <init>(net.opentsdb.query.expression.IntersectionIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.IntersectionIterator:void next()",
            "net.opentsdb.query.expression.IntersectionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.IntersectionIterator:void computeIntersection()",
            "net.opentsdb.query.expression.IntersectionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.IntersectionIterator:byte[] flattenTags(boolean,boolean,org.hbase.async.Bytes$ByteMap,net.opentsdb.utils.ByteSet,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.IntersectionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.IntersectionIterator:void next(int)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:long runLong(net.opentsdb.core.Aggregator$Longs)",
            "net.opentsdb.query.expression.MovingAverage$MovingAverageAggregator:double runDouble(net.opentsdb.core.Aggregator$Doubles)",
            "net.opentsdb.query.expression.MovingAverage:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.MultiplySeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.PostAggregatedDataPoints$1TemplateFill:com.stumbleupon.async.Deferred call(java.util.Map)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.Scale:net.opentsdb.core.DataPoints scale(net.opentsdb.core.DataPoints,double)",
            "net.opentsdb.query.expression.SumSeries:net.opentsdb.core.DataPoints[] evaluate(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.query.expression.TimeShift:net.opentsdb.core.DataPoints shift(net.opentsdb.core.DataPoints,long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void setupEmitters()",
            "net.opentsdb.query.expression.UnionIterator:void <init>(java.lang.String,java.util.Map,boolean,boolean)",
            "net.opentsdb.query.expression.UnionIterator:void <init>(net.opentsdb.query.expression.UnionIterator)",
            "net.opentsdb.query.expression.UnionIterator:void computeUnion()",
            "net.opentsdb.query.expression.UnionIterator:void setCurrentAndMeta(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.query.expression.UnionIterator:byte[] flattenTags(boolean,boolean,net.opentsdb.query.expression.ExpressionDataPoint,net.opentsdb.query.expression.ITimeSyncedIterator)",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext()",
            "net.opentsdb.query.expression.UnionIterator:long nextTimestamp()",
            "net.opentsdb.query.expression.UnionIterator:void next()",
            "net.opentsdb.query.expression.UnionIterator:boolean hasNext(int)",
            "net.opentsdb.query.expression.UnionIterator:void next(int)",
            "net.opentsdb.query.filter.TagVFilter$1ResolvedTagVCB:byte[] call(java.util.ArrayList)",
            "net.opentsdb.query.filter.TagVFilter:void initializeFilterMap(net.opentsdb.core.TSDB)",
            "net.opentsdb.query.filter.TagVFilter:void mapToFilters(java.util.Map,java.util.List,boolean)",
            "net.opentsdb.query.filter.TagVFilter:java.util.Map loadedFilters()",
            "net.opentsdb.query.filter.TagVFilter:com.stumbleupon.async.Deferred resolveTags(net.opentsdb.core.TSDB,java.util.Set)",
            "net.opentsdb.query.pojo.Expression:void validate()",
            "net.opentsdb.query.pojo.Query:void validate()",
            "net.opentsdb.query.pojo.Query:void validateFilters()",
            "net.opentsdb.query.pojo.Validatable:void validateCollection(java.util.Collection,java.lang.String)",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyUIDRegex(java.util.List,org.hbase.async.Bytes$ByteMap,boolean,byte[],byte[])",
            "net.opentsdb.query.QueryUtil:java.lang.String getRowKeyTSUIDRegex(java.util.List)",
            "net.opentsdb.search.TimeSeriesLookup$1ScannerCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.search.TimeSeriesLookup$1TagResolution:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.stats.QueryStats:java.util.Map getRunningAndCompleteStats()",
            "net.opentsdb.stats.QueryStats:void aggQueryStats()",
            "net.opentsdb.stats.QueryStats:java.util.Map getStats(boolean,boolean)",
            "net.opentsdb.stats.QueryStats:java.util.Map getQueryStats(int,boolean)",
            "net.opentsdb.stats.StatsCollector:void <init>(java.lang.String)",
            "net.opentsdb.stats.StatsCollector:void record(java.lang.String,long,java.lang.String)",
            "net.opentsdb.tools.ArgP:void addUsageTo(java.lang.StringBuilder)",
            "net.opentsdb.tools.ArgP:java.lang.String toString()",
            "net.opentsdb.tools.CliOptions:void overloadConfig(net.opentsdb.tools.ArgP,net.opentsdb.utils.Config)",
            "net.opentsdb.tools.CliOptions:void honorVerboseFlag(net.opentsdb.tools.ArgP)",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tools.CliQuery:java.util.HashMap parsePlotParams(java.util.ArrayList)",
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void formatKeyValue(java.lang.StringBuilder,net.opentsdb.core.TSDB,boolean,org.hbase.async.KeyValue,long,java.lang.String)",
            "net.opentsdb.tools.Fsck$FsckWorker:void run()",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckRow(java.util.ArrayList,java.util.TreeMap)",
            "net.opentsdb.tools.Fsck$FsckWorker:void fsckDataPoints(java.util.Map)",
            "net.opentsdb.tools.Fsck:void runFullTable()",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)",
            "net.opentsdb.tools.MetaPurge$1MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaPurge$2MetaScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.MetaSync$1MetaScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tools.TreeSync$1TsuidScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tools.TreeSync:void run()",
            "net.opentsdb.tools.UidManager:int grep(org.hbase.async.HBaseClient,byte[],boolean,java.lang.String[])",
            "net.opentsdb.tools.UidManager:boolean printResult(java.util.ArrayList,byte[],boolean)",
            "net.opentsdb.tools.UidManager:int fsck(org.hbase.async.HBaseClient,byte[],boolean,boolean)",
            "net.opentsdb.tools.UidManager:int metaSync(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Branch$1FetchBranchCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Branch:byte[] compileBranchId()",
            "net.opentsdb.tree.Branch:com.stumbleupon.async.Deferred storeBranch(net.opentsdb.core.TSDB,net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Leaf$1CollateUIDsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Leaf:com.stumbleupon.async.Deferred parseFromStorage(net.opentsdb.core.TSDB,org.hbase.async.KeyValue,boolean)",
            "net.opentsdb.tree.Tree$1AllTreeScanner:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1CreateNewCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.Tree$1DeleteTreeScanner:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1FetchTreeCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree$2GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.Tree:void <init>(net.opentsdb.tree.Tree)",
            "net.opentsdb.tree.Tree:boolean copyChanges(net.opentsdb.tree.Tree,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred storeTree(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchCollisions(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred fetchNotMatched(net.opentsdb.core.TSDB,int,java.util.List)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushCollisions(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.Tree:com.stumbleupon.async.Deferred flushNotMatched(net.opentsdb.core.TSDB)",
            "net.opentsdb.tree.TreeBuilder$1FetchedTreesCB:java.util.List call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder$1ProcessCB$1BranchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder:boolean processRuleset(net.opentsdb.tree.Branch,int)",
            "net.opentsdb.tree.TreeBuilder:void parseTagkRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagkCustomRule()",
            "net.opentsdb.tree.TreeBuilder:void parseTagvRule()",
            "net.opentsdb.tree.TreeBuilder:void calculateMaxLevel()",
            "net.opentsdb.tree.TreeRule$1GetCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tree.TreeRule:boolean copyChanges(net.opentsdb.tree.TreeRule,boolean)",
            "net.opentsdb.tree.TreeRule:com.stumbleupon.async.Deferred syncToStorage(net.opentsdb.core.TSDB,boolean)",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getPrintableHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.util.Map getHeaders()",
            "net.opentsdb.tsd.AbstractHttpQuery:java.nio.charset.Charset getCharset()",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.Tree parseTreeV1()",
            "net.opentsdb.tsd.HttpJsonSerializer:com.stumbleupon.async.Deferred formatQueryAsyncV1(net.opentsdb.core.TSQuery,java.util.List,java.util.List)",
            "net.opentsdb.tsd.HttpJsonSerializer:org.jboss.netty.buffer.ChannelBuffer formatConfigV1(net.opentsdb.utils.Config)",
            "net.opentsdb.tsd.HttpQuery:void initializeSerializerMaps(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.LogsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.PutDataPointRpc$1GroupCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryExecutor$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryExecutor$MetaSerializer:com.stumbleupon.async.Deferred call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor:void <init>(net.opentsdb.core.TSDB,net.opentsdb.query.pojo.Query)",
            "net.opentsdb.tsd.QueryExecutor:com.stumbleupon.async.Deferred serialize()",
            "net.opentsdb.tsd.QueryRpc$1FetchCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1QueriesCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.tsd.QueryRpc$1TSUIDQueryCB:com.stumbleupon.async.Deferred call(org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)",
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.RpcManager$Help:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.RpcManager:com.stumbleupon.async.Deferred shutdown()",
            "net.opentsdb.tsd.RpcManager:void collectStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.SearchRpc$1LookupCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tsd.StatsRpc:void printRegionClientStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printThreadStats(net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void printJVMStats(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void collectThreadStats(net.opentsdb.stats.StatsCollector)",
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.UniqueIdRpc:java.lang.String getTSUIDForMetric(java.lang.String,net.opentsdb.core.TSDB)",
            "net.opentsdb.uid.UniqueId$2GetCB:java.util.Map call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId$SuggestCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.uid.UniqueId:void preloadUidCache(net.opentsdb.core.TSDB,org.hbase.async.Bytes$ByteMap)",
            "net.opentsdb.uid.UniqueIdWhitelistFilter:com.stumbleupon.async.Deferred allowUIDAssignment(net.opentsdb.uid.UniqueId$UniqueIdType,java.lang.String,java.lang.String,java.util.Map)",
            "net.opentsdb.utils.ByteSet:java.lang.String toString()",
            "net.opentsdb.utils.Config:java.lang.String dumpConfiguration()",
            "net.opentsdb.utils.Config:void setDefaults()",
            "net.opentsdb.utils.Config:void loadConfig()",
            "net.opentsdb.utils.PluginLoader:java.lang.Object loadSpecificPlugin(java.lang.String,java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:java.util.List loadPlugins(java.lang.Class)",
            "net.opentsdb.utils.PluginLoader:void loadJARs(java.lang.String)"
        ]
    },
    "net.opentsdb.tools.TSDMain:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.QueryRpc:void parseMTypeSubQuery(java.lang.String,net.opentsdb.core.TSQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:net.opentsdb.core.TSQuery parseQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,java.util.List)"
        ]
    },
    "net.opentsdb.core.TSSubQuery:void setTags(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TsdbQuery:void createAndSetFilter(org.hbase.async.Scanner)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TsdbQuery:org.hbase.async.Scanner getScanner(int)"
        ]
    },
    "net.opentsdb.core.TsdbQuery:org.hbase.async.Scanner getScanner(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Internal:java.util.List getScanners(net.opentsdb.core.Query)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()",
            "net.opentsdb.core.TsdbQuery:org.hbase.async.Scanner getScanner()"
        ]
    },
    "net.opentsdb.search.TimeSeriesLookup$1MetricCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.search.TimeSeriesLookup:com.stumbleupon.async.Deferred lookupAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.search.TimeSeriesLookup:java.util.List lookup()",
            "net.opentsdb.tsd.SearchRpc:void processLookup(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,net.opentsdb.search.SearchQuery)"
        ]
    },
    "net.opentsdb.stats.QueryStats:void markSerializationSuccessful()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.HttpJsonSerializer$1FinalCB:org.jboss.netty.buffer.ChannelBuffer call(java.lang.Object)",
            "net.opentsdb.tsd.QueryExecutor$1FinalCB:org.jboss.netty.buffer.ChannelBuffer call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.QueryRpc$1ErrorCB:java.lang.Object call(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc$1ErrorCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.stats.QueryStats:void markSent()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.AbstractHttpQuery$SendSuccess:void operationComplete(org.jboss.netty.channel.ChannelFuture)"
        ]
    },
    "net.opentsdb.stats.QueryStats:void markSendFailed()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.HttpJsonSerializer$1FinalCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.TextImporter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.StatsRpc:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleTelnetRpc(org.jboss.netty.channel.Channel,java.lang.String[])"
        ]
    },
    "net.opentsdb.tsd.QueryRpc:void collectStats(net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void collectStats(net.opentsdb.stats.StatsCollector)"
        ]
    },
    "net.opentsdb.tsd.RpcHandler:void collectStats(net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.StatsRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.StatsRpc:void doCollectStats(net.opentsdb.core.TSDB,net.opentsdb.stats.StatsCollector,boolean)"
        ]
    },
    "net.opentsdb.tsd.GraphHandler:void collectStats(net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void collectStats(net.opentsdb.stats.StatsCollector)"
        ]
    },
    "net.opentsdb.tsd.PutDataPointRpc:void collectStats(net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void collectStats(net.opentsdb.stats.StatsCollector)"
        ]
    },
    "net.opentsdb.tsd.HttpQuery:void collectStats(net.opentsdb.stats.StatsCollector)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void collectStats(net.opentsdb.stats.StatsCollector)"
        ]
    },
    "net.opentsdb.tools.CliQuery:void usage(net.opentsdb.tools.ArgP,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliQuery:void main(java.lang.String[])",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)"
        ]
    },
    "net.opentsdb.tools.DumpSeries:void usage(net.opentsdb.tools.ArgP,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.DumpSeries:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.Fsck:void usage(net.opentsdb.tools.ArgP,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.Fsck:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.Search:void usage(net.opentsdb.tools.ArgP,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.Search:void main(java.lang.String[])",
            "net.opentsdb.tools.Search:int runCommand(net.opentsdb.core.TSDB,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.TextImporter:void usage(net.opentsdb.tools.ArgP,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TextImporter:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.TSDMain:void usage(net.opentsdb.tools.ArgP,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TSDMain:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.UidManager:void usage(net.opentsdb.tools.ArgP,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:void usage(java.lang.String)",
            "net.opentsdb.tools.UidManager:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.Search:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.UidManager:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.UidManager:int lookupId(org.hbase.async.HBaseClient,byte[],short,long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int runCommand(net.opentsdb.core.TSDB,byte[],short,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.UidManager:int lookupName(org.hbase.async.HBaseClient,byte[],short,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int runCommand(net.opentsdb.core.TSDB,byte[],short,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.tree.Branch:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.TreeBuilder$1LoadRootCB:com.stumbleupon.async.Deferred call(net.opentsdb.tree.Branch)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1LoadRootCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder$1ProcessCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.TreeBuilder:com.stumbleupon.async.Deferred processTimeseriesMeta(net.opentsdb.meta.TSMeta,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tree.TreeBuilder$1ProcessTreesCB:com.stumbleupon.async.Deferred call(java.util.List)",
            "net.opentsdb.tree.TreeBuilder:com.stumbleupon.async.Deferred processTimeseriesMeta(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tree.TreeBuilder$1RootCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.Tree$1StoreTreeCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TSDB:com.stumbleupon.async.Deferred processTSMetaThroughTrees(net.opentsdb.meta.TSMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$1CreateNewCB$1FetchNewCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.meta.TSMeta$1TSMetaCB$1FetchNewCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tools.MetaSync$1TSMetaCB$1IndexCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)",
            "net.opentsdb.tsd.UniqueIdRpc:void handleTSMeta(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tree.TreeRule$1StoreCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.HttpJsonSerializer:java.util.List parsePutV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.PutDataPointRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:java.util.HashMap parseSuggestV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.SuggestRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:java.util.HashMap parseUidAssignV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:java.util.HashMap parseUidRenameV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.UniqueIdRpc:void handleRename(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.core.TSQuery parseQueryV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:void handleQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,boolean)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tsd.QueryRpc$LastPointQuery parseLastPointQueryV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.meta.UIDMeta parseUidMetaV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.UniqueIdRpc:void handleUIDMeta(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.meta.TSMeta parseTSMetaV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.UniqueIdRpc:void handleTSMeta(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tree.TreeRule parseTreeRuleV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.TreeRpc:void handleRule(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:java.util.List parseTreeRulesV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.TreeRpc:void handleRules(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:java.util.Map parseTreeTSUIDsListV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.TreeRpc:void handleTest(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.TreeRpc:void handleCollisionNotMatched(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,boolean)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.meta.Annotation parseAnnotationV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.AnnotationRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:java.util.List parseAnnotationsV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkUpdate(net.opentsdb.core.TSDB,org.jboss.netty.handler.codec.http.HttpMethod,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.tsd.AnnotationRpc$AnnotationBulkDelete parseAnnotationBulkDeleteV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.AnnotationRpc:void executeBulkDelete(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpJsonSerializer:net.opentsdb.search.SearchQuery parseSearchQueryV1()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.SearchRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpQuery:void notFound()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.tsd.HttpQuery:void sendFile(org.jboss.netty.handler.codec.http.HttpResponseStatus,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.HttpQuery:void sendFile(java.lang.String,int)"
        ]
    },
    "net.opentsdb.tsd.HttpQuery:void badRequest(net.opentsdb.tsd.BadRequestException)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.HttpQuery:void badRequest(java.lang.String)",
            "net.opentsdb.tsd.QueryExecutor$ErrorCB:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.tsd.QueryRpc$1ErrorCB:java.lang.Object call(java.lang.Exception)",
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.tsd.SearchRpc$1ErrCB:java.lang.Object call(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.SearchRpc$1ErrCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.HttpQuery:void internalError(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler$RunGnuplot:void run()",
            "net.opentsdb.tsd.GraphHandler$RunGnuplot:void execute()",
            "net.opentsdb.tsd.GraphHandler:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void execGnuplot(net.opentsdb.tsd.GraphHandler$RunGnuplot,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.tsd.PipelineFactory:void <init>(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.PipelineFactory:void <init>(net.opentsdb.core.TSDB,net.opentsdb.tsd.RpcManager)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.RpcHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TSDB:void <init>(net.opentsdb.utils.Config)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.CliQuery:void main(java.lang.String[])",
            "net.opentsdb.tools.DumpSeries:void main(java.lang.String[])",
            "net.opentsdb.tools.Fsck:void main(java.lang.String[])",
            "net.opentsdb.tools.Search:void main(java.lang.String[])",
            "net.opentsdb.tools.TextImporter:void main(java.lang.String[])",
            "net.opentsdb.tools.TSDMain:void main(java.lang.String[])",
            "net.opentsdb.tools.UidManager:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.uid.UniqueId$1HandleNoSuchUniqueNameCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TSDB:byte[] assignUid(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.UniqueIdRpc:void handleAssign(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tools.UidManager:int assign(net.opentsdb.core.TSDB,byte[],short,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int runCommand(net.opentsdb.core.TSDB,byte[],short,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.tsd.RpcManager:void initializeHttpRpcPlugins(java.lang.String,java.lang.String[],com.google.common.collect.ImmutableMap$Builder)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcManager:net.opentsdb.tsd.RpcManager instance(net.opentsdb.core.TSDB)"
        ]
    },
    "net.opentsdb.tsd.RpcManager:void initializeRpcPlugins(java.lang.String[],com.google.common.collect.ImmutableList$Builder)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcManager:net.opentsdb.tsd.RpcManager instance(net.opentsdb.core.TSDB)"
        ]
    },
    "net.opentsdb.query.expression.ExpressionDataPoint:void reset(net.opentsdb.core.DataPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.TimeSyncedIterator:net.opentsdb.query.expression.ExpressionDataPoint[] next(long)",
            "net.opentsdb.query.expression.TimeSyncedIterator:void next(int)"
        ]
    },
    "net.opentsdb.core.CompactionQueue:org.hbase.async.KeyValue compact(java.util.ArrayList,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue$CompactCB:java.lang.Object call(java.util.ArrayList)",
            "net.opentsdb.core.TSDB:org.hbase.async.KeyValue compact(java.util.ArrayList,java.util.List)"
        ]
    },
    "net.opentsdb.core.CompactionQueue:void startCompactionThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue:void <init>(net.opentsdb.core.TSDB)",
            "net.opentsdb.core.CompactionQueue:void access$1800(net.opentsdb.core.CompactionQueue)"
        ]
    },
    "net.opentsdb.tsd.RpcManager$DieDieDie:com.stumbleupon.async.Deferred doShutdown(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcManager$DieDieDie:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])",
            "net.opentsdb.tsd.RpcManager$DieDieDie:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.core.CompactionQueue$1FlushMoreCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TSDB:net.opentsdb.core.WritableDataPoints newBatch(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.TextImporter:int importFile(org.hbase.async.HBaseClient,net.opentsdb.core.TSDB,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TextImporter:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tsd.PutDataPointRpc:com.stumbleupon.async.Deferred importDataPoint(net.opentsdb.core.TSDB,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.PutDataPointRpc:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$LastPointCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.SaltScanner$ScannerCB$ErrorCb:java.lang.Object call(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner$ScannerCB$ErrorCb:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.SpanGroup:void <init>(net.opentsdb.core.TSDB,long,long,java.lang.Iterable,boolean,net.opentsdb.core.Aggregator,long,net.opentsdb.core.Aggregator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.Map getTags()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.graph.Plot:void writeGnuplotScript(java.lang.String,java.lang.String[])",
            "net.opentsdb.query.expression.PostAggregatedDataPoints:java.util.Map getTags()",
            "net.opentsdb.tools.CliQuery:net.opentsdb.graph.Plot doQuery(net.opentsdb.core.TSDB,java.lang.String[],boolean)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.HttpJsonSerializer$1DPsResolver$WriteToBuffer:java.lang.Object call(java.util.ArrayList)"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$1MetricCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSUIDQuery$3MetricCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.QueryRpc$1GlobalCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.TsdbQuery$1FilterCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.QueryExecutor$1BuildCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.QueryRpc$1BuildCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.GraphHandler$RunGnuplot:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler:void execGnuplot(net.opentsdb.tsd.GraphHandler$RunGnuplot,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.meta.Annotation$1StoreCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSMeta$1CreateNewCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSMeta$3ExistsCB:com.stumbleupon.async.Deferred call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$3ExistsCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSMeta$1TSMetaCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.MetaSync$1TSMetaCB$1CounterCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSMeta$1ValidateCB$StoreCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSUIDQuery$1ResolutionCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSUIDQuery:com.stumbleupon.async.Deferred getLastWriteTimes()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryRpc:void handleLastDataPointQuery(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.meta.TSUIDQuery$2ResolutionCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSUIDQuery:com.stumbleupon.async.Deferred getTSMetas()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.UniqueIdRpc:void handleTSMeta(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.uid.UniqueId$UniqueIdAllocator:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.uid.UniqueId$UniqueIdAllocator:com.stumbleupon.async.Deferred tryAllocate()"
        ]
    },
    "net.opentsdb.meta.UIDMeta$1NameCB$StoreUIDMeta:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_2()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_2(int)",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_3()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_rescan_token()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_7(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:java.lang.String METRIC()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_rescan_token()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:net.opentsdb.query.expression.parser.ParseException generateParseException()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_8(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:java.lang.String METRIC()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_1(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:net.opentsdb.query.expression.ExpressionTree EXPRESSION()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_6(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:java.lang.String METRIC()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_5(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:java.lang.String METRIC()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_3()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_3(int)",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_3()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void jj_rescan_token()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_4(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:void PARAMETER(net.opentsdb.query.expression.ExpressionTree,int)"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_3()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3R_4()",
            "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_3_1()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:net.opentsdb.query.expression.ExpressionTree EXPRESSION()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:void main(java.lang.String[])",
            "net.opentsdb.query.expression.parser.SyntaxChecker:void PARAMETER(net.opentsdb.query.expression.ExpressionTree,int)",
            "net.opentsdb.query.expression.Expressions:java.util.List parseExpressions(java.util.List,net.opentsdb.core.TSQuery,java.util.List)"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:void PARAMETER(net.opentsdb.query.expression.ExpressionTree,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:net.opentsdb.query.expression.ExpressionTree EXPRESSION()"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:java.lang.String METRIC()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:void PARAMETER(net.opentsdb.query.expression.ExpressionTree,int)"
        ]
    },
    "net.opentsdb.core.Internal:java.util.List getScanners(net.opentsdb.core.Query)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.DumpSeries:void doDump(net.opentsdb.core.TSDB,org.hbase.async.HBaseClient,byte[],boolean,boolean,java.lang.String[])",
            "net.opentsdb.tools.Fsck:void runQueries(java.util.List)"
        ]
    },
    "net.opentsdb.core.TsdbQuery:org.hbase.async.Scanner getScanner()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.Internal:org.hbase.async.Scanner getScanner(net.opentsdb.core.Query)",
            "net.opentsdb.core.Internal:java.util.List getScanners(net.opentsdb.core.Query)",
            "net.opentsdb.core.TsdbQuery:com.stumbleupon.async.Deferred findSpans()"
        ]
    },
    "net.opentsdb.search.TimeSeriesLookup:java.util.List lookup()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.Search:int lookup(net.opentsdb.core.TSDB,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.tsd.SearchRpc:void processLookup(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery,net.opentsdb.search.SearchQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.SearchRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor$1FinalCB:org.jboss.netty.buffer.ChannelBuffer call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryExecutor$1FinalCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.QueryRpc$1ErrorCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.AbstractHttpQuery$SendSuccess:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.Search:int runCommand(net.opentsdb.core.TSDB,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.Search:void main(java.lang.String[])"
        ]
    },
    "net.opentsdb.tools.UidManager:void usage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.UidManager:int runCommand(net.opentsdb.core.TSDB,byte[],short,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.tree.TreeBuilder$1LoadRootCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tree.TreeBuilder:com.stumbleupon.async.Deferred processTimeseriesMeta(net.opentsdb.meta.TSMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TreeSync$1TsuidScanner$1ParseCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)"
        ]
    },
    "net.opentsdb.meta.TSMeta$1CreateNewCB$1FetchNewCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$1CreateNewCB$1FetchNewCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.meta.TSMeta$1TSMetaCB$1FetchNewCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.meta.TSMeta$1TSMetaCB$1FetchNewCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tools.MetaSync$1TSMetaCB$1IndexCB:com.stumbleupon.async.Deferred call(net.opentsdb.meta.TSMeta)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.MetaSync$1TSMetaCB$1IndexCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.SuggestRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.tsd.SearchRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.tsd.HttpQuery:void sendFile(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler$RunGnuplot:void execute()",
            "net.opentsdb.tsd.GraphHandler:boolean isDiskCacheHit(net.opentsdb.tsd.HttpQuery,long,int,java.lang.String)",
            "net.opentsdb.tsd.GraphHandler:void respondAsciiQuery(net.opentsdb.tsd.HttpQuery,int,java.lang.String,net.opentsdb.graph.Plot)",
            "net.opentsdb.tsd.StaticFileRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.HttpQuery:void badRequest(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler$RunGnuplot:void run()",
            "net.opentsdb.tsd.GraphHandler:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor$ErrorCB:java.lang.Object call(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.QueryExecutor$ErrorCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.SearchRpc$1ErrCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.GraphHandler:void execGnuplot(net.opentsdb.tsd.GraphHandler$RunGnuplot,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler:void doGraph(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)",
            "net.opentsdb.tsd.GraphHandler:void access$200(net.opentsdb.tsd.GraphHandler,net.opentsdb.tsd.GraphHandler$RunGnuplot,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.RpcManager:net.opentsdb.tsd.RpcManager instance(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.TSDMain$1TSDBShutdown:void run()",
            "net.opentsdb.tools.TSDMain:void main(java.lang.String[])",
            "net.opentsdb.tsd.PipelineFactory:void <init>(net.opentsdb.core.TSDB)",
            "net.opentsdb.tsd.PipelineFactory:void <init>(net.opentsdb.core.TSDB,net.opentsdb.tsd.RpcManager)",
            "net.opentsdb.tsd.RpcHandler:void <init>(net.opentsdb.core.TSDB)"
        ]
    },
    "net.opentsdb.core.CompactionQueue$CompactCB:java.lang.Object call(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue$CompactCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.core.TSDB:org.hbase.async.KeyValue compact(java.util.ArrayList,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.SaltScanner$ScannerCB:void processRow(byte[],java.util.ArrayList)",
            "net.opentsdb.core.TsdbQuery$1ScannerCB:void processRow(byte[],java.util.ArrayList)"
        ]
    },
    "net.opentsdb.core.CompactionQueue:void <init>(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.TSDB:void <init>(org.hbase.async.HBaseClient,net.opentsdb.utils.Config)"
        ]
    },
    "net.opentsdb.core.CompactionQueue:void access$1800(net.opentsdb.core.CompactionQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.core.CompactionQueue$Thrd:void run()"
        ]
    },
    "net.opentsdb.tsd.RpcManager$DieDieDie:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleTelnetRpc(org.jboss.netty.channel.Channel,java.lang.String[])"
        ]
    },
    "net.opentsdb.tsd.RpcManager$DieDieDie:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.tsd.PutDataPointRpc:com.stumbleupon.async.Deferred execute(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleTelnetRpc(org.jboss.netty.channel.Channel,java.lang.String[])"
        ]
    },
    "net.opentsdb.core.SaltScanner$ScannerCB$ErrorCb:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSMeta$3ExistsCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.uid.UniqueId$UniqueIdAllocator:com.stumbleupon.async.Deferred tryAllocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.uid.UniqueId$1AssignmentAllowedCB:com.stumbleupon.async.Deferred call(java.lang.Boolean)",
            "net.opentsdb.uid.UniqueId:byte[] getOrCreateId(java.lang.String)"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_2(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:void PARAMETER(net.opentsdb.query.expression.ExpressionTree,int)"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:boolean jj_2_3(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.query.expression.parser.SyntaxChecker:void PARAMETER(net.opentsdb.query.expression.ExpressionTree,int)"
        ]
    },
    "net.opentsdb.query.expression.parser.SyntaxChecker:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.Internal:org.hbase.async.Scanner getScanner(net.opentsdb.core.Query)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.Search:int lookup(net.opentsdb.core.TSDB,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tools.Search:int runCommand(net.opentsdb.core.TSDB,boolean,java.lang.String[])"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor$1FinalCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSMeta$1CreateNewCB$1FetchNewCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.meta.TSMeta$1TSMetaCB$1FetchNewCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tools.MetaSync$1TSMetaCB$1IndexCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.GraphHandler:boolean isDiskCacheHit(net.opentsdb.tsd.HttpQuery,long,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler:void doGraph(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)"
        ]
    },
    "net.opentsdb.tsd.StaticFileRpc:void execute(net.opentsdb.core.TSDB,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.RpcHandler:void handleHttpQuery(net.opentsdb.core.TSDB,org.jboss.netty.channel.Channel,org.jboss.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "net.opentsdb.tsd.QueryExecutor$ErrorCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.GraphHandler:void access$200(net.opentsdb.tsd.GraphHandler,net.opentsdb.tsd.GraphHandler$RunGnuplot,net.opentsdb.tsd.HttpQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler$1GlobalCB:java.lang.Object call(java.util.List)"
        ]
    },
    "net.opentsdb.tsd.RpcHandler:void <init>(net.opentsdb.core.TSDB)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.core.CompactionQueue$CompactCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.uid.UniqueId$1AssignmentAllowedCB:com.stumbleupon.async.Deferred call(java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.uid.UniqueId$1AssignmentAllowedCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.tsd.GraphHandler$1GlobalCB:java.lang.Object call(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "net.opentsdb.tsd.GraphHandler$1GlobalCB:java.lang.Object call(java.lang.Object)"
        ]
    },
    "net.opentsdb.uid.UniqueId$1AssignmentAllowedCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "net.opentsdb.tsd.GraphHandler$1GlobalCB:java.lang.Object call(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}